Class {
	#name : #TeradataParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Teradata_Parser'
}

{ #category : #generated }
TeradataParser class >> ambiguousTransitions [
^#(
#[ 0 198 2 149] 
#[ 0 198 2 209] 
#[ 0 198 2 217] 
#[ 0 198 2 241] 
#[ 0 202 2 149] 
#[ 0 202 2 209] 
#[ 0 202 2 217] 
#[ 0 202 2 241] 
#[ 0 214 2 149] 
#[ 0 214 2 209] 
#[ 0 214 2 217] 
#[ 0 214 2 241] 
#[ 0 230 0 234] 
#[ 1 38 1 42] 
#[ 1 134 6 217] 
#[ 1 198 2 149] 
#[ 1 198 2 209] 
#[ 1 198 2 217] 
#[ 1 198 2 241] 
#[ 1 202 2 149] 
#[ 1 202 2 209] 
#[ 1 202 2 217] 
#[ 1 202 2 241] 
#[ 1 206 2 149] 
#[ 1 206 2 209] 
#[ 1 206 2 217] 
#[ 1 206 2 241] 
#[ 1 210 2 149] 
#[ 1 210 2 209] 
#[ 1 210 2 217] 
#[ 1 210 2 241] 
#[ 1 214 2 149] 
#[ 1 214 2 209] 
#[ 1 214 2 217] 
#[ 1 214 2 241] 
#[ 1 218 2 149] 
#[ 1 218 2 209] 
#[ 1 218 2 217] 
#[ 1 218 2 241] 
#[ 1 222 2 149] 
#[ 1 222 2 209] 
#[ 1 222 2 217] 
#[ 1 222 2 241] 
#[ 1 226 2 149] 
#[ 1 226 2 209] 
#[ 1 226 2 217] 
#[ 1 226 2 241] 
#[ 1 230 2 149] 
#[ 1 230 2 209] 
#[ 1 230 2 217] 
#[ 1 230 2 241] 
#[ 1 234 2 149] 
#[ 1 234 2 209] 
#[ 1 234 2 217] 
#[ 1 234 2 241] 
#[ 1 238 2 149] 
#[ 1 238 2 209] 
#[ 1 238 2 217] 
#[ 1 238 2 241] 
#[ 1 242 2 149] 
#[ 1 242 2 209] 
#[ 1 242 2 217] 
#[ 1 242 2 241] 
#[ 1 246 2 149] 
#[ 1 246 2 209] 
#[ 1 246 2 217] 
#[ 1 246 2 241] 
#[ 1 254 2 149] 
#[ 1 254 2 209] 
#[ 1 254 2 217] 
#[ 1 254 2 241] 
#[ 2 6 2 149] 
#[ 2 6 7 141] 
#[ 2 6 2 209] 
#[ 2 6 2 217] 
#[ 2 6 2 241] 
#[ 2 10 2 149] 
#[ 2 10 2 209] 
#[ 2 10 2 217] 
#[ 2 10 2 241] 
#[ 2 14 2 149] 
#[ 2 14 2 209] 
#[ 2 14 2 217] 
#[ 2 14 2 241] 
#[ 2 18 2 149] 
#[ 2 18 2 209] 
#[ 2 18 2 217] 
#[ 2 18 2 241] 
#[ 2 22 2 149] 
#[ 2 22 2 209] 
#[ 2 22 2 217] 
#[ 2 22 2 241] 
#[ 2 54 3 45] 
#[ 2 54 3 49] 
#[ 2 54 3 53] 
#[ 2 54 3 57] 
#[ 2 54 3 61] 
#[ 2 54 8 17] 
#[ 2 54 3 65] 
#[ 2 149 2 186] 
#[ 2 186 2 209] 
#[ 2 186 2 217] 
#[ 2 186 2 241] 
#[ 2 149 2 190] 
#[ 2 190 9 157] 
#[ 2 190 2 209] 
#[ 2 190 2 217] 
#[ 2 190 2 241] 
#[ 2 166 3 90] 
#[ 1 242 2 149 3 106] 
#[ 1 242 2 153 3 106] 
#[ 1 242 2 157 3 106] 
#[ 1 242 2 161 3 106] 
#[ 1 242 2 165 3 106] 
#[ 1 242 2 169 3 106] 
#[ 1 242 2 173 3 106] 
#[ 1 242 2 177 3 106] 
#[ 1 242 2 181 3 106] 
#[ 1 242 2 185 3 106] 
#[ 1 242 2 189 3 106] 
#[ 1 242 2 193 3 106] 
#[ 1 242 2 197 3 106] 
#[ 1 242 2 201 3 106] 
#[ 1 242 2 205 3 106] 
#[ 1 242 2 209 3 106] 
#[ 1 242 2 213 3 106] 
#[ 1 242 2 217 3 106] 
#[ 1 242 2 221 3 106] 
#[ 1 242 2 225 3 106] 
#[ 1 242 2 229 3 106] 
#[ 1 242 2 233 3 106] 
#[ 1 242 2 237 3 106] 
#[ 1 242 2 241 3 106] 
#[ 1 242 2 245 3 106] 
#[ 1 170 3 110] 
#[ 2 149 3 114] 
#[ 2 209 3 114] 
#[ 2 217 3 114] 
#[ 2 241 3 114] 
#[ 1 242 2 149 4 38] 
#[ 1 242 2 153 4 38] 
#[ 1 242 2 157 4 38] 
#[ 1 242 2 161 4 38] 
#[ 1 242 2 165 4 38] 
#[ 1 242 2 169 4 38] 
#[ 1 242 2 173 4 38] 
#[ 1 242 2 177 4 38] 
#[ 1 242 2 181 4 38] 
#[ 1 242 2 185 4 38] 
#[ 1 242 2 189 4 38] 
#[ 1 242 2 193 4 38] 
#[ 1 242 2 197 4 38] 
#[ 1 242 2 201 4 38] 
#[ 1 242 2 205 4 38] 
#[ 1 242 2 209 4 38] 
#[ 1 242 2 213 4 38] 
#[ 1 242 2 217 4 38] 
#[ 1 242 2 221 4 38] 
#[ 1 242 2 225 4 38] 
#[ 1 242 2 229 4 38] 
#[ 1 242 2 233 4 38] 
#[ 1 242 2 237 4 38] 
#[ 1 242 2 241 4 38] 
#[ 1 242 2 245 4 38] 
#[ 1 170 4 42] 
#[ 2 149 4 46] 
#[ 2 209 4 46] 
#[ 2 217 4 46] 
#[ 2 241 4 46]
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> cacheId [
	^'2022-01-27T12:01:08.431216-06:00'
]

{ #category : #generated }
TeradataParser class >> definitionComment [
"%glr;
%ignorecase;
%left ""UNION"" ""MINUS"" ""INTERSECT"" ""EXCEPT"";
%left ""OR"";
%left ""AND"";
%nonassoc ""="" ""EQ"" ""<>"" ""NE"" ""<"" ""<="" "">"" "">="" ""BETWEEN"";
%left ""||"";
%nonassoc ""LIKE"" ""IN"" ""NOT"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""MOD"";
%right ""**"";

%prefix Teradata;
%suffix Node;
%root Program;
%hierarchy Expression (
    AliasedExpression
    BetweenExpression
    BinaryExpression
    CaseExpression
    CaseSpecificExpression
    CastExpression
    ConversionExpression
    CountExpression
    EmptyGroupByExpression
    ExistsExpression
    ExtractExpression
    FunctionExpression
    IdentifierExpression
    IgnoreNullsExpression
    InQueryExpression
    IntervalExpression
    InValueExpression
    IsNullExpression
    LikeExpression
    LiteralExpression
    NullExpression
    OverExpression
    QueryExpression
    StarExpression
    SubstringExpression
    TimestampExpression
    TitleExpression
    TranslateExpression
    TrimExpression
    UnicodeEscapeExpression
    UnaryExpression
    VariableExpression
    XmlAggExpression
);
%start File Expression;

<identifier>
	: [a-z_\$\#][a-z0-9_\$\#\@]* 
	| (\"" [^\""\r\n]* \"")+
	;
<variable>
	: \: <identifier>
	| \?
	;
<ustring>
	: U \& (\' [^\']* \')+
	;
<string>
	: (\' [^\']* \')+
	| \' [0-9A-F]* \' \s* XC[VF]?
	;
<number>
	: [0-9][0-9X]* (\. [0-9X]*)?	# XXXX -- patterns?
	;
<whitespace>
	: \s+
	;
<comment>
	: \-\- [^\r\n]*
	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;
File
	: Statements "";"" 'semicolon'* {{}}
	| "";"" 'semicolon'* {{}}
	;
Statements
	: Statement 'statement'
	| Statements "";"" 'semicolon'* "";"" 'semicolon' Statement 'statement'
	;
Statement
	: SelectQuery
	| DeleteQuery
	| ExecuteStatement
	| DatabaseStatement
	| TransactionStatement
	| HelpSessionStatement
	| SetStatement
	| CheckWorkloadStatement
	| LoadingStatement
	| UsingStatement
	| InsertQuery
	| UpdateQuery
	| DropTableQuery
	| CheckpointStatement
	| CreateMacroStatement
	| LockTableStatement
	| RollbackStatement
	| MergeQuery	;
MergeQuery
	: ""MERGE"" 'mergeToken' ""INTO"" 'intoToken'? Table 'mergeTable' ""USING"" 'usingToken' Table 'usingTable' ""ON"" 'onToken' Expression 'condition' WhenMergeCondition 'whenMerge'+ {{}}
	;
WhenMergeCondition
	: ""WHEN"" 'whenToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""UPDATE"" 'updateToken' ""SET"" 'setToken' SetExpressionList {{}}
	| ""WHEN"" 'whenToken' ""NOT"" 'notToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""INSERT"" 'insertToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' (""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen')? {{}}
	;
RollbackStatement
	: ""ROLLBACK"" 'rollbackToken' ""WORK"" 'workToken' <string> 'work' ""FROM"" 'fromToken' TableList WhereExpression 'where' {{}}
	;
LockTableStatement
	: (""LOCKING"" 'lockToken' | ""LOCK"" 'lockToken') ""TABLE"" 'tableToken'? TableName 'table' ""FOR"" 'forToken' <identifier> 'lock' Statement 'statement'? {{}}
	;
CreateMacroStatement
	: ""CREATE"" 'createToken' ""MACRO"" 'macroToken' IdentifierName 'name' MacroArgs ""AS"" 'asToken' ""("" 'leftParen' Statements "";"" 'semicolon'* "")"" 'rightParen' {{}}
	;
MacroArgs
	:
	| ""("" 'leftParen' ParameterList "")"" 'rightParen'
	;
ParameterList
	: Parameter 'parameter'
	| ParameterList "","" 'comma' Parameter 'parameter'
	;
Parameter
	: IdentifierName 'name' Type 'type' {{}}
	;
Type
	: TypeName (""("" 'leftParen' <number> 'precision' ("","" 'comma' <number> 'scale')? "")"" 'rightParen')? (""CHARACTER"" 'characterToken' ""SET"" 'setToken' <identifier> 'encoding')? {{}}
	;
TypeName
	: SingleTypeName 'name'
	| ""DOUBLE"" 'name' ""PRECISION"" 'name'
	;
SingleTypeName
	: ""CHAR""
	| ""VARCHAR""
	| ""CLOB""
	| ""DATE""
	| ""TIME""
	| ""TIMESTAMP""
	| ""BYTEINT""
	| ""SMALLINT""
	| ""INT""
	| ""INTEGER""
	| ""BIGINT""
	| ""DEC""
	| ""DECIMAL""
	| ""NUMERIC""
	| ""FLOAT""
	| ""REAL""
	| ""NUMBER""
	| ""VARBYTE""
	| ""BYTE""
	;
CheckpointStatement
	: ""CHECKPOINT"" 'checkpointToken' ""LOADING"" 'loadingToken' ""INTERVAL"" 'intervalToken' <number> 'interal' ""END"" 'endToken'? {{}}
	;
DropTableQuery
	: ""DROP"" 'dropToken' ""TABLE"" 'tableToken' TableName 'table' {{}}
	;
UpdateQuery
	: ""UPDATE"" 'updateToken' TableName 'table' (""AS"" 'asToken'? <identifier> 'alias')? ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? (""ELSE"" 'elseToken' (InsertQuery 'else' | UpdateQuery 'else'))? {{}}
	| ""UPDATE"" 'updateToken' TableName 'table' ""FROM"" 'fromToken' TableList ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? {{}}
	;
SetExpressionList
	: SetExpression 'setExpression'
	| SetExpressionList "","" 'comma' SetExpression 'setExpression'
	;
SetExpression
	: Identifier 'name' ""="" 'equals' Expression 'value' {{}}
	;
InsertQuery
	: (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken'? TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	| (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken' TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? SelectQuery 'query' {{}}
	;
UsingStatement
	: ""USING"" 'usingToken' UsingColumns Statement 'statement' {{}}
	| ""USING"" 'usingToken' ""("" 'leftParen' UsingColumns "")"" 'rightParen' Statement 'statement' {{}}
	;
UsingColumns
	: UsingColumn 'column'
	| UsingColumns "","" 'comma' UsingColumn 'column'
	;
UsingColumn
	: <identifier> 'name' Type 'type' {{}}
	| <identifier> 'name' ""("" 'leftParen' Type 'type' "")"" 'rightParen' {{}}
	;
LoadingStatement
	: ""BEGIN"" 'beginToken' ""LOADING"" 'loadingToken' TableName 'table' ""ERRORFILES"" 'errorfilesToken' ExpressionList ""WITH"" 'withToken' ""INTERVAL"" 'intervalToken' {{BeginLoadingStatement}}
	| ""END"" 'endToken' ""LOADING"" 'loadingToken' {{EndLoadingStatement}}
	;
CheckWorkloadStatement
	: ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""FOR"" 'forToken' Statement 'statement'  {{}}
	| ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""END"" 'endToken'  {{}}
	;
SetStatement
	: ""SET"" 'setToken' IdentifierName 'name' ""="" 'equals' Expression 'value' ""UPDATE"" 'updateToken'? ""FOR"" 'forToken' ""SESSION"" 'sessionToken' {{}}
	;
HelpSessionStatement
	: ""HELP"" 'helpToken' ""SESSION"" 'sessionToken' {{}}
	;
TransactionStatement
	: ""BT"" 'beginToken' {{BeginTransactionStatement}}
	| ""ET"" 'endToken' {{EndTransactionStatement}}
	;
DatabaseStatement
	: ""DATABASE"" 'databaseToken' IdentifierName 'database' {{}}
	;
ExecuteStatement
	: (""EXECUTE"" 'executeToken' | ""EXEC"" 'executeToken') IdentifierName 'name' ( ""("" 'leftParen' ExpressionList "")"" 'rightParen' )? {{}}
	;
DeleteQuery
	: (""DELETE"" 'deleteToken' | ""DEL"" 'deleteToken') ""FROM"" 'fromToken'? Table 'table' (WhereExpression 'where' | ""ALL"" 'allToken')? {{}}
	;
SelectQuery
	: (""SELECT"" 'selectToken' | ""SEL"" 'selectToken') (""DISTINCT"" 'distinctToken' | ""DISTINCTROW"" 'distinctToken')? (""TOP"" 'topToken' <number> 'top')? ExpressionList IntoExpression 'into'? (FromTables? QueryExpressions)? (""FOR"" 'forToken' ""CURSOR"" 'cursorToken')? (<number> 'count')? {{}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""UNION"" 'unionToken' ""ALL"" 'allToken'? UnionSelectQuery {{UnionQuery}}
	| ""WITH"" 'withToken' ""RECURSIVE"" 'recursiveToken'? WithTables Statement 'statement' {{WithQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""MINUS"" 'minusToken' UnionSelectQuery {{MinusQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""INTERSECT"" 'intersectToken' UnionSelectQuery {{IntersectQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""EXCEPT"" 'intersectToken' UnionSelectQuery {{ExceptQuery}}
	;
QueryExpressions
	:
	| QueryExpressions QueryExpression
	;
QueryExpression
	: WhereExpression 'where'
	| GroupByExpression 'group'
	| HavingExpression 'having'
	| PartitionByExpression 'partition'
	| QualifyExpression 'qualify'
	| OrderByExpression 'orderBy'
	;
WithTables
	: WithTable 'withTable'
	| WithTables "","" 'comma' WithTable 'withTable'
	;
WithTable
	: IdentifierName 'name' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""AS"" 'asToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{WithTableDefinition}}
	;
HavingExpression
	: ""HAVING"" 'havingToken' Expression 'condition' {{Having}}
	;
UnionSelectQuery
	: ""("" 'leftParen' SelectQuery 'right' "")"" 'rightParen' OrderByExpression 'orderBy'
	| SelectQuery 'right'
	;
QualifyExpression
	: ""QUALIFY"" 'qualifyToken' Expression 'condition' {{}}
	;
PartitionByExpression
	: ""PARTITION"" 'partitionToken' ""BY"" 'byToken' ExpressionList {{}}
	;
IntoExpression
	: ""INTO"" 'intoToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	;
FromTables
	: ""FROM"" 'fromToken' TableList
	;
TableList
	: Table 'table'
	| TableList "","" 'comma' Table 'table'
	;
 Table
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' (""AS"" 'asToken'? <identifier> 'alias')? {{Table}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' (""AS"" 'asToken'? <identifier> 'alias')? {{SelectTable}}
	| Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction' | ""FULL"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? {{JoinTable}}
	| ""("" 'leftParen' Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? "")"" 'rightParen' {{JoinTable}}
	;
TableName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{Table}}
	;
WhereExpression
	: ""WHERE"" 'whereToken' Expression 'where' {{}}
	;
GroupByExpression
	: ""GROUP"" 'groupToken' ""BY"" 'byToken' ExpressionList {{GroupBy}}
	| ""GROUP"" 'groupToken' ""BY"" 'byToken' EmptyGroupByExpression 'value' {{GroupBy}}
	;
EmptyGroupByExpression
	: ""("" 'leftParen' "")"" 'rightParen' {{EmptyGroupByExpression}}
	;
OrderByExpression
	: ""ORDER"" 'orderToken' ""BY"" 'byToken' ExpressionList {{}}
	;
ExpressionList
	: NamedExpression 'value'
	| ExpressionList "","" 'comma'+ NamedExpression 'value'
	;
NamedExpression
	: Expression 
	| Expression 'expression' ""AS"" 'asToken'? <identifier> 'alias' {{AliasedExpression}}
	;
Expression
	: Identifier
	| <variable> 'name' {{VariableExpression}}
	| <string> 'value' {{LiteralExpression}}
	| <number> 'value' {{LiteralExpression}}
	| ""NULL"" 'nullToken' {{NullExpression}}
	| (<identifier> 'name' ""."" 'period')* ""*"" 'star' {{StarExpression}}
	| CaseExpression
	| FunctionExpression
	| Expression 'left' (""+"" 'operator' | ""-"" 'operator' | ""*"" 'operator' | ""/"" 'operator' | ""MOD"" 'operator' | ""||"" 'operator' | ""**"" 'operator' | ""EQ"" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'left' (""AND"" 'operator' | ""OR"" 'operator' | ""="" 'operator' | ""<>"" 'operator' | ""NE"" 'operator' |  ""<"" 'operator' | ""<="" 'operator' | "">"" 'operator' | "">="" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""LIKE"" 'likeToken' Expression 'like' (""ESCAPE"" 'escapeToken' Expression 'escape')? {{LikeExpression}}
	| ""SUBSTRING"" 'substringToken' ""("" 'leftParen' Expression 'value' ""FROM"" 'fromToken' Expression 'from' (""FOR"" 'forToken' Expression 'for')? "")"" 'rightParen' {{SubstringExpression}}
	| Expression 'value' ""IS"" 'isToken' ""NOT"" 'notToken'? ""NULL"" 'nullToken' {{IsNullExpression}}
	| ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}
	| Expression 'testValue' ""NOT"" 'notToken'? ""IN"" 'inToken' (Expression 'value' | ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen') {{InValueExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| Expression 'value' ""("" 'leftParen' ""FORMAT"" 'formatToken' <string> 'format' "")"" 'rightParen' {{ConversionExpression}}
	| Expression 'value' ""("" 'leftParen' Type 'type' ("","" 'comma' ""FORMAT"" 'formatToken' <string> 'format' )? "")"" 'rightParen' {{ConversionExpression}}
	| ""CAST"" 'castToken' ""("" 'leftParen' Expression 'value' ""AS"" 'asToken' Type 'type'? (""FORMAT"" 'formatToken' <string> 'format')? "")"" 'rightParen' {{CastExpression}}
	| (""-"" 'operator' | ""+"" 'operator') Expression 'value' {{UnaryExpression}}
	| Expression 'value' (""NOT"" 'notToken')? ""BETWEEN"" 'betweenToken' Expression 'first' ""AND"" 'andToken' Expression 'last' {{BetweenExpression}}
	| ""TRIM"" 'trimToken' ""("" 'leftParen' ((""BOTH"" 'positionToken' | ""TRAILING"" 'positionToken' | ""LEADING"" 'positionToken') <string> 'character'? ""FROM"" 'fromToken')? Expression 'value' "")"" 'rightParen' {{TrimExpression}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{QueryExpression}}
	| ""NOT"" 'operator' Expression 'value' {{UnaryExpression}}
	| ""EXTRACT"" 'extractToken' ""("" 'leftParen'  <identifier> 'name' ""FROM"" 'fromToken' Expression 'value' "")"" 'rightParen' {{ExtractExpression}}
	| Expression 'value' ""OVER"" 'overToken' ""("" 'leftParen' PartitionByExpression 'partition'? OrderByExpression 'orderBy'? (""ROWS"" 'rows' ""BETWEEN"" 'betweenToken' ((<number> 'from' | ""UNBOUNDED"" 'from') ""PRECEDING"" 'precedingToken' | ""CURRENT"" 'currentFromToken' ""ROW"" 'rowFromToken') ""AND"" 'andToken' ((<number> 'to' | ""UNBOUNDED"" 'to') ""PRECEDING"" 'precedingToken' | ""CURRENT"" 'currentToToken' ""ROW"" 'rowToToken'))? "")"" 'rightParen' {{OverExpression}}
	| ""INTERVAL"" 'intervalToken' <string> 'interval' <identifier> 'name' {{IntervalExpression}}
	| Expression 'value' ""("" 'leftParen' ""CASESPECIFIC"" 'caseSpecificToken' "")"" 'rightParen' {{CaseSpecificExpression}}
	| Expression 'value' ""("" 'leftParen' ""TITLE"" 'titleToken' <string> 'title' "")"" 'rightParen' {{TitleExpression}}
	| ""COUNT"" 'countToken' ""("" 'leftParen' (""DISTINCT"" 'countType' | ""ALL"" 'countType')? Expression 'value' "")"" 'rightParen' {{CountExpression}}
	| (""TIMESTAMP"" 'typeToken' | ""DATE"" 'typeToken' | ""TIME"" 'typeToken') (<string> 'value')? {{TimestampExpression}}
	| (""NOT"" 'notToken')? ""EXISTS"" 'existsToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{ExistsExpression}}
	| (""TRANSLATE"" 'translateToken' | ""TRANSLATE_CHK"" 'translateToken') ""("" 'leftParen' Expression 'value' ""USING"" 'usingToken' <identifier> 'operation' (""WITH"" 'withToken' ""ERROR"" 'errorToken')? "")"" 'rightParen' {{TranslateExpression}}
	| ""XMLAGG"" 'xmlaggToken' ""("" 'leftParen' Expression 'value' OrderByExpression 'orderBy' "")"" 'rightParen' {{XmlAggExpression}}
	| <ustring> 'value' ""UESCAPE"" 'uescapeToken' <string> 'escape' {{UnicodeEscapeExpression}}
	| Expression 'value' ""IGNORE"" 'ignoreToken' ""NULLS"" 'nullsToken' {{IgnoreNullsExpression}}
	;
CaseExpression
	: ""CASE"" 'caseToken' Expression 'expression'? WhenExpressions ElseExpression 'else'? ""END"" 'endToken' {{}}
	;
ElseExpression
	: ""ELSE"" 'elseToken' Expression 'value' {{}}
	;
WhenExpressions
	: WhenExpression 'when'
	| WhenExpressions WhenExpression 'when'
	;
WhenExpression
	: ""WHEN"" 'whenToken' Expression 'condition' ""THEN"" 'thenToken' Expression 'value' {{}}
	;
FunctionExpression
	: IdentifierName 'function' ""("" 'leftParen' ExpressionList? "")"" 'rightParen' {{}}
	;
Identifier
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{IdentifierExpression}}
	;
IdentifierName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{}}
	;"
]

{ #category : #generated }
TeradataParser class >> reduceTable [
^#(
	#(155 0 #reduceActionFor_____semicolon__1: 1487873 false) 
	#(208 0 #reduceActionFor__identifier___name_______period___1: 8862721 false) 
	#(183 1 #reduceActionForTransactionStatement1: 6201345 false) 
	#(183 1 #reduceActionForTransactionStatement2: 6201346 false) 
	#(154 1 #reduceActionForFile2: 1468418 false) 
	#(156 1 #reduceActionForStatements1: 1539073 false) 
	#(157 1 #liftFirstValue: 1649682 false) 
	#(157 1 #liftFirstValue: 1649681 false) 
	#(157 1 #liftFirstValue: 1649680 false) 
	#(157 1 #liftFirstValue: 1649679 false) 
	#(157 1 #liftFirstValue: 1649678 false) 
	#(157 1 #liftFirstValue: 1649677 false) 
	#(157 1 #liftFirstValue: 1649676 false) 
	#(157 1 #liftFirstValue: 1649675 false) 
	#(157 1 #liftFirstValue: 1649674 false) 
	#(157 1 #liftFirstValue: 1649673 false) 
	#(157 1 #liftFirstValue: 1649672 false) 
	#(157 1 #liftFirstValue: 1649671 false) 
	#(157 1 #liftFirstValue: 1649670 false) 
	#(157 1 #liftFirstValue: 1649669 false) 
	#(157 1 #liftFirstValue: 1649668 false) 
	#(157 1 #liftFirstValue: 1649667 false) 
	#(157 1 #liftFirstValue: 1649666 false) 
	#(157 1 #liftFirstValue: 1649665 false) 
	#(220 1 #reduceActionForExpression112: 10263664 false) 
	#(220 1 #reduceActionForExpression5: 10263557 false) 
	#(220 1 #reduceActionForExpression112: 10263666 false) 
	#(220 1 #reduceActionForExpression112: 10263662 false) 
	#(220 1 #reduceActionForExpression2: 10263554 false) 
	#(220 1 #reduceActionForExpression3: 10263555 false) 
	#(220 1 #reduceActionForExpression3: 10263556 false) 
	#(220 1 #liftFirstValue: 10263559 false) 
	#(220 1 #liftFirstValue: 10263560 false) 
	#(220 1 #liftFirstValue: 10263553 false) 
	#(184 2 #reduceActionForDatabaseStatement1: 6326273 false) 
	#(186 2 #reduceActionForDeleteQuery7: 6567943 false) 
	#(186 2 #reduceActionForDeleteQuery7: 6567937 false) 
	#(179 2 #reduceActionForLoadingStatement2: 5477378 false) 
	#(185 2 #reduceActionForExecuteStatement3: 6410243 false) 
	#(185 2 #reduceActionForExecuteStatement3: 6410241 false) 
	#(182 2 #reduceActionForHelpSessionStatement1: 6123521 false) 
	#(188 0 #nil 6899713 false) 
	#(217 1 #reduceActionForStatements1: 10038273 false) 
	#(219 1 #liftFirstValue: 10140673 false) 
	#(177 1 #reduceActionForStatements1: 5255169 false) 
	#(197 1 #reduceActionForStatements1: 7980033 false) 
	#(155 2 #reduceActionFor_____semicolon__2: 1487874 false) 
	#(154 2 #reduceActionForFile1: 1468417 false) 
	#(220 2 #reduceActionForExpression51: 10263603 false) 
	#(220 2 #reduceActionForExpression51: 10263602 false) 
	#(223 1 #reduceActionForWhenExpressions1: 15128577 false) 
	#(220 2 #reduceActionForExpression113: 10263665 false) 
	#(220 2 #reduceActionForExpression51: 10263614 false) 
	#(220 2 #reduceActionForExpression113: 10263667 false) 
	#(220 2 #reduceActionForExpression113: 10263663 false) 
	#(220 2 #reduceActionForExpression6: 10263558 false) 
	#(227 2 #reduceActionForIdentifierName1: 15532033 false) 
	#(226 2 #reduceActionForIdentifier1: 15431681 false) 
	#(208 2 #reduceActionFor__identifier___name_______period___2: 8862722 false) 
	#(180 3 #reduceActionForCheckWorkloadStatement2: 5757954 false) 
	#(164 0 #reduceActionForMacroArgs1: 3126273 false) 
	#(186 3 #reduceActionForDeleteQuery10: 6567946 false) 
	#(186 3 #reduceActionForDeleteQuery9: 6567945 false) 
	#(209 0 #nil 9168897 false) 
	#(186 3 #reduceActionForDeleteQuery8: 6567944 false) 
	#(206 2 #reduceActionForTable1: 8853505 false) 
	#(186 3 #reduceActionForDeleteQuery10: 6567940 false) 
	#(186 3 #reduceActionForDeleteQuery9: 6567939 false) 
	#(186 3 #reduceActionForDeleteQuery8: 6567938 false) 
	#(171 3 #reduceActionForDropTableQuery1: 4012033 false) 
	#(212 2 #reduceActionForTable1: 9539585 false) 
	#(218 1 #reduceActionForWhenExpressions1: 10099713 false) 
	#(195 0 #reduceActionForQueryExpressions1: 7711745 false) 
	#(190 0 #reduceActionFor_FromTables__QueryExpressions__1: 6923265 false) 
	#(188 1 #liftFirstValue: 6899714 false) 
	#(219 2 #reduceActionForNamedExpression2: 10140674 false) 
	#(169 1 #liftFirstValue: 3613707 false) 
	#(169 1 #liftFirstValue: 3613715 false) 
	#(169 1 #liftFirstValue: 3613703 false) 
	#(169 1 #liftFirstValue: 3613697 false) 
	#(169 1 #liftFirstValue: 3613699 false) 
	#(169 1 #liftFirstValue: 3613700 false) 
	#(169 1 #liftFirstValue: 3613708 false) 
	#(169 1 #liftFirstValue: 3613709 false) 
	#(169 1 #liftFirstValue: 3613711 false) 
	#(169 1 #liftFirstValue: 3613705 false) 
	#(169 1 #liftFirstValue: 3613706 false) 
	#(169 1 #liftFirstValue: 3613713 false) 
	#(169 1 #liftFirstValue: 3613710 false) 
	#(169 1 #liftFirstValue: 3613712 false) 
	#(169 1 #liftFirstValue: 3613704 false) 
	#(169 1 #liftFirstValue: 3613701 false) 
	#(169 1 #liftFirstValue: 3613702 false) 
	#(169 1 #liftFirstValue: 3613714 false) 
	#(169 1 #liftFirstValue: 3613698 false) 
	#(178 2 #reduceActionForUsingColumn1: 5346305 false) 
	#(167 1 #reduceActionForType1: 3345409 false) 
	#(168 1 #reduceActionForWhenExpressions1: 3536897 false) 
	#(176 3 #reduceActionForUsingStatement1: 5071873 false) 
	#(187 3 #reduceActionForSelectQuery17: 6721553 false) 
	#(200 1 #reduceActionForUnionSelectQuery2: 8336386 false) 
	#(187 3 #reduceActionForSelectQuery23: 6721559 false) 
	#(187 3 #reduceActionForSelectQuery21: 6721557 false) 
	#(187 3 #reduceActionForSelectQuery19: 6721555 false) 
	#(187 3 #reduceActionForSelectQuery13: 6721549 false) 
	#(220 3 #reduceActionForExpression61: 10263613 false) 
	#(220 3 #reduceActionForExpression34: 10263586 false) 
	#(221 3 #reduceActionForCaseExpression1: 14934017 false) 
	#(223 2 #reduceActionFor_____semicolon__2: 15128578 false) 
	#(220 3 #reduceActionForExpression104: 10263656 false) 
	#(220 3 #reduceActionForExpression123: 10263675 false) 
	#(207 2 #reduceActionFor__identifier___name_______period__1: 8862721 false) 
	#(220 3 #reduceActionForExpression11: 10263563 false) 
	#(220 3 #reduceActionForExpression11: 10263567 false) 
	#(220 3 #reduceActionForExpression11: 10263561 false) 
	#(220 3 #reduceActionForExpression11: 10263562 false) 
	#(220 3 #reduceActionForExpression11: 10263564 false) 
	#(220 3 #reduceActionForExpression11: 10263574 false) 
	#(220 3 #reduceActionForExpression11: 10263575 false) 
	#(220 3 #reduceActionForExpression11: 10263572 false) 
	#(220 3 #reduceActionForExpression11: 10263571 false) 
	#(220 3 #reduceActionForExpression11: 10263576 false) 
	#(220 3 #reduceActionForExpression11: 10263577 false) 
	#(220 3 #reduceActionForExpression11: 10263569 false) 
	#(220 3 #reduceActionForExpression11: 10263568 false) 
	#(220 3 #reduceActionForExpression124: 10263676 false) 
	#(220 3 #reduceActionForExpression35: 10263587 false) 
	#(220 3 #reduceActionForExpression32: 10263584 false) 
	#(220 3 #reduceActionForExpression26: 10263578 false) 
	#(220 3 #reduceActionForExpression11: 10263565 false) 
	#(220 3 #reduceActionForExpression11: 10263573 false) 
	#(220 3 #reduceActionForExpression11: 10263570 false) 
	#(220 3 #reduceActionForExpression11: 10263566 false) 
	#(225 3 #reduceActionForFunctionExpression1: 15324161 false) 
	#(180 4 #reduceActionForCheckWorkloadStatement1: 5757953 false) 
	#(170 4 #reduceActionForCheckpointStatement1: 3857409 false) 
	#(206 3 #reduceActionForTable4: 8853508 false) 
	#(186 4 #reduceActionForDeleteQuery12: 6567948 false) 
	#(186 4 #reduceActionForDeleteQuery11: 6567947 false) 
	#(209 1 #liftFirstValue: 9168898 false) 
	#(211 0 #reduceActionFor__ON___onToken__Expression__on___1: 9255937 false) 
	#(213 2 #reduceActionForWhereExpression1: 9623553 false) 
	#(206 3 #reduceActionForTable2: 8853506 false) 
	#(186 4 #reduceActionForDeleteQuery12: 6567942 false) 
	#(186 4 #reduceActionForDeleteQuery11: 6567941 false) 
	#(175 4 #reduceActionForInsertQuery11: 4669451 false) 
	#(175 4 #reduceActionForInsertQuery11: 4669449 false) 
	#(162 4 #reduceActionForLockTableStatement5: 2758661 false) 
	#(162 4 #reduceActionForLockTableStatement5: 2758657 false) 
	#(190 1 #reduceActionFor_FromTables__QueryExpressions__2: 6923266 false) 
	#(192 0 #reduceActionFor__ON___onToken__Expression__on___1: 6956033 false) 
	#(189 1 #reduceActionFor_FromTables__QueryExpressions_1: 6923265 false) 
	#(218 2 #reduceActionFor_____semicolon__2: 10099714 false) 
	#(217 3 #reduceActionForExpressionList2: 10038274 false) 
	#(219 3 #reduceActionForNamedExpression3: 10140675 false) 
	#(205 1 #reduceActionForStatements1: 8781825 false) 
	#(172 4 #reduceActionForUpdateQuery1: 4098049 false) 
	#(173 1 #reduceActionForStatements1: 4472833 false) 
	#(168 2 #reduceActionForTypeName2: 3536898 false) 
	#(177 3 #reduceActionForUsingColumns2: 5255170 false) 
	#(187 4 #reduceActionForSelectQuery18: 6721554 false) 
	#(197 3 #reduceActionForUsingColumns2: 7980034 false) 
	#(156 4 #reduceActionForStatements2: 1539074 false) 
	#(187 4 #reduceActionForSelectQuery14: 6721550 false) 
	#(221 4 #reduceActionForCaseExpression3: 14934019 false) 
	#(222 2 #reduceActionForElseExpression1: 15063041 false) 
	#(221 4 #reduceActionForCaseExpression2: 14934018 false) 
	#(220 4 #reduceActionForExpression107: 10263659 false) 
	#(220 4 #reduceActionForExpression116: 10263668 false) 
	#(220 4 #reduceActionForExpression54: 10263606 false) 
	#(220 4 #reduceActionForExpression105: 10263657 false) 
	#(220 4 #reduceActionForExpression44: 10263596 false) 
	#(220 4 #reduceActionForExpression33: 10263585 false) 
	#(220 4 #reduceActionForExpression37: 10263589 false) 
	#(220 4 #reduceActionForExpression28: 10263580 false) 
	#(220 4 #reduceActionForExpression64: 10263616 false) 
	#(225 4 #reduceActionForFunctionExpression2: 15324162 false) 
	#(187 5 #reduceActionForSelectQuery24: 6721560 false) 
	#(187 5 #reduceActionForSelectQuery22: 6721558 false) 
	#(187 5 #reduceActionForSelectQuery20: 6721556 false) 
	#(187 5 #reduceActionForSelectQuery15: 6721551 false) 
	#(170 5 #reduceActionForCheckpointStatement2: 3857410 false) 
	#(165 1 #reduceActionForStatements1: 3193857 false) 
	#(206 4 #reduceActionForTable5: 8853509 false) 
	#(211 1 #reduceActionFor_FromTables__QueryExpressions__2: 9255938 false) 
	#(206 4 #reduceActionForTable7: 8853511 false) 
	#(206 4 #reduceActionForTable3: 8853507 false) 
	#(185 5 #reduceActionForExecuteStatement4: 6410244 false) 
	#(185 5 #reduceActionForExecuteStatement4: 6410242 false) 
	#(162 5 #reduceActionForLockTableStatement7: 2758663 false) 
	#(162 5 #reduceActionForLockTableStatement6: 2758662 false) 
	#(162 5 #reduceActionForLockTableStatement7: 2758659 false) 
	#(162 5 #reduceActionForLockTableStatement6: 2758658 false) 
	#(204 2 #reduceActionForFromTables1: 8734721 false) 
	#(192 1 #reduceActionFor_FromTables__QueryExpressions__2: 6956034 false) 
	#(194 0 #nil 7000065 false) 
	#(195 2 #reduceActionForQueryExpressions2: 7711746 false) 
	#(196 1 #reduceActionForQueryExpression3: 7772163 false) 
	#(196 1 #reduceActionForQueryExpression5: 7772165 false) 
	#(196 1 #reduceActionForQueryExpression4: 7772164 false) 
	#(196 1 #reduceActionForQueryExpression1: 7772161 false) 
	#(196 1 #reduceActionForQueryExpression2: 7772162 false) 
	#(196 1 #reduceActionForQueryExpression6: 7772166 false) 
	#(189 2 #reduceActionFor_FromTables__QueryExpressions_2: 6923266 false) 
	#(172 5 #reduceActionForUpdateQuery4: 4098052 false) 
	#(172 5 #reduceActionForUpdateQuery7: 4098055 false) 
	#(176 5 #reduceActionForUsingStatement2: 5071874 false) 
	#(178 4 #reduceActionForUsingColumn2: 5346306 false) 
	#(224 4 #reduceActionForWhenExpression1: 15215617 false) 
	#(221 5 #reduceActionForCaseExpression4: 14934020 false) 
	#(220 5 #reduceActionForExpression46: 10263598 false) 
	#(220 5 #reduceActionForExpression109: 10263661 false) 
	#(220 5 #reduceActionForExpression109: 10263660 false) 
	#(220 5 #reduceActionForExpression117: 10263669 false) 
	#(220 5 #reduceActionForExpression122: 10263674 false) 
	#(220 5 #reduceActionForExpression43: 10263595 false) 
	#(220 5 #reduceActionForExpression106: 10263658 false) 
	#(220 5 #reduceActionForExpression52: 10263604 false) 
	#(220 5 #reduceActionForExpression39: 10263591 false) 
	#(220 5 #reduceActionForExpression27: 10263579 false) 
	#(220 5 #reduceActionForExpression84: 10263636 false) 
	#(220 5 #reduceActionForExpression74: 10263626 false) 
	#(187 6 #reduceActionForSelectQuery16: 6721552 false) 
	#(164 3 #reduceActionForMacroArgs2: 3126274 false) 
	#(166 2 #reduceActionForParameter1: 3289089 false) 
	#(206 5 #reduceActionForTable6: 8853510 false) 
	#(206 5 #reduceActionForTable12: 8853516 false) 
	#(206 5 #reduceActionForTable12: 8853515 false) 
	#(210 2 #reduceActionFor__identifier___name_______period__1: 9255937 false) 
	#(175 6 #reduceActionForInsertQuery5: 4669445 false) 
	#(175 6 #reduceActionForInsertQuery5: 4669441 false) 
	#(162 6 #reduceActionForLockTableStatement8: 2758664 false) 
	#(162 6 #reduceActionForLockTableStatement8: 2758660 false) 
	#(161 6 #reduceActionForRollbackStatement1: 2611201 false) 
	#(203 4 #reduceActionForIntoExpression1: 8639489 false) 
	#(191 2 #reduceActionFor__identifier___name_______period__1: 6956033 false) 
	#(193 1 #liftFirstValue: 7000065 false) 
	#(194 1 #liftFirstValue: 7000066 false) 
	#(187 6 #reduceActionForSelectQuery7: 6721543 false) 
	#(199 2 #reduceActionForHavingExpression1: 8254465 false) 
	#(201 2 #reduceActionForQualifyExpression1: 8466433 false) 
	#(187 6 #reduceActionForSelectQuery7: 6721537 false) 
	#(181 6 #reduceActionForSetStatement1: 5958657 false) 
	#(172 6 #reduceActionForUpdateQuery13: 4098061 false) 
	#(205 3 #reduceActionForUsingColumns2: 8781826 false) 
	#(172 6 #reduceActionForUpdateQuery19: 4098067 false) 
	#(173 3 #reduceActionForUsingColumns2: 4472834 false) 
	#(172 6 #reduceActionForUpdateQuery3: 4098051 false) 
	#(172 6 #reduceActionForUpdateQuery3: 4098050 false) 
	#(174 3 #reduceActionForSetExpression1: 4592641 false) 
	#(172 6 #reduceActionForUpdateQuery10: 4098058 false) 
	#(167 4 #reduceActionForType3: 3345411 false) 
	#(167 4 #reduceActionForType2: 3345410 false) 
	#(198 5 #reduceActionForWithTable1: 8069121 false) 
	#(200 4 #reduceActionForUnionSelectQuery1: 8336385 false) 
	#(220 6 #reduceActionForExpression48: 10263600 false) 
	#(220 6 #reduceActionForExpression63: 10263615 false) 
	#(220 6 #reduceActionForExpression30: 10263582 false) 
	#(220 6 #reduceActionForExpression118: 10263670 false) 
	#(220 6 #reduceActionForExpression118: 10263672 false) 
	#(220 6 #reduceActionForExpression55: 10263607 false) 
	#(220 6 #reduceActionForExpression55: 10263611 false) 
	#(220 6 #reduceActionForExpression55: 10263609 false) 
	#(216 3 #reduceActionForOrderByExpression1: 9956353 false) 
	#(220 6 #reduceActionForExpression53: 10263605 false) 
	#(220 6 #reduceActionForExpression40: 10263592 false) 
	#(220 6 #reduceActionForExpression29: 10263581 false) 
	#(202 3 #reduceActionForPartitionByExpression1: 8545281 false) 
	#(220 6 #reduceActionForExpression94: 10263646 false) 
	#(179 7 #reduceActionForLoadingStatement1: 5477377 false) 
	#(165 3 #reduceActionForUsingColumns2: 3193858 false) 
	#(206 6 #reduceActionForTable13: 8853517 false) 
	#(206 6 #reduceActionForTable10: 8853514 false) 
	#(206 6 #reduceActionForTable10: 8853512 false) 
	#(206 6 #reduceActionForTable10: 8853513 false) 
	#(175 7 #reduceActionForInsertQuery12: 4669452 false) 
	#(175 7 #reduceActionForInsertQuery7: 4669447 false) 
	#(175 7 #reduceActionForInsertQuery12: 4669450 false) 
	#(175 7 #reduceActionForInsertQuery7: 4669443 false) 
	#(158 7 #reduceActionForMergeQuery1: 2021377 false) 
	#(159 1 #reduceActionForWhenExpressions1: 2177025 false) 
	#(187 7 #reduceActionForSelectQuery9: 6721545 false) 
	#(187 7 #reduceActionForSelectQuery9: 6721547 false) 
	#(214 3 #reduceActionForGroupByExpression2: 9692162 false) 
	#(214 3 #reduceActionForGroupByExpression1: 9692161 false) 
	#(187 7 #reduceActionForSelectQuery9: 6721539 false) 
	#(187 7 #reduceActionForSelectQuery9: 6721541 false) 
	#(181 7 #reduceActionForSetStatement2: 5958658 false) 
	#(172 7 #reduceActionForUpdateQuery16: 4098064 false) 
	#(172 7 #reduceActionForUpdateQuery20: 4098068 false) 
	#(172 7 #reduceActionForUpdateQuery6: 4098054 false) 
	#(172 7 #reduceActionForUpdateQuery6: 4098053 false) 
	#(172 7 #reduceActionForUpdateQuery9: 4098057 false) 
	#(172 7 #reduceActionForUpdateQuery9: 4098056 false) 
	#(220 7 #reduceActionForExpression47: 10263599 false) 
	#(220 7 #reduceActionForExpression56: 10263608 false) 
	#(220 7 #reduceActionForExpression56: 10263612 false) 
	#(220 7 #reduceActionForExpression56: 10263610 false) 
	#(220 7 #reduceActionForExpression45: 10263597 false) 
	#(220 7 #reduceActionForExpression36: 10263588 false) 
	#(206 7 #reduceActionForTable17: 8853521 false) 
	#(206 7 #reduceActionForTable17: 8853520 false) 
	#(158 8 #reduceActionForMergeQuery2: 2021378 false) 
	#(159 2 #reduceActionFor_____semicolon__2: 2177026 false) 
	#(187 8 #reduceActionForSelectQuery8: 6721544 false) 
	#(215 2 #reduceActionForEmptyGroupByExpression1: 9865217 false) 
	#(187 8 #reduceActionForSelectQuery8: 6721538 false) 
	#(172 8 #reduceActionForUpdateQuery15: 4098063 false) 
	#(172 8 #reduceActionForUpdateQuery15: 4098062 false) 
	#(172 8 #reduceActionForUpdateQuery12: 4098060 false) 
	#(172 8 #reduceActionForUpdateQuery12: 4098059 false) 
	#(167 6 #reduceActionForType5: 3345413 false) 
	#(220 8 #reduceActionForExpression49: 10263601 false) 
	#(220 8 #reduceActionForExpression31: 10263583 false) 
	#(220 8 #reduceActionForExpression119: 10263671 false) 
	#(220 8 #reduceActionForExpression119: 10263673 false) 
	#(220 8 #reduceActionForExpression38: 10263590 false) 
	#(163 9 #reduceActionForCreateMacroStatement1: 2937857 false) 
	#(206 8 #reduceActionForTable14: 8853518 false) 
	#(206 8 #reduceActionForTable14: 8853519 false) 
	#(175 9 #reduceActionForInsertQuery6: 4669446 false) 
	#(175 9 #reduceActionForInsertQuery6: 4669442 false) 
	#(187 9 #reduceActionForSelectQuery10: 6721546 false) 
	#(187 9 #reduceActionForSelectQuery10: 6721548 false) 
	#(187 9 #reduceActionForSelectQuery10: 6721540 false) 
	#(187 9 #reduceActionForSelectQuery10: 6721542 false) 
	#(172 9 #reduceActionForUpdateQuery18: 4098066 false) 
	#(172 9 #reduceActionForUpdateQuery18: 4098065 false) 
	#(167 7 #reduceActionForType4: 3345412 false) 
	#(198 8 #reduceActionForWithTable2: 8069122 false) 
	#(220 9 #reduceActionForExpression41: 10263593 false) 
	#(175 10 #reduceActionForInsertQuery8: 4669448 false) 
	#(175 10 #reduceActionForInsertQuery8: 4669444 false) 
	#(220 10 #reduceActionForExpression42: 10263594 false) 
	#(167 9 #reduceActionForType6: 3345414 false) 
	#(220 11 #reduceActionForExpression73: 10263625 false) 
	#(220 11 #reduceActionForExpression72: 10263624 false) 
	#(220 11 #reduceActionForExpression72: 10263623 false) 
	#(220 11 #reduceActionForExpression70: 10263622 false) 
	#(220 11 #reduceActionForExpression69: 10263621 false) 
	#(220 11 #reduceActionForExpression69: 10263620 false) 
	#(220 11 #reduceActionForExpression70: 10263619 false) 
	#(220 11 #reduceActionForExpression69: 10263618 false) 
	#(220 11 #reduceActionForExpression69: 10263617 false) 
	#(160 6 #reduceActionForWhenMergeCondition1: 2217985 false) 
	#(220 12 #reduceActionForExpression93: 10263645 false) 
	#(220 12 #reduceActionForExpression92: 10263644 false) 
	#(220 12 #reduceActionForExpression92: 10263643 false) 
	#(220 12 #reduceActionForExpression90: 10263642 false) 
	#(220 12 #reduceActionForExpression89: 10263641 false) 
	#(220 12 #reduceActionForExpression89: 10263640 false) 
	#(220 12 #reduceActionForExpression90: 10263639 false) 
	#(220 12 #reduceActionForExpression89: 10263638 false) 
	#(220 12 #reduceActionForExpression89: 10263637 false) 
	#(220 12 #reduceActionForExpression83: 10263635 false) 
	#(220 12 #reduceActionForExpression82: 10263634 false) 
	#(220 12 #reduceActionForExpression82: 10263633 false) 
	#(220 12 #reduceActionForExpression80: 10263632 false) 
	#(220 12 #reduceActionForExpression79: 10263631 false) 
	#(220 12 #reduceActionForExpression79: 10263630 false) 
	#(220 12 #reduceActionForExpression80: 10263629 false) 
	#(220 12 #reduceActionForExpression79: 10263628 false) 
	#(220 12 #reduceActionForExpression79: 10263627 false) 
	#(220 13 #reduceActionForExpression103: 10263655 false) 
	#(220 13 #reduceActionForExpression102: 10263654 false) 
	#(220 13 #reduceActionForExpression102: 10263653 false) 
	#(220 13 #reduceActionForExpression100: 10263652 false) 
	#(220 13 #reduceActionForExpression99: 10263651 false) 
	#(220 13 #reduceActionForExpression99: 10263650 false) 
	#(220 13 #reduceActionForExpression100: 10263649 false) 
	#(220 13 #reduceActionForExpression99: 10263648 false) 
	#(220 13 #reduceActionForExpression99: 10263647 false) 
	#(160 8 #reduceActionForWhenMergeCondition2: 2217986 false) 
	#(160 12 #reduceActionForWhenMergeCondition3: 2217987 false)
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> scannerClass [
	^TeradataScanner
]

{ #category : #generated }
TeradataParser class >> startingStateForExpression [
	^ 2
]

{ #category : #generated }
TeradataParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
TeradataParser class >> symbolNames [
	^ #('"("' '")"' '"*"' '"**"' '"+"' '","' '"-"' '"."' '"/"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"ALL"' '"AND"' '"AS"' '"BEGIN"' '"BETWEEN"' '"BIGINT"' '"BOTH"' '"BT"' '"BY"' '"BYTE"' '"BYTEINT"' '"CASE"' '"CASESPECIFIC"' '"CAST"' '"CHAR"' '"CHARACTER"' '"CHECK"' '"CHECKPOINT"' '"CLOB"' '"COUNT"' '"CREATE"' '"CROSS"' '"CURRENT"' '"CURSOR"' '"DATABASE"' '"DATE"' '"DEC"' '"DECIMAL"' '"DEL"' '"DELETE"' '"DISTINCT"' '"DISTINCTROW"' '"DOUBLE"' '"DROP"' '"ELSE"' '"END"' '"EQ"' '"ERROR"' '"ERRORFILES"' '"ESCAPE"' '"ET"' '"EXCEPT"' '"EXEC"' '"EXECUTE"' '"EXISTS"' '"EXTRACT"' '"FLOAT"' '"FOR"' '"FORMAT"' '"FROM"' '"FULL"' '"GROUP"' '"HAVING"' '"HELP"' '"IGNORE"' '"IN"' '"INNER"' '"INS"' '"INSERT"' '"INT"' '"INTEGER"' '"INTERSECT"' '"INTERVAL"' '"INTO"' '"IS"' '"JOIN"' '"LEADING"' '"LEFT"' '"LIKE"' '"LOADING"' '"LOCK"' '"LOCKING"' '"MACRO"' '"MATCHED"' '"MERGE"' '"MINUS"' '"MOD"' '"NE"' '"NOT"' '"NULL"' '"NULLS"' '"NUMBER"' '"NUMERIC"' '"ON"' '"OR"' '"ORDER"' '"OUTER"' '"OVER"' '"PARTITION"' '"PRECEDING"' '"PRECISION"' '"QUALIFY"' '"REAL"' '"RECURSIVE"' '"RIGHT"' '"ROLLBACK"' '"ROW"' '"ROWS"' '"SEL"' '"SELECT"' '"SESSION"' '"SET"' '"SMALLINT"' '"SUBSTRING"' '"TABLE"' '"THEN"' '"TIME"' '"TIMESTAMP"' '"TITLE"' '"TOP"' '"TRAILING"' '"TRANSLATE"' '"TRANSLATE_CHK"' '"TRIM"' '"UESCAPE"' '"UNBOUNDED"' '"UNION"' '"UPDATE"' '"USING"' '"VALUES"' '"VARBYTE"' '"VARCHAR"' '"WHEN"' '"WHERE"' '"WITH"' '"WORK"' '"WORKLOAD"' '"XMLAGG"' '"||"' '<identifier>' '<variable>' '<ustring>' '<string>' '<number>' '<whitespace>' '<comment>' 'B e g i n' 'File' '";" ''semicolon''*' 'Statements' 'Statement' 'MergeQuery' 'WhenMergeCondition ''whenMerge''+' 'WhenMergeCondition' 'RollbackStatement' 'LockTableStatement' 'CreateMacroStatement' 'MacroArgs' 'ParameterList' 'Parameter' 'Type' 'TypeName' 'SingleTypeName' 'CheckpointStatement' 'DropTableQuery' 'UpdateQuery' 'SetExpressionList' 'SetExpression' 'InsertQuery' 'UsingStatement' 'UsingColumns' 'UsingColumn' 'LoadingStatement' 'CheckWorkloadStatement' 'SetStatement' 'HelpSessionStatement' 'TransactionStatement' 'DatabaseStatement' 'ExecuteStatement' 'DeleteQuery' 'SelectQuery' 'IntoExpression ''into''?' '(FromTables? QueryExpressions)' '(FromTables? QueryExpressions)?' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')?' '(<number> ''count'')' '(<number> ''count'')?' 'QueryExpressions' 'QueryExpression' 'WithTables' 'WithTable' 'HavingExpression' 'UnionSelectQuery' 'QualifyExpression' 'PartitionByExpression' 'IntoExpression' 'FromTables' 'TableList' 'Table' '(<identifier> ''name'' "." ''period'')' '(<identifier> ''name'' "." ''period'')*' '"OUTER" ''type''?' '("ON" ''onToken'' Expression ''on'')' '("ON" ''onToken'' Expression ''on'')?' 'TableName' 'WhereExpression' 'GroupByExpression' 'EmptyGroupByExpression' 'OrderByExpression' 'ExpressionList' '"," ''comma''+' 'NamedExpression' 'Expression' 'CaseExpression' 'ElseExpression' 'WhenExpressions' 'WhenExpression' 'FunctionExpression' 'Identifier' 'IdentifierName' 'E O F' 'error')
]

{ #category : #generated }
TeradataParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #TeradataFileNode #TeradataFileNode #OrderedCollection #OrderedCollection #TeradataProgramNode #TeradataMergeQueryNode #OrderedCollection #TeradataWhenMergeConditionNode #TeradataRollbackStatementNode #TeradataLockTableStatementNode #TeradataCreateMacroStatementNode #OrderedCollection #OrderedCollection #TeradataParameterNode #TeradataTypeNode #OrderedCollection #SmaCCToken #TeradataCheckpointStatementNode #TeradataDropTableQueryNode #TeradataUpdateQueryNode #OrderedCollection #TeradataSetExpressionNode #TeradataInsertQueryNode #TeradataUsingStatementNode #OrderedCollection #TeradataUsingColumnNode #TeradataProgramNode #TeradataCheckWorkloadStatementNode #TeradataSetStatementNode #TeradataHelpSessionStatementNode #TeradataProgramNode #TeradataDatabaseStatementNode #TeradataExecuteStatementNode #TeradataDeleteQueryNode #TeradataProgramNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #TeradataWithTableDefinitionNode #TeradataHavingNode #OrderedCollection #TeradataQualifyExpressionNode #TeradataPartitionByExpressionNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #TeradataProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #TeradataTableNode #TeradataWhereExpressionNode #TeradataGroupByNode #TeradataEmptyGroupByExpressionNode #TeradataOrderByExpressionNode #OrderedCollection #OrderedCollection #TeradataExpressionNode #TeradataExpressionNode #TeradataCaseExpressionNode #TeradataElseExpressionNode #OrderedCollection #TeradataWhenExpressionNode #TeradataFunctionExpressionNode #TeradataIdentifierExpressionNode #TeradataIdentifierNameNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
TeradataParser class >> transitionTable [
^#(
#[1 0 13 0 1 0 6 0 10 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 0 121 0 154 0 125 0 155 0 129 0 156 0 133 0 157 0 133 0 158 0 133 0 161 0 133 0 162 0 133 0 163 0 133 0 170 0 133 0 171 0 133 0 172 0 133 0 175 0 133 0 176 0 133 0 179 0 133 0 180 0 133 0 181 0 133 0 182 0 133 0 183 0 133 0 184 0 133 0 185 0 133 0 186 0 205 0 187 0 6 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 1 49 0 220 1 49 0 221 1 49 0 225 1 49 0 226 1 65 0 227] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 1 69 0 187] 
#[0 1 73 0 86] 
#[0 0 14 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 77 0 143] 
#[0 1 81 0 86] 
#[0 1 85 0 89] 
#[1 0 10 0 146 1 89 0 208 1 93 0 227] 
#[1 1 97 0 1 1 101 0 66 0 10 0 146 1 105 0 206 1 109 0 208] 
#[1 1 97 0 1 1 113 0 66 0 10 0 146 1 117 0 206 1 109 0 208] 
#[0 1 121 0 121] 
#[0 1 125 0 86] 
#[0 0 18 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 10 0 146 1 89 0 208 1 129 0 227] 
#[1 0 10 0 146 1 89 0 208 1 133 0 227] 
#[0 1 137 0 117] 
#[1 1 141 0 80 0 10 0 146 1 145 0 208 1 149 0 212] 
#[1 1 153 0 80 0 10 0 146 1 145 0 208 1 157 0 212] 
#[1 1 161 0 121 0 10 0 146 1 145 0 208 1 165 0 212] 
#[1 1 169 0 121 0 10 0 146 1 145 0 208 1 173 0 212] 
#[1 1 97 0 1 1 177 0 80 0 10 0 146 1 181 0 206 1 109 0 208] 
#[0 1 185 0 142] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 1 189 0 47 1 193 0 48 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 197 0 126 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 1 201 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 1 213 0 47 1 217 0 48 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 221 0 126 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 1 225 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 10 0 146 1 89 0 208 1 229 0 227] 
#[1 0 10 0 146 1 145 0 208 1 233 0 212] 
#[1 1 237 0 1 1 241 0 146 1 245 0 177 1 249 0 178] 
#[1 1 253 0 110 0 10 0 146 2 1 0 197 2 5 0 198 1 89 0 208 2 9 0 227] 
#[0 0 0 0 228] 
#[1 2 13 0 10 0 22 0 228] 
#[1 0 6 0 10 2 17 0 155 0 6 0 228] 
#[0 0 26 0 2 0 10 0 228] 
#[0 0 30 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 34 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 38 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 42 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 46 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 50 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 54 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 58 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 62 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 66 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 70 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 74 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 78 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 82 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 86 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 90 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 94 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 98 0 2 0 98 0 10 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133 0 98 0 228] 
#[1 2 37 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 2 41 0 187 1 45 0 208 2 45 0 220 2 45 0 221 2 45 0 225 2 45 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 2 49 0 220 2 49 0 221 2 49 0 225 2 49 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 2 53 0 220 2 53 0 221 2 53 0 225 2 53 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 2 57 0 139 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 2 61 0 220 2 61 0 221 2 65 0 223 2 69 0 224 2 61 0 225 2 61 0 226 1 65 0 227] 
#[0 2 73 0 1] 
#[0 2 77 0 1] 
#[1 0 102 0 1 0 102 0 2 0 102 0 3 0 102 0 4 0 102 0 5 0 102 0 6 0 102 0 7 0 102 0 9 0 102 0 10 0 102 0 11 0 102 0 12 0 102 0 13 0 102 0 14 0 102 0 15 0 102 0 16 0 102 0 17 0 102 0 18 0 102 0 19 0 102 0 21 0 102 0 38 0 102 0 51 0 102 0 52 0 102 0 53 0 102 0 56 0 102 0 58 0 102 0 64 0 102 0 66 0 102 0 67 0 102 0 68 0 102 0 69 0 102 0 71 0 102 0 72 0 102 0 73 0 102 0 78 0 102 0 80 0 102 0 81 0 102 0 82 0 102 0 84 0 102 0 85 0 102 0 92 0 102 0 93 0 102 0 94 0 102 0 95 0 102 0 100 0 102 0 101 0 102 0 102 0 102 0 104 0 102 0 105 0 102 0 108 0 102 0 111 0 102 0 114 0 102 0 118 0 102 0 122 0 102 0 133 0 102 0 134 0 102 0 135 0 102 0 139 0 102 0 140 0 102 0 141 0 102 0 145 0 102 0 146 2 81 0 149 0 102 0 150 0 102 0 228] 
#[0 2 85 0 1] 
#[0 2 89 0 1] 
#[0 2 93 0 149] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 2 97 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 2 101 0 220 2 101 0 221 2 101 0 225 2 101 0 226 1 65 0 227] 
#[0 0 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 2 105 0 1] 
#[1 0 110 0 1 0 110 0 2 0 110 0 3 0 110 0 4 0 110 0 5 0 110 0 6 0 110 0 7 0 110 0 9 0 110 0 10 0 110 0 11 0 110 0 12 0 110 0 13 0 110 0 14 0 110 0 15 0 110 0 16 0 110 0 17 0 110 0 18 0 110 0 19 0 110 0 21 0 110 0 38 0 110 0 51 0 110 0 52 0 110 0 53 0 110 0 56 0 110 0 58 0 110 0 64 0 110 0 66 0 110 0 67 0 110 0 68 0 110 0 69 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 78 0 110 0 80 0 110 0 81 0 110 0 82 0 110 0 84 0 110 0 85 0 110 0 92 0 110 0 93 0 110 0 94 0 110 0 95 0 110 0 100 0 110 0 101 0 110 0 102 0 110 0 104 0 110 0 105 0 110 0 108 0 110 0 111 0 110 0 114 0 110 0 118 0 110 0 122 0 110 0 133 0 110 0 134 0 110 0 135 0 110 0 139 0 110 0 140 0 110 0 141 0 110 0 145 0 110 0 146 2 109 0 149 0 110 0 150 0 110 0 228] 
#[1 0 114 0 1 0 114 0 2 0 114 0 3 0 114 0 4 0 114 0 5 0 114 0 6 0 114 0 7 0 114 0 9 0 114 0 10 0 114 0 11 0 114 0 12 0 114 0 13 0 114 0 14 0 114 0 15 0 114 0 16 0 114 0 17 0 114 0 18 0 114 0 19 0 114 0 21 0 114 0 38 0 114 0 51 0 114 0 52 0 114 0 53 0 114 0 56 0 114 0 58 0 114 0 64 0 114 0 66 0 114 0 67 0 114 0 68 0 114 0 69 0 114 0 71 0 114 0 72 0 114 0 73 0 114 0 78 0 114 0 80 0 114 0 81 0 114 0 82 0 114 0 84 0 114 0 85 0 114 0 92 0 114 0 93 0 114 0 94 0 114 0 95 0 114 0 100 0 114 0 101 0 114 0 102 0 114 0 104 0 114 0 105 0 114 0 108 0 114 0 111 0 114 0 114 0 114 0 118 0 114 0 122 0 114 0 133 0 114 0 134 0 114 0 135 0 114 0 139 0 114 0 140 0 114 0 141 0 114 0 145 0 114 0 146 2 113 0 149 0 114 0 150 0 114 0 228] 
#[0 2 117 0 1] 
#[0 2 121 0 1] 
#[0 2 125 0 1] 
#[0 2 129 0 1] 
#[0 0 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 2 133 0 131] 
#[0 0 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 137 0 3 2 141 0 146 2 145 0 207] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145 0 0 0 228] 
#[0 0 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 2 249 0 1] 
#[1 2 253 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 0 10 0 146 1 145 0 208 3 1 0 212] 
#[1 3 5 0 52 3 9 0 64] 
#[0 3 13 0 79] 
#[1 0 10 0 146 1 89 0 208 3 17 0 227] 
#[1 3 21 0 146 2 145 0 207] 
#[0 0 142 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 25 0 1 0 97 0 115 0 101 0 116 0 117 0 141 0 10 0 146 3 29 0 187 3 33 0 206 1 109 0 208] 
#[1 1 97 0 1 0 10 0 146 3 37 0 206 1 109 0 208] 
#[1 0 146 0 2 0 146 0 10 3 41 0 17 3 45 0 38 0 146 0 58 3 49 0 67 3 53 0 73 0 146 0 78 3 57 0 82 3 61 0 84 0 146 0 92 3 65 0 111 0 146 0 133 3 69 0 140 3 73 0 213 0 146 0 228] 
#[1 3 77 0 146 2 145 0 207] 
#[1 1 97 0 1 0 10 0 146 3 81 0 206 1 109 0 208] 
#[1 0 150 0 2 0 150 0 10 3 85 0 17 3 45 0 38 0 150 0 58 3 49 0 67 3 53 0 73 0 150 0 78 3 57 0 82 3 61 0 84 0 150 0 92 3 65 0 111 0 150 0 133 3 69 0 140 3 89 0 213 0 150 0 228] 
#[1 0 10 0 146 1 145 0 208 3 93 0 212] 
#[0 0 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 97 0 1 0 158 0 2 0 158 0 10 0 158 0 58 0 158 0 78 0 158 0 92 0 158 0 133 0 158 0 228] 
#[1 3 101 0 1 0 162 0 2 0 162 0 10 0 162 0 58 0 162 0 78 0 162 0 92 0 162 0 133 0 162 0 228] 
#[0 0 166 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 10 0 146 1 145 0 208 3 105 0 212] 
#[1 3 109 0 146 2 145 0 207] 
#[1 3 113 0 1 3 117 0 136] 
#[1 0 10 0 146 1 145 0 208 3 121 0 212] 
#[1 3 125 0 1 3 129 0 136] 
#[1 0 10 0 146 1 145 0 208 3 133 0 212] 
#[0 3 137 0 64] 
#[1 0 10 0 146 1 145 0 208 3 141 0 212] 
#[0 3 145 0 64] 
#[1 1 97 0 1 0 10 0 146 3 149 0 206 1 109 0 208] 
#[1 3 45 0 38 3 49 0 67 3 53 0 73 3 57 0 82 3 61 0 84 3 65 0 111 3 153 0 135] 
#[0 3 157 0 149] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 3 161 0 126 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 3 165 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 3 169 0 126 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 3 173 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 3 177 0 150] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 3 189 0 188 3 189 0 203 3 197 0 218 0 170 0 228] 
#[0 0 174 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[1 2 149 0 1 0 178 0 2 2 153 0 3 2 157 0 4 2 161 0 5 0 178 0 6 2 165 0 7 2 169 0 9 0 178 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 3 201 0 19 2 201 0 21 2 205 0 53 0 178 0 58 0 178 0 64 0 178 0 66 0 178 0 68 0 178 0 69 2 209 0 71 2 213 0 72 0 178 0 78 0 178 0 80 2 217 0 81 2 221 0 85 0 178 0 92 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 0 178 0 102 2 241 0 104 0 178 0 105 0 178 0 108 0 178 0 114 0 178 0 133 0 178 0 140 0 178 0 141 2 245 0 145 3 205 0 146 0 178 0 150 0 178 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 3 209 0 126 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 3 213 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 3 217 0 126 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 3 221 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 3 225 0 150] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 3 229 0 188 3 229 0 203 3 197 0 218 0 170 0 228] 
#[0 3 233 0 14] 
#[1 3 237 0 19 3 241 0 66 3 245 0 118 3 249 0 146] 
#[1 1 241 0 146 3 253 0 177 1 249 0 178] 
#[1 4 1 0 1 4 93 0 22 4 93 0 26 4 93 0 27 4 93 0 31 4 93 0 35 4 93 0 42 4 93 0 43 4 93 0 44 4 37 0 49 4 93 0 63 4 93 0 76 4 93 0 77 4 93 0 98 4 93 0 99 4 93 0 109 4 93 0 119 4 93 0 123 4 93 0 124 4 93 0 137 4 93 0 138 4 85 0 167 4 89 0 168 4 93 0 169] 
#[1 0 13 0 1 4 97 0 6 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 4 101 0 157 4 101 0 158 4 101 0 161 4 101 0 162 4 101 0 163 4 101 0 170 4 101 0 171 4 101 0 172 4 101 0 175 4 101 0 176 4 101 0 179 4 101 0 180 4 101 0 181 4 101 0 182 4 101 0 183 4 101 0 184 4 101 0 185 4 101 0 186 0 205 0 187] 
#[0 0 182 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 0 10 0 146 4 105 0 197 2 5 0 198 1 89 0 208 2 9 0 227] 
#[1 0 13 0 1 4 109 0 6 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 4 113 0 157 4 113 0 158 4 113 0 161 4 113 0 162 4 113 0 163 4 113 0 170 4 113 0 171 4 113 0 172 4 113 0 175 4 113 0 176 4 113 0 179 4 113 0 180 4 113 0 181 4 113 0 182 4 113 0 183 4 113 0 184 4 113 0 185 4 113 0 186 0 205 0 187] 
#[0 0 186 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 4 117 0 1 4 121 0 19] 
#[0 0 190 0 10 0 228] 
#[1 4 125 0 10 0 194 0 228] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 4 137 0 200] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 4 141 0 200] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 4 145 0 200] 
#[1 4 129 0 1 4 149 0 17 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 4 153 0 200] 
#[1 2 37 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 4 157 0 187 1 45 0 208 2 45 0 220 2 45 0 221 2 45 0 225 2 45 0 226 1 65 0 227] 
#[1 4 161 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 2 149 0 1 4 165 0 2 2 153 0 3 2 157 0 4 2 161 0 5 4 169 0 6 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 0 7 0 1 0 198 0 2 2 153 0 3 2 157 0 4 0 198 0 5 0 198 0 6 0 198 0 7 2 169 0 9 0 198 0 10 0 198 0 11 0 198 0 12 0 198 0 13 0 198 0 14 0 198 0 15 0 198 0 16 0 198 0 17 0 198 0 18 0 198 0 19 0 198 0 21 0 198 0 38 0 198 0 51 0 198 0 52 0 198 0 53 0 198 0 56 0 198 0 58 0 198 0 64 0 198 0 66 0 198 0 67 0 198 0 68 0 198 0 69 0 11 0 71 0 198 0 72 0 198 0 73 0 198 0 78 0 198 0 80 0 15 0 81 0 198 0 82 0 198 0 84 0 198 0 85 0 198 0 92 2 225 0 93 0 198 0 94 0 198 0 95 0 198 0 100 0 198 0 101 0 198 0 102 0 19 0 104 0 198 0 105 0 198 0 108 0 198 0 111 0 198 0 114 0 198 0 118 0 198 0 122 0 198 0 133 0 198 0 134 0 198 0 135 0 198 0 139 0 198 0 140 0 198 0 141 0 198 0 145 0 198 0 146 0 198 0 150 0 198 0 228] 
#[1 0 23 0 1 0 202 0 2 2 153 0 3 2 157 0 4 0 202 0 5 0 202 0 6 0 202 0 7 2 169 0 9 0 202 0 10 0 202 0 11 0 202 0 12 0 202 0 13 0 202 0 14 0 202 0 15 0 202 0 16 0 202 0 17 0 202 0 18 0 202 0 19 0 202 0 21 0 202 0 38 0 202 0 51 0 202 0 52 0 202 0 53 0 202 0 56 0 202 0 58 0 202 0 64 0 202 0 66 0 202 0 67 0 202 0 68 0 202 0 69 0 27 0 71 0 202 0 72 0 202 0 73 0 202 0 78 0 202 0 80 0 31 0 81 0 202 0 82 0 202 0 84 0 202 0 85 0 202 0 92 2 225 0 93 0 202 0 94 0 202 0 95 0 202 0 100 0 202 0 101 0 202 0 102 0 35 0 104 0 202 0 105 0 202 0 108 0 202 0 111 0 202 0 114 0 202 0 118 0 202 0 122 0 202 0 133 0 202 0 134 0 202 0 135 0 202 0 139 0 202 0 140 0 202 0 141 0 202 0 145 0 202 0 146 0 202 0 150 0 202 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 173 0 220 4 173 0 221 4 173 0 225 4 173 0 226 1 65 0 227] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 57 0 139 2 245 0 145 4 177 0 223 2 69 0 224] 
#[1 4 181 0 51 4 185 0 52 2 57 0 139 4 189 0 222 4 193 0 224] 
#[0 0 206 0 51 0 52 0 139] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 197 0 220 4 197 0 221 4 197 0 225 4 197 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 4 201 0 17 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 4 205 0 47 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 209 0 220 4 209 0 221 4 209 0 225 4 209 0 226 1 65 0 227] 
#[0 0 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 213 0 187] 
#[0 4 217 0 146] 
#[0 4 221 0 146] 
#[0 4 225 0 1] 
#[1 0 39 0 1 0 214 0 2 2 153 0 3 2 157 0 4 2 161 0 5 0 214 0 6 2 165 0 7 2 169 0 9 0 214 0 10 0 214 0 11 0 214 0 12 0 214 0 13 0 214 0 14 0 214 0 15 0 214 0 16 0 214 0 17 0 214 0 18 0 214 0 19 0 214 0 21 0 214 0 38 0 214 0 51 0 214 0 52 0 214 0 53 0 214 0 56 0 214 0 58 0 214 0 64 0 214 0 66 0 214 0 67 0 214 0 68 0 214 0 69 0 43 0 71 0 214 0 73 0 214 0 78 0 214 0 80 0 47 0 81 0 214 0 82 0 214 0 84 0 214 0 92 2 225 0 93 0 214 0 94 0 214 0 100 0 214 0 101 0 214 0 102 0 51 0 104 0 214 0 105 0 214 0 108 0 214 0 111 0 214 0 114 0 214 0 118 0 214 0 122 0 214 0 133 0 214 0 134 0 214 0 135 0 214 0 139 0 214 0 140 0 214 0 141 0 214 0 145 0 214 0 146 0 214 0 150 0 214 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 229 0 220 4 229 0 221 4 229 0 225 4 229 0 226 1 65 0 227] 
#[0 0 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 233 0 220 4 233 0 221 4 233 0 225 4 233 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 237 0 220 4 237 0 221 4 237 0 225 4 237 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 4 241 0 23 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 4 245 0 83 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 4 249 0 127 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 4 253 0 220 4 253 0 221 4 253 0 225 4 253 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 1 0 220 5 1 0 221 5 1 0 225 5 1 0 226 1 65 0 227] 
#[0 5 5 0 149] 
#[0 0 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 55 0 1 0 234 0 2 0 234 0 3 0 234 0 4 0 234 0 5 0 234 0 6 0 234 0 7 5 9 0 8 0 234 0 9 0 234 0 10 0 234 0 11 0 234 0 12 0 234 0 13 0 234 0 14 0 234 0 15 0 234 0 16 0 234 0 17 0 234 0 18 0 234 0 19 0 234 0 21 0 234 0 38 0 234 0 51 0 234 0 52 0 234 0 53 0 234 0 56 0 234 0 58 0 234 0 64 0 234 0 66 0 234 0 67 0 234 0 68 0 234 0 69 0 234 0 71 0 234 0 72 0 234 0 73 0 234 0 78 0 234 0 80 0 234 0 81 0 234 0 82 0 234 0 84 0 234 0 85 0 234 0 92 0 234 0 93 0 234 0 94 0 234 0 95 0 234 0 100 0 234 0 101 0 234 0 102 0 234 0 104 0 234 0 105 0 234 0 108 0 234 0 111 0 234 0 114 0 234 0 118 0 234 0 122 0 234 0 133 0 234 0 134 0 234 0 135 0 234 0 139 0 234 0 140 0 234 0 141 0 234 0 145 0 234 0 146 0 234 0 150 0 234 0 228] 
#[0 0 238 0 3 0 146] 
#[1 4 93 0 22 4 93 0 26 4 93 0 27 5 13 0 29 4 93 0 31 4 93 0 35 4 93 0 42 4 93 0 43 4 93 0 44 4 37 0 49 4 93 0 63 5 17 0 65 4 93 0 76 4 93 0 77 4 93 0 98 4 93 0 99 4 93 0 109 4 93 0 119 4 93 0 123 4 93 0 124 5 21 0 125 4 93 0 137 4 93 0 138 5 25 0 167 4 89 0 168 4 93 0 169] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 29 0 220 5 29 0 221 5 29 0 225 5 29 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 33 0 220 5 33 0 221 5 33 0 225 5 33 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 37 0 220 5 37 0 221 5 37 0 225 5 37 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 41 0 220 5 41 0 221 5 41 0 225 5 41 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 45 0 220 5 45 0 221 5 45 0 225 5 45 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 49 0 220 5 49 0 221 5 49 0 225 5 49 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 53 0 220 5 53 0 221 5 53 0 225 5 53 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 57 0 220 5 57 0 221 5 57 0 225 5 57 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 61 0 220 5 61 0 221 5 61 0 225 5 61 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 65 0 220 5 65 0 221 5 65 0 225 5 65 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 69 0 220 5 69 0 221 5 69 0 225 5 69 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 73 0 220 5 73 0 221 5 73 0 225 5 73 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 77 0 220 5 77 0 221 5 77 0 225 5 77 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 81 0 220 5 81 0 221 5 81 0 225 5 81 0 226 1 65 0 227] 
#[0 5 85 0 97] 
#[1 5 89 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 93 0 220 5 93 0 221 5 93 0 225 5 93 0 226 1 65 0 227] 
#[1 5 97 0 95 5 101 0 96] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 105 0 220 5 105 0 221 5 105 0 225 5 105 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 109 0 220 5 109 0 221 5 109 0 225 5 109 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 113 0 220 5 113 0 221 5 113 0 225 5 113 0 226 1 65 0 227] 
#[1 5 117 0 21 5 121 0 72 5 125 0 85] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 129 0 220 5 129 0 221 5 129 0 225 5 129 0 226 1 65 0 227] 
#[0 5 133 0 1] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 137 0 220 5 137 0 221 5 137 0 225 5 137 0 226 1 65 0 227] 
#[1 0 209 0 1 5 141 0 2 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 145 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 5 149 0 58 5 153 0 78 5 157 0 92 5 161 0 133] 
#[0 5 165 0 55] 
#[0 0 242 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 13 0 1 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 5 169 0 157 5 169 0 158 5 169 0 161 5 169 0 162 5 169 0 163 5 169 0 170 5 169 0 171 5 169 0 172 5 169 0 175 5 169 0 176 5 169 0 179 5 169 0 180 5 169 0 181 5 169 0 182 5 169 0 183 5 169 0 184 5 169 0 185 5 169 0 186 0 205 0 187] 
#[0 5 173 0 150] 
#[1 5 177 0 1 0 246 0 19 5 181 0 164] 
#[1 0 230 0 1 0 230 0 2 5 9 0 8 0 230 0 10 0 230 0 14 0 230 0 19 0 230 0 22 0 230 0 26 0 230 0 27 0 230 0 31 0 230 0 35 0 230 0 42 0 230 0 43 0 230 0 44 0 230 0 49 0 230 0 58 0 230 0 63 0 230 0 76 0 230 0 77 0 230 0 78 0 230 0 92 0 230 0 98 0 230 0 99 0 230 0 109 0 230 0 119 0 230 0 123 0 230 0 124 0 230 0 133 0 230 0 137 0 230 0 138 0 230 0 228] 
#[1 3 25 0 1 0 97 0 115 0 101 0 116 0 117 0 141 0 10 0 146 5 185 0 187 3 33 0 206 1 109 0 208] 
#[1 5 189 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 5 193 0 38 3 49 0 67 5 197 0 73 5 201 0 82 5 205 0 84 5 209 0 111] 
#[1 0 250 0 2 0 250 0 10 5 213 0 17 3 45 0 38 0 250 0 58 3 49 0 67 3 53 0 73 0 250 0 78 3 57 0 82 3 61 0 84 0 250 0 92 3 65 0 111 0 250 0 133 3 69 0 140 5 217 0 213 0 250 0 228] 
#[0 0 254 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 221 0 82] 
#[1 1 2 0 82 5 229 0 103 5 229 0 209] 
#[0 5 233 0 82] 
#[1 1 97 0 1 0 10 0 146 5 237 0 206 1 109 0 208] 
#[1 1 2 0 82 5 241 0 103 5 241 0 209] 
#[1 1 2 0 82 5 245 0 103 5 245 0 209] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 5 249 0 220 5 249 0 221 5 249 0 225 5 249 0 226 1 65 0 227] 
#[0 1 6 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 10 0 2 1 10 0 6 5 9 0 8 1 10 0 10 1 10 0 17 5 253 0 19 1 10 0 38 1 10 0 58 1 10 0 64 1 10 0 67 1 10 0 68 1 10 0 69 1 10 0 73 1 10 0 78 1 10 0 82 1 10 0 84 1 10 0 92 1 10 0 100 1 10 0 102 1 10 0 105 1 10 0 108 1 10 0 111 1 10 0 118 1 10 0 133 1 10 0 135 1 10 0 140 6 1 0 146 1 10 0 150 1 10 0 228] 
#[1 1 14 0 2 1 14 0 10 6 5 0 17 3 45 0 38 1 14 0 58 3 49 0 67 3 53 0 73 1 14 0 78 3 57 0 82 3 61 0 84 1 14 0 92 3 65 0 111 1 14 0 133 3 69 0 140 6 9 0 213 1 14 0 228] 
#[0 1 18 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 22 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 26 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 13 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 17 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 6 21 0 1 0 97 0 115 0 101 0 116 6 25 0 136 0 117 0 141 6 29 0 187] 
#[1 1 30 0 1 1 30 0 2 5 9 0 8 1 30 0 10 1 30 0 19 1 30 0 55 1 30 0 58 1 30 0 64 1 30 0 66 1 30 0 78 1 30 0 92 1 30 0 115 1 30 0 116 1 30 0 118 1 30 0 133 1 30 0 136 1 30 0 141 1 30 0 146 1 30 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 33 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 6 37 0 1] 
#[1 6 41 0 1 0 97 0 115 0 101 0 116 6 45 0 136 0 117 0 141 6 49 0 187] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 53 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 6 57 0 1] 
#[0 6 61 0 64] 
#[0 6 65 0 146] 
#[0 6 69 0 64] 
#[0 6 73 0 146] 
#[1 3 45 0 38 3 49 0 67 3 53 0 73 3 57 0 82 3 61 0 84 3 65 0 111 6 77 0 135] 
#[1 1 97 0 1 0 10 0 146 6 81 0 206 1 109 0 208] 
#[0 6 85 0 66] 
#[0 6 89 0 150] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 6 93 0 188 6 93 0 203 3 197 0 218 0 170 0 228] 
#[0 6 97 0 150] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 6 101 0 188 6 101 0 203 3 197 0 218 0 170 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 105 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 1 34 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 42 0 61 0 62 0 79 0 95 0 96 0 120 0 123 0 124 0 128 0 129 0 130 0 144 0 146 0 147 0 148 0 149 0 150] 
#[0 6 109 0 1] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 6 121 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[0 1 46 0 2 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 6 133 0 6 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 137 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 6 141 0 146] 
#[0 1 50 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[0 6 145 0 150] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 6 149 0 188 6 149 0 203 3 197 0 218 0 170 0 228] 
#[0 6 153 0 150] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 6 157 0 188 6 157 0 203 3 197 0 218 0 170 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 161 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 6 165 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 169 0 220 6 169 0 221 6 169 0 225 6 169 0 226 1 65 0 227] 
#[0 6 173 0 146] 
#[1 1 97 0 1 0 10 0 146 6 177 0 205 6 181 0 206 1 109 0 208] 
#[1 0 10 0 146 6 185 0 173 6 189 0 174 6 193 0 208 6 197 0 226] 
#[0 6 201 0 118] 
#[1 6 205 0 2 4 97 0 6] 
#[1 4 93 0 22 4 93 0 26 4 93 0 27 4 93 0 31 4 93 0 35 4 93 0 42 4 93 0 43 4 93 0 44 4 37 0 49 4 93 0 63 4 93 0 76 4 93 0 77 4 93 0 98 4 93 0 99 4 93 0 109 4 93 0 119 4 93 0 123 4 93 0 124 4 93 0 137 4 93 0 138 6 209 0 167 4 89 0 168 4 93 0 169] 
#[0 1 54 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 58 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 62 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 66 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 70 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 74 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 78 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 82 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 6 213 0 107] 
#[0 1 86 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 90 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 94 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 98 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 102 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 106 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 110 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 114 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 118 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 122 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 126 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 130 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 0 63 0 1 1 134 0 2 1 134 0 6 1 134 0 20 1 134 0 24 6 221 0 32 1 134 0 33 1 134 0 34 1 134 0 37 1 134 0 41 1 134 0 45 1 134 0 46 1 134 0 50 1 134 0 52 1 134 0 57 1 134 0 59 1 134 0 60 1 134 0 65 1 134 0 70 1 134 0 74 1 134 0 75 1 134 0 87 1 134 0 88 1 134 0 91 1 134 0 112 1 134 0 115 1 134 0 116 1 134 0 118 1 134 0 134 1 134 0 135 1 134 0 141] 
#[0 1 138 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 1 241 0 146 6 225 0 178] 
#[0 1 142 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 13 0 1 4 109 0 6 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 6 229 0 157 6 229 0 158 6 229 0 161 6 229 0 162 6 229 0 163 6 229 0 170 6 229 0 171 6 229 0 172 6 229 0 175 6 229 0 176 6 229 0 179 6 229 0 180 6 229 0 181 6 229 0 182 6 229 0 183 6 229 0 184 6 229 0 185 6 229 0 186 0 205 0 187] 
#[1 0 10 0 146 6 233 0 198 1 89 0 208 2 9 0 227] 
#[0 1 146 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 6 237 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 6 241 0 1] 
#[1 0 13 0 1 0 190 0 2 0 190 0 10 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 6 245 0 157 6 245 0 158 6 245 0 161 6 245 0 162 6 245 0 163 6 245 0 170 6 245 0 171 6 245 0 172 6 245 0 175 6 245 0 176 6 245 0 179 6 245 0 180 6 245 0 181 6 245 0 182 6 245 0 183 6 245 0 184 6 245 0 185 6 245 0 186 0 205 0 187 0 190 0 228] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 6 249 0 187] 
#[1 1 150 0 2 1 150 0 10 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133 1 150 0 228] 
#[0 1 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 158 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 162 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 6 253 0 200] 
#[0 1 166 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 7 1 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[0 1 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 1 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 5 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 7 9 0 122 2 245 0 145] 
#[1 4 181 0 51 7 13 0 52 2 57 0 139 7 17 0 222 4 193 0 224] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 21 0 220 7 21 0 221 7 21 0 225 7 21 0 226 1 65 0 227] 
#[0 1 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 7 25 0 52] 
#[0 1 182 0 51 0 52 0 139] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 7 29 0 19 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 33 0 220 7 33 0 221 7 33 0 225 7 33 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 37 0 220 7 37 0 221 7 37 0 225 7 37 0 226 1 65 0 227] 
#[1 2 149 0 1 7 41 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 7 45 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[0 7 49 0 66] 
#[0 1 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 7 53 0 187] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 7 57 0 66 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 7 61 0 135 2 245 0 145] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 7 65 0 135 2 245 0 145] 
#[1 7 69 0 66 7 73 0 149] 
#[1 7 77 0 66 7 81 0 149] 
#[1 7 85 0 66 7 89 0 149] 
#[1 2 149 0 1 7 93 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 7 97 0 102 2 241 0 104 2 245 0 145 7 101 0 216] 
#[0 1 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 1 194 0 3 0 146] 
#[0 7 105 0 2] 
#[0 7 109 0 149] 
#[0 7 113 0 149] 
#[1 7 117 0 2 7 121 0 6] 
#[1 0 67 0 1 1 198 0 2 1 198 0 3 2 157 0 4 1 198 0 5 1 198 0 6 1 198 0 7 1 198 0 9 1 198 0 10 1 198 0 11 1 198 0 12 1 198 0 13 1 198 0 14 1 198 0 15 1 198 0 16 1 198 0 17 1 198 0 18 1 198 0 19 1 198 0 21 1 198 0 38 1 198 0 51 1 198 0 52 1 198 0 53 1 198 0 56 1 198 0 58 1 198 0 64 1 198 0 66 1 198 0 67 1 198 0 68 1 198 0 69 0 71 0 71 1 198 0 72 1 198 0 73 1 198 0 78 1 198 0 80 0 75 0 81 1 198 0 82 1 198 0 84 1 198 0 85 1 198 0 92 1 198 0 93 1 198 0 94 1 198 0 95 1 198 0 100 1 198 0 101 1 198 0 102 0 79 0 104 1 198 0 105 1 198 0 108 1 198 0 111 1 198 0 114 1 198 0 118 1 198 0 122 1 198 0 133 1 198 0 134 1 198 0 135 1 198 0 139 1 198 0 140 1 198 0 141 1 198 0 145 1 198 0 146 1 198 0 150 1 198 0 228] 
#[1 0 83 0 1 1 202 0 2 1 202 0 3 2 157 0 4 1 202 0 5 1 202 0 6 1 202 0 7 1 202 0 9 1 202 0 10 1 202 0 11 1 202 0 12 1 202 0 13 1 202 0 14 1 202 0 15 1 202 0 16 1 202 0 17 1 202 0 18 1 202 0 19 1 202 0 21 1 202 0 38 1 202 0 51 1 202 0 52 1 202 0 53 1 202 0 56 1 202 0 58 1 202 0 64 1 202 0 66 1 202 0 67 1 202 0 68 1 202 0 69 0 87 0 71 1 202 0 72 1 202 0 73 1 202 0 78 1 202 0 80 0 91 0 81 1 202 0 82 1 202 0 84 1 202 0 85 1 202 0 92 1 202 0 93 1 202 0 94 1 202 0 95 1 202 0 100 1 202 0 101 1 202 0 102 0 95 0 104 1 202 0 105 1 202 0 108 1 202 0 111 1 202 0 114 1 202 0 118 1 202 0 122 1 202 0 133 1 202 0 134 1 202 0 135 1 202 0 139 1 202 0 140 1 202 0 141 1 202 0 145 1 202 0 146 1 202 0 150 1 202 0 228] 
#[1 0 99 0 1 1 206 0 2 2 153 0 3 2 157 0 4 1 206 0 5 1 206 0 6 1 206 0 7 2 169 0 9 1 206 0 10 1 206 0 11 1 206 0 12 1 206 0 13 1 206 0 14 1 206 0 15 1 206 0 16 1 206 0 17 1 206 0 18 1 206 0 19 1 206 0 21 1 206 0 38 1 206 0 51 1 206 0 52 1 206 0 53 1 206 0 56 1 206 0 58 1 206 0 64 1 206 0 66 1 206 0 67 1 206 0 68 1 206 0 69 0 103 0 71 1 206 0 72 1 206 0 73 1 206 0 78 1 206 0 80 0 107 0 81 1 206 0 82 1 206 0 84 1 206 0 85 1 206 0 92 2 225 0 93 1 206 0 94 1 206 0 95 1 206 0 100 1 206 0 101 1 206 0 102 0 111 0 104 1 206 0 105 1 206 0 108 1 206 0 111 1 206 0 114 1 206 0 118 1 206 0 122 1 206 0 133 1 206 0 134 1 206 0 135 1 206 0 139 1 206 0 140 1 206 0 141 1 206 0 145 1 206 0 146 1 206 0 150 1 206 0 228] 
#[1 0 115 0 1 1 210 0 2 2 153 0 3 2 157 0 4 1 210 0 5 1 210 0 6 1 210 0 7 2 169 0 9 1 210 0 10 1 210 0 11 1 210 0 12 1 210 0 13 1 210 0 14 1 210 0 15 1 210 0 16 1 210 0 17 1 210 0 18 1 210 0 19 1 210 0 21 1 210 0 38 1 210 0 51 1 210 0 52 1 210 0 53 1 210 0 56 1 210 0 58 1 210 0 64 1 210 0 66 1 210 0 67 1 210 0 68 1 210 0 69 0 119 0 71 1 210 0 72 1 210 0 73 1 210 0 78 1 210 0 80 0 123 0 81 1 210 0 82 1 210 0 84 1 210 0 85 1 210 0 92 2 225 0 93 1 210 0 94 1 210 0 95 1 210 0 100 1 210 0 101 1 210 0 102 0 127 0 104 1 210 0 105 1 210 0 108 1 210 0 111 1 210 0 114 1 210 0 118 1 210 0 122 1 210 0 133 1 210 0 134 1 210 0 135 1 210 0 139 1 210 0 140 1 210 0 141 1 210 0 145 1 210 0 146 1 210 0 150 1 210 0 228] 
#[1 0 131 0 1 1 214 0 2 1 214 0 3 2 157 0 4 1 214 0 5 1 214 0 6 1 214 0 7 1 214 0 9 1 214 0 10 1 214 0 11 1 214 0 12 1 214 0 13 1 214 0 14 1 214 0 15 1 214 0 16 1 214 0 17 1 214 0 18 1 214 0 19 1 214 0 21 1 214 0 38 1 214 0 51 1 214 0 52 1 214 0 53 1 214 0 56 1 214 0 58 1 214 0 64 1 214 0 66 1 214 0 67 1 214 0 68 1 214 0 69 0 135 0 71 1 214 0 72 1 214 0 73 1 214 0 78 1 214 0 80 0 139 0 81 1 214 0 82 1 214 0 84 1 214 0 85 1 214 0 92 1 214 0 93 1 214 0 94 1 214 0 95 1 214 0 100 1 214 0 101 1 214 0 102 0 143 0 104 1 214 0 105 1 214 0 108 1 214 0 111 1 214 0 114 1 214 0 118 1 214 0 122 1 214 0 133 1 214 0 134 1 214 0 135 1 214 0 139 1 214 0 140 1 214 0 141 1 214 0 145 1 214 0 146 1 214 0 150 1 214 0 228] 
#[1 0 147 0 1 1 218 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 218 0 6 2 165 0 7 2 169 0 9 1 218 0 10 1 218 0 17 1 218 0 18 1 218 0 19 1 218 0 38 1 218 0 51 1 218 0 52 1 218 0 56 1 218 0 58 1 218 0 64 1 218 0 66 1 218 0 67 1 218 0 68 1 218 0 69 0 151 0 71 2 213 0 72 1 218 0 73 1 218 0 78 1 218 0 80 0 155 0 81 1 218 0 82 1 218 0 84 2 221 0 85 1 218 0 92 2 225 0 93 2 233 0 95 1 218 0 100 1 218 0 101 1 218 0 102 0 159 0 104 1 218 0 105 1 218 0 108 1 218 0 111 1 218 0 114 1 218 0 118 1 218 0 122 1 218 0 133 1 218 0 134 1 218 0 135 1 218 0 139 1 218 0 140 1 218 0 141 2 245 0 145 1 218 0 146 1 218 0 150 1 218 0 228] 
#[1 0 163 0 1 1 222 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 222 0 6 2 165 0 7 2 169 0 9 1 222 0 10 1 222 0 17 1 222 0 18 1 222 0 19 1 222 0 38 1 222 0 51 1 222 0 52 1 222 0 56 1 222 0 58 1 222 0 64 1 222 0 66 1 222 0 67 1 222 0 68 1 222 0 69 0 167 0 71 2 213 0 72 1 222 0 73 1 222 0 78 1 222 0 80 0 171 0 81 1 222 0 82 1 222 0 84 2 221 0 85 1 222 0 92 2 225 0 93 2 233 0 95 1 222 0 100 1 222 0 101 1 222 0 102 0 175 0 104 1 222 0 105 1 222 0 108 1 222 0 111 1 222 0 114 1 222 0 118 1 222 0 122 1 222 0 133 1 222 0 134 1 222 0 135 1 222 0 139 1 222 0 140 1 222 0 141 2 245 0 145 1 222 0 146 1 222 0 150 1 222 0 228] 
#[1 0 179 0 1 1 226 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 226 0 6 2 165 0 7 2 169 0 9 1 226 0 10 1 226 0 17 1 226 0 18 1 226 0 19 1 226 0 38 1 226 0 51 1 226 0 52 1 226 0 56 1 226 0 58 1 226 0 64 1 226 0 66 1 226 0 67 1 226 0 68 1 226 0 69 0 183 0 71 2 213 0 72 1 226 0 73 1 226 0 78 1 226 0 80 0 187 0 81 1 226 0 82 1 226 0 84 2 221 0 85 1 226 0 92 2 225 0 93 2 233 0 95 1 226 0 100 1 226 0 101 1 226 0 102 0 191 0 104 1 226 0 105 1 226 0 108 1 226 0 111 1 226 0 114 1 226 0 118 1 226 0 122 1 226 0 133 1 226 0 134 1 226 0 135 1 226 0 139 1 226 0 140 1 226 0 141 2 245 0 145 1 226 0 146 1 226 0 150 1 226 0 228] 
#[1 0 195 0 1 1 230 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 230 0 6 2 165 0 7 2 169 0 9 1 230 0 10 1 230 0 17 1 230 0 18 1 230 0 19 1 230 0 38 1 230 0 51 1 230 0 52 1 230 0 56 1 230 0 58 1 230 0 64 1 230 0 66 1 230 0 67 1 230 0 68 1 230 0 69 0 199 0 71 2 213 0 72 1 230 0 73 1 230 0 78 1 230 0 80 0 203 0 81 1 230 0 82 1 230 0 84 2 221 0 85 1 230 0 92 2 225 0 93 2 233 0 95 1 230 0 100 1 230 0 101 1 230 0 102 0 207 0 104 1 230 0 105 1 230 0 108 1 230 0 111 1 230 0 114 1 230 0 118 1 230 0 122 1 230 0 133 1 230 0 134 1 230 0 135 1 230 0 139 1 230 0 140 1 230 0 141 2 245 0 145 1 230 0 146 1 230 0 150 1 230 0 228] 
#[1 0 211 0 1 1 234 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 234 0 6 2 165 0 7 2 169 0 9 1 234 0 10 1 234 0 17 1 234 0 18 1 234 0 19 1 234 0 38 1 234 0 51 1 234 0 52 1 234 0 56 1 234 0 58 1 234 0 64 1 234 0 66 1 234 0 67 1 234 0 68 1 234 0 69 0 215 0 71 2 213 0 72 1 234 0 73 1 234 0 78 1 234 0 80 0 219 0 81 1 234 0 82 1 234 0 84 2 221 0 85 1 234 0 92 2 225 0 93 2 233 0 95 1 234 0 100 1 234 0 101 1 234 0 102 0 223 0 104 1 234 0 105 1 234 0 108 1 234 0 111 1 234 0 114 1 234 0 118 1 234 0 122 1 234 0 133 1 234 0 134 1 234 0 135 1 234 0 139 1 234 0 140 1 234 0 141 2 245 0 145 1 234 0 146 1 234 0 150 1 234 0 228] 
#[1 0 227 0 1 1 238 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 238 0 6 2 165 0 7 2 169 0 9 1 238 0 10 1 238 0 17 1 238 0 18 1 238 0 19 1 238 0 38 1 238 0 51 1 238 0 52 1 238 0 56 1 238 0 58 1 238 0 64 1 238 0 66 1 238 0 67 1 238 0 68 1 238 0 69 0 231 0 71 2 213 0 72 1 238 0 73 1 238 0 78 1 238 0 80 0 235 0 81 1 238 0 82 1 238 0 84 2 221 0 85 1 238 0 92 2 225 0 93 2 233 0 95 1 238 0 100 1 238 0 101 1 238 0 102 0 239 0 104 1 238 0 105 1 238 0 108 1 238 0 111 1 238 0 114 1 238 0 118 1 238 0 122 1 238 0 133 1 238 0 134 1 238 0 135 1 238 0 139 1 238 0 140 1 238 0 141 2 245 0 145 1 238 0 146 1 238 0 150 1 238 0 228] 
#[1 0 243 0 1 1 242 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 242 0 6 2 165 0 7 2 169 0 9 1 242 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 1 242 0 17 1 242 0 18 1 242 0 19 2 201 0 21 1 242 0 38 1 242 0 51 1 242 0 52 2 205 0 53 1 242 0 56 1 242 0 58 1 242 0 64 1 242 0 66 1 242 0 67 1 242 0 68 1 242 0 69 0 247 0 71 2 213 0 72 1 242 0 73 1 242 0 78 1 242 0 80 0 251 0 81 1 242 0 82 1 242 0 84 2 221 0 85 1 242 0 92 2 225 0 93 2 229 0 94 2 233 0 95 1 242 0 100 1 242 0 101 1 242 0 102 0 255 0 104 1 242 0 105 1 242 0 108 1 242 0 111 1 242 0 114 1 242 0 118 1 242 0 122 1 242 0 133 1 242 0 134 1 242 0 135 1 242 0 139 1 242 0 140 1 242 0 141 2 245 0 145 1 242 0 146 1 242 0 150 1 242 0 228] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 7 125 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 1 3 0 1 1 246 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 246 0 6 2 165 0 7 2 169 0 9 1 246 0 10 1 246 0 17 1 246 0 18 1 246 0 19 1 246 0 38 1 246 0 51 1 246 0 52 1 246 0 56 1 246 0 58 1 246 0 64 1 246 0 66 1 246 0 67 1 246 0 68 1 246 0 69 1 7 0 71 2 213 0 72 1 246 0 73 1 246 0 78 1 246 0 80 1 11 0 81 1 246 0 82 1 246 0 84 2 221 0 85 1 246 0 92 2 225 0 93 2 233 0 95 1 246 0 100 1 246 0 101 1 246 0 102 1 15 0 104 1 246 0 105 1 246 0 108 1 246 0 111 1 246 0 114 1 246 0 118 1 246 0 122 1 246 0 133 1 246 0 134 1 246 0 135 1 246 0 139 1 246 0 140 1 246 0 141 2 245 0 145 1 246 0 146 1 246 0 150 1 246 0 228] 
#[0 1 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 37 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 7 129 0 187 1 45 0 208 7 133 0 220 7 133 0 221 7 133 0 225 7 133 0 226 1 65 0 227] 
#[1 1 19 0 1 1 254 0 2 2 153 0 3 2 157 0 4 2 161 0 5 1 254 0 6 2 165 0 7 2 169 0 9 1 254 0 10 1 254 0 11 1 254 0 12 1 254 0 13 1 254 0 14 1 254 0 15 1 254 0 16 1 254 0 17 1 254 0 18 1 254 0 19 1 254 0 21 1 254 0 38 1 254 0 51 1 254 0 52 1 254 0 53 1 254 0 56 1 254 0 58 1 254 0 64 1 254 0 66 1 254 0 67 1 254 0 68 1 254 0 69 1 23 0 71 1 254 0 73 1 254 0 78 1 254 0 80 1 27 0 81 1 254 0 82 1 254 0 84 1 254 0 92 2 225 0 93 1 254 0 94 1 254 0 100 1 254 0 101 1 254 0 102 1 31 0 104 1 254 0 105 1 254 0 108 1 254 0 111 1 254 0 114 1 254 0 118 1 254 0 122 1 254 0 133 1 254 0 134 1 254 0 135 1 254 0 139 1 254 0 140 1 254 0 141 1 254 0 145 1 254 0 146 1 254 0 150 1 254 0 228] 
#[0 7 137 0 96] 
#[0 2 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 35 0 1 2 6 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 6 0 6 2 165 0 7 2 169 0 9 2 6 0 10 2 6 0 11 2 6 0 12 2 6 0 13 2 6 0 14 2 6 0 15 2 6 0 16 2 6 0 17 2 6 0 18 2 6 0 19 2 6 0 21 2 6 0 38 2 6 0 51 2 6 0 52 2 6 0 53 1 39 0 56 2 6 0 58 2 6 0 64 2 6 0 66 2 6 0 67 2 6 0 68 2 6 0 69 1 43 0 71 2 6 0 73 2 6 0 78 2 6 0 80 1 47 0 81 2 6 0 82 2 6 0 84 2 6 0 92 2 225 0 93 2 6 0 94 2 6 0 100 2 6 0 101 2 6 0 102 1 51 0 104 2 6 0 105 2 6 0 108 2 6 0 111 2 6 0 114 2 6 0 118 2 6 0 122 2 6 0 133 2 6 0 134 2 6 0 135 2 6 0 139 2 6 0 140 2 6 0 141 2 6 0 145 2 6 0 146 2 6 0 150 2 6 0 228] 
#[1 1 55 0 1 2 10 0 2 2 10 0 3 2 157 0 4 2 10 0 5 2 10 0 6 2 10 0 7 2 10 0 9 2 10 0 10 2 10 0 11 2 10 0 12 2 10 0 13 2 10 0 14 2 10 0 15 2 10 0 16 2 10 0 17 2 10 0 18 2 10 0 19 2 10 0 21 2 10 0 38 2 10 0 51 2 10 0 52 2 10 0 53 2 10 0 56 2 10 0 58 2 10 0 64 2 10 0 66 2 10 0 67 2 10 0 68 2 10 0 69 1 59 0 71 2 10 0 72 2 10 0 73 2 10 0 78 2 10 0 80 1 63 0 81 2 10 0 82 2 10 0 84 2 10 0 85 2 10 0 92 2 10 0 93 2 10 0 94 2 10 0 95 2 10 0 100 2 10 0 101 2 10 0 102 1 67 0 104 2 10 0 105 2 10 0 108 2 10 0 111 2 10 0 114 2 10 0 118 2 10 0 122 2 10 0 133 2 10 0 134 2 10 0 135 2 10 0 139 2 10 0 140 2 10 0 141 2 10 0 145 2 10 0 146 2 10 0 150 2 10 0 228] 
#[1 1 71 0 1 2 14 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 14 0 6 2 165 0 7 2 169 0 9 2 14 0 10 2 14 0 17 2 14 0 18 2 14 0 19 2 14 0 38 2 14 0 51 2 14 0 52 2 14 0 56 2 14 0 58 2 14 0 64 2 14 0 66 2 14 0 67 2 14 0 68 2 14 0 69 1 75 0 71 2 213 0 72 2 14 0 73 2 14 0 78 2 14 0 80 1 79 0 81 2 14 0 82 2 14 0 84 2 221 0 85 2 14 0 92 2 225 0 93 2 233 0 95 2 14 0 100 2 14 0 101 2 14 0 102 1 83 0 104 2 14 0 105 2 14 0 108 2 14 0 111 2 14 0 114 2 14 0 118 2 14 0 122 2 14 0 133 2 14 0 134 2 14 0 135 2 14 0 139 2 14 0 140 2 14 0 141 2 245 0 145 2 14 0 146 2 14 0 150 2 14 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 145 0 220 7 145 0 221 7 145 0 225 7 145 0 226 1 65 0 227] 
#[1 7 149 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 153 0 220 7 153 0 221 7 153 0 225 7 153 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 157 0 220 7 157 0 221 7 157 0 225 7 157 0 226 1 65 0 227] 
#[1 1 87 0 1 2 18 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 18 0 6 2 165 0 7 2 169 0 9 2 18 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 18 0 17 2 197 0 18 2 18 0 19 2 201 0 21 2 18 0 38 2 18 0 51 2 18 0 52 2 205 0 53 2 18 0 56 2 18 0 58 2 18 0 64 2 18 0 66 2 18 0 67 2 18 0 68 2 18 0 69 1 91 0 71 2 213 0 72 2 18 0 73 2 18 0 78 2 18 0 80 1 95 0 81 2 18 0 82 2 18 0 84 2 221 0 85 2 18 0 92 2 225 0 93 2 229 0 94 2 233 0 95 2 18 0 100 2 18 0 101 2 18 0 102 1 99 0 104 2 18 0 105 2 18 0 108 2 18 0 111 2 18 0 114 2 18 0 118 2 18 0 122 2 18 0 133 2 18 0 134 2 18 0 135 2 18 0 139 2 18 0 140 2 18 0 141 2 245 0 145 2 18 0 146 2 18 0 150 2 18 0 228] 
#[1 7 161 0 2 7 97 0 102 7 165 0 105 7 169 0 114 7 173 0 202 7 177 0 216] 
#[1 1 103 0 1 2 22 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 22 0 6 2 165 0 7 2 169 0 9 2 22 0 10 2 22 0 11 2 22 0 12 2 22 0 13 2 22 0 14 2 22 0 15 2 22 0 16 2 22 0 17 2 22 0 18 2 22 0 19 2 22 0 21 2 22 0 38 2 22 0 51 2 22 0 52 2 22 0 53 2 22 0 56 2 22 0 58 2 22 0 64 2 22 0 66 2 22 0 67 2 22 0 68 2 22 0 69 1 107 0 71 2 213 0 72 2 22 0 73 2 22 0 78 2 22 0 80 1 111 0 81 2 22 0 82 2 22 0 84 2 221 0 85 2 22 0 92 2 225 0 93 2 22 0 94 2 233 0 95 2 22 0 100 2 22 0 101 2 22 0 102 1 115 0 104 2 22 0 105 2 22 0 108 2 22 0 111 2 22 0 114 2 22 0 118 2 22 0 122 2 22 0 133 2 22 0 134 2 22 0 135 2 22 0 139 2 22 0 140 2 22 0 141 2 22 0 145 2 22 0 146 2 22 0 150 2 22 0 228] 
#[0 2 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 7 181 0 2 3 181 0 6 3 197 0 218] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 7 185 0 200] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 7 189 0 200] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 7 193 0 200] 
#[1 4 129 0 1 7 197 0 17 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 7 201 0 200] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 7 205 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 2 30 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 34 0 2 2 34 0 10 7 209 0 52 2 34 0 58 2 34 0 78 2 34 0 92 2 34 0 133 2 34 0 228] 
#[1 0 10 0 146 7 213 0 165 7 217 0 166 1 89 0 208 7 221 0 227] 
#[0 7 225 0 19] 
#[1 7 229 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 2 38 0 2 2 38 0 6 2 38 0 10 2 38 0 17 7 233 0 19 2 38 0 38 2 38 0 58 2 38 0 64 2 38 0 67 2 38 0 68 2 38 0 69 2 38 0 73 2 38 0 78 2 38 0 82 2 38 0 84 2 38 0 92 2 38 0 100 2 38 0 102 2 38 0 105 2 38 0 108 2 38 0 111 2 38 0 118 2 38 0 133 2 38 0 135 2 38 0 140 7 237 0 146 2 38 0 150 2 38 0 228] 
#[0 7 241 0 82] 
#[0 7 245 0 82] 
#[1 1 97 0 1 0 10 0 146 7 249 0 206 1 109 0 208] 
#[1 1 2 0 82 7 253 0 103 7 253 0 209] 
#[1 1 2 0 82 8 1 0 103 8 1 0 209] 
#[0 2 42 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 46 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 97 0 1 0 10 0 146 8 5 0 206 1 109 0 208] 
#[0 2 50 0 82] 
#[0 8 9 0 82] 
#[1 1 97 0 1 0 10 0 146 8 13 0 206 1 109 0 208] 
#[1 2 54 0 2 2 54 0 6 2 54 0 10 2 54 0 17 1 119 0 38 2 54 0 58 2 54 0 64 1 123 0 67 2 54 0 68 2 54 0 69 1 127 0 73 2 54 0 78 1 131 0 82 1 135 0 84 2 54 0 92 1 139 0 100 2 54 0 102 2 54 0 105 2 54 0 108 1 143 0 111 2 54 0 118 2 54 0 133 2 54 0 135 2 54 0 140 2 54 0 150 8 21 0 210 8 25 0 211 2 54 0 228] 
#[0 8 29 0 82] 
#[0 8 33 0 82] 
#[1 2 149 0 1 2 58 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 58 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 58 0 51 2 205 0 53 2 58 0 58 2 58 0 64 2 58 0 68 2 58 0 69 2 209 0 71 2 213 0 72 2 58 0 78 2 217 0 81 2 221 0 85 2 58 0 92 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 58 0 102 2 241 0 104 2 58 0 105 2 58 0 108 2 58 0 133 2 58 0 140 2 245 0 145 2 58 0 150 2 58 0 228] 
#[0 8 37 0 146] 
#[0 2 62 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 2 66 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 70 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 8 41 0 2 3 181 0 6 3 197 0 218] 
#[1 8 45 0 2 3 181 0 6 3 197 0 218] 
#[1 2 37 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 69 0 187 1 45 0 208 8 49 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 8 53 0 1] 
#[1 2 74 0 2 2 74 0 10 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133 2 74 0 228] 
#[1 8 57 0 2 3 181 0 6 3 197 0 218] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 61 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 2 37 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 69 0 187 1 45 0 208 8 65 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 8 69 0 1] 
#[1 2 78 0 2 2 78 0 10 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133 2 78 0 228] 
#[1 8 73 0 2 3 181 0 6 3 197 0 218] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 77 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 8 81 0 146] 
#[1 0 13 0 1 2 82 0 2 2 82 0 10 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 2 82 0 58 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 2 82 0 78 0 81 0 87 0 85 0 88 0 89 0 91 2 82 0 92 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 2 82 0 133 0 109 0 134 0 113 0 135 0 117 0 141 8 85 0 157 8 85 0 158 8 85 0 161 8 85 0 162 8 85 0 163 8 85 0 170 8 85 0 171 8 85 0 172 8 85 0 175 8 85 0 176 8 85 0 179 8 85 0 180 8 85 0 181 8 85 0 182 8 85 0 183 8 85 0 184 8 85 0 185 8 85 0 186 0 205 0 187 2 82 0 228] 
#[0 8 89 0 146] 
#[1 0 13 0 1 2 86 0 2 2 86 0 10 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 2 86 0 58 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 2 86 0 78 0 81 0 87 0 85 0 88 0 89 0 91 2 86 0 92 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 2 86 0 133 0 109 0 134 0 113 0 135 0 117 0 141 8 93 0 157 8 93 0 158 8 93 0 161 8 93 0 162 8 93 0 163 8 93 0 170 8 93 0 171 8 93 0 172 8 93 0 175 8 93 0 176 8 93 0 179 8 93 0 180 8 93 0 181 8 93 0 182 8 93 0 183 8 93 0 184 8 93 0 185 8 93 0 186 0 205 0 187 2 86 0 228] 
#[1 1 97 0 1 0 10 0 146 8 97 0 206 1 109 0 208] 
#[1 3 45 0 38 3 49 0 67 3 53 0 73 3 57 0 82 3 61 0 84 8 101 0 100 3 65 0 111] 
#[1 1 97 0 1 0 10 0 146 8 105 0 205 6 181 0 206 1 109 0 208] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 109 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 8 113 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 117 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 8 121 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 8 125 0 188 8 125 0 203 3 197 0 218 0 170 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 129 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 1 97 0 1 0 10 0 146 8 133 0 205 6 181 0 206 1 109 0 208] 
#[0 2 90 0 2 0 10 0 58 0 64 0 78 0 92 0 133 0 150 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 8 145 0 192 2 94 0 228] 
#[1 2 98 0 2 2 98 0 10 2 98 0 58 2 98 0 64 8 149 0 68 8 153 0 69 2 98 0 78 2 98 0 92 7 97 0 102 7 165 0 105 8 157 0 108 2 98 0 133 3 69 0 140 2 98 0 150 8 161 0 196 8 165 0 199 8 169 0 201 8 173 0 202 8 177 0 213 8 181 0 214 8 185 0 216 2 98 0 228] 
#[1 1 38 0 2 1 38 0 10 1 38 0 58 1 38 0 64 1 38 0 68 1 38 0 69 1 38 0 78 1 38 0 92 1 38 0 102 1 38 0 105 1 38 0 108 1 38 0 133 1 38 0 140 1 38 0 150 8 189 0 195 1 38 0 228] 
#[0 2 102 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 42 0 61 0 62 0 79 0 95 0 96 0 120 0 123 0 124 0 128 0 129 0 130 0 144 0 146 0 147 0 148 0 149 0 150] 
#[0 2 106 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[0 2 110 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 193 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 8 197 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 8 201 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 8 205 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 8 209 0 188 8 209 0 203 3 197 0 218 0 170 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 8 213 0 192 2 94 0 228] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 8 217 0 64 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 8 221 0 134 2 245 0 145] 
#[0 8 225 0 118] 
#[1 8 229 0 6 8 233 0 118] 
#[1 2 114 0 2 2 114 0 6 2 114 0 10 3 45 0 38 2 114 0 58 2 114 0 64 3 49 0 67 2 114 0 68 2 114 0 69 3 53 0 73 2 114 0 78 3 57 0 82 3 61 0 84 2 114 0 92 2 114 0 102 2 114 0 105 2 114 0 108 3 65 0 111 2 114 0 118 2 114 0 133 2 114 0 140 2 114 0 150 2 114 0 228] 
#[1 2 118 0 2 8 237 0 6 2 118 0 10 8 241 0 51 2 118 0 58 2 118 0 78 2 118 0 92 2 118 0 133 3 69 0 140 8 245 0 213 2 118 0 228] 
#[0 2 122 0 2 0 6 0 10 0 51 0 58 0 78 0 92 0 133 0 139 0 140 0 228] 
#[1 8 249 0 146 2 145 0 207] 
#[0 8 253 0 14] 
#[1 0 10 0 146 9 1 0 173 6 189 0 174 6 193 0 208 6 197 0 226] 
#[1 0 13 0 1 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 9 5 0 157 9 5 0 158 9 5 0 161 9 5 0 162 9 5 0 163 9 5 0 170 9 5 0 171 9 5 0 172 9 5 0 175 9 5 0 176 9 5 0 179 9 5 0 180 9 5 0 181 9 5 0 182 9 5 0 183 9 5 0 184 9 5 0 185 9 5 0 186 0 205 0 187] 
#[0 9 9 0 2] 
#[0 2 126 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 9 13 0 150] 
#[0 9 17 0 118] 
#[0 2 130 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 2 134 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 138 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 9 21 0 2 3 181 0 6 3 197 0 218] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 9 25 0 187] 
#[0 2 142 0 2 0 10 0 228] 
#[1 9 29 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[0 2 146 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 170 0 1 1 170 0 2 1 170 0 3 1 170 0 4 1 170 0 5 1 170 0 6 1 170 0 7 1 170 0 9 1 170 0 11 1 170 0 12 1 170 0 13 1 170 0 14 1 170 0 15 1 170 0 16 1 170 0 18 1 170 0 19 1 170 0 21 1 170 0 53 5 149 0 58 1 170 0 71 1 170 0 72 5 153 0 78 1 170 0 81 1 170 0 85 5 157 0 92 1 170 0 93 1 170 0 94 1 170 0 95 1 170 0 101 1 170 0 104 5 161 0 133 1 170 0 145 1 170 0 146] 
#[1 9 33 0 2 3 181 0 6 3 197 0 218] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 37 0 220 9 37 0 221 9 37 0 225 9 37 0 226 1 65 0 227] 
#[0 2 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 41 0 52] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 154 0 52 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 2 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 9 45 0 2 4 93 0 22 4 93 0 26 4 93 0 27 4 93 0 31 4 93 0 35 4 93 0 42 4 93 0 43 4 93 0 44 4 37 0 49 4 93 0 63 9 49 0 65 4 93 0 76 4 93 0 77 4 93 0 98 4 93 0 99 4 93 0 109 4 93 0 119 4 93 0 123 4 93 0 124 4 93 0 137 4 93 0 138 9 53 0 167 4 89 0 168 4 93 0 169] 
#[1 2 149 0 1 9 57 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 2 149 0 1 9 61 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 2 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 2 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 65 0 220 9 65 0 221 9 65 0 225 9 65 0 226 1 65 0 227] 
#[1 9 69 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 73 0 220 9 73 0 221 9 73 0 225 9 73 0 226 1 65 0 227] 
#[0 9 77 0 146] 
#[0 9 81 0 146] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 85 0 220 9 85 0 221 9 85 0 225 9 85 0 226 1 65 0 227] 
#[0 9 89 0 66] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 93 0 220 9 93 0 221 9 93 0 225 9 93 0 226 1 65 0 227] 
#[0 9 97 0 66] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 101 0 220 9 101 0 221 9 101 0 225 9 101 0 226 1 65 0 227] 
#[0 9 105 0 66] 
#[0 2 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 109 0 25] 
#[0 9 113 0 2] 
#[0 2 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 117 0 2] 
#[0 9 121 0 2] 
#[0 2 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 125 0 65] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 129 0 220 9 129 0 221 9 129 0 225 9 129 0 226 1 65 0 227] 
#[1 9 133 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 2 149 0 1 4 165 0 2 2 153 0 3 2 157 0 4 2 161 0 5 9 137 0 6 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 2 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 141 0 220 9 141 0 221 9 141 0 225 9 141 0 226 1 65 0 227] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 9 145 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 2 37 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 9 149 0 187 1 45 0 208 9 153 0 220 9 153 0 221 9 153 0 225 9 153 0 226 1 65 0 227] 
#[1 1 147 0 1 2 186 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 186 0 6 2 165 0 7 2 169 0 9 2 186 0 10 2 186 0 11 2 186 0 12 2 186 0 13 2 186 0 14 2 186 0 15 2 186 0 16 2 186 0 17 2 186 0 18 2 186 0 19 2 186 0 21 2 186 0 38 2 186 0 51 2 186 0 52 2 186 0 53 2 186 0 56 2 186 0 58 2 186 0 64 2 186 0 66 2 186 0 67 2 186 0 68 2 186 0 69 1 151 0 71 2 186 0 73 2 186 0 78 2 186 0 80 1 155 0 81 2 186 0 82 2 186 0 84 2 186 0 92 2 225 0 93 2 186 0 94 2 186 0 100 2 186 0 101 2 186 0 102 1 159 0 104 2 186 0 105 2 186 0 108 2 186 0 111 2 186 0 114 2 186 0 118 2 186 0 122 2 186 0 133 2 186 0 134 2 186 0 135 2 186 0 139 2 186 0 140 2 186 0 141 2 186 0 145 2 186 0 146 2 186 0 150 2 186 0 228] 
#[1 1 163 0 1 2 190 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 190 0 6 2 165 0 7 2 169 0 9 2 190 0 10 2 190 0 11 2 190 0 12 2 190 0 13 2 190 0 14 2 190 0 15 2 190 0 16 2 190 0 17 2 190 0 18 2 190 0 19 2 190 0 21 2 190 0 38 2 190 0 51 2 190 0 52 2 190 0 53 1 167 0 56 2 190 0 58 2 190 0 64 2 190 0 66 2 190 0 67 2 190 0 68 2 190 0 69 1 171 0 71 2 190 0 73 2 190 0 78 2 190 0 80 1 175 0 81 2 190 0 82 2 190 0 84 2 190 0 92 2 225 0 93 2 190 0 94 2 190 0 100 2 190 0 101 2 190 0 102 1 179 0 104 2 190 0 105 2 190 0 108 2 190 0 111 2 190 0 114 2 190 0 118 2 190 0 122 2 190 0 133 2 190 0 134 2 190 0 135 2 190 0 139 2 190 0 140 2 190 0 141 2 190 0 145 2 190 0 146 2 190 0 150 2 190 0 228] 
#[0 2 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 161 0 25] 
#[0 9 165 0 21] 
#[1 9 169 0 2 7 97 0 102 9 173 0 114 9 177 0 216] 
#[1 9 181 0 2 9 185 0 114] 
#[0 2 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 2 202 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 206 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 210 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 4 129 0 1 0 97 0 115 0 101 0 116 0 117 0 141 4 133 0 187 9 189 0 200] 
#[0 2 214 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 181 0 6 9 193 0 141 3 197 0 218] 
#[0 2 218 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 9 197 0 2 9 201 0 6] 
#[0 2 222 0 2 0 6] 
#[1 4 93 0 22 4 93 0 26 4 93 0 27 4 93 0 31 4 93 0 35 4 93 0 42 4 93 0 43 4 93 0 44 4 37 0 49 4 93 0 63 4 93 0 76 4 93 0 77 4 93 0 98 4 93 0 99 4 93 0 109 4 93 0 119 4 93 0 123 4 93 0 124 4 93 0 137 4 93 0 138 9 205 0 167 4 89 0 168 4 93 0 169] 
#[0 9 209 0 1] 
#[1 7 233 0 19 2 38 0 38 5 149 0 58 2 38 0 67 2 38 0 73 5 153 0 78 2 38 0 82 2 38 0 84 5 157 0 92 2 38 0 111 5 161 0 133 7 237 0 146] 
#[0 9 213 0 146] 
#[0 2 226 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 1 97 0 1 0 10 0 146 9 217 0 206 1 109 0 208] 
#[1 1 97 0 1 0 10 0 146 9 221 0 206 1 109 0 208] 
#[1 2 54 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 17 0 100 1 143 0 111 8 21 0 210 9 225 0 211] 
#[0 9 229 0 82] 
#[0 9 233 0 82] 
#[1 2 54 0 2 2 54 0 6 2 54 0 10 2 54 0 17 1 119 0 38 2 54 0 58 2 54 0 64 1 123 0 67 2 54 0 68 2 54 0 69 1 127 0 73 2 54 0 78 1 131 0 82 1 135 0 84 2 54 0 92 1 139 0 100 2 54 0 102 2 54 0 105 2 54 0 108 1 143 0 111 2 54 0 118 2 54 0 133 2 54 0 135 2 54 0 140 2 54 0 150 8 21 0 210 9 237 0 211 2 54 0 228] 
#[1 1 97 0 1 0 10 0 146 9 241 0 206 1 109 0 208] 
#[1 2 54 0 2 2 54 0 6 2 54 0 10 2 54 0 17 1 119 0 38 2 54 0 58 2 54 0 64 1 123 0 67 2 54 0 68 2 54 0 69 1 127 0 73 2 54 0 78 1 131 0 82 1 135 0 84 2 54 0 92 1 139 0 100 2 54 0 102 2 54 0 105 2 54 0 108 1 143 0 111 2 54 0 118 2 54 0 133 2 54 0 135 2 54 0 140 2 54 0 150 8 21 0 210 9 245 0 211 2 54 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 9 249 0 220 9 249 0 221 9 249 0 225 9 249 0 226 1 65 0 227] 
#[0 2 230 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 2 234 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 1 97 0 1 0 10 0 146 9 253 0 206 1 109 0 208] 
#[1 1 97 0 1 0 10 0 146 10 1 0 206 1 109 0 208] 
#[0 2 238 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 2 242 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 246 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 10 5 0 2 3 181 0 6 3 197 0 218] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 10 9 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 10 13 0 136] 
#[1 10 17 0 2 3 181 0 6 3 197 0 218] 
#[1 10 21 0 2 3 181 0 6 3 197 0 218] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 10 25 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 10 29 0 136] 
#[1 10 33 0 2 3 181 0 6 3 197 0 218] 
#[1 0 13 0 1 2 250 0 2 2 250 0 10 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 2 250 0 58 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 2 250 0 78 0 81 0 87 0 85 0 88 0 89 0 91 2 250 0 92 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 2 250 0 133 0 109 0 134 0 113 0 135 0 117 0 141 10 37 0 157 10 37 0 158 10 37 0 161 10 37 0 162 10 37 0 163 10 37 0 170 10 37 0 171 10 37 0 172 10 37 0 175 10 37 0 176 10 37 0 179 10 37 0 180 10 37 0 181 10 37 0 182 10 37 0 183 10 37 0 184 10 37 0 185 10 37 0 186 0 205 0 187 2 250 0 228] 
#[0 2 254 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 13 0 1 3 2 0 2 3 2 0 10 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 3 2 0 58 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 3 2 0 78 0 81 0 87 0 85 0 88 0 89 0 91 3 2 0 92 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 3 2 0 133 0 109 0 134 0 113 0 135 0 117 0 141 10 41 0 157 10 41 0 158 10 41 0 161 10 41 0 162 10 41 0 163 10 41 0 170 10 41 0 171 10 41 0 172 10 41 0 175 10 41 0 176 10 41 0 179 10 41 0 180 10 41 0 181 10 41 0 182 10 41 0 183 10 41 0 184 10 41 0 185 10 41 0 186 0 205 0 187 3 2 0 228] 
#[0 3 6 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 45 0 38 3 49 0 67 3 53 0 73 3 57 0 82 3 61 0 84 10 45 0 100 3 65 0 111] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 10 49 0 220 10 49 0 221 10 49 0 225 10 49 0 226 1 65 0 227] 
#[1 8 229 0 6 3 69 0 140 10 53 0 213] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 10 57 0 188 10 57 0 203 3 197 0 218 0 170 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 10 61 0 192 2 94 0 228] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 10 65 0 188 10 65 0 203 3 197 0 218 0 170 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 10 69 0 192 2 94 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 10 73 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 10 77 0 2 3 181 0 6 3 197 0 218] 
#[1 3 10 0 2 8 229 0 6 3 10 0 10 3 10 0 58 3 10 0 64 3 10 0 68 3 10 0 69 3 10 0 78 3 10 0 92 3 10 0 102 3 10 0 105 3 10 0 108 3 10 0 133 3 10 0 140 3 10 0 150 3 10 0 228] 
#[0 10 81 0 40] 
#[0 3 14 0 2 0 10 0 58 0 78 0 92 0 133 0 150 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 10 93 0 150 10 93 0 193 10 93 0 194 3 18 0 228] 
#[0 10 97 0 25] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 10 101 0 220 10 101 0 221 10 101 0 225 10 101 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 10 105 0 220 10 105 0 221 10 105 0 225 10 105 0 226 1 65 0 227] 
#[0 3 22 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 26 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 30 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 34 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 38 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 42 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 46 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 3 50 0 2 3 50 0 10 3 50 0 58 3 50 0 64 8 149 0 68 8 153 0 69 3 50 0 78 3 50 0 92 7 97 0 102 7 165 0 105 8 157 0 108 3 50 0 133 3 69 0 140 3 50 0 150 8 161 0 196 8 165 0 199 8 169 0 201 8 173 0 202 8 177 0 213 8 181 0 214 8 185 0 216 3 50 0 228] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 10 109 0 188 10 109 0 203 3 197 0 218 0 170 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 10 113 0 192 2 94 0 228] 
#[1 0 170 0 2 3 181 0 6 0 170 0 10 0 170 0 58 0 170 0 64 0 170 0 66 0 170 0 68 0 170 0 69 0 170 0 78 3 185 0 80 0 170 0 92 0 170 0 102 0 170 0 105 0 170 0 108 0 170 0 133 0 170 0 140 0 170 0 150 10 117 0 188 10 117 0 203 3 197 0 218 0 170 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 10 121 0 192 2 94 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 10 125 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 10 129 0 150 10 129 0 193 10 129 0 194 3 18 0 228] 
#[0 10 133 0 117] 
#[0 10 137 0 64] 
#[1 0 10 0 146 10 141 0 173 6 189 0 174 6 193 0 208 6 197 0 226] 
#[1 1 97 0 1 0 10 0 146 10 145 0 206 1 109 0 208] 
#[1 0 10 0 146 10 149 0 173 6 189 0 174 6 193 0 208 6 197 0 226] 
#[1 0 10 0 146 10 153 0 174 6 193 0 208 6 197 0 226] 
#[1 0 73 0 74 0 77 0 75 0 109 0 134 10 157 0 172 10 161 0 175] 
#[1 3 54 0 2 3 54 0 10 10 165 0 51 3 54 0 58 3 54 0 78 3 54 0 92 3 54 0 133 3 54 0 228] 
#[1 5 9 0 8 0 234 0 14] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 10 169 0 220 10 169 0 221 10 169 0 225 10 169 0 226 1 65 0 227] 
#[1 3 58 0 2 8 237 0 6 3 58 0 10 10 173 0 51 3 58 0 58 3 58 0 78 3 58 0 92 3 58 0 133 3 69 0 140 10 177 0 213 3 58 0 228] 
#[0 3 62 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 66 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 10 181 0 2 10 185 0 6] 
#[0 10 189 0 146] 
#[0 10 193 0 19] 
#[1 10 197 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 5 149 0 58 5 153 0 78 5 157 0 92 7 97 0 102 5 161 0 133 10 201 0 216] 
#[1 10 205 0 72 10 209 0 95] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 3 70 0 51 3 70 0 52 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 3 70 0 139 2 245 0 145] 
#[0 3 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 10 213 0 149] 
#[1 10 217 0 2 10 221 0 65] 
#[0 3 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 149 0 1 10 225 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 1 183 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 149 0 1 10 229 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 10 233 0 64 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 10 237 0 2 10 241 0 141] 
#[1 10 245 0 2 10 249 0 141] 
#[1 2 149 0 1 10 253 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 1 0 220 11 1 0 221 11 1 0 225 11 1 0 226 1 65 0 227] 
#[1 2 149 0 1 11 5 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 9 0 220 11 9 0 221 11 9 0 225 11 9 0 226 1 65 0 227] 
#[1 2 149 0 1 11 13 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 17 0 220 11 17 0 221 11 17 0 225 11 17 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 21 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 3 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 25 0 149] 
#[1 1 187 0 1 3 106 0 2 1 191 0 3 1 195 0 4 1 199 0 5 3 106 0 6 1 203 0 7 1 207 0 9 3 106 0 10 1 211 0 11 1 215 0 12 1 219 0 13 1 223 0 14 1 227 0 15 1 231 0 16 3 106 0 17 1 235 0 18 3 106 0 19 1 239 0 21 3 106 0 38 3 106 0 51 3 106 0 52 1 243 0 53 3 106 0 56 3 106 0 58 3 106 0 64 3 106 0 66 3 106 0 67 3 106 0 68 3 106 0 69 1 247 0 71 1 251 0 72 3 106 0 73 3 106 0 78 3 106 0 80 1 255 0 81 3 106 0 82 3 106 0 84 2 3 0 85 3 106 0 92 2 7 0 93 2 11 0 94 2 15 0 95 3 106 0 100 2 19 0 101 3 106 0 102 2 23 0 104 3 106 0 105 3 106 0 108 3 106 0 111 3 106 0 114 3 106 0 118 3 106 0 122 3 106 0 133 3 106 0 134 3 106 0 135 3 106 0 139 3 106 0 140 3 106 0 141 2 27 0 145 3 106 0 146 3 106 0 150 3 106 0 228] 
#[0 2 31 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 29 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 2 35 0 1 3 114 0 2 2 153 0 3 2 157 0 4 2 161 0 5 3 114 0 6 2 165 0 7 2 169 0 9 3 114 0 10 3 114 0 11 3 114 0 12 3 114 0 13 3 114 0 14 3 114 0 15 3 114 0 16 3 114 0 17 3 114 0 18 3 114 0 19 3 114 0 21 3 114 0 38 3 114 0 51 3 114 0 52 3 114 0 53 3 114 0 56 3 114 0 58 3 114 0 64 3 114 0 66 3 114 0 67 3 114 0 68 3 114 0 69 2 39 0 71 3 114 0 73 3 114 0 78 3 114 0 80 2 43 0 81 3 114 0 82 3 114 0 84 3 114 0 92 2 225 0 93 3 114 0 94 3 114 0 100 3 114 0 101 3 114 0 102 2 47 0 104 3 114 0 105 3 114 0 108 3 114 0 111 3 114 0 114 3 114 0 118 3 114 0 122 3 114 0 133 3 114 0 134 3 114 0 135 3 114 0 139 3 114 0 140 3 114 0 141 3 114 0 145 3 114 0 146 3 114 0 150 3 114 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 33 0 220 11 33 0 221 11 33 0 225 11 33 0 226 1 65 0 227] 
#[1 11 37 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 2 149 0 1 4 165 0 2 2 153 0 3 2 157 0 4 2 161 0 5 11 41 0 6 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 45 0 220 11 45 0 221 11 45 0 225 11 45 0 226 1 65 0 227] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 49 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 11 53 0 39 11 57 0 132 11 61 0 150] 
#[0 3 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 65 0 21] 
#[1 11 69 0 2 11 73 0 114] 
#[0 3 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 77 0 21] 
#[0 3 126 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 11 81 0 79] 
#[0 3 130 0 19] 
#[1 0 10 0 146 11 85 0 166 1 89 0 208 7 221 0 227] 
#[0 3 134 0 2 0 6] 
#[1 0 13 0 1 0 17 0 20 0 21 0 24 0 25 0 33 0 29 0 34 0 33 0 37 0 37 0 41 0 41 0 45 0 45 0 46 0 49 0 50 0 53 0 52 0 57 0 57 0 61 0 59 0 65 0 60 0 69 0 70 0 73 0 74 0 77 0 75 0 81 0 87 0 85 0 88 0 89 0 91 0 93 0 112 0 97 0 115 0 101 0 116 0 105 0 118 0 109 0 134 0 113 0 135 0 117 0 141 11 89 0 156 0 133 0 157 0 133 0 158 0 133 0 161 0 133 0 162 0 133 0 163 0 133 0 170 0 133 0 171 0 133 0 172 0 133 0 175 0 133 0 176 0 133 0 179 0 133 0 180 0 133 0 181 0 133 0 182 0 133 0 183 0 133 0 184 0 133 0 185 0 133 0 186 0 205 0 187] 
#[0 3 138 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 2 54 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 17 0 100 1 143 0 111 8 21 0 210 11 93 0 211] 
#[1 2 54 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 17 0 100 1 143 0 111 8 21 0 210 11 97 0 211] 
#[1 11 101 0 2 2 234 0 38 2 234 0 67 2 234 0 73 2 234 0 82 2 234 0 84 2 234 0 111] 
#[1 1 97 0 1 0 10 0 146 11 105 0 206 1 109 0 208] 
#[1 1 97 0 1 0 10 0 146 11 109 0 206 1 109 0 208] 
#[0 3 142 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 2 54 0 2 2 54 0 6 2 54 0 10 2 54 0 17 1 119 0 38 2 54 0 58 2 54 0 64 1 123 0 67 2 54 0 68 2 54 0 69 1 127 0 73 2 54 0 78 1 131 0 82 1 135 0 84 2 54 0 92 1 139 0 100 2 54 0 102 2 54 0 105 2 54 0 108 1 143 0 111 2 54 0 118 2 54 0 133 2 54 0 135 2 54 0 140 2 54 0 150 8 21 0 210 11 113 0 211 2 54 0 228] 
#[0 3 146 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 2 149 0 1 3 150 0 2 2 153 0 3 2 157 0 4 2 161 0 5 3 150 0 6 2 165 0 7 2 169 0 9 3 150 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 3 150 0 17 2 197 0 18 2 201 0 21 3 150 0 38 2 205 0 53 3 150 0 58 3 150 0 64 3 150 0 67 3 150 0 68 3 150 0 69 2 209 0 71 2 213 0 72 3 150 0 73 3 150 0 78 2 217 0 81 3 150 0 82 3 150 0 84 2 221 0 85 3 150 0 92 2 225 0 93 2 229 0 94 2 233 0 95 3 150 0 100 2 237 0 101 3 150 0 102 2 241 0 104 3 150 0 105 3 150 0 108 3 150 0 111 3 150 0 118 3 150 0 133 3 150 0 135 3 150 0 140 2 245 0 145 3 150 0 150 3 150 0 228] 
#[1 2 54 0 2 2 54 0 6 2 54 0 10 2 54 0 17 1 119 0 38 2 54 0 58 2 54 0 64 1 123 0 67 2 54 0 68 2 54 0 69 1 127 0 73 2 54 0 78 1 131 0 82 1 135 0 84 2 54 0 92 1 139 0 100 2 54 0 102 2 54 0 105 2 54 0 108 1 143 0 111 2 54 0 118 2 54 0 133 2 54 0 135 2 54 0 140 2 54 0 150 8 21 0 210 11 117 0 211 2 54 0 228] 
#[1 2 54 0 2 2 54 0 6 2 54 0 10 2 54 0 17 1 119 0 38 2 54 0 58 2 54 0 64 1 123 0 67 2 54 0 68 2 54 0 69 1 127 0 73 2 54 0 78 1 131 0 82 1 135 0 84 2 54 0 92 1 139 0 100 2 54 0 102 2 54 0 105 2 54 0 108 1 143 0 111 2 54 0 118 2 54 0 133 2 54 0 135 2 54 0 140 2 54 0 150 8 21 0 210 11 121 0 211 2 54 0 228] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 11 125 0 136 0 117 0 141 11 129 0 187] 
#[1 11 133 0 2 3 181 0 6 3 197 0 218] 
#[0 11 137 0 1] 
#[0 3 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 11 141 0 136 0 117 0 141 11 145 0 187] 
#[1 11 149 0 2 3 181 0 6 3 197 0 218] 
#[0 11 153 0 1] 
#[0 3 158 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 162 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 166 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 157 0 220 11 157 0 221 11 157 0 225 11 157 0 226 1 65 0 227] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 11 161 0 139 2 245 0 145 11 165 0 159 11 169 0 160] 
#[0 3 170 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 11 173 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 11 177 0 150 11 177 0 193 11 177 0 194 3 18 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 11 181 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 11 185 0 150 11 185 0 193 11 185 0 194 3 18 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 11 189 0 192 2 94 0 228] 
#[0 3 174 0 2 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 178 0 2 0 10 0 58 0 78 0 92 0 133 0 150 0 228] 
#[0 3 182 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 186 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 190 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 11 193 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 11 197 0 215 11 201 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 2 149 0 1 3 194 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 3 194 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 3 194 0 58 3 194 0 64 3 194 0 68 3 194 0 69 2 209 0 71 2 213 0 72 3 194 0 78 2 217 0 81 2 221 0 85 3 194 0 92 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 3 194 0 102 2 241 0 104 3 194 0 105 3 194 0 108 3 194 0 133 3 194 0 140 2 245 0 145 3 194 0 150 3 194 0 228] 
#[1 2 149 0 1 3 198 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 3 198 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 3 198 0 58 3 198 0 64 3 198 0 68 3 198 0 69 2 209 0 71 2 213 0 72 3 198 0 78 2 217 0 81 2 221 0 85 3 198 0 92 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 3 198 0 102 2 241 0 104 3 198 0 105 3 198 0 108 3 198 0 133 3 198 0 140 2 245 0 145 3 198 0 150 3 198 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 11 205 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 11 209 0 150 11 209 0 193 11 209 0 194 3 18 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 113 0 66 1 38 0 68 1 38 0 69 0 59 0 78 0 59 0 92 1 38 0 102 1 38 0 105 1 38 0 108 0 59 0 133 1 38 0 140 0 59 0 150 6 117 0 189 11 213 0 190 6 125 0 195 6 129 0 204 0 59 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 11 217 0 150 11 217 0 193 11 217 0 194 3 18 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 11 221 0 192 2 94 0 228] 
#[0 3 202 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 206 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 11 225 0 117] 
#[1 3 210 0 2 8 237 0 6 3 210 0 10 11 229 0 51 3 210 0 58 3 210 0 78 3 210 0 92 3 210 0 133 3 69 0 140 11 233 0 213 3 210 0 228] 
#[1 3 214 0 2 3 214 0 6 3 214 0 10 3 45 0 38 3 214 0 58 3 214 0 64 3 49 0 67 3 214 0 68 3 214 0 69 3 53 0 73 3 214 0 78 3 57 0 82 3 61 0 84 3 214 0 92 3 214 0 102 3 214 0 105 3 214 0 108 3 65 0 111 3 214 0 118 3 214 0 133 3 214 0 140 3 214 0 150 3 214 0 228] 
#[1 3 218 0 2 8 237 0 6 3 218 0 10 3 218 0 58 3 218 0 78 3 218 0 92 3 218 0 133 3 69 0 140 11 237 0 213 3 218 0 228] 
#[0 3 222 0 2 0 6 0 10 0 51 0 58 0 78 0 92 0 133 0 139 0 140 0 228] 
#[0 3 226 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 230 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 73 0 74 0 77 0 75 0 109 0 134 11 241 0 172 11 245 0 175] 
#[1 2 149 0 1 3 234 0 2 2 153 0 3 2 157 0 4 2 161 0 5 3 234 0 6 2 165 0 7 2 169 0 9 3 234 0 10 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 3 234 0 51 2 205 0 53 3 234 0 58 2 209 0 71 2 213 0 72 3 234 0 78 2 217 0 81 2 221 0 85 3 234 0 92 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 3 234 0 133 3 234 0 139 3 234 0 140 2 245 0 145 3 234 0 228] 
#[1 0 73 0 74 0 77 0 75 0 109 0 134 11 249 0 172 11 253 0 175] 
#[1 3 238 0 2 3 238 0 10 12 1 0 51 3 238 0 58 3 238 0 78 3 238 0 92 3 238 0 133 3 238 0 228] 
#[1 3 242 0 1 3 242 0 2 3 242 0 6 3 242 0 20 3 242 0 24 12 5 0 32 3 242 0 33 3 242 0 34 3 242 0 37 3 242 0 41 3 242 0 45 3 242 0 46 3 242 0 50 3 242 0 52 3 242 0 57 3 242 0 59 3 242 0 60 3 242 0 65 3 242 0 70 3 242 0 74 3 242 0 75 3 242 0 87 3 242 0 88 3 242 0 91 3 242 0 112 3 242 0 115 3 242 0 116 3 242 0 118 3 242 0 134 3 242 0 135 3 242 0 141] 
#[0 12 9 0 150] 
#[0 3 246 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 12 13 0 1] 
#[0 3 250 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 3 254 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 12 17 0 1] 
#[0 12 21 0 72] 
#[0 12 25 0 2] 
#[0 4 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 29 0 149] 
#[0 4 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 12 33 0 220 12 33 0 221 12 33 0 225 12 33 0 226 1 65 0 227] 
#[0 4 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 37 0 54] 
#[0 4 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 41 0 54] 
#[0 4 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 149 0 1 12 45 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 4 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 149 0 1 12 49 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 4 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 149 0 1 12 53 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[1 4 34 0 2 3 181 0 6 4 34 0 10 4 34 0 58 4 34 0 64 4 34 0 68 4 34 0 69 4 34 0 78 4 34 0 92 4 34 0 102 4 34 0 105 4 34 0 108 4 34 0 114 4 34 0 133 4 34 0 140 4 34 0 150 3 197 0 218 4 34 0 228] 
#[0 12 57 0 2] 
#[1 12 61 0 2 3 181 0 6 3 197 0 218] 
#[1 2 51 0 1 4 38 0 2 2 55 0 3 2 59 0 4 2 63 0 5 4 38 0 6 2 67 0 7 2 71 0 9 4 38 0 10 2 75 0 11 2 79 0 12 2 83 0 13 2 87 0 14 2 91 0 15 2 95 0 16 4 38 0 17 2 99 0 18 4 38 0 19 2 103 0 21 4 38 0 38 4 38 0 51 4 38 0 52 2 107 0 53 4 38 0 56 4 38 0 58 4 38 0 64 4 38 0 66 4 38 0 67 4 38 0 68 4 38 0 69 2 111 0 71 2 115 0 72 4 38 0 73 4 38 0 78 4 38 0 80 2 119 0 81 4 38 0 82 4 38 0 84 2 123 0 85 4 38 0 92 2 127 0 93 2 131 0 94 2 135 0 95 4 38 0 100 2 139 0 101 4 38 0 102 2 143 0 104 4 38 0 105 4 38 0 108 4 38 0 111 4 38 0 114 4 38 0 118 4 38 0 122 4 38 0 133 4 38 0 134 4 38 0 135 4 38 0 139 4 38 0 140 4 38 0 141 2 147 0 145 4 38 0 146 4 38 0 150 4 38 0 228] 
#[0 2 151 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 12 65 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 2 155 0 1 4 46 0 2 2 153 0 3 2 157 0 4 2 161 0 5 4 46 0 6 2 165 0 7 2 169 0 9 4 46 0 10 4 46 0 11 4 46 0 12 4 46 0 13 4 46 0 14 4 46 0 15 4 46 0 16 4 46 0 17 4 46 0 18 4 46 0 19 4 46 0 21 4 46 0 38 4 46 0 51 4 46 0 52 4 46 0 53 4 46 0 56 4 46 0 58 4 46 0 64 4 46 0 66 4 46 0 67 4 46 0 68 4 46 0 69 2 159 0 71 4 46 0 73 4 46 0 78 4 46 0 80 2 163 0 81 4 46 0 82 4 46 0 84 4 46 0 92 2 225 0 93 4 46 0 94 4 46 0 100 4 46 0 101 4 46 0 102 2 167 0 104 4 46 0 105 4 46 0 108 4 46 0 111 4 46 0 114 4 46 0 118 4 46 0 122 4 46 0 133 4 46 0 134 4 46 0 135 4 46 0 139 4 46 0 140 4 46 0 141 4 46 0 145 4 46 0 146 4 46 0 150 4 46 0 228] 
#[1 4 50 0 2 3 181 0 6 4 50 0 10 4 50 0 58 4 50 0 64 4 50 0 68 4 50 0 69 4 50 0 78 4 50 0 92 4 50 0 102 4 50 0 105 4 50 0 108 4 50 0 114 4 50 0 133 4 50 0 140 4 50 0 150 3 197 0 218 4 50 0 228] 
#[0 12 69 0 113] 
#[0 12 73 0 106] 
#[0 12 77 0 106] 
#[1 12 81 0 39 12 85 0 132 12 89 0 150] 
#[0 4 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 93 0 21] 
#[1 12 97 0 39 12 101 0 132 12 105 0 150] 
#[0 4 58 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 62 0 2 0 6] 
#[1 0 6 0 2 0 6 0 10 12 109 0 155] 
#[1 12 113 0 2 3 142 0 38 3 142 0 67 3 142 0 73 3 142 0 82 3 142 0 84 3 142 0 111] 
#[1 12 117 0 2 3 146 0 38 3 146 0 67 3 146 0 73 3 146 0 82 3 146 0 84 3 146 0 111] 
#[0 4 66 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 2 54 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 17 0 100 1 143 0 111 8 21 0 210 12 121 0 211] 
#[1 2 54 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 17 0 100 1 143 0 111 8 21 0 210 12 125 0 211] 
#[0 4 70 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 74 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 78 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 12 129 0 1] 
#[1 4 82 0 2 4 82 0 10 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133 4 82 0 228] 
#[0 4 86 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 12 133 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 12 137 0 1] 
#[1 4 90 0 2 4 90 0 10 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133 4 90 0 228] 
#[0 4 94 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 12 141 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 2 149 0 1 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 11 161 0 139 2 245 0 145 12 145 0 159 11 169 0 160] 
#[1 12 149 0 90 12 153 0 95] 
#[1 4 98 0 2 4 98 0 10 4 98 0 58 4 98 0 78 4 98 0 92 4 98 0 133 11 161 0 139 12 157 0 160 4 98 0 228] 
#[0 4 102 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 12 161 0 192 2 94 0 228] 
#[0 4 106 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 12 165 0 192 2 94 0 228] 
#[0 4 110 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 12 169 0 150 12 169 0 193 12 169 0 194 3 18 0 228] 
#[1 2 37 0 1 12 173 0 2 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 0 97 0 115 0 101 0 116 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 0 117 0 141 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 2 41 0 187 1 45 0 208 2 45 0 220 2 45 0 221 2 45 0 225 2 45 0 226 1 65 0 227] 
#[0 4 114 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 4 118 0 2 3 181 0 6 4 118 0 10 4 118 0 58 4 118 0 64 4 118 0 68 4 118 0 69 4 118 0 78 4 118 0 92 4 118 0 102 4 118 0 105 4 118 0 108 4 118 0 133 4 118 0 140 4 118 0 150 3 197 0 218 4 118 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 12 177 0 192 2 94 0 228] 
#[0 4 122 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 94 0 2 2 94 0 10 2 94 0 58 8 137 0 64 2 94 0 78 2 94 0 92 2 94 0 133 2 94 0 150 8 141 0 191 12 181 0 192 2 94 0 228] 
#[0 4 126 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 12 185 0 150 12 185 0 193 12 185 0 194 3 18 0 228] 
#[0 4 130 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 73 0 74 0 77 0 75 0 109 0 134 12 189 0 172 12 193 0 175] 
#[1 4 134 0 2 4 134 0 10 12 197 0 51 4 134 0 58 4 134 0 78 4 134 0 92 4 134 0 133 4 134 0 228] 
#[0 4 138 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 142 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 146 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 150 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 73 0 74 0 77 0 75 0 109 0 134 12 201 0 172 12 205 0 175] 
#[0 12 209 0 118] 
#[0 12 213 0 2] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 12 217 0 187] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 12 221 0 187] 
#[0 12 225 0 1] 
#[0 4 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 229 0 2] 
#[1 2 149 0 1 12 233 0 2 2 153 0 3 2 157 0 4 2 161 0 5 2 165 0 7 2 169 0 9 2 173 0 11 2 177 0 12 2 181 0 13 2 185 0 14 2 189 0 15 2 193 0 16 2 197 0 18 2 201 0 21 2 205 0 53 2 209 0 71 2 213 0 72 2 217 0 81 2 221 0 85 2 225 0 93 2 229 0 94 2 233 0 95 2 237 0 101 2 241 0 104 2 245 0 145] 
#[0 12 237 0 2] 
#[0 12 241 0 2] 
#[0 4 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 12 245 0 2 3 181 0 6 3 197 0 218] 
#[0 12 249 0 18] 
#[0 12 253 0 18] 
#[0 13 1 0 18] 
#[0 13 5 0 113] 
#[0 13 9 0 106] 
#[0 13 13 0 106] 
#[1 13 17 0 39 13 21 0 132 13 25 0 150] 
#[0 13 29 0 113] 
#[0 13 33 0 106] 
#[0 13 37 0 106] 
#[1 13 41 0 2 4 125 0 10] 
#[0 4 182 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 186 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 13 45 0 2 4 74 0 38 4 74 0 67 4 74 0 73 4 74 0 82 4 74 0 84 4 74 0 111] 
#[1 13 49 0 2 4 78 0 38 4 78 0 67 4 78 0 73 4 78 0 82 4 78 0 84 4 78 0 111] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 13 53 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 13 57 0 2 3 181 0 6 3 197 0 218] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 13 61 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 13 65 0 2 3 181 0 6 3 197 0 218] 
#[1 4 190 0 2 4 190 0 10 4 190 0 58 4 190 0 78 4 190 0 92 4 190 0 133 11 161 0 139 12 157 0 160 4 190 0 228] 
#[0 13 69 0 122] 
#[0 13 73 0 90] 
#[0 4 194 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 13 77 0 150 13 77 0 193 13 77 0 194 3 18 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 13 81 0 150 13 81 0 193 13 81 0 194 3 18 0 228] 
#[0 4 198 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 202 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 13 85 0 150 13 85 0 193 13 85 0 194 3 18 0 228] 
#[1 3 18 0 2 3 18 0 10 3 18 0 58 3 18 0 78 3 18 0 92 3 18 0 133 13 89 0 150 13 89 0 193 13 89 0 194 3 18 0 228] 
#[0 4 206 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 210 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 214 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 73 0 74 0 77 0 75 0 109 0 134 13 93 0 172 13 97 0 175] 
#[0 4 218 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 222 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 13 101 0 146] 
#[1 4 226 0 1 4 226 0 2 4 226 0 6 4 226 0 20 4 226 0 24 13 105 0 32 4 226 0 33 4 226 0 34 4 226 0 37 4 226 0 41 4 226 0 45 4 226 0 46 4 226 0 50 4 226 0 52 4 226 0 57 4 226 0 59 4 226 0 60 4 226 0 65 4 226 0 70 4 226 0 74 4 226 0 75 4 226 0 87 4 226 0 88 4 226 0 91 4 226 0 112 4 226 0 115 4 226 0 116 4 226 0 118 4 226 0 134 4 226 0 135 4 226 0 141] 
#[1 13 109 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 13 113 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[1 0 13 0 1 0 97 0 115 0 101 0 116 0 117 0 141 13 117 0 187] 
#[0 4 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 13 121 0 39 13 125 0 132 13 129 0 150] 
#[1 13 133 0 39 13 137 0 132 13 141 0 150] 
#[1 13 145 0 39 13 149 0 132 13 153 0 150] 
#[0 13 157 0 18] 
#[0 13 161 0 18] 
#[0 13 165 0 18] 
#[0 13 169 0 113] 
#[0 13 173 0 106] 
#[0 13 177 0 106] 
#[0 13 181 0 18] 
#[0 13 185 0 18] 
#[0 13 189 0 18] 
#[0 4 250 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 254 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 5 2 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 13 193 0 2 3 181 0 6 3 197 0 218] 
#[0 5 6 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 13 197 0 2 3 181 0 6 3 197 0 218] 
#[0 5 10 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 13 201 0 134] 
#[0 13 205 0 122] 
#[0 5 14 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 18 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 22 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 26 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 30 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 34 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 38 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 13 209 0 118] 
#[0 5 42 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 5 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 13 213 0 2 2 21 0 58 2 25 0 78 2 29 0 92 2 33 0 133] 
#[0 13 217 0 113] 
#[0 13 221 0 106] 
#[0 13 225 0 106] 
#[0 13 229 0 113] 
#[0 13 233 0 106] 
#[0 13 237 0 106] 
#[0 13 241 0 113] 
#[0 13 245 0 106] 
#[0 13 249 0 106] 
#[1 13 253 0 39 14 1 0 132 14 5 0 150] 
#[1 14 9 0 39 14 13 0 132 14 17 0 150] 
#[1 14 21 0 39 14 25 0 132 14 29 0 150] 
#[0 14 33 0 18] 
#[0 14 37 0 18] 
#[0 14 41 0 18] 
#[1 14 45 0 39 14 49 0 132 14 53 0 150] 
#[1 14 57 0 39 14 61 0 132 14 65 0 150] 
#[1 14 69 0 39 14 73 0 132 14 77 0 150] 
#[0 5 50 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 54 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 14 81 0 118] 
#[0 14 85 0 75] 
#[0 14 89 0 146] 
#[0 5 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 14 93 0 2] 
#[0 14 97 0 2] 
#[0 14 101 0 2] 
#[0 14 105 0 2] 
#[0 14 109 0 2] 
#[0 14 113 0 2] 
#[0 14 117 0 2] 
#[0 14 121 0 2] 
#[0 14 125 0 2] 
#[0 14 129 0 113] 
#[0 14 133 0 106] 
#[0 14 137 0 106] 
#[0 14 141 0 113] 
#[0 14 145 0 106] 
#[0 14 149 0 106] 
#[0 14 153 0 113] 
#[0 14 157 0 106] 
#[0 14 161 0 106] 
#[1 14 165 0 39 14 169 0 132 14 173 0 150] 
#[1 14 177 0 39 14 181 0 132 14 185 0 150] 
#[1 14 189 0 39 14 193 0 132 14 197 0 150] 
#[0 14 201 0 113] 
#[0 14 205 0 106] 
#[0 14 209 0 106] 
#[0 14 213 0 113] 
#[0 14 217 0 106] 
#[0 14 221 0 106] 
#[0 14 225 0 113] 
#[0 14 229 0 106] 
#[0 14 233 0 106] 
#[1 0 10 0 146 14 237 0 173 6 189 0 174 6 193 0 208 6 197 0 226] 
#[0 14 241 0 1] 
#[0 5 62 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 5 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 14 245 0 2] 
#[0 14 249 0 2] 
#[0 14 253 0 2] 
#[0 15 1 0 2] 
#[0 15 5 0 2] 
#[0 15 9 0 2] 
#[0 15 13 0 2] 
#[0 15 17 0 2] 
#[0 15 21 0 2] 
#[0 15 25 0 113] 
#[0 15 29 0 106] 
#[0 15 33 0 106] 
#[0 15 37 0 113] 
#[0 15 41 0 106] 
#[0 15 45 0 106] 
#[0 15 49 0 113] 
#[0 15 53 0 106] 
#[0 15 57 0 106] 
#[0 15 61 0 2] 
#[0 15 65 0 2] 
#[0 15 69 0 2] 
#[0 15 73 0 2] 
#[0 15 77 0 2] 
#[0 15 81 0 2] 
#[0 15 85 0 2] 
#[0 15 89 0 2] 
#[0 15 93 0 2] 
#[1 5 102 0 2 8 237 0 6 5 102 0 10 5 102 0 58 5 102 0 78 5 102 0 92 5 102 0 133 5 102 0 139 5 102 0 228] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 15 97 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[0 5 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 15 101 0 2] 
#[0 15 105 0 2] 
#[0 15 109 0 2] 
#[0 15 113 0 2] 
#[0 15 117 0 2] 
#[0 15 121 0 2] 
#[0 15 125 0 2] 
#[0 15 129 0 2] 
#[0 15 133 0 2] 
#[0 5 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 15 137 0 2 3 181 0 6 3 197 0 218] 
#[0 5 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 5 214 0 2 5 214 0 10 5 214 0 58 5 214 0 78 5 214 0 92 5 214 0 133 15 141 0 136 5 214 0 139 5 214 0 228] 
#[0 15 145 0 1] 
#[1 0 209 0 1 0 10 0 3 0 213 0 5 0 217 0 7 0 221 0 28 0 225 0 30 0 229 0 36 0 233 0 42 0 237 0 61 0 241 0 62 0 245 0 79 0 249 0 95 0 253 0 96 1 1 0 120 1 5 0 123 1 9 0 124 1 13 0 128 1 17 0 129 1 21 0 130 1 25 0 144 0 10 0 146 1 29 0 147 1 33 0 148 1 37 0 149 1 41 0 150 1 45 0 208 15 149 0 217 1 205 0 219 1 209 0 220 1 209 0 221 1 209 0 225 1 209 0 226 1 65 0 227] 
#[1 15 153 0 2 3 181 0 6 3 197 0 218] 
#[0 5 218 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 228]
	).
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression1: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression2: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result else: (nodes at: 3).
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression3: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression4: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result else: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement1: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result forToken: (nodes at: 3).
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement2: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement1: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement2: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateMacroStatement1: nodes [
	| result |
	result := TeradataCreateMacroStatementNode new.
	result createToken: (nodes at: 1).
	result macroToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addToken: ((nodes at: 4) at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result statements.
	result addTokens: ((nodes at: 7) at: 2) to: result semicolons.
	result addTokens: (nodes at: 8) to: result semicolons.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDatabaseStatement1: nodes [
	| result |
	result := TeradataDatabaseStatementNode new.
	result databaseToken: (nodes at: 1).
	result database: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery10: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery11: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result where: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery12: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result allToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery7: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery8: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result where: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery9: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result allToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDropTableQuery1: nodes [
	| result |
	result := TeradataDropTableQueryNode new.
	result dropToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForElseExpression1: nodes [
	| result |
	result := TeradataElseExpressionNode new.
	result elseToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForEmptyGroupByExpression1: nodes [
	| result |
	result := TeradataEmptyGroupByExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 2) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement3: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement4: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression100: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression102: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression103: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression104: nodes [
	| result |
	result := TeradataIntervalExpressionNode new.
	result intervalToken: (nodes at: 1).
	result interval: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression105: nodes [
	| result |
	result := TeradataCaseSpecificExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result caseSpecificToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression106: nodes [
	| result |
	result := TeradataTitleExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result titleToken: (nodes at: 3).
	result title: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression107: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression109: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result countType: (nodes at: 3).
	result value: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression112: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression113: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression116: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result existsToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result query: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression117: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result notToken: (nodes at: 1).
	result existsToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression118: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression119: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result withToken: (nodes at: 6).
	result errorToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression11: nodes [
	| result |
	result := TeradataBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression122: nodes [
	| result |
	result := TeradataXmlAggExpressionNode new.
	result xmlaggToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression123: nodes [
	| result |
	result := TeradataUnicodeEscapeExpressionNode new.
	result value: (nodes at: 1).
	result uescapeToken: (nodes at: 2).
	result escape: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression124: nodes [
	| result |
	result := TeradataIgnoreNullsExpressionNode new.
	result value: (nodes at: 1).
	result ignoreToken: (nodes at: 2).
	result nullsToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression26: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression27: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	result escapeToken: (nodes at: 4).
	result escape: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression28: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression29: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	result escapeToken: (nodes at: 5).
	result escape: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression2: nodes [
	| result |
	result := TeradataVariableExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression30: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression31: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result forToken: (nodes at: 6).
	result for: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression32: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result nullToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression33: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result nullToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression34: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression35: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression36: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNode: (nodes at: 4) to: result values.
	result addToken: (nodes at: 5) to: result commas.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression37: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression38: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result commas.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression39: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression3: nodes [
	| result |
	result := TeradataLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression40: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result query: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression41: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result inToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result query: (nodes at: 8).
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression42: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result notToken: (nodes at: 6).
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result query: (nodes at: 9).
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression43: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result formatToken: (nodes at: 3).
	result format: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression44: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression45: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result comma: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression46: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression47: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression48: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression49: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result formatToken: (nodes at: 6).
	result format: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression51: nodes [
	| result |
	result := TeradataUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression52: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result betweenToken: (nodes at: 2).
	result first: (nodes at: 3).
	result andToken: (nodes at: 4).
	result last: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression53: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result betweenToken: (nodes at: 3).
	result first: (nodes at: 4).
	result andToken: (nodes at: 5).
	result last: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression54: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression55: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression56: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result character: (nodes at: 4).
	result fromToken: (nodes at: 5).
	result value: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression5: nodes [
	| result |
	result := TeradataNullExpressionNode new.
	result nullToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression61: nodes [
	| result |
	result := TeradataQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result query: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression63: nodes [
	| result |
	result := TeradataExtractExpressionNode new.
	result extractToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result name: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression64: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression69: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression6: nodes [
	| result |
	result := TeradataStarExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression70: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression72: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression73: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression74: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression79: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression80: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression82: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression83: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression84: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression89: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression90: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression92: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression93: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression94: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression99: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionList2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile1: nodes [
	| result |
	result := TeradataFileNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result statements.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolons.
	result addTokens: (nodes at: 2) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile2: nodes [
	| result |
	result := TeradataFileNode new.
	result addTokens: (nodes at: 1) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFromTables1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression1: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression2: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression1: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression2: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHavingExpression1: nodes [
	| result |
	result := TeradataHavingNode new.
	result havingToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHelpSessionStatement1: nodes [
	| result |
	result := TeradataHelpSessionStatementNode new.
	result helpToken: (nodes at: 1).
	result sessionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifier1: nodes [
	| result |
	result := TeradataIdentifierExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifierName1: nodes [
	| result |
	result := TeradataIdentifierNameNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery11: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result query: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery12: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result query: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery5: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result valuesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery6: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result valuesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result addNodes: ((nodes at: 8) at: 1) to: result values.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery7: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result valuesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery8: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result valuesToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result addNodes: ((nodes at: 9) at: 1) to: result values.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIntoExpression1: nodes [
	| result |
	result := TeradataIntoExpressionNode new.
	result intoToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement1: nodes [
	| result |
	result := TeradataBeginLoadingStatementNode new.
	result beginToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result table: (nodes at: 3).
	result errorfilesToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result withToken: (nodes at: 6).
	result intervalToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement2: nodes [
	| result |
	result := TeradataEndLoadingStatementNode new.
	result endToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement5: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement6: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement7: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement8: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	result statement: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery1: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result mergeTable: (nodes at: 2).
	result usingToken: (nodes at: 3).
	result usingTable: (nodes at: 4).
	result onToken: (nodes at: 5).
	result condition: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery2: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result mergeTable: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result usingTable: (nodes at: 5).
	result onToken: (nodes at: 6).
	result condition: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression2: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result alias: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression3: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForOrderByExpression1: nodes [
	| result |
	result := TeradataOrderByExpressionNode new.
	result orderToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForParameter1: nodes [
	| result |
	result := TeradataParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForPartitionByExpression1: nodes [
	| result |
	result := TeradataPartitionByExpressionNode new.
	result partitionToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQualifyExpression1: nodes [
	| result |
	result := TeradataQualifyExpressionNode new.
	result qualifyToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression2: nodes [
	| result |
	result := Array new: 6.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression4: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression5: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression6: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForRollbackStatement1: nodes [
	| result |
	result := TeradataRollbackStatementNode new.
	result rollbackToken: (nodes at: 1).
	result workToken: (nodes at: 2).
	result work: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result tables.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery10: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result topToken: (nodes at: 3).
	result top: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result into: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result wheres.
	result addNodes: ((nodes at: 7) at: 2) to: result groups.
	result addNodes: ((nodes at: 7) at: 3) to: result havings.
	result addNodes: ((nodes at: 7) at: 4) to: result partitions.
	result addNodes: ((nodes at: 7) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 7) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 7) at: 7).
	result addNodes: ((nodes at: 7) at: 8) to: result tables.
	result addTokens: ((nodes at: 7) at: 9) to: result commas.
	result forToken: ((nodes at: 8) at: 1).
	result cursorToken: ((nodes at: 8) at: 2).
	result count: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery13: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery14: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result allToken: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result right: ((nodes at: 4) at: 2).
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery15: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery16: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result allToken: (nodes at: 5).
	result addToken: ((nodes at: 6) at: 1) to: result leftParens.
	result right: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 6) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery17: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result withTables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery18: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result recursiveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result withTables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery19: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result left: (nodes at: 1).
	result minusToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery20: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result minusToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery21: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery22: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery23: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery24: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery7: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result into: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result wheres.
	result addNodes: ((nodes at: 4) at: 2) to: result groups.
	result addNodes: ((nodes at: 4) at: 3) to: result havings.
	result addNodes: ((nodes at: 4) at: 4) to: result partitions.
	result addNodes: ((nodes at: 4) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 4) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result tables.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result forToken: ((nodes at: 5) at: 1).
	result cursorToken: ((nodes at: 5) at: 2).
	result count: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery8: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result topToken: (nodes at: 2).
	result top: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result into: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result wheres.
	result addNodes: ((nodes at: 6) at: 2) to: result groups.
	result addNodes: ((nodes at: 6) at: 3) to: result havings.
	result addNodes: ((nodes at: 6) at: 4) to: result partitions.
	result addNodes: ((nodes at: 6) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 6) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 6) at: 7).
	result addNodes: ((nodes at: 6) at: 8) to: result tables.
	result addTokens: ((nodes at: 6) at: 9) to: result commas.
	result forToken: ((nodes at: 7) at: 1).
	result cursorToken: ((nodes at: 7) at: 2).
	result count: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery9: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result into: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result wheres.
	result addNodes: ((nodes at: 5) at: 2) to: result groups.
	result addNodes: ((nodes at: 5) at: 3) to: result havings.
	result addNodes: ((nodes at: 5) at: 4) to: result partitions.
	result addNodes: ((nodes at: 5) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 5) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result tables.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result forToken: ((nodes at: 6) at: 1).
	result cursorToken: ((nodes at: 6) at: 2).
	result count: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetExpression1: nodes [
	| result |
	result := TeradataSetExpressionNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement1: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result forToken: (nodes at: 5).
	result sessionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement2: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result updateToken: (nodes at: 5).
	result forToken: (nodes at: 6).
	result sessionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable10: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result direction: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable12: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result type: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable13: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable14: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result direction: (nodes at: 3).
	result type: (nodes at: 4).
	result joinToken: (nodes at: 5).
	result right: (nodes at: 6).
	result onToken: ((nodes at: 7) at: 1).
	result on: ((nodes at: 7) at: 2).
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable17: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable1: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable2: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable3: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable4: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable5: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable6: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result asToken: (nodes at: 4).
	result alias: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable7: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result joinToken: (nodes at: 2).
	result right: (nodes at: 3).
	result onToken: ((nodes at: 4) at: 1).
	result on: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement1: nodes [
	| result |
	result := TeradataBeginTransactionStatementNode new.
	result beginToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement2: nodes [
	| result |
	result := TeradataEndTransactionStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType1: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType2: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result characterToken: (nodes at: 2).
	result setToken: (nodes at: 3).
	result encoding: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType3: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType4: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result characterToken: (nodes at: 5).
	result setToken: (nodes at: 6).
	result encoding: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType5: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType6: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result characterToken: (nodes at: 7).
	result setToken: (nodes at: 8).
	result encoding: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeName2: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery10: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery12: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery13: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery15: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery16: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery18: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result else: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery19: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery1: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery20: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery3: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result elseToken: (nodes at: 5).
	result else: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery4: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery6: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery7: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery9: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn1: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn2: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumns2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result columns.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement2: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result columns.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpression1: nodes [
	| result |
	result := TeradataWhenExpressionNode new.
	result whenToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpressions1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition1: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result matchedToken: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result updateToken: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition2: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition3: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	result valuesToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result leftParens.
	result addNodes: ((nodes at: 11) at: 1) to: result values.
	result addTokens: ((nodes at: 11) at: 2) to: result commas.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhereExpression1: nodes [
	| result |
	result := TeradataWhereExpressionNode new.
	result whereToken: (nodes at: 1).
	result where: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable1: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable2: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result query: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_2: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 7 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__ON___onToken__Expression__on___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #testing }
TeradataParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
TeradataParser >> useAllTokenIds [
	^ false
]
