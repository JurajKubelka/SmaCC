Class {
	#name : #TeradataParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Teradata_Parser'
}

{ #category : #generated }
TeradataParser class >> ambiguousTransitions [
^#(
#[ 0 206 2 177] 
#[ 0 206 2 237] 
#[ 0 206 2 245] 
#[ 0 206 3 13] 
#[ 0 210 2 177] 
#[ 0 210 2 237] 
#[ 0 210 2 245] 
#[ 0 210 3 13] 
#[ 0 222 2 177] 
#[ 0 222 2 237] 
#[ 0 222 2 245] 
#[ 0 222 3 13] 
#[ 0 238 0 242] 
#[ 1 54 1 58] 
#[ 1 146 6 249] 
#[ 1 210 2 177] 
#[ 1 210 2 237] 
#[ 1 210 2 245] 
#[ 1 210 3 13] 
#[ 1 214 2 177] 
#[ 1 214 2 237] 
#[ 1 214 2 245] 
#[ 1 214 3 13] 
#[ 1 218 2 177] 
#[ 1 218 2 237] 
#[ 1 218 2 245] 
#[ 1 218 3 13] 
#[ 1 222 2 177] 
#[ 1 222 2 237] 
#[ 1 222 2 245] 
#[ 1 222 3 13] 
#[ 1 226 2 177] 
#[ 1 226 2 237] 
#[ 1 226 2 245] 
#[ 1 226 3 13] 
#[ 1 230 2 177] 
#[ 1 230 2 237] 
#[ 1 230 2 245] 
#[ 1 230 3 13] 
#[ 1 234 2 177] 
#[ 1 234 2 237] 
#[ 1 234 2 245] 
#[ 1 234 3 13] 
#[ 1 238 2 177] 
#[ 1 238 2 237] 
#[ 1 238 2 245] 
#[ 1 238 3 13] 
#[ 1 242 2 177] 
#[ 1 242 2 237] 
#[ 1 242 2 245] 
#[ 1 242 3 13] 
#[ 1 246 2 177] 
#[ 1 246 2 237] 
#[ 1 246 2 245] 
#[ 1 246 3 13] 
#[ 1 250 2 177] 
#[ 1 250 2 237] 
#[ 1 250 2 245] 
#[ 1 250 3 13] 
#[ 1 254 2 177] 
#[ 1 254 2 237] 
#[ 1 254 2 245] 
#[ 1 254 3 13] 
#[ 2 2 2 177] 
#[ 2 2 2 237] 
#[ 2 2 2 245] 
#[ 2 2 3 13] 
#[ 2 10 2 177] 
#[ 2 10 2 237] 
#[ 2 10 2 245] 
#[ 2 10 3 13] 
#[ 2 18 2 177] 
#[ 2 18 7 173] 
#[ 2 18 2 237] 
#[ 2 18 2 245] 
#[ 2 18 3 13] 
#[ 2 22 2 177] 
#[ 2 22 2 237] 
#[ 2 22 2 245] 
#[ 2 22 3 13] 
#[ 2 26 2 177] 
#[ 2 26 2 237] 
#[ 2 26 2 245] 
#[ 2 26 3 13] 
#[ 2 30 2 177] 
#[ 2 30 2 237] 
#[ 2 30 2 245] 
#[ 2 30 3 13] 
#[ 2 34 2 177] 
#[ 2 34 2 237] 
#[ 2 34 2 245] 
#[ 2 34 3 13] 
#[ 2 78 3 93] 
#[ 2 78 3 97] 
#[ 2 78 3 101] 
#[ 2 78 3 105] 
#[ 2 78 3 109] 
#[ 2 78 8 49] 
#[ 2 78 3 113] 
#[ 2 177 2 198] 
#[ 2 198 2 237] 
#[ 2 198 2 245] 
#[ 2 198 3 13] 
#[ 2 177 2 202] 
#[ 2 202 9 189] 
#[ 2 202 2 237] 
#[ 2 202 2 245] 
#[ 2 202 3 13] 
#[ 2 178 3 102] 
#[ 1 254 2 177 3 118] 
#[ 1 254 2 181 3 118] 
#[ 1 254 2 185 3 118] 
#[ 1 254 2 189 3 118] 
#[ 1 254 2 193 3 118] 
#[ 1 254 2 197 3 118] 
#[ 1 254 2 201 3 118] 
#[ 1 254 2 205 3 118] 
#[ 1 254 2 209 3 118] 
#[ 1 254 2 213 3 118] 
#[ 1 254 2 217 3 118] 
#[ 1 254 2 221 3 118] 
#[ 1 254 2 225 3 118] 
#[ 1 254 2 229 3 118] 
#[ 1 254 2 233 3 118] 
#[ 1 254 2 237 3 118] 
#[ 1 254 2 241 3 118] 
#[ 1 254 2 245 3 118] 
#[ 1 254 2 249 3 118] 
#[ 1 254 2 253 3 118] 
#[ 1 254 3 1 3 118] 
#[ 1 254 3 5 3 118] 
#[ 1 254 3 9 3 118] 
#[ 1 254 3 13 3 118] 
#[ 1 254 3 17 3 118] 
#[ 1 182 3 122] 
#[ 2 177 3 126] 
#[ 2 237 3 126] 
#[ 2 245 3 126] 
#[ 3 13 3 126] 
#[ 1 254 2 177 4 50] 
#[ 1 254 2 181 4 50] 
#[ 1 254 2 185 4 50] 
#[ 1 254 2 189 4 50] 
#[ 1 254 2 193 4 50] 
#[ 1 254 2 197 4 50] 
#[ 1 254 2 201 4 50] 
#[ 1 254 2 205 4 50] 
#[ 1 254 2 209 4 50] 
#[ 1 254 2 213 4 50] 
#[ 1 254 2 217 4 50] 
#[ 1 254 2 221 4 50] 
#[ 1 254 2 225 4 50] 
#[ 1 254 2 229 4 50] 
#[ 1 254 2 233 4 50] 
#[ 1 254 2 237 4 50] 
#[ 1 254 2 241 4 50] 
#[ 1 254 2 245 4 50] 
#[ 1 254 2 249 4 50] 
#[ 1 254 2 253 4 50] 
#[ 1 254 3 1 4 50] 
#[ 1 254 3 5 4 50] 
#[ 1 254 3 9 4 50] 
#[ 1 254 3 13 4 50] 
#[ 1 254 3 17 4 50] 
#[ 1 182 4 54] 
#[ 2 177 4 58] 
#[ 2 237 4 58] 
#[ 2 245 4 58] 
#[ 3 13 4 58]
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> cacheId [
	^'2022-02-08T14:56:47.8372-06:00'
]

{ #category : #generated }
TeradataParser class >> definitionComment [
"%glr;
%ignorecase;
%left ""UNION"" ""MINUS"" ""INTERSECT"" ""EXCEPT"";
%left ""OR"";
%left ""AND"";
%nonassoc ""="" ""EQ"" ""<>"" ""NE"" ""<"" ""<="" "">"" "">="" ""BETWEEN"";
%left ""||"";
%nonassoc ""LIKE"" ""IN"" ""NOT"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""MOD"";
%right ""**"";

%prefix Teradata;
%suffix Node;
%root Program;
%hierarchy Expression (
    AliasedExpression
    BetweenExpression
    BinaryExpression
    CaseExpression
    CaseSpecificExpression
    CastExpression
    ConversionExpression
    CountExpression
    DistinctExpression
    EmptyGroupByExpression
    ExistsExpression
    ExtractExpression
    FunctionExpression
    IdentifierExpression
    IgnoreNullsExpression
    InQueryExpression
    IntervalExpression
    InValueExpression
    IsNullExpression
    LikeExpression
    LiteralExpression
    NullExpression
    OverExpression
    QueryExpression
    StarExpression
    SubstringExpression
    TimestampExpression
    TitleExpression
    TranslateExpression
    TrimExpression
    UnicodeEscapeExpression
    UnaryExpression
    VariableExpression
    XmlAggExpression
);
%start File Expression ExpressionListNode ExpressionWithDistinct;

<identifier>
	: [a-z_\$\#][a-z0-9_\$\#\@]* 
	| (\"" [^\""\r\n]* \"")+
	;
<variable>
	: \: <identifier>
	| \?
	;
<ustring>
	: U \& (\' [^\']* \')+
	;
<string>
	: (\' [^\']* \')+
	| \' [0-9A-F]* \' \s* XC[VF]?
	;
<number>
	: [0-9][0-9X]* (\. [0-9X]*)?	# XXXX -- patterns?
	;
<whitespace>
	: \s+
	;
<comment>
	: \-\- [^\r\n]*
	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;
File
	: Statements "";"" 'semicolon'* {{}}
	| "";"" 'semicolon'* {{}}
	;
Statements
	: Statement 'statement'
	| Statements "";"" 'semicolon'* "";"" 'semicolon' Statement 'statement'
	;
Statement
	: SelectQuery
	| DeleteQuery
	| ExecuteStatement
	| DatabaseStatement
	| TransactionStatement
	| HelpSessionStatement
	| SetStatement
	| CheckWorkloadStatement
	| LoadingStatement
	| UsingStatement
	| InsertQuery
	| UpdateQuery
	| DropTableQuery
	| CheckpointStatement
	| CreateMacroStatement
	| LockTableStatement
	| RollbackStatement
	| MergeQuery	;
MergeQuery
	: ""MERGE"" 'mergeToken' ""INTO"" 'intoToken'? Table 'mergeTable' ""USING"" 'usingToken' Table 'usingTable' ""ON"" 'onToken' Expression 'condition' WhenMergeCondition 'whenMerge'+ {{}}
	;
WhenMergeCondition
	: ""WHEN"" 'whenToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""UPDATE"" 'updateToken' ""SET"" 'setToken' SetExpressionList {{}}
	| ""WHEN"" 'whenToken' ""NOT"" 'notToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""INSERT"" 'insertToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' (""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen')? {{}}
	;
RollbackStatement
	: ""ROLLBACK"" 'rollbackToken' ""WORK"" 'workToken' <string> 'work' ""FROM"" 'fromToken' TableList WhereExpression 'where' {{}}
	;
LockTableStatement
	: (""LOCKING"" 'lockToken' | ""LOCK"" 'lockToken') ""TABLE"" 'tableToken'? TableName 'table' ""FOR"" 'forToken' <identifier> 'lock' Statement 'statement'? {{}}
	;
CreateMacroStatement
	: ""CREATE"" 'createToken' ""MACRO"" 'macroToken' IdentifierName 'name' MacroArgs ""AS"" 'asToken' ""("" 'leftParen' Statements "";"" 'semicolon'* "")"" 'rightParen' {{}}
	;
MacroArgs
	:
	| ""("" 'leftParen' ParameterList "")"" 'rightParen'
	;
ParameterList
	: Parameter 'parameter'
	| ParameterList "","" 'comma' Parameter 'parameter'
	;
Parameter
	: IdentifierName 'name' Type 'type' {{}}
	;
Type
	: TypeName (""("" 'leftParen' <number> 'precision' ("","" 'comma' <number> 'scale')? "")"" 'rightParen')? (""CHARACTER"" 'characterToken' ""SET"" 'setToken' <identifier> 'encoding')? {{}}
	;
TypeName
	: SingleTypeName 'name'
	| ""DOUBLE"" 'name' ""PRECISION"" 'name'
	;
SingleTypeName
	: ""CHAR""
	| ""VARCHAR""
	| ""CLOB""
	| ""DATE""
	| ""TIME""
	| ""TIMESTAMP""
	| ""BYTEINT""
	| ""SMALLINT""
	| ""INT""
	| ""INTEGER""
	| ""BIGINT""
	| ""DEC""
	| ""DECIMAL""
	| ""NUMERIC""
	| ""FLOAT""
	| ""REAL""
	| ""NUMBER""
	| ""VARBYTE""
	| ""BYTE""
	;
CheckpointStatement
	: ""CHECKPOINT"" 'checkpointToken' ""LOADING"" 'loadingToken' ""INTERVAL"" 'intervalToken' <number> 'interal' ""END"" 'endToken'? {{}}
	;
DropTableQuery
	: ""DROP"" 'dropToken' ""TABLE"" 'tableToken' TableName 'table' {{}}
	;
UpdateQuery
	: ""UPDATE"" 'updateToken' TableName 'table' (""AS"" 'asToken'? <identifier> 'alias')? ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? (""ELSE"" 'elseToken' (InsertQuery 'else' | UpdateQuery 'else'))? {{}}
	| ""UPDATE"" 'updateToken' TableName 'table' ""FROM"" 'fromToken' TableList ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? {{}}
	;
SetExpressionList
	: SetExpression 'setExpression'
	| SetExpressionList "","" 'comma' SetExpression 'setExpression'
	;
SetExpression
	: Identifier 'name' ""="" 'equals' Expression 'value' {{}}
	;
InsertQuery
	: (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken'? TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	| (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken' TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? SelectQuery 'query' {{}}
	;
UsingStatement
	: ""USING"" 'usingToken' UsingColumns Statement 'statement' {{}}
	| ""USING"" 'usingToken' ""("" 'leftParen' UsingColumns "")"" 'rightParen' Statement 'statement' {{}}
	;
UsingColumns
	: UsingColumn 'column'
	| UsingColumns "","" 'comma' UsingColumn 'column'
	;
UsingColumn
	: <identifier> 'name' Type 'type' {{}}
	| <identifier> 'name' ""("" 'leftParen' Type 'type' "")"" 'rightParen' {{}}
	;
LoadingStatement
	: ""BEGIN"" 'beginToken' ""LOADING"" 'loadingToken' TableName 'table' ""ERRORFILES"" 'errorfilesToken' ExpressionList ""WITH"" 'withToken' ""INTERVAL"" 'intervalToken' {{BeginLoadingStatement}}
	| ""END"" 'endToken' ""LOADING"" 'loadingToken' {{EndLoadingStatement}}
	;
CheckWorkloadStatement
	: ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""FOR"" 'forToken' Statement 'statement'  {{}}
	| ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""END"" 'endToken'  {{}}
	;
SetStatement
	: ""SET"" 'setToken' IdentifierName 'name' ""="" 'equals' Expression 'value' ""UPDATE"" 'updateToken'? ""FOR"" 'forToken' ""SESSION"" 'sessionToken' {{}}
	;
HelpSessionStatement
	: ""HELP"" 'helpToken' ""SESSION"" 'sessionToken' {{}}
	;
TransactionStatement
	: ""BT"" 'beginToken' {{BeginTransactionStatement}}
	| ""ET"" 'endToken' {{EndTransactionStatement}}
	;
DatabaseStatement
	: ""DATABASE"" 'databaseToken' IdentifierName 'database' {{}}
	;
ExecuteStatement
	: (""EXECUTE"" 'executeToken' | ""EXEC"" 'executeToken') IdentifierName 'name' ( ""("" 'leftParen' ExpressionList "")"" 'rightParen' )? {{}}
	;
DeleteQuery
	: (""DELETE"" 'deleteToken' | ""DEL"" 'deleteToken') ""FROM"" 'fromToken'? Table 'table' (WhereExpression 'where' | ""ALL"" 'allToken')? {{}}
	;
SelectQuery
	: (""SELECT"" 'selectToken' | ""SEL"" 'selectToken') (""DISTINCT"" 'distinctToken' | ""DISTINCTROW"" 'distinctToken')? (""TOP"" 'topToken' <number> 'top')? ExpressionList IntoExpression 'into'? (FromTables? QueryExpressions)? (""FOR"" 'forToken' ""CURSOR"" 'cursorToken')? (<number> 'count')? {{}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""UNION"" 'unionToken' ""ALL"" 'allToken'? UnionSelectQuery {{UnionQuery}}
	| ""WITH"" 'withToken' ""RECURSIVE"" 'recursiveToken'? WithTables Statement 'statement' {{WithQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""MINUS"" 'minusToken' UnionSelectQuery {{MinusQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""INTERSECT"" 'intersectToken' UnionSelectQuery {{IntersectQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""EXCEPT"" 'intersectToken' UnionSelectQuery {{ExceptQuery}}
	;
QueryExpressions
	:
	| QueryExpressions QueryExpression
	;
QueryExpression
	: WhereExpression 'where'
	| GroupByExpression 'group'
	| HavingExpression 'having'
	| PartitionByExpression 'partition'
	| QualifyExpression 'qualify'
	| OrderByExpression 'orderBy'
	;
WithTables
	: WithTable 'withTable'
	| WithTables "","" 'comma' WithTable 'withTable'
	;
WithTable
	: IdentifierName 'name' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""AS"" 'asToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{WithTableDefinition}}
	;
HavingExpression
	: ""HAVING"" 'havingToken' Expression 'condition' {{Having}}
	;
UnionSelectQuery
	: ""("" 'leftParen' SelectQuery 'right' "")"" 'rightParen' OrderByExpression 'orderBy'
	| SelectQuery 'right'
	;
QualifyExpression
	: ""QUALIFY"" 'qualifyToken' Expression 'condition' {{}}
	;
PartitionByExpression
	: ""PARTITION"" 'partitionToken' ""BY"" 'byToken' ExpressionList {{}}
	;
IntoExpression
	: ""INTO"" 'intoToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	;
FromTables
	: ""FROM"" 'fromToken' TableList
	;
TableList
	: Table 'table'
	| TableList "","" 'comma' Table 'table'
	;
 Table
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' (""AS"" 'asToken'? <identifier> 'alias')? {{Table}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' (""AS"" 'asToken'? <identifier> 'alias')? {{SelectTable}}
	| Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction' | ""FULL"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? {{JoinTable}}
	| ""("" 'leftParen' Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? "")"" 'rightParen' {{JoinTable}}
	;
TableName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{Table}}
	;
WhereExpression
	: ""WHERE"" 'whereToken' Expression 'where' {{}}
	;
GroupByExpression
	: ""GROUP"" 'groupToken' ""BY"" 'byToken' ExpressionList {{GroupBy}}
	| ""GROUP"" 'groupToken' ""BY"" 'byToken' EmptyGroupByExpression 'value' {{GroupBy}}
	;
EmptyGroupByExpression
	: ""("" 'leftParen' "")"" 'rightParen' {{EmptyGroupByExpression}}
	;
OrderByExpression
	: ""ORDER"" 'orderToken' ""BY"" 'byToken' ExpressionList {{}}
	;
ExpressionList
	: NamedExpression 'value'
	| ExpressionList "","" 'comma'+ NamedExpression 'value'
	;
NamedExpression
	: Expression 
	| Expression 'expression' ""AS"" 'asToken'? <identifier> 'alias' {{AliasedExpression}}
	;
Expression
	: Identifier
	| <variable> 'name' {{VariableExpression}}
	| <string> 'value' {{LiteralExpression}}
	| <number> 'value' {{LiteralExpression}}
	| ""NULL"" 'nullToken' {{NullExpression}}
	| (<identifier> 'name' ""."" 'period')* ""*"" 'star' {{StarExpression}}
	| CaseExpression
	| FunctionExpression
	| Expression 'left' (""+"" 'operator' | ""-"" 'operator' | ""*"" 'operator' | ""/"" 'operator' | ""MOD"" 'operator' | ""||"" 'operator' | ""**"" 'operator' | ""EQ"" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'left' (""AND"" 'operator' | ""OR"" 'operator' | ""="" 'operator' | ""<>"" 'operator' | ""NE"" 'operator' |  ""<"" 'operator' | ""<="" 'operator' | "">"" 'operator' | "">="" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""LIKE"" 'likeToken' Expression 'like' (""ESCAPE"" 'escapeToken' Expression 'escape')? {{LikeExpression}}
	| ""SUBSTRING"" 'substringToken' ""("" 'leftParen' Expression 'value' ""FROM"" 'fromToken' Expression 'from' (""FOR"" 'forToken' Expression 'for')? "")"" 'rightParen' {{SubstringExpression}}
	| Expression 'value' ""IS"" 'isToken' ""NOT"" 'notToken'? ""NULL"" 'nullToken' {{IsNullExpression}}
	| ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}
	| Expression 'testValue' ""NOT"" 'notToken'? ""IN"" 'inToken' (Expression 'value' | ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen') {{InValueExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| Expression 'value' ""("" 'leftParen' ""FORMAT"" 'formatToken' <string> 'format' "")"" 'rightParen' {{ConversionExpression}}
	| Expression 'value' ""("" 'leftParen' Type 'type' ("","" 'comma' ""FORMAT"" 'formatToken' <string> 'format' )? "")"" 'rightParen' {{ConversionExpression}}
	| ""CAST"" 'castToken' ""("" 'leftParen' Expression 'value' ""AS"" 'asToken' Type 'type'? (""FORMAT"" 'formatToken' <string> 'format')? "")"" 'rightParen' {{CastExpression}}
	| (""-"" 'operator' | ""+"" 'operator') Expression 'value' {{UnaryExpression}}
	| Expression 'value' (""NOT"" 'notToken')? ""BETWEEN"" 'betweenToken' Expression 'first' ""AND"" 'andToken' Expression 'last' {{BetweenExpression}}
	| ""TRIM"" 'trimToken' ""("" 'leftParen' ((""BOTH"" 'positionToken' | ""TRAILING"" 'positionToken' | ""LEADING"" 'positionToken') <string> 'character'? ""FROM"" 'fromToken')? Expression 'value' "")"" 'rightParen' {{TrimExpression}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{QueryExpression}}
	| ""NOT"" 'operator' Expression 'value' {{UnaryExpression}}
	| ""EXTRACT"" 'extractToken' ""("" 'leftParen'  <identifier> 'name' ""FROM"" 'fromToken' Expression 'value' "")"" 'rightParen' {{ExtractExpression}}
	| Expression 'value' ""OVER"" 'overToken' ""("" 'leftParen' PartitionByExpression 'partition'? OrderByExpression 'orderBy'? (""ROWS"" 'rows' ""BETWEEN"" 'betweenToken' ((<number> 'from' | ""UNBOUNDED"" 'from') ""PRECEDING"" 'precedingToken' | ""CURRENT"" 'currentFromToken' ""ROW"" 'rowFromToken') ""AND"" 'andToken' ((<number> 'to' | ""UNBOUNDED"" 'to') ""PRECEDING"" 'precedingToken' | ""CURRENT"" 'currentToToken' ""ROW"" 'rowToToken'))? "")"" 'rightParen' {{OverExpression}}
	| ""INTERVAL"" 'intervalToken' <string> 'interval' <identifier> 'name' {{IntervalExpression}}
	| Expression 'value' ""("" 'leftParen' ""CASESPECIFIC"" 'caseSpecificToken' "")"" 'rightParen' {{CaseSpecificExpression}}
	| Expression 'value' ""("" 'leftParen' ""TITLE"" 'titleToken' <string> 'title' "")"" 'rightParen' {{TitleExpression}}
	| ""COUNT"" 'countToken' ""("" 'leftParen' (""DISTINCT"" 'countType' | ""ALL"" 'countType')? Expression 'value' "")"" 'rightParen' {{CountExpression}}
	| (""TIMESTAMP"" 'typeToken' | ""DATE"" 'typeToken' | ""TIME"" 'typeToken') (<string> 'value')? {{TimestampExpression}}
	| (""NOT"" 'notToken')? ""EXISTS"" 'existsToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{ExistsExpression}}
	| (""TRANSLATE"" 'translateToken' | ""TRANSLATE_CHK"" 'translateToken') ""("" 'leftParen' Expression 'value' ""USING"" 'usingToken' <identifier> 'operation' (""WITH"" 'withToken' ""ERROR"" 'errorToken')? "")"" 'rightParen' {{TranslateExpression}}
	| ""XMLAGG"" 'xmlaggToken' ""("" 'leftParen' Expression 'value' OrderByExpression 'orderBy' "")"" 'rightParen' {{XmlAggExpression}}
	| <ustring> 'value' ""UESCAPE"" 'uescapeToken' <string> 'escape' {{UnicodeEscapeExpression}}
	| Expression 'value' ""IGNORE"" 'ignoreToken' ""NULLS"" 'nullsToken' {{IgnoreNullsExpression}}
	;
CaseExpression
	: ""CASE"" 'caseToken' Expression 'expression'? WhenExpressions ElseExpression 'else'? ""END"" 'endToken' {{}}
	;
ElseExpression
	: ""ELSE"" 'elseToken' Expression 'value' {{}}
	;
WhenExpressions
	: WhenExpression 'when'
	| WhenExpressions WhenExpression 'when'
	;
WhenExpression
	: ""WHEN"" 'whenToken' Expression 'condition' ""THEN"" 'thenToken' Expression 'value' {{}}
	;
FunctionExpression
	: IdentifierName 'function' ""("" 'leftParen' ExpressionList? "")"" 'rightParen' {{}}
	;
Identifier
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{IdentifierExpression}}
	;
IdentifierName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{}}
	;
ExpressionListNode
	: ExpressionList {{ExpressionList}}
	;
ExpressionWithDistinct
	: ""DISTINCT"" 'distinctToken' Expression 'value' {{DistinctExpression}}
	| Expression {'1'}
	;"
]

{ #category : #generated }
TeradataParser class >> reduceTable [
^#(
	#(155 0 #reduceActionFor_____semicolon__1: 1554433 false) 
	#(208 0 #reduceActionFor__identifier___name_______period___1: 8929281 false) 
	#(183 1 #reduceActionForTransactionStatement1: 6267905 false) 
	#(183 1 #reduceActionForTransactionStatement2: 6267906 false) 
	#(154 1 #reduceActionForFile2: 1534978 false) 
	#(156 1 #reduceActionForStatements1: 1605633 false) 
	#(157 1 #liftFirstValue: 1716242 false) 
	#(157 1 #liftFirstValue: 1716241 false) 
	#(157 1 #liftFirstValue: 1716240 false) 
	#(157 1 #liftFirstValue: 1716239 false) 
	#(157 1 #liftFirstValue: 1716238 false) 
	#(157 1 #liftFirstValue: 1716237 false) 
	#(157 1 #liftFirstValue: 1716236 false) 
	#(157 1 #liftFirstValue: 1716235 false) 
	#(157 1 #liftFirstValue: 1716234 false) 
	#(157 1 #liftFirstValue: 1716233 false) 
	#(157 1 #liftFirstValue: 1716232 false) 
	#(157 1 #liftFirstValue: 1716231 false) 
	#(157 1 #liftFirstValue: 1716230 false) 
	#(157 1 #liftFirstValue: 1716229 false) 
	#(157 1 #liftFirstValue: 1716228 false) 
	#(157 1 #liftFirstValue: 1716227 false) 
	#(157 1 #liftFirstValue: 1716226 false) 
	#(157 1 #liftFirstValue: 1716225 false) 
	#(220 1 #reduceActionForExpression112: 10330224 false) 
	#(220 1 #reduceActionForExpression5: 10330117 false) 
	#(220 1 #reduceActionForExpression112: 10330226 false) 
	#(220 1 #reduceActionForExpression112: 10330222 false) 
	#(220 1 #reduceActionForExpression2: 10330114 false) 
	#(220 1 #reduceActionForExpression3: 10330115 false) 
	#(220 1 #reduceActionForExpression3: 10330116 false) 
	#(220 1 #liftFirstValue: 10330119 false) 
	#(220 1 #liftFirstValue: 10330120 false) 
	#(220 1 #liftFirstValue: 10330113 false) 
	#(228 1 #reduceActionForExpressionListNode1: 15682561 false) 
	#(217 1 #reduceActionForStatements1: 10104833 false) 
	#(219 1 #liftFirstValue: 10207233 false) 
	#(229 1 #liftFirstValue: 15742978 false) 
	#(184 2 #reduceActionForDatabaseStatement1: 6392833 false) 
	#(186 2 #reduceActionForDeleteQuery7: 6634503 false) 
	#(186 2 #reduceActionForDeleteQuery7: 6634497 false) 
	#(179 2 #reduceActionForLoadingStatement2: 5543938 false) 
	#(185 2 #reduceActionForExecuteStatement3: 6476803 false) 
	#(185 2 #reduceActionForExecuteStatement3: 6476801 false) 
	#(182 2 #reduceActionForHelpSessionStatement1: 6190081 false) 
	#(188 0 #nil 6966273 false) 
	#(177 1 #reduceActionForStatements1: 5321729 false) 
	#(197 1 #reduceActionForStatements1: 8046593 false) 
	#(155 2 #reduceActionFor_____semicolon__2: 1554434 false) 
	#(154 2 #reduceActionForFile1: 1534977 false) 
	#(220 2 #reduceActionForExpression51: 10330163 false) 
	#(220 2 #reduceActionForExpression51: 10330162 false) 
	#(223 1 #reduceActionForWhenExpressions1: 15195137 false) 
	#(220 2 #reduceActionForExpression113: 10330225 false) 
	#(220 2 #reduceActionForExpression51: 10330174 false) 
	#(220 2 #reduceActionForExpression113: 10330227 false) 
	#(220 2 #reduceActionForExpression113: 10330223 false) 
	#(220 2 #reduceActionForExpression6: 10330118 false) 
	#(226 2 #reduceActionForIdentifier1: 15498241 false) 
	#(227 2 #reduceActionForIdentifierName1: 15598593 false) 
	#(208 2 #reduceActionFor__identifier___name_______period___2: 8929282 false) 
	#(218 1 #reduceActionForWhenExpressions1: 10166273 false) 
	#(219 2 #reduceActionForNamedExpression2: 10207234 false) 
	#(229 2 #reduceActionForExpressionWithDistinct1: 15742977 false) 
	#(180 3 #reduceActionForCheckWorkloadStatement2: 5824514 false) 
	#(164 0 #reduceActionForMacroArgs1: 3192833 false) 
	#(186 3 #reduceActionForDeleteQuery10: 6634506 false) 
	#(186 3 #reduceActionForDeleteQuery9: 6634505 false) 
	#(209 0 #nil 9235457 false) 
	#(186 3 #reduceActionForDeleteQuery8: 6634504 false) 
	#(206 2 #reduceActionForTable1: 8920065 false) 
	#(186 3 #reduceActionForDeleteQuery10: 6634500 false) 
	#(186 3 #reduceActionForDeleteQuery9: 6634499 false) 
	#(186 3 #reduceActionForDeleteQuery8: 6634498 false) 
	#(171 3 #reduceActionForDropTableQuery1: 4078593 false) 
	#(212 2 #reduceActionForTable1: 9606145 false) 
	#(195 0 #reduceActionForQueryExpressions1: 7778305 false) 
	#(190 0 #reduceActionFor_FromTables__QueryExpressions__1: 6989825 false) 
	#(188 1 #liftFirstValue: 6966274 false) 
	#(169 1 #liftFirstValue: 3680267 false) 
	#(169 1 #liftFirstValue: 3680275 false) 
	#(169 1 #liftFirstValue: 3680263 false) 
	#(169 1 #liftFirstValue: 3680257 false) 
	#(169 1 #liftFirstValue: 3680259 false) 
	#(169 1 #liftFirstValue: 3680260 false) 
	#(169 1 #liftFirstValue: 3680268 false) 
	#(169 1 #liftFirstValue: 3680269 false) 
	#(169 1 #liftFirstValue: 3680271 false) 
	#(169 1 #liftFirstValue: 3680265 false) 
	#(169 1 #liftFirstValue: 3680266 false) 
	#(169 1 #liftFirstValue: 3680273 false) 
	#(169 1 #liftFirstValue: 3680270 false) 
	#(169 1 #liftFirstValue: 3680272 false) 
	#(169 1 #liftFirstValue: 3680264 false) 
	#(169 1 #liftFirstValue: 3680261 false) 
	#(169 1 #liftFirstValue: 3680262 false) 
	#(169 1 #liftFirstValue: 3680274 false) 
	#(169 1 #liftFirstValue: 3680258 false) 
	#(178 2 #reduceActionForUsingColumn1: 5412865 false) 
	#(167 1 #reduceActionForType1: 3411969 false) 
	#(168 1 #reduceActionForWhenExpressions1: 3603457 false) 
	#(176 3 #reduceActionForUsingStatement1: 5138433 false) 
	#(187 3 #reduceActionForSelectQuery17: 6788113 false) 
	#(200 1 #reduceActionForUnionSelectQuery2: 8402946 false) 
	#(187 3 #reduceActionForSelectQuery23: 6788119 false) 
	#(187 3 #reduceActionForSelectQuery21: 6788117 false) 
	#(187 3 #reduceActionForSelectQuery19: 6788115 false) 
	#(187 3 #reduceActionForSelectQuery13: 6788109 false) 
	#(220 3 #reduceActionForExpression61: 10330173 false) 
	#(220 3 #reduceActionForExpression34: 10330146 false) 
	#(221 3 #reduceActionForCaseExpression1: 15000577 false) 
	#(223 2 #reduceActionFor_____semicolon__2: 15195138 false) 
	#(220 3 #reduceActionForExpression104: 10330216 false) 
	#(220 3 #reduceActionForExpression123: 10330235 false) 
	#(207 2 #reduceActionFor__identifier___name_______period__1: 8929281 false) 
	#(220 3 #reduceActionForExpression11: 10330123 false) 
	#(220 3 #reduceActionForExpression11: 10330127 false) 
	#(220 3 #reduceActionForExpression11: 10330121 false) 
	#(220 3 #reduceActionForExpression11: 10330122 false) 
	#(220 3 #reduceActionForExpression11: 10330124 false) 
	#(220 3 #reduceActionForExpression11: 10330134 false) 
	#(220 3 #reduceActionForExpression11: 10330135 false) 
	#(220 3 #reduceActionForExpression11: 10330132 false) 
	#(220 3 #reduceActionForExpression11: 10330131 false) 
	#(220 3 #reduceActionForExpression11: 10330136 false) 
	#(220 3 #reduceActionForExpression11: 10330137 false) 
	#(220 3 #reduceActionForExpression11: 10330129 false) 
	#(220 3 #reduceActionForExpression11: 10330128 false) 
	#(220 3 #reduceActionForExpression124: 10330236 false) 
	#(220 3 #reduceActionForExpression35: 10330147 false) 
	#(220 3 #reduceActionForExpression32: 10330144 false) 
	#(220 3 #reduceActionForExpression26: 10330138 false) 
	#(220 3 #reduceActionForExpression11: 10330125 false) 
	#(220 3 #reduceActionForExpression11: 10330133 false) 
	#(220 3 #reduceActionForExpression11: 10330130 false) 
	#(220 3 #reduceActionForExpression11: 10330126 false) 
	#(225 3 #reduceActionForFunctionExpression1: 15390721 false) 
	#(218 2 #reduceActionFor_____semicolon__2: 10166274 false) 
	#(217 3 #reduceActionForExpressionList2: 10104834 false) 
	#(219 3 #reduceActionForNamedExpression3: 10207235 false) 
	#(180 4 #reduceActionForCheckWorkloadStatement1: 5824513 false) 
	#(170 4 #reduceActionForCheckpointStatement1: 3923969 false) 
	#(206 3 #reduceActionForTable4: 8920068 false) 
	#(186 4 #reduceActionForDeleteQuery12: 6634508 false) 
	#(186 4 #reduceActionForDeleteQuery11: 6634507 false) 
	#(209 1 #liftFirstValue: 9235458 false) 
	#(211 0 #reduceActionFor__ON___onToken__Expression__on___1: 9322497 false) 
	#(213 2 #reduceActionForWhereExpression1: 9690113 false) 
	#(206 3 #reduceActionForTable2: 8920066 false) 
	#(186 4 #reduceActionForDeleteQuery12: 6634502 false) 
	#(186 4 #reduceActionForDeleteQuery11: 6634501 false) 
	#(175 4 #reduceActionForInsertQuery11: 4736011 false) 
	#(175 4 #reduceActionForInsertQuery11: 4736009 false) 
	#(162 4 #reduceActionForLockTableStatement5: 2825221 false) 
	#(162 4 #reduceActionForLockTableStatement5: 2825217 false) 
	#(190 1 #reduceActionFor_FromTables__QueryExpressions__2: 6989826 false) 
	#(192 0 #reduceActionFor__ON___onToken__Expression__on___1: 7022593 false) 
	#(189 1 #reduceActionFor_FromTables__QueryExpressions_1: 6989825 false) 
	#(205 1 #reduceActionForStatements1: 8848385 false) 
	#(172 4 #reduceActionForUpdateQuery1: 4164609 false) 
	#(173 1 #reduceActionForStatements1: 4539393 false) 
	#(168 2 #reduceActionForTypeName2: 3603458 false) 
	#(177 3 #reduceActionForUsingColumns2: 5321730 false) 
	#(187 4 #reduceActionForSelectQuery18: 6788114 false) 
	#(197 3 #reduceActionForUsingColumns2: 8046594 false) 
	#(156 4 #reduceActionForStatements2: 1605634 false) 
	#(187 4 #reduceActionForSelectQuery14: 6788110 false) 
	#(221 4 #reduceActionForCaseExpression3: 15000579 false) 
	#(222 2 #reduceActionForElseExpression1: 15129601 false) 
	#(221 4 #reduceActionForCaseExpression2: 15000578 false) 
	#(220 4 #reduceActionForExpression107: 10330219 false) 
	#(220 4 #reduceActionForExpression116: 10330228 false) 
	#(220 4 #reduceActionForExpression54: 10330166 false) 
	#(220 4 #reduceActionForExpression105: 10330217 false) 
	#(220 4 #reduceActionForExpression44: 10330156 false) 
	#(220 4 #reduceActionForExpression33: 10330145 false) 
	#(220 4 #reduceActionForExpression37: 10330149 false) 
	#(220 4 #reduceActionForExpression28: 10330140 false) 
	#(220 4 #reduceActionForExpression64: 10330176 false) 
	#(225 4 #reduceActionForFunctionExpression2: 15390722 false) 
	#(187 5 #reduceActionForSelectQuery24: 6788120 false) 
	#(187 5 #reduceActionForSelectQuery22: 6788118 false) 
	#(187 5 #reduceActionForSelectQuery20: 6788116 false) 
	#(187 5 #reduceActionForSelectQuery15: 6788111 false) 
	#(170 5 #reduceActionForCheckpointStatement2: 3923970 false) 
	#(165 1 #reduceActionForStatements1: 3260417 false) 
	#(206 4 #reduceActionForTable5: 8920069 false) 
	#(211 1 #reduceActionFor_FromTables__QueryExpressions__2: 9322498 false) 
	#(206 4 #reduceActionForTable7: 8920071 false) 
	#(206 4 #reduceActionForTable3: 8920067 false) 
	#(185 5 #reduceActionForExecuteStatement4: 6476804 false) 
	#(185 5 #reduceActionForExecuteStatement4: 6476802 false) 
	#(162 5 #reduceActionForLockTableStatement7: 2825223 false) 
	#(162 5 #reduceActionForLockTableStatement6: 2825222 false) 
	#(162 5 #reduceActionForLockTableStatement7: 2825219 false) 
	#(162 5 #reduceActionForLockTableStatement6: 2825218 false) 
	#(204 2 #reduceActionForFromTables1: 8801281 false) 
	#(192 1 #reduceActionFor_FromTables__QueryExpressions__2: 7022594 false) 
	#(194 0 #nil 7066625 false) 
	#(195 2 #reduceActionForQueryExpressions2: 7778306 false) 
	#(196 1 #reduceActionForQueryExpression3: 7838723 false) 
	#(196 1 #reduceActionForQueryExpression5: 7838725 false) 
	#(196 1 #reduceActionForQueryExpression4: 7838724 false) 
	#(196 1 #reduceActionForQueryExpression1: 7838721 false) 
	#(196 1 #reduceActionForQueryExpression2: 7838722 false) 
	#(196 1 #reduceActionForQueryExpression6: 7838726 false) 
	#(189 2 #reduceActionFor_FromTables__QueryExpressions_2: 6989826 false) 
	#(172 5 #reduceActionForUpdateQuery4: 4164612 false) 
	#(172 5 #reduceActionForUpdateQuery7: 4164615 false) 
	#(176 5 #reduceActionForUsingStatement2: 5138434 false) 
	#(178 4 #reduceActionForUsingColumn2: 5412866 false) 
	#(224 4 #reduceActionForWhenExpression1: 15282177 false) 
	#(221 5 #reduceActionForCaseExpression4: 15000580 false) 
	#(220 5 #reduceActionForExpression46: 10330158 false) 
	#(220 5 #reduceActionForExpression109: 10330221 false) 
	#(220 5 #reduceActionForExpression109: 10330220 false) 
	#(220 5 #reduceActionForExpression117: 10330229 false) 
	#(220 5 #reduceActionForExpression122: 10330234 false) 
	#(220 5 #reduceActionForExpression43: 10330155 false) 
	#(220 5 #reduceActionForExpression106: 10330218 false) 
	#(220 5 #reduceActionForExpression52: 10330164 false) 
	#(220 5 #reduceActionForExpression39: 10330151 false) 
	#(220 5 #reduceActionForExpression27: 10330139 false) 
	#(220 5 #reduceActionForExpression84: 10330196 false) 
	#(220 5 #reduceActionForExpression74: 10330186 false) 
	#(187 6 #reduceActionForSelectQuery16: 6788112 false) 
	#(164 3 #reduceActionForMacroArgs2: 3192834 false) 
	#(166 2 #reduceActionForParameter1: 3355649 false) 
	#(206 5 #reduceActionForTable6: 8920070 false) 
	#(206 5 #reduceActionForTable12: 8920076 false) 
	#(206 5 #reduceActionForTable12: 8920075 false) 
	#(210 2 #reduceActionFor__identifier___name_______period__1: 9322497 false) 
	#(175 6 #reduceActionForInsertQuery5: 4736005 false) 
	#(175 6 #reduceActionForInsertQuery5: 4736001 false) 
	#(162 6 #reduceActionForLockTableStatement8: 2825224 false) 
	#(162 6 #reduceActionForLockTableStatement8: 2825220 false) 
	#(161 6 #reduceActionForRollbackStatement1: 2677761 false) 
	#(203 4 #reduceActionForIntoExpression1: 8706049 false) 
	#(191 2 #reduceActionFor__identifier___name_______period__1: 7022593 false) 
	#(193 1 #liftFirstValue: 7066625 false) 
	#(194 1 #liftFirstValue: 7066626 false) 
	#(187 6 #reduceActionForSelectQuery7: 6788103 false) 
	#(199 2 #reduceActionForHavingExpression1: 8321025 false) 
	#(201 2 #reduceActionForQualifyExpression1: 8532993 false) 
	#(187 6 #reduceActionForSelectQuery7: 6788097 false) 
	#(181 6 #reduceActionForSetStatement1: 6025217 false) 
	#(172 6 #reduceActionForUpdateQuery13: 4164621 false) 
	#(205 3 #reduceActionForUsingColumns2: 8848386 false) 
	#(172 6 #reduceActionForUpdateQuery19: 4164627 false) 
	#(173 3 #reduceActionForUsingColumns2: 4539394 false) 
	#(172 6 #reduceActionForUpdateQuery3: 4164611 false) 
	#(172 6 #reduceActionForUpdateQuery3: 4164610 false) 
	#(174 3 #reduceActionForSetExpression1: 4659201 false) 
	#(172 6 #reduceActionForUpdateQuery10: 4164618 false) 
	#(167 4 #reduceActionForType3: 3411971 false) 
	#(167 4 #reduceActionForType2: 3411970 false) 
	#(198 5 #reduceActionForWithTable1: 8135681 false) 
	#(200 4 #reduceActionForUnionSelectQuery1: 8402945 false) 
	#(220 6 #reduceActionForExpression48: 10330160 false) 
	#(220 6 #reduceActionForExpression63: 10330175 false) 
	#(220 6 #reduceActionForExpression30: 10330142 false) 
	#(220 6 #reduceActionForExpression118: 10330230 false) 
	#(220 6 #reduceActionForExpression118: 10330232 false) 
	#(220 6 #reduceActionForExpression55: 10330167 false) 
	#(220 6 #reduceActionForExpression55: 10330171 false) 
	#(220 6 #reduceActionForExpression55: 10330169 false) 
	#(216 3 #reduceActionForOrderByExpression1: 10022913 false) 
	#(220 6 #reduceActionForExpression53: 10330165 false) 
	#(220 6 #reduceActionForExpression40: 10330152 false) 
	#(220 6 #reduceActionForExpression29: 10330141 false) 
	#(202 3 #reduceActionForPartitionByExpression1: 8611841 false) 
	#(220 6 #reduceActionForExpression94: 10330206 false) 
	#(179 7 #reduceActionForLoadingStatement1: 5543937 false) 
	#(165 3 #reduceActionForUsingColumns2: 3260418 false) 
	#(206 6 #reduceActionForTable13: 8920077 false) 
	#(206 6 #reduceActionForTable10: 8920074 false) 
	#(206 6 #reduceActionForTable10: 8920072 false) 
	#(206 6 #reduceActionForTable10: 8920073 false) 
	#(175 7 #reduceActionForInsertQuery12: 4736012 false) 
	#(175 7 #reduceActionForInsertQuery7: 4736007 false) 
	#(175 7 #reduceActionForInsertQuery12: 4736010 false) 
	#(175 7 #reduceActionForInsertQuery7: 4736003 false) 
	#(158 7 #reduceActionForMergeQuery1: 2087937 false) 
	#(159 1 #reduceActionForWhenExpressions1: 2243585 false) 
	#(187 7 #reduceActionForSelectQuery9: 6788105 false) 
	#(187 7 #reduceActionForSelectQuery9: 6788107 false) 
	#(214 3 #reduceActionForGroupByExpression2: 9758722 false) 
	#(214 3 #reduceActionForGroupByExpression1: 9758721 false) 
	#(187 7 #reduceActionForSelectQuery9: 6788099 false) 
	#(187 7 #reduceActionForSelectQuery9: 6788101 false) 
	#(181 7 #reduceActionForSetStatement2: 6025218 false) 
	#(172 7 #reduceActionForUpdateQuery16: 4164624 false) 
	#(172 7 #reduceActionForUpdateQuery20: 4164628 false) 
	#(172 7 #reduceActionForUpdateQuery6: 4164614 false) 
	#(172 7 #reduceActionForUpdateQuery6: 4164613 false) 
	#(172 7 #reduceActionForUpdateQuery9: 4164617 false) 
	#(172 7 #reduceActionForUpdateQuery9: 4164616 false) 
	#(220 7 #reduceActionForExpression47: 10330159 false) 
	#(220 7 #reduceActionForExpression56: 10330168 false) 
	#(220 7 #reduceActionForExpression56: 10330172 false) 
	#(220 7 #reduceActionForExpression56: 10330170 false) 
	#(220 7 #reduceActionForExpression45: 10330157 false) 
	#(220 7 #reduceActionForExpression36: 10330148 false) 
	#(206 7 #reduceActionForTable17: 8920081 false) 
	#(206 7 #reduceActionForTable17: 8920080 false) 
	#(158 8 #reduceActionForMergeQuery2: 2087938 false) 
	#(159 2 #reduceActionFor_____semicolon__2: 2243586 false) 
	#(187 8 #reduceActionForSelectQuery8: 6788104 false) 
	#(215 2 #reduceActionForEmptyGroupByExpression1: 9931777 false) 
	#(187 8 #reduceActionForSelectQuery8: 6788098 false) 
	#(172 8 #reduceActionForUpdateQuery15: 4164623 false) 
	#(172 8 #reduceActionForUpdateQuery15: 4164622 false) 
	#(172 8 #reduceActionForUpdateQuery12: 4164620 false) 
	#(172 8 #reduceActionForUpdateQuery12: 4164619 false) 
	#(167 6 #reduceActionForType5: 3411973 false) 
	#(220 8 #reduceActionForExpression49: 10330161 false) 
	#(220 8 #reduceActionForExpression31: 10330143 false) 
	#(220 8 #reduceActionForExpression119: 10330231 false) 
	#(220 8 #reduceActionForExpression119: 10330233 false) 
	#(220 8 #reduceActionForExpression38: 10330150 false) 
	#(163 9 #reduceActionForCreateMacroStatement1: 3004417 false) 
	#(206 8 #reduceActionForTable14: 8920078 false) 
	#(206 8 #reduceActionForTable14: 8920079 false) 
	#(175 9 #reduceActionForInsertQuery6: 4736006 false) 
	#(175 9 #reduceActionForInsertQuery6: 4736002 false) 
	#(187 9 #reduceActionForSelectQuery10: 6788106 false) 
	#(187 9 #reduceActionForSelectQuery10: 6788108 false) 
	#(187 9 #reduceActionForSelectQuery10: 6788100 false) 
	#(187 9 #reduceActionForSelectQuery10: 6788102 false) 
	#(172 9 #reduceActionForUpdateQuery18: 4164626 false) 
	#(172 9 #reduceActionForUpdateQuery18: 4164625 false) 
	#(167 7 #reduceActionForType4: 3411972 false) 
	#(198 8 #reduceActionForWithTable2: 8135682 false) 
	#(220 9 #reduceActionForExpression41: 10330153 false) 
	#(175 10 #reduceActionForInsertQuery8: 4736008 false) 
	#(175 10 #reduceActionForInsertQuery8: 4736004 false) 
	#(220 10 #reduceActionForExpression42: 10330154 false) 
	#(167 9 #reduceActionForType6: 3411974 false) 
	#(220 11 #reduceActionForExpression73: 10330185 false) 
	#(220 11 #reduceActionForExpression72: 10330184 false) 
	#(220 11 #reduceActionForExpression72: 10330183 false) 
	#(220 11 #reduceActionForExpression70: 10330182 false) 
	#(220 11 #reduceActionForExpression69: 10330181 false) 
	#(220 11 #reduceActionForExpression69: 10330180 false) 
	#(220 11 #reduceActionForExpression70: 10330179 false) 
	#(220 11 #reduceActionForExpression69: 10330178 false) 
	#(220 11 #reduceActionForExpression69: 10330177 false) 
	#(160 6 #reduceActionForWhenMergeCondition1: 2284545 false) 
	#(220 12 #reduceActionForExpression93: 10330205 false) 
	#(220 12 #reduceActionForExpression92: 10330204 false) 
	#(220 12 #reduceActionForExpression92: 10330203 false) 
	#(220 12 #reduceActionForExpression90: 10330202 false) 
	#(220 12 #reduceActionForExpression89: 10330201 false) 
	#(220 12 #reduceActionForExpression89: 10330200 false) 
	#(220 12 #reduceActionForExpression90: 10330199 false) 
	#(220 12 #reduceActionForExpression89: 10330198 false) 
	#(220 12 #reduceActionForExpression89: 10330197 false) 
	#(220 12 #reduceActionForExpression83: 10330195 false) 
	#(220 12 #reduceActionForExpression82: 10330194 false) 
	#(220 12 #reduceActionForExpression82: 10330193 false) 
	#(220 12 #reduceActionForExpression80: 10330192 false) 
	#(220 12 #reduceActionForExpression79: 10330191 false) 
	#(220 12 #reduceActionForExpression79: 10330190 false) 
	#(220 12 #reduceActionForExpression80: 10330189 false) 
	#(220 12 #reduceActionForExpression79: 10330188 false) 
	#(220 12 #reduceActionForExpression79: 10330187 false) 
	#(220 13 #reduceActionForExpression103: 10330215 false) 
	#(220 13 #reduceActionForExpression102: 10330214 false) 
	#(220 13 #reduceActionForExpression102: 10330213 false) 
	#(220 13 #reduceActionForExpression100: 10330212 false) 
	#(220 13 #reduceActionForExpression99: 10330211 false) 
	#(220 13 #reduceActionForExpression99: 10330210 false) 
	#(220 13 #reduceActionForExpression100: 10330209 false) 
	#(220 13 #reduceActionForExpression99: 10330208 false) 
	#(220 13 #reduceActionForExpression99: 10330207 false) 
	#(160 8 #reduceActionForWhenMergeCondition2: 2284546 false) 
	#(160 12 #reduceActionForWhenMergeCondition3: 2284547 false)
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> scannerClass [
	^TeradataScanner
]

{ #category : #generated }
TeradataParser class >> startingStateForExpression [
	^ 2
]

{ #category : #generated }
TeradataParser class >> startingStateForExpressionListNode [
	^ 3
]

{ #category : #generated }
TeradataParser class >> startingStateForExpressionWithDistinct [
	^ 4
]

{ #category : #generated }
TeradataParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
TeradataParser class >> symbolNames [
	^ #('"("' '")"' '"*"' '"**"' '"+"' '","' '"-"' '"."' '"/"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"ALL"' '"AND"' '"AS"' '"BEGIN"' '"BETWEEN"' '"BIGINT"' '"BOTH"' '"BT"' '"BY"' '"BYTE"' '"BYTEINT"' '"CASE"' '"CASESPECIFIC"' '"CAST"' '"CHAR"' '"CHARACTER"' '"CHECK"' '"CHECKPOINT"' '"CLOB"' '"COUNT"' '"CREATE"' '"CROSS"' '"CURRENT"' '"CURSOR"' '"DATABASE"' '"DATE"' '"DEC"' '"DECIMAL"' '"DEL"' '"DELETE"' '"DISTINCT"' '"DISTINCTROW"' '"DOUBLE"' '"DROP"' '"ELSE"' '"END"' '"EQ"' '"ERROR"' '"ERRORFILES"' '"ESCAPE"' '"ET"' '"EXCEPT"' '"EXEC"' '"EXECUTE"' '"EXISTS"' '"EXTRACT"' '"FLOAT"' '"FOR"' '"FORMAT"' '"FROM"' '"FULL"' '"GROUP"' '"HAVING"' '"HELP"' '"IGNORE"' '"IN"' '"INNER"' '"INS"' '"INSERT"' '"INT"' '"INTEGER"' '"INTERSECT"' '"INTERVAL"' '"INTO"' '"IS"' '"JOIN"' '"LEADING"' '"LEFT"' '"LIKE"' '"LOADING"' '"LOCK"' '"LOCKING"' '"MACRO"' '"MATCHED"' '"MERGE"' '"MINUS"' '"MOD"' '"NE"' '"NOT"' '"NULL"' '"NULLS"' '"NUMBER"' '"NUMERIC"' '"ON"' '"OR"' '"ORDER"' '"OUTER"' '"OVER"' '"PARTITION"' '"PRECEDING"' '"PRECISION"' '"QUALIFY"' '"REAL"' '"RECURSIVE"' '"RIGHT"' '"ROLLBACK"' '"ROW"' '"ROWS"' '"SEL"' '"SELECT"' '"SESSION"' '"SET"' '"SMALLINT"' '"SUBSTRING"' '"TABLE"' '"THEN"' '"TIME"' '"TIMESTAMP"' '"TITLE"' '"TOP"' '"TRAILING"' '"TRANSLATE"' '"TRANSLATE_CHK"' '"TRIM"' '"UESCAPE"' '"UNBOUNDED"' '"UNION"' '"UPDATE"' '"USING"' '"VALUES"' '"VARBYTE"' '"VARCHAR"' '"WHEN"' '"WHERE"' '"WITH"' '"WORK"' '"WORKLOAD"' '"XMLAGG"' '"||"' '<identifier>' '<variable>' '<ustring>' '<string>' '<number>' '<whitespace>' '<comment>' 'B e g i n' 'File' '";" ''semicolon''*' 'Statements' 'Statement' 'MergeQuery' 'WhenMergeCondition ''whenMerge''+' 'WhenMergeCondition' 'RollbackStatement' 'LockTableStatement' 'CreateMacroStatement' 'MacroArgs' 'ParameterList' 'Parameter' 'Type' 'TypeName' 'SingleTypeName' 'CheckpointStatement' 'DropTableQuery' 'UpdateQuery' 'SetExpressionList' 'SetExpression' 'InsertQuery' 'UsingStatement' 'UsingColumns' 'UsingColumn' 'LoadingStatement' 'CheckWorkloadStatement' 'SetStatement' 'HelpSessionStatement' 'TransactionStatement' 'DatabaseStatement' 'ExecuteStatement' 'DeleteQuery' 'SelectQuery' 'IntoExpression ''into''?' '(FromTables? QueryExpressions)' '(FromTables? QueryExpressions)?' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')?' '(<number> ''count'')' '(<number> ''count'')?' 'QueryExpressions' 'QueryExpression' 'WithTables' 'WithTable' 'HavingExpression' 'UnionSelectQuery' 'QualifyExpression' 'PartitionByExpression' 'IntoExpression' 'FromTables' 'TableList' 'Table' '(<identifier> ''name'' "." ''period'')' '(<identifier> ''name'' "." ''period'')*' '"OUTER" ''type''?' '("ON" ''onToken'' Expression ''on'')' '("ON" ''onToken'' Expression ''on'')?' 'TableName' 'WhereExpression' 'GroupByExpression' 'EmptyGroupByExpression' 'OrderByExpression' 'ExpressionList' '"," ''comma''+' 'NamedExpression' 'Expression' 'CaseExpression' 'ElseExpression' 'WhenExpressions' 'WhenExpression' 'FunctionExpression' 'Identifier' 'IdentifierName' 'ExpressionListNode' 'ExpressionWithDistinct' 'E O F' 'error')
]

{ #category : #generated }
TeradataParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #TeradataFileNode #TeradataFileNode #OrderedCollection #OrderedCollection #TeradataProgramNode #TeradataMergeQueryNode #OrderedCollection #TeradataWhenMergeConditionNode #TeradataRollbackStatementNode #TeradataLockTableStatementNode #TeradataCreateMacroStatementNode #OrderedCollection #OrderedCollection #TeradataParameterNode #TeradataTypeNode #OrderedCollection #SmaCCToken #TeradataCheckpointStatementNode #TeradataDropTableQueryNode #TeradataUpdateQueryNode #OrderedCollection #TeradataSetExpressionNode #TeradataInsertQueryNode #TeradataUsingStatementNode #OrderedCollection #TeradataUsingColumnNode #TeradataProgramNode #TeradataCheckWorkloadStatementNode #TeradataSetStatementNode #TeradataHelpSessionStatementNode #TeradataProgramNode #TeradataDatabaseStatementNode #TeradataExecuteStatementNode #TeradataDeleteQueryNode #TeradataProgramNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #TeradataWithTableDefinitionNode #TeradataHavingNode #OrderedCollection #TeradataQualifyExpressionNode #TeradataPartitionByExpressionNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #TeradataProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #TeradataTableNode #TeradataWhereExpressionNode #TeradataGroupByNode #TeradataEmptyGroupByExpressionNode #TeradataOrderByExpressionNode #OrderedCollection #OrderedCollection #TeradataExpressionNode #TeradataExpressionNode #TeradataCaseExpressionNode #TeradataElseExpressionNode #OrderedCollection #TeradataWhenExpressionNode #TeradataFunctionExpressionNode #TeradataIdentifierExpressionNode #TeradataIdentifierNameNode #TeradataExpressionListNode #TeradataExpressionNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
TeradataParser class >> transitionTable [
^#(
#[1 0 21 0 1 0 6 0 10 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 0 129 0 154 0 133 0 155 0 137 0 156 0 141 0 157 0 141 0 158 0 141 0 161 0 141 0 162 0 141 0 163 0 141 0 170 0 141 0 171 0 141 0 172 0 141 0 175 0 141 0 176 0 141 0 179 0 141 0 180 0 141 0 181 0 141 0 182 0 141 0 183 0 141 0 184 0 141 0 185 0 141 0 186 0 213 0 187 0 6 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 1 57 0 220 1 57 0 221 1 57 0 225 1 57 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 1 77 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227 1 89 0 228] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 1 93 0 47 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 1 97 0 220 1 97 0 221 1 97 0 225 1 97 0 226 1 73 0 227 1 101 0 229] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 1 105 0 187] 
#[0 1 109 0 86] 
#[0 0 14 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 1 113 0 143] 
#[0 1 117 0 86] 
#[0 1 121 0 89] 
#[1 0 10 0 146 1 125 0 208 1 129 0 227] 
#[1 1 133 0 1 1 137 0 66 0 10 0 146 1 141 0 206 1 145 0 208] 
#[1 1 133 0 1 1 149 0 66 0 10 0 146 1 153 0 206 1 145 0 208] 
#[0 1 157 0 121] 
#[0 1 161 0 86] 
#[0 0 18 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 10 0 146 1 125 0 208 1 165 0 227] 
#[1 0 10 0 146 1 125 0 208 1 169 0 227] 
#[0 1 173 0 117] 
#[1 1 177 0 80 0 10 0 146 1 181 0 208 1 185 0 212] 
#[1 1 189 0 80 0 10 0 146 1 181 0 208 1 193 0 212] 
#[1 1 197 0 121 0 10 0 146 1 181 0 208 1 201 0 212] 
#[1 1 205 0 121 0 10 0 146 1 181 0 208 1 209 0 212] 
#[1 1 133 0 1 1 213 0 80 0 10 0 146 1 217 0 206 1 145 0 208] 
#[0 1 221 0 142] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 1 225 0 47 1 229 0 48 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 233 0 126 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 1 237 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 1 241 0 47 1 245 0 48 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 249 0 126 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 1 253 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 10 0 146 1 125 0 208 2 1 0 227] 
#[1 0 10 0 146 1 181 0 208 2 5 0 212] 
#[1 2 9 0 1 2 13 0 146 2 17 0 177 2 21 0 178] 
#[1 2 25 0 110 0 10 0 146 2 29 0 197 2 33 0 198 1 125 0 208 2 37 0 227] 
#[0 0 0 0 230] 
#[1 2 41 0 10 0 22 0 230] 
#[1 0 6 0 10 2 45 0 155 0 6 0 230] 
#[0 0 26 0 2 0 10 0 230] 
#[0 0 30 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 34 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 38 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 42 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 46 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 50 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 54 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 58 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 62 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 66 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 70 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 74 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 78 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 82 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 86 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 90 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 0 94 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 98 0 2 0 98 0 10 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133 0 98 0 230] 
#[1 2 65 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 2 69 0 187 1 53 0 208 2 73 0 220 2 73 0 221 2 73 0 225 2 73 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 2 77 0 220 2 77 0 221 2 77 0 225 2 77 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 2 81 0 220 2 81 0 221 2 81 0 225 2 81 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 2 85 0 139 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 2 89 0 220 2 89 0 221 2 93 0 223 2 97 0 224 2 89 0 225 2 89 0 226 1 73 0 227] 
#[0 2 101 0 1] 
#[0 2 105 0 1] 
#[1 0 102 0 1 0 102 0 2 0 102 0 3 0 102 0 4 0 102 0 5 0 102 0 6 0 102 0 7 0 102 0 9 0 102 0 10 0 102 0 11 0 102 0 12 0 102 0 13 0 102 0 14 0 102 0 15 0 102 0 16 0 102 0 17 0 102 0 18 0 102 0 19 0 102 0 21 0 102 0 38 0 102 0 51 0 102 0 52 0 102 0 53 0 102 0 56 0 102 0 58 0 102 0 64 0 102 0 66 0 102 0 67 0 102 0 68 0 102 0 69 0 102 0 71 0 102 0 72 0 102 0 73 0 102 0 78 0 102 0 80 0 102 0 81 0 102 0 82 0 102 0 84 0 102 0 85 0 102 0 92 0 102 0 93 0 102 0 94 0 102 0 95 0 102 0 100 0 102 0 101 0 102 0 102 0 102 0 104 0 102 0 105 0 102 0 108 0 102 0 111 0 102 0 114 0 102 0 118 0 102 0 122 0 102 0 133 0 102 0 134 0 102 0 135 0 102 0 139 0 102 0 140 0 102 0 141 0 102 0 145 0 102 0 146 2 109 0 149 0 102 0 150 0 102 0 230] 
#[0 2 113 0 1] 
#[0 2 117 0 1] 
#[0 2 121 0 149] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 2 125 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 2 129 0 220 2 129 0 221 2 129 0 225 2 129 0 226 1 73 0 227] 
#[0 0 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 2 133 0 1] 
#[1 0 110 0 1 0 110 0 2 0 110 0 3 0 110 0 4 0 110 0 5 0 110 0 6 0 110 0 7 0 110 0 9 0 110 0 10 0 110 0 11 0 110 0 12 0 110 0 13 0 110 0 14 0 110 0 15 0 110 0 16 0 110 0 17 0 110 0 18 0 110 0 19 0 110 0 21 0 110 0 38 0 110 0 51 0 110 0 52 0 110 0 53 0 110 0 56 0 110 0 58 0 110 0 64 0 110 0 66 0 110 0 67 0 110 0 68 0 110 0 69 0 110 0 71 0 110 0 72 0 110 0 73 0 110 0 78 0 110 0 80 0 110 0 81 0 110 0 82 0 110 0 84 0 110 0 85 0 110 0 92 0 110 0 93 0 110 0 94 0 110 0 95 0 110 0 100 0 110 0 101 0 110 0 102 0 110 0 104 0 110 0 105 0 110 0 108 0 110 0 111 0 110 0 114 0 110 0 118 0 110 0 122 0 110 0 133 0 110 0 134 0 110 0 135 0 110 0 139 0 110 0 140 0 110 0 141 0 110 0 145 0 110 0 146 2 137 0 149 0 110 0 150 0 110 0 230] 
#[1 0 114 0 1 0 114 0 2 0 114 0 3 0 114 0 4 0 114 0 5 0 114 0 6 0 114 0 7 0 114 0 9 0 114 0 10 0 114 0 11 0 114 0 12 0 114 0 13 0 114 0 14 0 114 0 15 0 114 0 16 0 114 0 17 0 114 0 18 0 114 0 19 0 114 0 21 0 114 0 38 0 114 0 51 0 114 0 52 0 114 0 53 0 114 0 56 0 114 0 58 0 114 0 64 0 114 0 66 0 114 0 67 0 114 0 68 0 114 0 69 0 114 0 71 0 114 0 72 0 114 0 73 0 114 0 78 0 114 0 80 0 114 0 81 0 114 0 82 0 114 0 84 0 114 0 85 0 114 0 92 0 114 0 93 0 114 0 94 0 114 0 95 0 114 0 100 0 114 0 101 0 114 0 102 0 114 0 104 0 114 0 105 0 114 0 108 0 114 0 111 0 114 0 114 0 114 0 118 0 114 0 122 0 114 0 133 0 114 0 134 0 114 0 135 0 114 0 139 0 114 0 140 0 114 0 141 0 114 0 145 0 114 0 146 2 141 0 149 0 114 0 150 0 114 0 230] 
#[0 2 145 0 1] 
#[0 2 149 0 1] 
#[0 2 153 0 1] 
#[0 2 157 0 1] 
#[0 0 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 2 161 0 131] 
#[0 0 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 0 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 165 0 3 2 169 0 146 2 173 0 207] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145 0 0 0 230] 
#[0 0 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 0 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 0 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 3 21 0 1] 
#[1 3 25 0 6 3 29 0 218 0 142 0 230] 
#[0 0 146 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 230] 
#[1 2 177 0 1 0 150 0 2 2 181 0 3 2 185 0 4 2 189 0 5 0 150 0 6 2 193 0 7 2 197 0 9 0 150 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 3 33 0 19 2 229 0 21 2 233 0 53 0 150 0 58 0 150 0 64 0 150 0 66 0 150 0 68 0 150 0 69 2 237 0 71 2 241 0 72 0 150 0 78 0 150 0 80 2 245 0 81 2 249 0 85 0 150 0 92 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 0 150 0 102 3 13 0 104 0 150 0 105 0 150 0 108 0 150 0 114 0 150 0 133 0 150 0 140 0 150 0 141 3 17 0 145 3 37 0 146 0 150 0 150 0 150 0 230] 
#[0 0 0 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 3 41 0 220 3 41 0 221 3 41 0 225 3 41 0 226 1 73 0 227] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145 0 154 0 230] 
#[0 0 0 0 230] 
#[1 3 45 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 0 10 0 146 1 181 0 208 3 49 0 212] 
#[1 3 53 0 52 3 57 0 64] 
#[0 3 61 0 79] 
#[1 0 10 0 146 1 125 0 208 3 65 0 227] 
#[1 3 69 0 146 2 173 0 207] 
#[0 0 158 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 3 73 0 1 0 105 0 115 0 109 0 116 0 125 0 141 0 10 0 146 3 77 0 187 3 81 0 206 1 145 0 208] 
#[1 1 133 0 1 0 10 0 146 3 85 0 206 1 145 0 208] 
#[1 0 162 0 2 0 162 0 10 3 89 0 17 3 93 0 38 0 162 0 58 3 97 0 67 3 101 0 73 0 162 0 78 3 105 0 82 3 109 0 84 0 162 0 92 3 113 0 111 0 162 0 133 3 117 0 140 3 121 0 213 0 162 0 230] 
#[1 3 125 0 146 2 173 0 207] 
#[1 1 133 0 1 0 10 0 146 3 129 0 206 1 145 0 208] 
#[1 0 166 0 2 0 166 0 10 3 133 0 17 3 93 0 38 0 166 0 58 3 97 0 67 3 101 0 73 0 166 0 78 3 105 0 82 3 109 0 84 0 166 0 92 3 113 0 111 0 166 0 133 3 117 0 140 3 137 0 213 0 166 0 230] 
#[1 0 10 0 146 1 181 0 208 3 141 0 212] 
#[0 0 170 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 3 145 0 1 0 174 0 2 0 174 0 10 0 174 0 58 0 174 0 78 0 174 0 92 0 174 0 133 0 174 0 230] 
#[1 3 149 0 1 0 178 0 2 0 178 0 10 0 178 0 58 0 178 0 78 0 178 0 92 0 178 0 133 0 178 0 230] 
#[0 0 182 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 10 0 146 1 181 0 208 3 153 0 212] 
#[1 3 157 0 146 2 173 0 207] 
#[1 3 161 0 1 3 165 0 136] 
#[1 0 10 0 146 1 181 0 208 3 169 0 212] 
#[1 3 173 0 1 3 177 0 136] 
#[1 0 10 0 146 1 181 0 208 3 181 0 212] 
#[0 3 185 0 64] 
#[1 0 10 0 146 1 181 0 208 3 189 0 212] 
#[0 3 193 0 64] 
#[1 1 133 0 1 0 10 0 146 3 197 0 206 1 145 0 208] 
#[1 3 93 0 38 3 97 0 67 3 101 0 73 3 105 0 82 3 109 0 84 3 113 0 111 3 201 0 135] 
#[0 3 205 0 149] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 3 209 0 126 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 3 213 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 3 217 0 126 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 3 221 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 3 225 0 150] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 3 233 0 188 3 233 0 203 3 29 0 218 0 186 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 3 241 0 126 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 3 245 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 3 249 0 126 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 3 253 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 4 1 0 150] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 4 5 0 188 4 5 0 203 3 29 0 218 0 186 0 230] 
#[0 4 9 0 14] 
#[1 4 13 0 19 4 17 0 66 4 21 0 118 4 25 0 146] 
#[1 2 13 0 146 4 29 0 177 2 21 0 178] 
#[1 4 33 0 1 4 125 0 22 4 125 0 26 4 125 0 27 4 125 0 31 4 125 0 35 4 125 0 42 4 125 0 43 4 125 0 44 4 69 0 49 4 125 0 63 4 125 0 76 4 125 0 77 4 125 0 98 4 125 0 99 4 125 0 109 4 125 0 119 4 125 0 123 4 125 0 124 4 125 0 137 4 125 0 138 4 117 0 167 4 121 0 168 4 125 0 169] 
#[1 0 21 0 1 4 129 0 6 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 4 133 0 157 4 133 0 158 4 133 0 161 4 133 0 162 4 133 0 163 4 133 0 170 4 133 0 171 4 133 0 172 4 133 0 175 4 133 0 176 4 133 0 179 4 133 0 180 4 133 0 181 4 133 0 182 4 133 0 183 4 133 0 184 4 133 0 185 4 133 0 186 0 213 0 187] 
#[0 0 190 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 0 10 0 146 4 137 0 197 2 33 0 198 1 125 0 208 2 37 0 227] 
#[1 0 21 0 1 4 141 0 6 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 4 145 0 157 4 145 0 158 4 145 0 161 4 145 0 162 4 145 0 163 4 145 0 170 4 145 0 171 4 145 0 172 4 145 0 175 4 145 0 176 4 145 0 179 4 145 0 180 4 145 0 181 4 145 0 182 4 145 0 183 4 145 0 184 4 145 0 185 4 145 0 186 0 213 0 187] 
#[0 0 194 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 4 149 0 1 4 153 0 19] 
#[0 0 198 0 10 0 230] 
#[1 4 157 0 10 0 202 0 230] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 4 169 0 200] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 4 173 0 200] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 4 177 0 200] 
#[1 4 161 0 1 4 181 0 17 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 4 185 0 200] 
#[1 2 65 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 4 189 0 187 1 53 0 208 2 73 0 220 2 73 0 221 2 73 0 225 2 73 0 226 1 73 0 227] 
#[1 4 193 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 2 177 0 1 4 197 0 2 2 181 0 3 2 185 0 4 2 189 0 5 4 201 0 6 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 0 7 0 1 0 206 0 2 2 181 0 3 2 185 0 4 0 206 0 5 0 206 0 6 0 206 0 7 2 197 0 9 0 206 0 10 0 206 0 11 0 206 0 12 0 206 0 13 0 206 0 14 0 206 0 15 0 206 0 16 0 206 0 17 0 206 0 18 0 206 0 19 0 206 0 21 0 206 0 38 0 206 0 51 0 206 0 52 0 206 0 53 0 206 0 56 0 206 0 58 0 206 0 64 0 206 0 66 0 206 0 67 0 206 0 68 0 206 0 69 0 11 0 71 0 206 0 72 0 206 0 73 0 206 0 78 0 206 0 80 0 15 0 81 0 206 0 82 0 206 0 84 0 206 0 85 0 206 0 92 2 253 0 93 0 206 0 94 0 206 0 95 0 206 0 100 0 206 0 101 0 206 0 102 0 19 0 104 0 206 0 105 0 206 0 108 0 206 0 111 0 206 0 114 0 206 0 118 0 206 0 122 0 206 0 133 0 206 0 134 0 206 0 135 0 206 0 139 0 206 0 140 0 206 0 141 0 206 0 145 0 206 0 146 0 206 0 150 0 206 0 230] 
#[1 0 23 0 1 0 210 0 2 2 181 0 3 2 185 0 4 0 210 0 5 0 210 0 6 0 210 0 7 2 197 0 9 0 210 0 10 0 210 0 11 0 210 0 12 0 210 0 13 0 210 0 14 0 210 0 15 0 210 0 16 0 210 0 17 0 210 0 18 0 210 0 19 0 210 0 21 0 210 0 38 0 210 0 51 0 210 0 52 0 210 0 53 0 210 0 56 0 210 0 58 0 210 0 64 0 210 0 66 0 210 0 67 0 210 0 68 0 210 0 69 0 27 0 71 0 210 0 72 0 210 0 73 0 210 0 78 0 210 0 80 0 31 0 81 0 210 0 82 0 210 0 84 0 210 0 85 0 210 0 92 2 253 0 93 0 210 0 94 0 210 0 95 0 210 0 100 0 210 0 101 0 210 0 102 0 35 0 104 0 210 0 105 0 210 0 108 0 210 0 111 0 210 0 114 0 210 0 118 0 210 0 122 0 210 0 133 0 210 0 134 0 210 0 135 0 210 0 139 0 210 0 140 0 210 0 141 0 210 0 145 0 210 0 146 0 210 0 150 0 210 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 4 205 0 220 4 205 0 221 4 205 0 225 4 205 0 226 1 73 0 227] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 2 85 0 139 3 17 0 145 4 209 0 223 2 97 0 224] 
#[1 4 213 0 51 4 217 0 52 2 85 0 139 4 221 0 222 4 225 0 224] 
#[0 0 214 0 51 0 52 0 139] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 4 229 0 220 4 229 0 221 4 229 0 225 4 229 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 4 233 0 17 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 4 237 0 47 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 4 241 0 220 4 241 0 221 4 241 0 225 4 241 0 226 1 73 0 227] 
#[0 0 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 245 0 187] 
#[0 4 249 0 146] 
#[0 4 253 0 146] 
#[0 5 1 0 1] 
#[1 0 39 0 1 0 222 0 2 2 181 0 3 2 185 0 4 2 189 0 5 0 222 0 6 2 193 0 7 2 197 0 9 0 222 0 10 0 222 0 11 0 222 0 12 0 222 0 13 0 222 0 14 0 222 0 15 0 222 0 16 0 222 0 17 0 222 0 18 0 222 0 19 0 222 0 21 0 222 0 38 0 222 0 51 0 222 0 52 0 222 0 53 0 222 0 56 0 222 0 58 0 222 0 64 0 222 0 66 0 222 0 67 0 222 0 68 0 222 0 69 0 43 0 71 0 222 0 73 0 222 0 78 0 222 0 80 0 47 0 81 0 222 0 82 0 222 0 84 0 222 0 92 2 253 0 93 0 222 0 94 0 222 0 100 0 222 0 101 0 222 0 102 0 51 0 104 0 222 0 105 0 222 0 108 0 222 0 111 0 222 0 114 0 222 0 118 0 222 0 122 0 222 0 133 0 222 0 134 0 222 0 135 0 222 0 139 0 222 0 140 0 222 0 141 0 222 0 145 0 222 0 146 0 222 0 150 0 222 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 5 0 220 5 5 0 221 5 5 0 225 5 5 0 226 1 73 0 227] 
#[0 0 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 0 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 9 0 220 5 9 0 221 5 9 0 225 5 9 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 13 0 220 5 13 0 221 5 13 0 225 5 13 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 5 17 0 23 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 5 21 0 83 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 5 25 0 127 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 29 0 220 5 29 0 221 5 29 0 225 5 29 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 33 0 220 5 33 0 221 5 33 0 225 5 33 0 226 1 73 0 227] 
#[0 5 37 0 149] 
#[0 0 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 55 0 1 0 238 0 2 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 5 41 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 18 0 238 0 19 0 238 0 21 0 238 0 38 0 238 0 51 0 238 0 52 0 238 0 53 0 238 0 56 0 238 0 58 0 238 0 64 0 238 0 66 0 238 0 67 0 238 0 68 0 238 0 69 0 238 0 71 0 238 0 72 0 238 0 73 0 238 0 78 0 238 0 80 0 238 0 81 0 238 0 82 0 238 0 84 0 238 0 85 0 238 0 92 0 238 0 93 0 238 0 94 0 238 0 95 0 238 0 100 0 238 0 101 0 238 0 102 0 238 0 104 0 238 0 105 0 238 0 108 0 238 0 111 0 238 0 114 0 238 0 118 0 238 0 122 0 238 0 133 0 238 0 134 0 238 0 135 0 238 0 139 0 238 0 140 0 238 0 141 0 238 0 145 0 238 0 146 0 238 0 150 0 238 0 230] 
#[0 0 246 0 3 0 146] 
#[1 4 125 0 22 4 125 0 26 4 125 0 27 5 45 0 29 4 125 0 31 4 125 0 35 4 125 0 42 4 125 0 43 4 125 0 44 4 69 0 49 4 125 0 63 5 49 0 65 4 125 0 76 4 125 0 77 4 125 0 98 4 125 0 99 4 125 0 109 4 125 0 119 4 125 0 123 4 125 0 124 5 53 0 125 4 125 0 137 4 125 0 138 5 57 0 167 4 121 0 168 4 125 0 169] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 61 0 220 5 61 0 221 5 61 0 225 5 61 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 65 0 220 5 65 0 221 5 65 0 225 5 65 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 69 0 220 5 69 0 221 5 69 0 225 5 69 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 73 0 220 5 73 0 221 5 73 0 225 5 73 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 77 0 220 5 77 0 221 5 77 0 225 5 77 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 81 0 220 5 81 0 221 5 81 0 225 5 81 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 85 0 220 5 85 0 221 5 85 0 225 5 85 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 89 0 220 5 89 0 221 5 89 0 225 5 89 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 93 0 220 5 93 0 221 5 93 0 225 5 93 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 97 0 220 5 97 0 221 5 97 0 225 5 97 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 101 0 220 5 101 0 221 5 101 0 225 5 101 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 105 0 220 5 105 0 221 5 105 0 225 5 105 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 109 0 220 5 109 0 221 5 109 0 225 5 109 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 113 0 220 5 113 0 221 5 113 0 225 5 113 0 226 1 73 0 227] 
#[0 5 117 0 97] 
#[1 5 121 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 125 0 220 5 125 0 221 5 125 0 225 5 125 0 226 1 73 0 227] 
#[1 5 129 0 95 5 133 0 96] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 137 0 220 5 137 0 221 5 137 0 225 5 137 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 141 0 220 5 141 0 221 5 141 0 225 5 141 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 145 0 220 5 145 0 221 5 145 0 225 5 145 0 226 1 73 0 227] 
#[1 5 149 0 21 5 153 0 72 5 157 0 85] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 161 0 220 5 161 0 221 5 161 0 225 5 161 0 226 1 73 0 227] 
#[0 5 165 0 1] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 169 0 220 5 169 0 221 5 169 0 225 5 169 0 226 1 73 0 227] 
#[1 0 217 0 1 5 173 0 2 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 177 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 0 250 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 42 0 61 0 62 0 79 0 95 0 96 0 120 0 123 0 124 0 128 0 129 0 130 0 144 0 146 0 147 0 148 0 149 0 150] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 5 181 0 6 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 5 185 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 5 189 0 146] 
#[0 0 254 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 230] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145 1 2 0 230] 
#[1 5 193 0 58 5 197 0 78 5 201 0 92 5 205 0 133] 
#[0 5 209 0 55] 
#[0 1 6 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 21 0 1 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 5 213 0 157 5 213 0 158 5 213 0 161 5 213 0 162 5 213 0 163 5 213 0 170 5 213 0 171 5 213 0 172 5 213 0 175 5 213 0 176 5 213 0 179 5 213 0 180 5 213 0 181 5 213 0 182 5 213 0 183 5 213 0 184 5 213 0 185 5 213 0 186 0 213 0 187] 
#[0 5 217 0 150] 
#[1 5 221 0 1 1 10 0 19 5 225 0 164] 
#[1 0 242 0 1 0 242 0 2 5 41 0 8 0 242 0 10 0 242 0 14 0 242 0 19 0 242 0 22 0 242 0 26 0 242 0 27 0 242 0 31 0 242 0 35 0 242 0 42 0 242 0 43 0 242 0 44 0 242 0 49 0 242 0 58 0 242 0 63 0 242 0 76 0 242 0 77 0 242 0 78 0 242 0 92 0 242 0 98 0 242 0 99 0 242 0 109 0 242 0 119 0 242 0 123 0 242 0 124 0 242 0 133 0 242 0 137 0 242 0 138 0 242 0 230] 
#[1 3 73 0 1 0 105 0 115 0 109 0 116 0 125 0 141 0 10 0 146 5 229 0 187 3 81 0 206 1 145 0 208] 
#[1 5 233 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 5 237 0 38 3 97 0 67 5 241 0 73 5 245 0 82 5 249 0 84 5 253 0 111] 
#[1 1 14 0 2 1 14 0 10 6 1 0 17 3 93 0 38 1 14 0 58 3 97 0 67 3 101 0 73 1 14 0 78 3 105 0 82 3 109 0 84 1 14 0 92 3 113 0 111 1 14 0 133 3 117 0 140 6 5 0 213 1 14 0 230] 
#[0 1 18 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 6 9 0 82] 
#[1 1 22 0 82 6 17 0 103 6 17 0 209] 
#[0 6 21 0 82] 
#[1 1 133 0 1 0 10 0 146 6 25 0 206 1 145 0 208] 
#[1 1 22 0 82 6 29 0 103 6 29 0 209] 
#[1 1 22 0 82 6 33 0 103 6 33 0 209] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 37 0 220 6 37 0 221 6 37 0 225 6 37 0 226 1 73 0 227] 
#[0 1 26 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 1 30 0 2 1 30 0 6 5 41 0 8 1 30 0 10 1 30 0 17 6 41 0 19 1 30 0 38 1 30 0 58 1 30 0 64 1 30 0 67 1 30 0 68 1 30 0 69 1 30 0 73 1 30 0 78 1 30 0 82 1 30 0 84 1 30 0 92 1 30 0 100 1 30 0 102 1 30 0 105 1 30 0 108 1 30 0 111 1 30 0 118 1 30 0 133 1 30 0 135 1 30 0 140 6 45 0 146 1 30 0 150 1 30 0 230] 
#[1 1 34 0 2 1 34 0 10 6 49 0 17 3 93 0 38 1 34 0 58 3 97 0 67 3 101 0 73 1 34 0 78 3 105 0 82 3 109 0 84 1 34 0 92 3 113 0 111 1 34 0 133 3 117 0 140 6 53 0 213 1 34 0 230] 
#[0 1 38 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 1 42 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 1 46 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 57 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 61 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 6 65 0 1 0 105 0 115 0 109 0 116 6 69 0 136 0 125 0 141 6 73 0 187] 
#[1 1 50 0 1 1 50 0 2 5 41 0 8 1 50 0 10 1 50 0 19 1 50 0 55 1 50 0 58 1 50 0 64 1 50 0 66 1 50 0 78 1 50 0 92 1 50 0 115 1 50 0 116 1 50 0 118 1 50 0 133 1 50 0 136 1 50 0 141 1 50 0 146 1 50 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 77 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 6 81 0 1] 
#[1 6 85 0 1 0 105 0 115 0 109 0 116 6 89 0 136 0 125 0 141 6 93 0 187] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 97 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 6 101 0 1] 
#[0 6 105 0 64] 
#[0 6 109 0 146] 
#[0 6 113 0 64] 
#[0 6 117 0 146] 
#[1 3 93 0 38 3 97 0 67 3 101 0 73 3 105 0 82 3 109 0 84 3 113 0 111 6 121 0 135] 
#[1 1 133 0 1 0 10 0 146 6 125 0 206 1 145 0 208] 
#[0 6 129 0 66] 
#[0 6 133 0 150] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 6 137 0 188 6 137 0 203 3 29 0 218 0 186 0 230] 
#[0 6 141 0 150] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 6 145 0 188 6 145 0 203 3 29 0 218 0 186 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 149 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 6 153 0 1] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 6 165 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[0 1 62 0 2 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 6 177 0 150] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 6 181 0 188 6 181 0 203 3 29 0 218 0 186 0 230] 
#[0 6 185 0 150] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 6 189 0 188 6 189 0 203 3 29 0 218 0 186 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 193 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 6 197 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 6 201 0 220 6 201 0 221 6 201 0 225 6 201 0 226 1 73 0 227] 
#[0 6 205 0 146] 
#[1 1 133 0 1 0 10 0 146 6 209 0 205 6 213 0 206 1 145 0 208] 
#[1 0 10 0 146 6 217 0 173 6 221 0 174 6 225 0 208 6 229 0 226] 
#[0 6 233 0 118] 
#[1 6 237 0 2 4 129 0 6] 
#[1 4 125 0 22 4 125 0 26 4 125 0 27 4 125 0 31 4 125 0 35 4 125 0 42 4 125 0 43 4 125 0 44 4 69 0 49 4 125 0 63 4 125 0 76 4 125 0 77 4 125 0 98 4 125 0 99 4 125 0 109 4 125 0 119 4 125 0 123 4 125 0 124 4 125 0 137 4 125 0 138 6 241 0 167 4 121 0 168 4 125 0 169] 
#[0 1 66 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 70 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 74 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 78 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 82 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 86 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 90 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 94 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 6 245 0 107] 
#[0 1 98 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 102 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 106 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 110 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 114 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 118 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 122 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 126 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 130 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 134 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 138 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 142 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 0 63 0 1 1 146 0 2 1 146 0 6 1 146 0 20 1 146 0 24 6 253 0 32 1 146 0 33 1 146 0 34 1 146 0 37 1 146 0 41 1 146 0 45 1 146 0 46 1 146 0 50 1 146 0 52 1 146 0 57 1 146 0 59 1 146 0 60 1 146 0 65 1 146 0 70 1 146 0 74 1 146 0 75 1 146 0 87 1 146 0 88 1 146 0 91 1 146 0 112 1 146 0 115 1 146 0 116 1 146 0 118 1 146 0 134 1 146 0 135 1 146 0 141] 
#[0 1 150 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 2 13 0 146 7 1 0 178] 
#[0 1 154 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 21 0 1 4 141 0 6 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 7 5 0 157 7 5 0 158 7 5 0 161 7 5 0 162 7 5 0 163 7 5 0 170 7 5 0 171 7 5 0 172 7 5 0 175 7 5 0 176 7 5 0 179 7 5 0 180 7 5 0 181 7 5 0 182 7 5 0 183 7 5 0 184 7 5 0 185 7 5 0 186 0 213 0 187] 
#[1 0 10 0 146 7 9 0 198 1 125 0 208 2 37 0 227] 
#[0 1 158 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 13 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 7 17 0 1] 
#[1 0 21 0 1 0 198 0 2 0 198 0 10 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 7 21 0 157 7 21 0 158 7 21 0 161 7 21 0 162 7 21 0 163 7 21 0 170 7 21 0 171 7 21 0 172 7 21 0 175 7 21 0 176 7 21 0 179 7 21 0 180 7 21 0 181 7 21 0 182 7 21 0 183 7 21 0 184 7 21 0 185 7 21 0 186 0 213 0 187 0 198 0 230] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 7 25 0 187] 
#[1 1 162 0 2 1 162 0 10 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133 1 162 0 230] 
#[0 1 166 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 1 170 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 1 174 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 7 29 0 200] 
#[0 1 178 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 7 33 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[0 1 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 1 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 37 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 7 41 0 122 3 17 0 145] 
#[1 4 213 0 51 7 45 0 52 2 85 0 139 7 49 0 222 4 225 0 224] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 53 0 220 7 53 0 221 7 53 0 225 7 53 0 226 1 73 0 227] 
#[0 1 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 7 57 0 52] 
#[0 1 194 0 51 0 52 0 139] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 7 61 0 19 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 65 0 220 7 65 0 221 7 65 0 225 7 65 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 69 0 220 7 69 0 221 7 69 0 225 7 69 0 226 1 73 0 227] 
#[1 2 177 0 1 7 73 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 7 77 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[0 7 81 0 66] 
#[0 1 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 7 85 0 187] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 7 89 0 66 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 7 93 0 135 3 17 0 145] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 7 97 0 135 3 17 0 145] 
#[1 7 101 0 66 7 105 0 149] 
#[1 7 109 0 66 7 113 0 149] 
#[1 7 117 0 66 7 121 0 149] 
#[1 2 177 0 1 7 125 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 7 129 0 102 3 13 0 104 3 17 0 145 7 133 0 216] 
#[0 1 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 1 206 0 3 0 146] 
#[0 7 137 0 2] 
#[0 7 141 0 149] 
#[0 7 145 0 149] 
#[1 7 149 0 2 7 153 0 6] 
#[1 0 67 0 1 1 210 0 2 1 210 0 3 2 185 0 4 1 210 0 5 1 210 0 6 1 210 0 7 1 210 0 9 1 210 0 10 1 210 0 11 1 210 0 12 1 210 0 13 1 210 0 14 1 210 0 15 1 210 0 16 1 210 0 17 1 210 0 18 1 210 0 19 1 210 0 21 1 210 0 38 1 210 0 51 1 210 0 52 1 210 0 53 1 210 0 56 1 210 0 58 1 210 0 64 1 210 0 66 1 210 0 67 1 210 0 68 1 210 0 69 0 71 0 71 1 210 0 72 1 210 0 73 1 210 0 78 1 210 0 80 0 75 0 81 1 210 0 82 1 210 0 84 1 210 0 85 1 210 0 92 1 210 0 93 1 210 0 94 1 210 0 95 1 210 0 100 1 210 0 101 1 210 0 102 0 79 0 104 1 210 0 105 1 210 0 108 1 210 0 111 1 210 0 114 1 210 0 118 1 210 0 122 1 210 0 133 1 210 0 134 1 210 0 135 1 210 0 139 1 210 0 140 1 210 0 141 1 210 0 145 1 210 0 146 1 210 0 150 1 210 0 230] 
#[1 0 83 0 1 1 214 0 2 1 214 0 3 2 185 0 4 1 214 0 5 1 214 0 6 1 214 0 7 1 214 0 9 1 214 0 10 1 214 0 11 1 214 0 12 1 214 0 13 1 214 0 14 1 214 0 15 1 214 0 16 1 214 0 17 1 214 0 18 1 214 0 19 1 214 0 21 1 214 0 38 1 214 0 51 1 214 0 52 1 214 0 53 1 214 0 56 1 214 0 58 1 214 0 64 1 214 0 66 1 214 0 67 1 214 0 68 1 214 0 69 0 87 0 71 1 214 0 72 1 214 0 73 1 214 0 78 1 214 0 80 0 91 0 81 1 214 0 82 1 214 0 84 1 214 0 85 1 214 0 92 1 214 0 93 1 214 0 94 1 214 0 95 1 214 0 100 1 214 0 101 1 214 0 102 0 95 0 104 1 214 0 105 1 214 0 108 1 214 0 111 1 214 0 114 1 214 0 118 1 214 0 122 1 214 0 133 1 214 0 134 1 214 0 135 1 214 0 139 1 214 0 140 1 214 0 141 1 214 0 145 1 214 0 146 1 214 0 150 1 214 0 230] 
#[1 0 99 0 1 1 218 0 2 2 181 0 3 2 185 0 4 1 218 0 5 1 218 0 6 1 218 0 7 2 197 0 9 1 218 0 10 1 218 0 11 1 218 0 12 1 218 0 13 1 218 0 14 1 218 0 15 1 218 0 16 1 218 0 17 1 218 0 18 1 218 0 19 1 218 0 21 1 218 0 38 1 218 0 51 1 218 0 52 1 218 0 53 1 218 0 56 1 218 0 58 1 218 0 64 1 218 0 66 1 218 0 67 1 218 0 68 1 218 0 69 0 103 0 71 1 218 0 72 1 218 0 73 1 218 0 78 1 218 0 80 0 107 0 81 1 218 0 82 1 218 0 84 1 218 0 85 1 218 0 92 2 253 0 93 1 218 0 94 1 218 0 95 1 218 0 100 1 218 0 101 1 218 0 102 0 111 0 104 1 218 0 105 1 218 0 108 1 218 0 111 1 218 0 114 1 218 0 118 1 218 0 122 1 218 0 133 1 218 0 134 1 218 0 135 1 218 0 139 1 218 0 140 1 218 0 141 1 218 0 145 1 218 0 146 1 218 0 150 1 218 0 230] 
#[1 0 115 0 1 1 222 0 2 2 181 0 3 2 185 0 4 1 222 0 5 1 222 0 6 1 222 0 7 2 197 0 9 1 222 0 10 1 222 0 11 1 222 0 12 1 222 0 13 1 222 0 14 1 222 0 15 1 222 0 16 1 222 0 17 1 222 0 18 1 222 0 19 1 222 0 21 1 222 0 38 1 222 0 51 1 222 0 52 1 222 0 53 1 222 0 56 1 222 0 58 1 222 0 64 1 222 0 66 1 222 0 67 1 222 0 68 1 222 0 69 0 119 0 71 1 222 0 72 1 222 0 73 1 222 0 78 1 222 0 80 0 123 0 81 1 222 0 82 1 222 0 84 1 222 0 85 1 222 0 92 2 253 0 93 1 222 0 94 1 222 0 95 1 222 0 100 1 222 0 101 1 222 0 102 0 127 0 104 1 222 0 105 1 222 0 108 1 222 0 111 1 222 0 114 1 222 0 118 1 222 0 122 1 222 0 133 1 222 0 134 1 222 0 135 1 222 0 139 1 222 0 140 1 222 0 141 1 222 0 145 1 222 0 146 1 222 0 150 1 222 0 230] 
#[1 0 131 0 1 1 226 0 2 1 226 0 3 2 185 0 4 1 226 0 5 1 226 0 6 1 226 0 7 1 226 0 9 1 226 0 10 1 226 0 11 1 226 0 12 1 226 0 13 1 226 0 14 1 226 0 15 1 226 0 16 1 226 0 17 1 226 0 18 1 226 0 19 1 226 0 21 1 226 0 38 1 226 0 51 1 226 0 52 1 226 0 53 1 226 0 56 1 226 0 58 1 226 0 64 1 226 0 66 1 226 0 67 1 226 0 68 1 226 0 69 0 135 0 71 1 226 0 72 1 226 0 73 1 226 0 78 1 226 0 80 0 139 0 81 1 226 0 82 1 226 0 84 1 226 0 85 1 226 0 92 1 226 0 93 1 226 0 94 1 226 0 95 1 226 0 100 1 226 0 101 1 226 0 102 0 143 0 104 1 226 0 105 1 226 0 108 1 226 0 111 1 226 0 114 1 226 0 118 1 226 0 122 1 226 0 133 1 226 0 134 1 226 0 135 1 226 0 139 1 226 0 140 1 226 0 141 1 226 0 145 1 226 0 146 1 226 0 150 1 226 0 230] 
#[1 0 147 0 1 1 230 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 230 0 6 2 193 0 7 2 197 0 9 1 230 0 10 1 230 0 17 1 230 0 18 1 230 0 19 1 230 0 38 1 230 0 51 1 230 0 52 1 230 0 56 1 230 0 58 1 230 0 64 1 230 0 66 1 230 0 67 1 230 0 68 1 230 0 69 0 151 0 71 2 241 0 72 1 230 0 73 1 230 0 78 1 230 0 80 0 155 0 81 1 230 0 82 1 230 0 84 2 249 0 85 1 230 0 92 2 253 0 93 3 5 0 95 1 230 0 100 1 230 0 101 1 230 0 102 0 159 0 104 1 230 0 105 1 230 0 108 1 230 0 111 1 230 0 114 1 230 0 118 1 230 0 122 1 230 0 133 1 230 0 134 1 230 0 135 1 230 0 139 1 230 0 140 1 230 0 141 3 17 0 145 1 230 0 146 1 230 0 150 1 230 0 230] 
#[1 0 163 0 1 1 234 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 234 0 6 2 193 0 7 2 197 0 9 1 234 0 10 1 234 0 17 1 234 0 18 1 234 0 19 1 234 0 38 1 234 0 51 1 234 0 52 1 234 0 56 1 234 0 58 1 234 0 64 1 234 0 66 1 234 0 67 1 234 0 68 1 234 0 69 0 167 0 71 2 241 0 72 1 234 0 73 1 234 0 78 1 234 0 80 0 171 0 81 1 234 0 82 1 234 0 84 2 249 0 85 1 234 0 92 2 253 0 93 3 5 0 95 1 234 0 100 1 234 0 101 1 234 0 102 0 175 0 104 1 234 0 105 1 234 0 108 1 234 0 111 1 234 0 114 1 234 0 118 1 234 0 122 1 234 0 133 1 234 0 134 1 234 0 135 1 234 0 139 1 234 0 140 1 234 0 141 3 17 0 145 1 234 0 146 1 234 0 150 1 234 0 230] 
#[1 0 179 0 1 1 238 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 238 0 6 2 193 0 7 2 197 0 9 1 238 0 10 1 238 0 17 1 238 0 18 1 238 0 19 1 238 0 38 1 238 0 51 1 238 0 52 1 238 0 56 1 238 0 58 1 238 0 64 1 238 0 66 1 238 0 67 1 238 0 68 1 238 0 69 0 183 0 71 2 241 0 72 1 238 0 73 1 238 0 78 1 238 0 80 0 187 0 81 1 238 0 82 1 238 0 84 2 249 0 85 1 238 0 92 2 253 0 93 3 5 0 95 1 238 0 100 1 238 0 101 1 238 0 102 0 191 0 104 1 238 0 105 1 238 0 108 1 238 0 111 1 238 0 114 1 238 0 118 1 238 0 122 1 238 0 133 1 238 0 134 1 238 0 135 1 238 0 139 1 238 0 140 1 238 0 141 3 17 0 145 1 238 0 146 1 238 0 150 1 238 0 230] 
#[1 0 195 0 1 1 242 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 242 0 6 2 193 0 7 2 197 0 9 1 242 0 10 1 242 0 17 1 242 0 18 1 242 0 19 1 242 0 38 1 242 0 51 1 242 0 52 1 242 0 56 1 242 0 58 1 242 0 64 1 242 0 66 1 242 0 67 1 242 0 68 1 242 0 69 0 199 0 71 2 241 0 72 1 242 0 73 1 242 0 78 1 242 0 80 0 203 0 81 1 242 0 82 1 242 0 84 2 249 0 85 1 242 0 92 2 253 0 93 3 5 0 95 1 242 0 100 1 242 0 101 1 242 0 102 0 207 0 104 1 242 0 105 1 242 0 108 1 242 0 111 1 242 0 114 1 242 0 118 1 242 0 122 1 242 0 133 1 242 0 134 1 242 0 135 1 242 0 139 1 242 0 140 1 242 0 141 3 17 0 145 1 242 0 146 1 242 0 150 1 242 0 230] 
#[1 0 211 0 1 1 246 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 246 0 6 2 193 0 7 2 197 0 9 1 246 0 10 1 246 0 17 1 246 0 18 1 246 0 19 1 246 0 38 1 246 0 51 1 246 0 52 1 246 0 56 1 246 0 58 1 246 0 64 1 246 0 66 1 246 0 67 1 246 0 68 1 246 0 69 0 215 0 71 2 241 0 72 1 246 0 73 1 246 0 78 1 246 0 80 0 219 0 81 1 246 0 82 1 246 0 84 2 249 0 85 1 246 0 92 2 253 0 93 3 5 0 95 1 246 0 100 1 246 0 101 1 246 0 102 0 223 0 104 1 246 0 105 1 246 0 108 1 246 0 111 1 246 0 114 1 246 0 118 1 246 0 122 1 246 0 133 1 246 0 134 1 246 0 135 1 246 0 139 1 246 0 140 1 246 0 141 3 17 0 145 1 246 0 146 1 246 0 150 1 246 0 230] 
#[1 0 227 0 1 1 250 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 250 0 6 2 193 0 7 2 197 0 9 1 250 0 10 1 250 0 17 1 250 0 18 1 250 0 19 1 250 0 38 1 250 0 51 1 250 0 52 1 250 0 56 1 250 0 58 1 250 0 64 1 250 0 66 1 250 0 67 1 250 0 68 1 250 0 69 0 231 0 71 2 241 0 72 1 250 0 73 1 250 0 78 1 250 0 80 0 235 0 81 1 250 0 82 1 250 0 84 2 249 0 85 1 250 0 92 2 253 0 93 3 5 0 95 1 250 0 100 1 250 0 101 1 250 0 102 0 239 0 104 1 250 0 105 1 250 0 108 1 250 0 111 1 250 0 114 1 250 0 118 1 250 0 122 1 250 0 133 1 250 0 134 1 250 0 135 1 250 0 139 1 250 0 140 1 250 0 141 3 17 0 145 1 250 0 146 1 250 0 150 1 250 0 230] 
#[1 0 243 0 1 1 254 0 2 2 181 0 3 2 185 0 4 2 189 0 5 1 254 0 6 2 193 0 7 2 197 0 9 1 254 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 1 254 0 17 1 254 0 18 1 254 0 19 2 229 0 21 1 254 0 38 1 254 0 51 1 254 0 52 2 233 0 53 1 254 0 56 1 254 0 58 1 254 0 64 1 254 0 66 1 254 0 67 1 254 0 68 1 254 0 69 0 247 0 71 2 241 0 72 1 254 0 73 1 254 0 78 1 254 0 80 0 251 0 81 1 254 0 82 1 254 0 84 2 249 0 85 1 254 0 92 2 253 0 93 3 1 0 94 3 5 0 95 1 254 0 100 1 254 0 101 1 254 0 102 0 255 0 104 1 254 0 105 1 254 0 108 1 254 0 111 1 254 0 114 1 254 0 118 1 254 0 122 1 254 0 133 1 254 0 134 1 254 0 135 1 254 0 139 1 254 0 140 1 254 0 141 3 17 0 145 1 254 0 146 1 254 0 150 1 254 0 230] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 7 157 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 1 3 0 1 2 2 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 2 0 6 2 193 0 7 2 197 0 9 2 2 0 10 2 2 0 17 2 2 0 18 2 2 0 19 2 2 0 38 2 2 0 51 2 2 0 52 2 2 0 56 2 2 0 58 2 2 0 64 2 2 0 66 2 2 0 67 2 2 0 68 2 2 0 69 1 7 0 71 2 241 0 72 2 2 0 73 2 2 0 78 2 2 0 80 1 11 0 81 2 2 0 82 2 2 0 84 2 249 0 85 2 2 0 92 2 253 0 93 3 5 0 95 2 2 0 100 2 2 0 101 2 2 0 102 1 15 0 104 2 2 0 105 2 2 0 108 2 2 0 111 2 2 0 114 2 2 0 118 2 2 0 122 2 2 0 133 2 2 0 134 2 2 0 135 2 2 0 139 2 2 0 140 2 2 0 141 3 17 0 145 2 2 0 146 2 2 0 150 2 2 0 230] 
#[0 2 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 65 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 7 161 0 187 1 53 0 208 7 165 0 220 7 165 0 221 7 165 0 225 7 165 0 226 1 73 0 227] 
#[1 1 19 0 1 2 10 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 10 0 6 2 193 0 7 2 197 0 9 2 10 0 10 2 10 0 11 2 10 0 12 2 10 0 13 2 10 0 14 2 10 0 15 2 10 0 16 2 10 0 17 2 10 0 18 2 10 0 19 2 10 0 21 2 10 0 38 2 10 0 51 2 10 0 52 2 10 0 53 2 10 0 56 2 10 0 58 2 10 0 64 2 10 0 66 2 10 0 67 2 10 0 68 2 10 0 69 1 23 0 71 2 10 0 73 2 10 0 78 2 10 0 80 1 27 0 81 2 10 0 82 2 10 0 84 2 10 0 92 2 253 0 93 2 10 0 94 2 10 0 100 2 10 0 101 2 10 0 102 1 31 0 104 2 10 0 105 2 10 0 108 2 10 0 111 2 10 0 114 2 10 0 118 2 10 0 122 2 10 0 133 2 10 0 134 2 10 0 135 2 10 0 139 2 10 0 140 2 10 0 141 2 10 0 145 2 10 0 146 2 10 0 150 2 10 0 230] 
#[0 7 169 0 96] 
#[0 2 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 1 35 0 1 2 18 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 18 0 6 2 193 0 7 2 197 0 9 2 18 0 10 2 18 0 11 2 18 0 12 2 18 0 13 2 18 0 14 2 18 0 15 2 18 0 16 2 18 0 17 2 18 0 18 2 18 0 19 2 18 0 21 2 18 0 38 2 18 0 51 2 18 0 52 2 18 0 53 1 39 0 56 2 18 0 58 2 18 0 64 2 18 0 66 2 18 0 67 2 18 0 68 2 18 0 69 1 43 0 71 2 18 0 73 2 18 0 78 2 18 0 80 1 47 0 81 2 18 0 82 2 18 0 84 2 18 0 92 2 253 0 93 2 18 0 94 2 18 0 100 2 18 0 101 2 18 0 102 1 51 0 104 2 18 0 105 2 18 0 108 2 18 0 111 2 18 0 114 2 18 0 118 2 18 0 122 2 18 0 133 2 18 0 134 2 18 0 135 2 18 0 139 2 18 0 140 2 18 0 141 2 18 0 145 2 18 0 146 2 18 0 150 2 18 0 230] 
#[1 1 55 0 1 2 22 0 2 2 22 0 3 2 185 0 4 2 22 0 5 2 22 0 6 2 22 0 7 2 22 0 9 2 22 0 10 2 22 0 11 2 22 0 12 2 22 0 13 2 22 0 14 2 22 0 15 2 22 0 16 2 22 0 17 2 22 0 18 2 22 0 19 2 22 0 21 2 22 0 38 2 22 0 51 2 22 0 52 2 22 0 53 2 22 0 56 2 22 0 58 2 22 0 64 2 22 0 66 2 22 0 67 2 22 0 68 2 22 0 69 1 59 0 71 2 22 0 72 2 22 0 73 2 22 0 78 2 22 0 80 1 63 0 81 2 22 0 82 2 22 0 84 2 22 0 85 2 22 0 92 2 22 0 93 2 22 0 94 2 22 0 95 2 22 0 100 2 22 0 101 2 22 0 102 1 67 0 104 2 22 0 105 2 22 0 108 2 22 0 111 2 22 0 114 2 22 0 118 2 22 0 122 2 22 0 133 2 22 0 134 2 22 0 135 2 22 0 139 2 22 0 140 2 22 0 141 2 22 0 145 2 22 0 146 2 22 0 150 2 22 0 230] 
#[1 1 71 0 1 2 26 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 26 0 6 2 193 0 7 2 197 0 9 2 26 0 10 2 26 0 17 2 26 0 18 2 26 0 19 2 26 0 38 2 26 0 51 2 26 0 52 2 26 0 56 2 26 0 58 2 26 0 64 2 26 0 66 2 26 0 67 2 26 0 68 2 26 0 69 1 75 0 71 2 241 0 72 2 26 0 73 2 26 0 78 2 26 0 80 1 79 0 81 2 26 0 82 2 26 0 84 2 249 0 85 2 26 0 92 2 253 0 93 3 5 0 95 2 26 0 100 2 26 0 101 2 26 0 102 1 83 0 104 2 26 0 105 2 26 0 108 2 26 0 111 2 26 0 114 2 26 0 118 2 26 0 122 2 26 0 133 2 26 0 134 2 26 0 135 2 26 0 139 2 26 0 140 2 26 0 141 3 17 0 145 2 26 0 146 2 26 0 150 2 26 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 177 0 220 7 177 0 221 7 177 0 225 7 177 0 226 1 73 0 227] 
#[1 7 181 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 185 0 220 7 185 0 221 7 185 0 225 7 185 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 189 0 220 7 189 0 221 7 189 0 225 7 189 0 226 1 73 0 227] 
#[1 1 87 0 1 2 30 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 30 0 6 2 193 0 7 2 197 0 9 2 30 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 30 0 17 2 225 0 18 2 30 0 19 2 229 0 21 2 30 0 38 2 30 0 51 2 30 0 52 2 233 0 53 2 30 0 56 2 30 0 58 2 30 0 64 2 30 0 66 2 30 0 67 2 30 0 68 2 30 0 69 1 91 0 71 2 241 0 72 2 30 0 73 2 30 0 78 2 30 0 80 1 95 0 81 2 30 0 82 2 30 0 84 2 249 0 85 2 30 0 92 2 253 0 93 3 1 0 94 3 5 0 95 2 30 0 100 2 30 0 101 2 30 0 102 1 99 0 104 2 30 0 105 2 30 0 108 2 30 0 111 2 30 0 114 2 30 0 118 2 30 0 122 2 30 0 133 2 30 0 134 2 30 0 135 2 30 0 139 2 30 0 140 2 30 0 141 3 17 0 145 2 30 0 146 2 30 0 150 2 30 0 230] 
#[1 7 193 0 2 7 129 0 102 7 197 0 105 7 201 0 114 7 205 0 202 7 209 0 216] 
#[1 1 103 0 1 2 34 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 34 0 6 2 193 0 7 2 197 0 9 2 34 0 10 2 34 0 11 2 34 0 12 2 34 0 13 2 34 0 14 2 34 0 15 2 34 0 16 2 34 0 17 2 34 0 18 2 34 0 19 2 34 0 21 2 34 0 38 2 34 0 51 2 34 0 52 2 34 0 53 2 34 0 56 2 34 0 58 2 34 0 64 2 34 0 66 2 34 0 67 2 34 0 68 2 34 0 69 1 107 0 71 2 241 0 72 2 34 0 73 2 34 0 78 2 34 0 80 1 111 0 81 2 34 0 82 2 34 0 84 2 249 0 85 2 34 0 92 2 253 0 93 2 34 0 94 3 5 0 95 2 34 0 100 2 34 0 101 2 34 0 102 1 115 0 104 2 34 0 105 2 34 0 108 2 34 0 111 2 34 0 114 2 34 0 118 2 34 0 122 2 34 0 133 2 34 0 134 2 34 0 135 2 34 0 139 2 34 0 140 2 34 0 141 2 34 0 145 2 34 0 146 2 34 0 150 2 34 0 230] 
#[0 2 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 7 213 0 2 3 25 0 6 3 29 0 218] 
#[0 2 42 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 42 0 61 0 62 0 79 0 95 0 96 0 120 0 123 0 124 0 128 0 129 0 130 0 144 0 146 0 147 0 148 0 149 0 150] 
#[0 2 46 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 230] 
#[0 2 50 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 230] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 7 217 0 200] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 7 221 0 200] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 7 225 0 200] 
#[1 4 161 0 1 7 229 0 17 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 7 233 0 200] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 7 237 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 2 54 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 2 58 0 2 2 58 0 10 7 241 0 52 2 58 0 58 2 58 0 78 2 58 0 92 2 58 0 133 2 58 0 230] 
#[1 0 10 0 146 7 245 0 165 7 249 0 166 1 125 0 208 7 253 0 227] 
#[0 8 1 0 19] 
#[1 8 5 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 2 62 0 2 2 62 0 6 2 62 0 10 2 62 0 17 8 9 0 19 2 62 0 38 2 62 0 58 2 62 0 64 2 62 0 67 2 62 0 68 2 62 0 69 2 62 0 73 2 62 0 78 2 62 0 82 2 62 0 84 2 62 0 92 2 62 0 100 2 62 0 102 2 62 0 105 2 62 0 108 2 62 0 111 2 62 0 118 2 62 0 133 2 62 0 135 2 62 0 140 8 13 0 146 2 62 0 150 2 62 0 230] 
#[0 8 17 0 82] 
#[0 8 21 0 82] 
#[1 1 133 0 1 0 10 0 146 8 25 0 206 1 145 0 208] 
#[1 1 22 0 82 8 29 0 103 8 29 0 209] 
#[1 1 22 0 82 8 33 0 103 8 33 0 209] 
#[0 2 66 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 2 70 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 1 133 0 1 0 10 0 146 8 37 0 206 1 145 0 208] 
#[0 2 74 0 82] 
#[0 8 41 0 82] 
#[1 1 133 0 1 0 10 0 146 8 45 0 206 1 145 0 208] 
#[1 2 78 0 2 2 78 0 6 2 78 0 10 2 78 0 17 1 119 0 38 2 78 0 58 2 78 0 64 1 123 0 67 2 78 0 68 2 78 0 69 1 127 0 73 2 78 0 78 1 131 0 82 1 135 0 84 2 78 0 92 1 139 0 100 2 78 0 102 2 78 0 105 2 78 0 108 1 143 0 111 2 78 0 118 2 78 0 133 2 78 0 135 2 78 0 140 2 78 0 150 8 53 0 210 8 57 0 211 2 78 0 230] 
#[0 8 61 0 82] 
#[0 8 65 0 82] 
#[1 2 177 0 1 2 82 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 82 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 82 0 51 2 233 0 53 2 82 0 58 2 82 0 64 2 82 0 68 2 82 0 69 2 237 0 71 2 241 0 72 2 82 0 78 2 245 0 81 2 249 0 85 2 82 0 92 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 2 82 0 102 3 13 0 104 2 82 0 105 2 82 0 108 2 82 0 133 2 82 0 140 3 17 0 145 2 82 0 150 2 82 0 230] 
#[0 8 69 0 146] 
#[0 2 86 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 2 90 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 2 94 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 8 73 0 2 3 25 0 6 3 29 0 218] 
#[1 8 77 0 2 3 25 0 6 3 29 0 218] 
#[1 2 65 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 105 0 187 1 53 0 208 8 81 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 8 85 0 1] 
#[1 2 98 0 2 2 98 0 10 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133 2 98 0 230] 
#[1 8 89 0 2 3 25 0 6 3 29 0 218] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 93 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 2 65 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 105 0 187 1 53 0 208 8 97 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 8 101 0 1] 
#[1 2 102 0 2 2 102 0 10 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133 2 102 0 230] 
#[1 8 105 0 2 3 25 0 6 3 29 0 218] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 109 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 8 113 0 146] 
#[1 0 21 0 1 2 106 0 2 2 106 0 10 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 2 106 0 58 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 2 106 0 78 0 89 0 87 0 93 0 88 0 97 0 91 2 106 0 92 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 2 106 0 133 0 117 0 134 0 121 0 135 0 125 0 141 8 117 0 157 8 117 0 158 8 117 0 161 8 117 0 162 8 117 0 163 8 117 0 170 8 117 0 171 8 117 0 172 8 117 0 175 8 117 0 176 8 117 0 179 8 117 0 180 8 117 0 181 8 117 0 182 8 117 0 183 8 117 0 184 8 117 0 185 8 117 0 186 0 213 0 187 2 106 0 230] 
#[0 8 121 0 146] 
#[1 0 21 0 1 2 110 0 2 2 110 0 10 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 2 110 0 58 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 2 110 0 78 0 89 0 87 0 93 0 88 0 97 0 91 2 110 0 92 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 2 110 0 133 0 117 0 134 0 121 0 135 0 125 0 141 8 125 0 157 8 125 0 158 8 125 0 161 8 125 0 162 8 125 0 163 8 125 0 170 8 125 0 171 8 125 0 172 8 125 0 175 8 125 0 176 8 125 0 179 8 125 0 180 8 125 0 181 8 125 0 182 8 125 0 183 8 125 0 184 8 125 0 185 8 125 0 186 0 213 0 187 2 110 0 230] 
#[1 1 133 0 1 0 10 0 146 8 129 0 206 1 145 0 208] 
#[1 3 93 0 38 3 97 0 67 3 101 0 73 3 105 0 82 3 109 0 84 8 133 0 100 3 113 0 111] 
#[1 1 133 0 1 0 10 0 146 8 137 0 205 6 213 0 206 1 145 0 208] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 141 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 8 145 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 149 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 8 153 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 8 157 0 188 8 157 0 203 3 29 0 218 0 186 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 161 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 1 133 0 1 0 10 0 146 8 165 0 205 6 213 0 206 1 145 0 208] 
#[0 2 114 0 2 0 10 0 58 0 64 0 78 0 92 0 133 0 150 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 8 177 0 192 2 118 0 230] 
#[1 2 122 0 2 2 122 0 10 2 122 0 58 2 122 0 64 8 181 0 68 8 185 0 69 2 122 0 78 2 122 0 92 7 129 0 102 7 197 0 105 8 189 0 108 2 122 0 133 3 117 0 140 2 122 0 150 8 193 0 196 8 197 0 199 8 201 0 201 8 205 0 202 8 209 0 213 8 213 0 214 8 217 0 216 2 122 0 230] 
#[1 1 54 0 2 1 54 0 10 1 54 0 58 1 54 0 64 1 54 0 68 1 54 0 69 1 54 0 78 1 54 0 92 1 54 0 102 1 54 0 105 1 54 0 108 1 54 0 133 1 54 0 140 1 54 0 150 8 221 0 195 1 54 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 225 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 8 229 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 8 233 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 8 237 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 8 241 0 188 8 241 0 203 3 29 0 218 0 186 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 8 245 0 192 2 118 0 230] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 8 249 0 64 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 8 253 0 134 3 17 0 145] 
#[0 9 1 0 118] 
#[1 9 5 0 6 9 9 0 118] 
#[1 2 126 0 2 2 126 0 6 2 126 0 10 3 93 0 38 2 126 0 58 2 126 0 64 3 97 0 67 2 126 0 68 2 126 0 69 3 101 0 73 2 126 0 78 3 105 0 82 3 109 0 84 2 126 0 92 2 126 0 102 2 126 0 105 2 126 0 108 3 113 0 111 2 126 0 118 2 126 0 133 2 126 0 140 2 126 0 150 2 126 0 230] 
#[1 2 130 0 2 9 13 0 6 2 130 0 10 9 17 0 51 2 130 0 58 2 130 0 78 2 130 0 92 2 130 0 133 3 117 0 140 9 21 0 213 2 130 0 230] 
#[0 2 134 0 2 0 6 0 10 0 51 0 58 0 78 0 92 0 133 0 139 0 140 0 230] 
#[1 9 25 0 146 2 173 0 207] 
#[0 9 29 0 14] 
#[1 0 10 0 146 9 33 0 173 6 221 0 174 6 225 0 208 6 229 0 226] 
#[1 0 21 0 1 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 9 37 0 157 9 37 0 158 9 37 0 161 9 37 0 162 9 37 0 163 9 37 0 170 9 37 0 171 9 37 0 172 9 37 0 175 9 37 0 176 9 37 0 179 9 37 0 180 9 37 0 181 9 37 0 182 9 37 0 183 9 37 0 184 9 37 0 185 9 37 0 186 0 213 0 187] 
#[0 9 41 0 2] 
#[0 2 138 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 9 45 0 150] 
#[0 9 49 0 118] 
#[0 2 142 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 2 146 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 2 150 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 9 53 0 2 3 25 0 6 3 29 0 218] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 9 57 0 187] 
#[0 2 154 0 2 0 10 0 230] 
#[1 9 61 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[0 2 158 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 1 182 0 1 1 182 0 2 1 182 0 3 1 182 0 4 1 182 0 5 1 182 0 6 1 182 0 7 1 182 0 9 1 182 0 11 1 182 0 12 1 182 0 13 1 182 0 14 1 182 0 15 1 182 0 16 1 182 0 18 1 182 0 19 1 182 0 21 1 182 0 53 5 193 0 58 1 182 0 71 1 182 0 72 5 197 0 78 1 182 0 81 1 182 0 85 5 201 0 92 1 182 0 93 1 182 0 94 1 182 0 95 1 182 0 101 1 182 0 104 5 205 0 133 1 182 0 145 1 182 0 146] 
#[1 9 65 0 2 3 25 0 6 3 29 0 218] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 69 0 220 9 69 0 221 9 69 0 225 9 69 0 226 1 73 0 227] 
#[0 2 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 9 73 0 52] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 166 0 52 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 2 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 9 77 0 2 4 125 0 22 4 125 0 26 4 125 0 27 4 125 0 31 4 125 0 35 4 125 0 42 4 125 0 43 4 125 0 44 4 69 0 49 4 125 0 63 9 81 0 65 4 125 0 76 4 125 0 77 4 125 0 98 4 125 0 99 4 125 0 109 4 125 0 119 4 125 0 123 4 125 0 124 4 125 0 137 4 125 0 138 9 85 0 167 4 121 0 168 4 125 0 169] 
#[1 2 177 0 1 9 89 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 2 177 0 1 9 93 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 2 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 2 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 97 0 220 9 97 0 221 9 97 0 225 9 97 0 226 1 73 0 227] 
#[1 9 101 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 105 0 220 9 105 0 221 9 105 0 225 9 105 0 226 1 73 0 227] 
#[0 9 109 0 146] 
#[0 9 113 0 146] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 117 0 220 9 117 0 221 9 117 0 225 9 117 0 226 1 73 0 227] 
#[0 9 121 0 66] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 125 0 220 9 125 0 221 9 125 0 225 9 125 0 226 1 73 0 227] 
#[0 9 129 0 66] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 133 0 220 9 133 0 221 9 133 0 225 9 133 0 226 1 73 0 227] 
#[0 9 137 0 66] 
#[0 2 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 9 141 0 25] 
#[0 9 145 0 2] 
#[0 2 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 9 149 0 2] 
#[0 9 153 0 2] 
#[0 2 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 9 157 0 65] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 161 0 220 9 161 0 221 9 161 0 225 9 161 0 226 1 73 0 227] 
#[1 9 165 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 2 177 0 1 4 197 0 2 2 181 0 3 2 185 0 4 2 189 0 5 9 169 0 6 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 2 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 9 173 0 220 9 173 0 221 9 173 0 225 9 173 0 226 1 73 0 227] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 9 177 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 2 65 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 9 181 0 187 1 53 0 208 9 185 0 220 9 185 0 221 9 185 0 225 9 185 0 226 1 73 0 227] 
#[1 1 147 0 1 2 198 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 198 0 6 2 193 0 7 2 197 0 9 2 198 0 10 2 198 0 11 2 198 0 12 2 198 0 13 2 198 0 14 2 198 0 15 2 198 0 16 2 198 0 17 2 198 0 18 2 198 0 19 2 198 0 21 2 198 0 38 2 198 0 51 2 198 0 52 2 198 0 53 2 198 0 56 2 198 0 58 2 198 0 64 2 198 0 66 2 198 0 67 2 198 0 68 2 198 0 69 1 151 0 71 2 198 0 73 2 198 0 78 2 198 0 80 1 155 0 81 2 198 0 82 2 198 0 84 2 198 0 92 2 253 0 93 2 198 0 94 2 198 0 100 2 198 0 101 2 198 0 102 1 159 0 104 2 198 0 105 2 198 0 108 2 198 0 111 2 198 0 114 2 198 0 118 2 198 0 122 2 198 0 133 2 198 0 134 2 198 0 135 2 198 0 139 2 198 0 140 2 198 0 141 2 198 0 145 2 198 0 146 2 198 0 150 2 198 0 230] 
#[1 1 163 0 1 2 202 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 202 0 6 2 193 0 7 2 197 0 9 2 202 0 10 2 202 0 11 2 202 0 12 2 202 0 13 2 202 0 14 2 202 0 15 2 202 0 16 2 202 0 17 2 202 0 18 2 202 0 19 2 202 0 21 2 202 0 38 2 202 0 51 2 202 0 52 2 202 0 53 1 167 0 56 2 202 0 58 2 202 0 64 2 202 0 66 2 202 0 67 2 202 0 68 2 202 0 69 1 171 0 71 2 202 0 73 2 202 0 78 2 202 0 80 1 175 0 81 2 202 0 82 2 202 0 84 2 202 0 92 2 253 0 93 2 202 0 94 2 202 0 100 2 202 0 101 2 202 0 102 1 179 0 104 2 202 0 105 2 202 0 108 2 202 0 111 2 202 0 114 2 202 0 118 2 202 0 122 2 202 0 133 2 202 0 134 2 202 0 135 2 202 0 139 2 202 0 140 2 202 0 141 2 202 0 145 2 202 0 146 2 202 0 150 2 202 0 230] 
#[0 2 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 9 193 0 25] 
#[0 9 197 0 21] 
#[1 9 201 0 2 7 129 0 102 9 205 0 114 9 209 0 216] 
#[1 9 213 0 2 9 217 0 114] 
#[0 2 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 2 214 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 2 218 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 2 222 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 4 161 0 1 0 105 0 115 0 109 0 116 0 125 0 141 4 165 0 187 9 221 0 200] 
#[0 2 226 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 3 25 0 6 9 225 0 141 3 29 0 218] 
#[0 2 230 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 9 229 0 2 9 233 0 6] 
#[0 2 234 0 2 0 6] 
#[1 4 125 0 22 4 125 0 26 4 125 0 27 4 125 0 31 4 125 0 35 4 125 0 42 4 125 0 43 4 125 0 44 4 69 0 49 4 125 0 63 4 125 0 76 4 125 0 77 4 125 0 98 4 125 0 99 4 125 0 109 4 125 0 119 4 125 0 123 4 125 0 124 4 125 0 137 4 125 0 138 9 237 0 167 4 121 0 168 4 125 0 169] 
#[0 9 241 0 1] 
#[1 8 9 0 19 2 62 0 38 5 193 0 58 2 62 0 67 2 62 0 73 5 197 0 78 2 62 0 82 2 62 0 84 5 201 0 92 2 62 0 111 5 205 0 133 8 13 0 146] 
#[0 9 245 0 146] 
#[0 2 238 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 1 133 0 1 0 10 0 146 9 249 0 206 1 145 0 208] 
#[1 1 133 0 1 0 10 0 146 9 253 0 206 1 145 0 208] 
#[1 2 78 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 49 0 100 1 143 0 111 8 53 0 210 10 1 0 211] 
#[0 10 5 0 82] 
#[0 10 9 0 82] 
#[1 2 78 0 2 2 78 0 6 2 78 0 10 2 78 0 17 1 119 0 38 2 78 0 58 2 78 0 64 1 123 0 67 2 78 0 68 2 78 0 69 1 127 0 73 2 78 0 78 1 131 0 82 1 135 0 84 2 78 0 92 1 139 0 100 2 78 0 102 2 78 0 105 2 78 0 108 1 143 0 111 2 78 0 118 2 78 0 133 2 78 0 135 2 78 0 140 2 78 0 150 8 53 0 210 10 13 0 211 2 78 0 230] 
#[1 1 133 0 1 0 10 0 146 10 17 0 206 1 145 0 208] 
#[1 2 78 0 2 2 78 0 6 2 78 0 10 2 78 0 17 1 119 0 38 2 78 0 58 2 78 0 64 1 123 0 67 2 78 0 68 2 78 0 69 1 127 0 73 2 78 0 78 1 131 0 82 1 135 0 84 2 78 0 92 1 139 0 100 2 78 0 102 2 78 0 105 2 78 0 108 1 143 0 111 2 78 0 118 2 78 0 133 2 78 0 135 2 78 0 140 2 78 0 150 8 53 0 210 10 21 0 211 2 78 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 25 0 220 10 25 0 221 10 25 0 225 10 25 0 226 1 73 0 227] 
#[0 2 242 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 2 246 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 1 133 0 1 0 10 0 146 10 29 0 206 1 145 0 208] 
#[1 1 133 0 1 0 10 0 146 10 33 0 206 1 145 0 208] 
#[0 2 250 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 2 254 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 2 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 10 37 0 2 3 25 0 6 3 29 0 218] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 41 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 10 45 0 136] 
#[1 10 49 0 2 3 25 0 6 3 29 0 218] 
#[1 10 53 0 2 3 25 0 6 3 29 0 218] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 57 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 10 61 0 136] 
#[1 10 65 0 2 3 25 0 6 3 29 0 218] 
#[1 0 21 0 1 3 6 0 2 3 6 0 10 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 3 6 0 58 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 3 6 0 78 0 89 0 87 0 93 0 88 0 97 0 91 3 6 0 92 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 3 6 0 133 0 117 0 134 0 121 0 135 0 125 0 141 10 69 0 157 10 69 0 158 10 69 0 161 10 69 0 162 10 69 0 163 10 69 0 170 10 69 0 171 10 69 0 172 10 69 0 175 10 69 0 176 10 69 0 179 10 69 0 180 10 69 0 181 10 69 0 182 10 69 0 183 10 69 0 184 10 69 0 185 10 69 0 186 0 213 0 187 3 6 0 230] 
#[0 3 10 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 21 0 1 3 14 0 2 3 14 0 10 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 3 14 0 58 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 3 14 0 78 0 89 0 87 0 93 0 88 0 97 0 91 3 14 0 92 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 3 14 0 133 0 117 0 134 0 121 0 135 0 125 0 141 10 73 0 157 10 73 0 158 10 73 0 161 10 73 0 162 10 73 0 163 10 73 0 170 10 73 0 171 10 73 0 172 10 73 0 175 10 73 0 176 10 73 0 179 10 73 0 180 10 73 0 181 10 73 0 182 10 73 0 183 10 73 0 184 10 73 0 185 10 73 0 186 0 213 0 187 3 14 0 230] 
#[0 3 18 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 3 93 0 38 3 97 0 67 3 101 0 73 3 105 0 82 3 109 0 84 10 77 0 100 3 113 0 111] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 81 0 220 10 81 0 221 10 81 0 225 10 81 0 226 1 73 0 227] 
#[1 9 5 0 6 3 117 0 140 10 85 0 213] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 10 89 0 188 10 89 0 203 3 29 0 218 0 186 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 10 93 0 192 2 118 0 230] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 10 97 0 188 10 97 0 203 3 29 0 218 0 186 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 10 101 0 192 2 118 0 230] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 10 105 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 10 109 0 2 3 25 0 6 3 29 0 218] 
#[1 3 22 0 2 9 5 0 6 3 22 0 10 3 22 0 58 3 22 0 64 3 22 0 68 3 22 0 69 3 22 0 78 3 22 0 92 3 22 0 102 3 22 0 105 3 22 0 108 3 22 0 133 3 22 0 140 3 22 0 150 3 22 0 230] 
#[0 10 113 0 40] 
#[0 3 26 0 2 0 10 0 58 0 78 0 92 0 133 0 150 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 10 125 0 150 10 125 0 193 10 125 0 194 3 30 0 230] 
#[0 10 129 0 25] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 133 0 220 10 133 0 221 10 133 0 225 10 133 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 137 0 220 10 137 0 221 10 137 0 225 10 137 0 226 1 73 0 227] 
#[0 3 34 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 38 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 42 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 46 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 50 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 54 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 58 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[1 3 62 0 2 3 62 0 10 3 62 0 58 3 62 0 64 8 181 0 68 8 185 0 69 3 62 0 78 3 62 0 92 7 129 0 102 7 197 0 105 8 189 0 108 3 62 0 133 3 117 0 140 3 62 0 150 8 193 0 196 8 197 0 199 8 201 0 201 8 205 0 202 8 209 0 213 8 213 0 214 8 217 0 216 3 62 0 230] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 10 141 0 188 10 141 0 203 3 29 0 218 0 186 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 10 145 0 192 2 118 0 230] 
#[1 0 186 0 2 3 25 0 6 0 186 0 10 0 186 0 58 0 186 0 64 0 186 0 66 0 186 0 68 0 186 0 69 0 186 0 78 3 229 0 80 0 186 0 92 0 186 0 102 0 186 0 105 0 186 0 108 0 186 0 133 0 186 0 140 0 186 0 150 10 149 0 188 10 149 0 203 3 29 0 218 0 186 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 10 153 0 192 2 118 0 230] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 10 157 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 10 161 0 150 10 161 0 193 10 161 0 194 3 30 0 230] 
#[0 10 165 0 117] 
#[0 10 169 0 64] 
#[1 0 10 0 146 10 173 0 173 6 221 0 174 6 225 0 208 6 229 0 226] 
#[1 1 133 0 1 0 10 0 146 10 177 0 206 1 145 0 208] 
#[1 0 10 0 146 10 181 0 173 6 221 0 174 6 225 0 208 6 229 0 226] 
#[1 0 10 0 146 10 185 0 174 6 225 0 208 6 229 0 226] 
#[1 0 81 0 74 0 85 0 75 0 117 0 134 10 189 0 172 10 193 0 175] 
#[1 3 66 0 2 3 66 0 10 10 197 0 51 3 66 0 58 3 66 0 78 3 66 0 92 3 66 0 133 3 66 0 230] 
#[1 5 41 0 8 0 238 0 14] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 10 201 0 220 10 201 0 221 10 201 0 225 10 201 0 226 1 73 0 227] 
#[1 3 70 0 2 9 13 0 6 3 70 0 10 10 205 0 51 3 70 0 58 3 70 0 78 3 70 0 92 3 70 0 133 3 117 0 140 10 209 0 213 3 70 0 230] 
#[0 3 74 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 78 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 10 213 0 2 10 217 0 6] 
#[0 10 221 0 146] 
#[0 10 225 0 19] 
#[1 10 229 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 5 193 0 58 5 197 0 78 5 201 0 92 7 129 0 102 5 205 0 133 10 233 0 216] 
#[1 10 237 0 72 10 241 0 95] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 3 82 0 51 3 82 0 52 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 82 0 139 3 17 0 145] 
#[0 3 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 3 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 10 245 0 149] 
#[1 10 249 0 2 10 253 0 65] 
#[0 3 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 3 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 177 0 1 11 1 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 1 183 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 177 0 1 11 5 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 11 9 0 64 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 11 13 0 2 11 17 0 141] 
#[1 11 21 0 2 11 25 0 141] 
#[1 2 177 0 1 11 29 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 33 0 220 11 33 0 221 11 33 0 225 11 33 0 226 1 73 0 227] 
#[1 2 177 0 1 11 37 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 41 0 220 11 41 0 221 11 41 0 225 11 41 0 226 1 73 0 227] 
#[1 2 177 0 1 11 45 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 49 0 220 11 49 0 221 11 49 0 225 11 49 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 53 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 3 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 3 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 3 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 11 57 0 149] 
#[1 1 187 0 1 3 118 0 2 1 191 0 3 1 195 0 4 1 199 0 5 3 118 0 6 1 203 0 7 1 207 0 9 3 118 0 10 1 211 0 11 1 215 0 12 1 219 0 13 1 223 0 14 1 227 0 15 1 231 0 16 3 118 0 17 1 235 0 18 3 118 0 19 1 239 0 21 3 118 0 38 3 118 0 51 3 118 0 52 1 243 0 53 3 118 0 56 3 118 0 58 3 118 0 64 3 118 0 66 3 118 0 67 3 118 0 68 3 118 0 69 1 247 0 71 1 251 0 72 3 118 0 73 3 118 0 78 3 118 0 80 1 255 0 81 3 118 0 82 3 118 0 84 2 3 0 85 3 118 0 92 2 7 0 93 2 11 0 94 2 15 0 95 3 118 0 100 2 19 0 101 3 118 0 102 2 23 0 104 3 118 0 105 3 118 0 108 3 118 0 111 3 118 0 114 3 118 0 118 3 118 0 122 3 118 0 133 3 118 0 134 3 118 0 135 3 118 0 139 3 118 0 140 3 118 0 141 2 27 0 145 3 118 0 146 3 118 0 150 3 118 0 230] 
#[0 2 31 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 61 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 2 35 0 1 3 126 0 2 2 181 0 3 2 185 0 4 2 189 0 5 3 126 0 6 2 193 0 7 2 197 0 9 3 126 0 10 3 126 0 11 3 126 0 12 3 126 0 13 3 126 0 14 3 126 0 15 3 126 0 16 3 126 0 17 3 126 0 18 3 126 0 19 3 126 0 21 3 126 0 38 3 126 0 51 3 126 0 52 3 126 0 53 3 126 0 56 3 126 0 58 3 126 0 64 3 126 0 66 3 126 0 67 3 126 0 68 3 126 0 69 2 39 0 71 3 126 0 73 3 126 0 78 3 126 0 80 2 43 0 81 3 126 0 82 3 126 0 84 3 126 0 92 2 253 0 93 3 126 0 94 3 126 0 100 3 126 0 101 3 126 0 102 2 47 0 104 3 126 0 105 3 126 0 108 3 126 0 111 3 126 0 114 3 126 0 118 3 126 0 122 3 126 0 133 3 126 0 134 3 126 0 135 3 126 0 139 3 126 0 140 3 126 0 141 3 126 0 145 3 126 0 146 3 126 0 150 3 126 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 65 0 220 11 65 0 221 11 65 0 225 11 65 0 226 1 73 0 227] 
#[1 11 69 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 2 177 0 1 4 197 0 2 2 181 0 3 2 185 0 4 2 189 0 5 11 73 0 6 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 77 0 220 11 77 0 221 11 77 0 225 11 77 0 226 1 73 0 227] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 81 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 11 85 0 39 11 89 0 132 11 93 0 150] 
#[0 3 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 11 97 0 21] 
#[1 11 101 0 2 11 105 0 114] 
#[0 3 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 11 109 0 21] 
#[0 3 138 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 11 113 0 79] 
#[0 3 142 0 19] 
#[1 0 10 0 146 11 117 0 166 1 125 0 208 7 253 0 227] 
#[0 3 146 0 2 0 6] 
#[1 0 21 0 1 0 25 0 20 0 29 0 24 0 33 0 33 0 37 0 34 0 41 0 37 0 45 0 41 0 49 0 45 0 53 0 46 0 57 0 50 0 61 0 52 0 65 0 57 0 69 0 59 0 73 0 60 0 77 0 70 0 81 0 74 0 85 0 75 0 89 0 87 0 93 0 88 0 97 0 91 0 101 0 112 0 105 0 115 0 109 0 116 0 113 0 118 0 117 0 134 0 121 0 135 0 125 0 141 11 121 0 156 0 141 0 157 0 141 0 158 0 141 0 161 0 141 0 162 0 141 0 163 0 141 0 170 0 141 0 171 0 141 0 172 0 141 0 175 0 141 0 176 0 141 0 179 0 141 0 180 0 141 0 181 0 141 0 182 0 141 0 183 0 141 0 184 0 141 0 185 0 141 0 186 0 213 0 187] 
#[0 3 150 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 2 78 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 49 0 100 1 143 0 111 8 53 0 210 11 125 0 211] 
#[1 2 78 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 49 0 100 1 143 0 111 8 53 0 210 11 129 0 211] 
#[1 11 133 0 2 2 246 0 38 2 246 0 67 2 246 0 73 2 246 0 82 2 246 0 84 2 246 0 111] 
#[1 1 133 0 1 0 10 0 146 11 137 0 206 1 145 0 208] 
#[1 1 133 0 1 0 10 0 146 11 141 0 206 1 145 0 208] 
#[0 3 154 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 2 78 0 2 2 78 0 6 2 78 0 10 2 78 0 17 1 119 0 38 2 78 0 58 2 78 0 64 1 123 0 67 2 78 0 68 2 78 0 69 1 127 0 73 2 78 0 78 1 131 0 82 1 135 0 84 2 78 0 92 1 139 0 100 2 78 0 102 2 78 0 105 2 78 0 108 1 143 0 111 2 78 0 118 2 78 0 133 2 78 0 135 2 78 0 140 2 78 0 150 8 53 0 210 11 145 0 211 2 78 0 230] 
#[0 3 158 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 2 177 0 1 3 162 0 2 2 181 0 3 2 185 0 4 2 189 0 5 3 162 0 6 2 193 0 7 2 197 0 9 3 162 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 3 162 0 17 2 225 0 18 2 229 0 21 3 162 0 38 2 233 0 53 3 162 0 58 3 162 0 64 3 162 0 67 3 162 0 68 3 162 0 69 2 237 0 71 2 241 0 72 3 162 0 73 3 162 0 78 2 245 0 81 3 162 0 82 3 162 0 84 2 249 0 85 3 162 0 92 2 253 0 93 3 1 0 94 3 5 0 95 3 162 0 100 3 9 0 101 3 162 0 102 3 13 0 104 3 162 0 105 3 162 0 108 3 162 0 111 3 162 0 118 3 162 0 133 3 162 0 135 3 162 0 140 3 17 0 145 3 162 0 150 3 162 0 230] 
#[1 2 78 0 2 2 78 0 6 2 78 0 10 2 78 0 17 1 119 0 38 2 78 0 58 2 78 0 64 1 123 0 67 2 78 0 68 2 78 0 69 1 127 0 73 2 78 0 78 1 131 0 82 1 135 0 84 2 78 0 92 1 139 0 100 2 78 0 102 2 78 0 105 2 78 0 108 1 143 0 111 2 78 0 118 2 78 0 133 2 78 0 135 2 78 0 140 2 78 0 150 8 53 0 210 11 149 0 211 2 78 0 230] 
#[1 2 78 0 2 2 78 0 6 2 78 0 10 2 78 0 17 1 119 0 38 2 78 0 58 2 78 0 64 1 123 0 67 2 78 0 68 2 78 0 69 1 127 0 73 2 78 0 78 1 131 0 82 1 135 0 84 2 78 0 92 1 139 0 100 2 78 0 102 2 78 0 105 2 78 0 108 1 143 0 111 2 78 0 118 2 78 0 133 2 78 0 135 2 78 0 140 2 78 0 150 8 53 0 210 11 153 0 211 2 78 0 230] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 11 157 0 136 0 125 0 141 11 161 0 187] 
#[1 11 165 0 2 3 25 0 6 3 29 0 218] 
#[0 11 169 0 1] 
#[0 3 166 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 11 173 0 136 0 125 0 141 11 177 0 187] 
#[1 11 181 0 2 3 25 0 6 3 29 0 218] 
#[0 11 185 0 1] 
#[0 3 170 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 174 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 178 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 189 0 220 11 189 0 221 11 189 0 225 11 189 0 226 1 73 0 227] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 11 193 0 139 3 17 0 145 11 197 0 159 11 201 0 160] 
#[0 3 182 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 11 205 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 11 209 0 150 11 209 0 193 11 209 0 194 3 30 0 230] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 11 213 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 11 217 0 150 11 217 0 193 11 217 0 194 3 30 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 11 221 0 192 2 118 0 230] 
#[0 3 186 0 2 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[0 3 190 0 2 0 10 0 58 0 78 0 92 0 133 0 150 0 230] 
#[0 3 194 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 198 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 202 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 11 225 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 11 229 0 215 11 233 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 2 177 0 1 3 206 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 3 206 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 3 206 0 58 3 206 0 64 3 206 0 68 3 206 0 69 2 237 0 71 2 241 0 72 3 206 0 78 2 245 0 81 2 249 0 85 3 206 0 92 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 206 0 102 3 13 0 104 3 206 0 105 3 206 0 108 3 206 0 133 3 206 0 140 3 17 0 145 3 206 0 150 3 206 0 230] 
#[1 2 177 0 1 3 210 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 3 210 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 3 210 0 58 3 210 0 64 3 210 0 68 3 210 0 69 2 237 0 71 2 241 0 72 3 210 0 78 2 245 0 81 2 249 0 85 3 210 0 92 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 210 0 102 3 13 0 104 3 210 0 105 3 210 0 108 3 210 0 133 3 210 0 140 3 17 0 145 3 210 0 150 3 210 0 230] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 11 237 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 11 241 0 150 11 241 0 193 11 241 0 194 3 30 0 230] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 6 157 0 66 1 54 0 68 1 54 0 69 0 59 0 78 0 59 0 92 1 54 0 102 1 54 0 105 1 54 0 108 0 59 0 133 1 54 0 140 0 59 0 150 6 161 0 189 11 245 0 190 6 169 0 195 6 173 0 204 0 59 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 11 249 0 150 11 249 0 193 11 249 0 194 3 30 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 11 253 0 192 2 118 0 230] 
#[0 3 214 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 218 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 12 1 0 117] 
#[1 3 222 0 2 9 13 0 6 3 222 0 10 12 5 0 51 3 222 0 58 3 222 0 78 3 222 0 92 3 222 0 133 3 117 0 140 12 9 0 213 3 222 0 230] 
#[1 3 226 0 2 3 226 0 6 3 226 0 10 3 93 0 38 3 226 0 58 3 226 0 64 3 97 0 67 3 226 0 68 3 226 0 69 3 101 0 73 3 226 0 78 3 105 0 82 3 109 0 84 3 226 0 92 3 226 0 102 3 226 0 105 3 226 0 108 3 113 0 111 3 226 0 118 3 226 0 133 3 226 0 140 3 226 0 150 3 226 0 230] 
#[1 3 230 0 2 9 13 0 6 3 230 0 10 3 230 0 58 3 230 0 78 3 230 0 92 3 230 0 133 3 117 0 140 12 13 0 213 3 230 0 230] 
#[0 3 234 0 2 0 6 0 10 0 51 0 58 0 78 0 92 0 133 0 139 0 140 0 230] 
#[0 3 238 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 3 242 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 81 0 74 0 85 0 75 0 117 0 134 12 17 0 172 12 21 0 175] 
#[1 2 177 0 1 3 246 0 2 2 181 0 3 2 185 0 4 2 189 0 5 3 246 0 6 2 193 0 7 2 197 0 9 3 246 0 10 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 3 246 0 51 2 233 0 53 3 246 0 58 2 237 0 71 2 241 0 72 3 246 0 78 2 245 0 81 2 249 0 85 3 246 0 92 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 246 0 133 3 246 0 139 3 246 0 140 3 17 0 145 3 246 0 230] 
#[1 0 81 0 74 0 85 0 75 0 117 0 134 12 25 0 172 12 29 0 175] 
#[1 3 250 0 2 3 250 0 10 12 33 0 51 3 250 0 58 3 250 0 78 3 250 0 92 3 250 0 133 3 250 0 230] 
#[1 3 254 0 1 3 254 0 2 3 254 0 6 3 254 0 20 3 254 0 24 12 37 0 32 3 254 0 33 3 254 0 34 3 254 0 37 3 254 0 41 3 254 0 45 3 254 0 46 3 254 0 50 3 254 0 52 3 254 0 57 3 254 0 59 3 254 0 60 3 254 0 65 3 254 0 70 3 254 0 74 3 254 0 75 3 254 0 87 3 254 0 88 3 254 0 91 3 254 0 112 3 254 0 115 3 254 0 116 3 254 0 118 3 254 0 134 3 254 0 135 3 254 0 141] 
#[0 12 41 0 150] 
#[0 4 2 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 12 45 0 1] 
#[0 4 6 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 4 10 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 12 49 0 1] 
#[0 12 53 0 72] 
#[0 12 57 0 2] 
#[0 4 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 12 61 0 149] 
#[0 4 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 12 65 0 220 12 65 0 221 12 65 0 225 12 65 0 226 1 73 0 227] 
#[0 4 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 12 69 0 54] 
#[0 4 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 12 73 0 54] 
#[0 4 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 177 0 1 12 77 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 4 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 177 0 1 12 81 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 4 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 2 177 0 1 12 85 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[1 4 46 0 2 3 25 0 6 4 46 0 10 4 46 0 58 4 46 0 64 4 46 0 68 4 46 0 69 4 46 0 78 4 46 0 92 4 46 0 102 4 46 0 105 4 46 0 108 4 46 0 114 4 46 0 133 4 46 0 140 4 46 0 150 3 29 0 218 4 46 0 230] 
#[0 12 89 0 2] 
#[1 12 93 0 2 3 25 0 6 3 29 0 218] 
#[1 2 51 0 1 4 50 0 2 2 55 0 3 2 59 0 4 2 63 0 5 4 50 0 6 2 67 0 7 2 71 0 9 4 50 0 10 2 75 0 11 2 79 0 12 2 83 0 13 2 87 0 14 2 91 0 15 2 95 0 16 4 50 0 17 2 99 0 18 4 50 0 19 2 103 0 21 4 50 0 38 4 50 0 51 4 50 0 52 2 107 0 53 4 50 0 56 4 50 0 58 4 50 0 64 4 50 0 66 4 50 0 67 4 50 0 68 4 50 0 69 2 111 0 71 2 115 0 72 4 50 0 73 4 50 0 78 4 50 0 80 2 119 0 81 4 50 0 82 4 50 0 84 2 123 0 85 4 50 0 92 2 127 0 93 2 131 0 94 2 135 0 95 4 50 0 100 2 139 0 101 4 50 0 102 2 143 0 104 4 50 0 105 4 50 0 108 4 50 0 111 4 50 0 114 4 50 0 118 4 50 0 122 4 50 0 133 4 50 0 134 4 50 0 135 4 50 0 139 4 50 0 140 4 50 0 141 2 147 0 145 4 50 0 146 4 50 0 150 4 50 0 230] 
#[0 2 151 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 12 97 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 2 155 0 1 4 58 0 2 2 181 0 3 2 185 0 4 2 189 0 5 4 58 0 6 2 193 0 7 2 197 0 9 4 58 0 10 4 58 0 11 4 58 0 12 4 58 0 13 4 58 0 14 4 58 0 15 4 58 0 16 4 58 0 17 4 58 0 18 4 58 0 19 4 58 0 21 4 58 0 38 4 58 0 51 4 58 0 52 4 58 0 53 4 58 0 56 4 58 0 58 4 58 0 64 4 58 0 66 4 58 0 67 4 58 0 68 4 58 0 69 2 159 0 71 4 58 0 73 4 58 0 78 4 58 0 80 2 163 0 81 4 58 0 82 4 58 0 84 4 58 0 92 2 253 0 93 4 58 0 94 4 58 0 100 4 58 0 101 4 58 0 102 2 167 0 104 4 58 0 105 4 58 0 108 4 58 0 111 4 58 0 114 4 58 0 118 4 58 0 122 4 58 0 133 4 58 0 134 4 58 0 135 4 58 0 139 4 58 0 140 4 58 0 141 4 58 0 145 4 58 0 146 4 58 0 150 4 58 0 230] 
#[1 4 62 0 2 3 25 0 6 4 62 0 10 4 62 0 58 4 62 0 64 4 62 0 68 4 62 0 69 4 62 0 78 4 62 0 92 4 62 0 102 4 62 0 105 4 62 0 108 4 62 0 114 4 62 0 133 4 62 0 140 4 62 0 150 3 29 0 218 4 62 0 230] 
#[0 12 101 0 113] 
#[0 12 105 0 106] 
#[0 12 109 0 106] 
#[1 12 113 0 39 12 117 0 132 12 121 0 150] 
#[0 4 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 12 125 0 21] 
#[1 12 129 0 39 12 133 0 132 12 137 0 150] 
#[0 4 70 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 74 0 2 0 6] 
#[1 0 6 0 2 0 6 0 10 12 141 0 155] 
#[1 12 145 0 2 3 154 0 38 3 154 0 67 3 154 0 73 3 154 0 82 3 154 0 84 3 154 0 111] 
#[1 12 149 0 2 3 158 0 38 3 158 0 67 3 158 0 73 3 158 0 82 3 158 0 84 3 158 0 111] 
#[0 4 78 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 2 78 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 49 0 100 1 143 0 111 8 53 0 210 12 153 0 211] 
#[1 2 78 0 2 1 119 0 38 1 123 0 67 1 127 0 73 1 131 0 82 1 135 0 84 8 49 0 100 1 143 0 111 8 53 0 210 12 157 0 211] 
#[0 4 82 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 4 86 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 4 90 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 12 161 0 1] 
#[1 4 94 0 2 4 94 0 10 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133 4 94 0 230] 
#[0 4 98 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 12 165 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 12 169 0 1] 
#[1 4 102 0 2 4 102 0 10 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133 4 102 0 230] 
#[0 4 106 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 12 173 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 2 177 0 1 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 11 193 0 139 3 17 0 145 12 177 0 159 11 201 0 160] 
#[1 12 181 0 90 12 185 0 95] 
#[1 4 110 0 2 4 110 0 10 4 110 0 58 4 110 0 78 4 110 0 92 4 110 0 133 11 193 0 139 12 189 0 160 4 110 0 230] 
#[0 4 114 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 12 193 0 192 2 118 0 230] 
#[0 4 118 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 12 197 0 192 2 118 0 230] 
#[0 4 122 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 12 201 0 150 12 201 0 193 12 201 0 194 3 30 0 230] 
#[1 2 65 0 1 12 205 0 2 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 0 105 0 115 0 109 0 116 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 0 125 0 141 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 2 69 0 187 1 53 0 208 2 73 0 220 2 73 0 221 2 73 0 225 2 73 0 226 1 73 0 227] 
#[0 4 126 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[1 4 130 0 2 3 25 0 6 4 130 0 10 4 130 0 58 4 130 0 64 4 130 0 68 4 130 0 69 4 130 0 78 4 130 0 92 4 130 0 102 4 130 0 105 4 130 0 108 4 130 0 133 4 130 0 140 4 130 0 150 3 29 0 218 4 130 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 12 209 0 192 2 118 0 230] 
#[0 4 134 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 2 118 0 2 2 118 0 10 2 118 0 58 8 169 0 64 2 118 0 78 2 118 0 92 2 118 0 133 2 118 0 150 8 173 0 191 12 213 0 192 2 118 0 230] 
#[0 4 138 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 12 217 0 150 12 217 0 193 12 217 0 194 3 30 0 230] 
#[0 4 142 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 81 0 74 0 85 0 75 0 117 0 134 12 221 0 172 12 225 0 175] 
#[1 4 146 0 2 4 146 0 10 12 229 0 51 4 146 0 58 4 146 0 78 4 146 0 92 4 146 0 133 4 146 0 230] 
#[0 4 150 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 154 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 158 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 162 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 166 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 81 0 74 0 85 0 75 0 117 0 134 12 233 0 172 12 237 0 175] 
#[0 12 241 0 118] 
#[0 12 245 0 2] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 12 249 0 187] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 12 253 0 187] 
#[0 13 1 0 1] 
#[0 4 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 13 5 0 2] 
#[1 2 177 0 1 13 9 0 2 2 181 0 3 2 185 0 4 2 189 0 5 2 193 0 7 2 197 0 9 2 201 0 11 2 205 0 12 2 209 0 13 2 213 0 14 2 217 0 15 2 221 0 16 2 225 0 18 2 229 0 21 2 233 0 53 2 237 0 71 2 241 0 72 2 245 0 81 2 249 0 85 2 253 0 93 3 1 0 94 3 5 0 95 3 9 0 101 3 13 0 104 3 17 0 145] 
#[0 13 13 0 2] 
#[0 13 17 0 2] 
#[0 4 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 13 21 0 2 3 25 0 6 3 29 0 218] 
#[0 13 25 0 18] 
#[0 13 29 0 18] 
#[0 13 33 0 18] 
#[0 13 37 0 113] 
#[0 13 41 0 106] 
#[0 13 45 0 106] 
#[1 13 49 0 39 13 53 0 132 13 57 0 150] 
#[0 13 61 0 113] 
#[0 13 65 0 106] 
#[0 13 69 0 106] 
#[1 13 73 0 2 4 157 0 10] 
#[0 4 194 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 4 198 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 13 77 0 2 4 86 0 38 4 86 0 67 4 86 0 73 4 86 0 82 4 86 0 84 4 86 0 111] 
#[1 13 81 0 2 4 90 0 38 4 90 0 67 4 90 0 73 4 90 0 82 4 90 0 84 4 90 0 111] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 13 85 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 13 89 0 2 3 25 0 6 3 29 0 218] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 13 93 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 13 97 0 2 3 25 0 6 3 29 0 218] 
#[1 4 202 0 2 4 202 0 10 4 202 0 58 4 202 0 78 4 202 0 92 4 202 0 133 11 193 0 139 12 189 0 160 4 202 0 230] 
#[0 13 101 0 122] 
#[0 13 105 0 90] 
#[0 4 206 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 13 109 0 150 13 109 0 193 13 109 0 194 3 30 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 13 113 0 150 13 113 0 193 13 113 0 194 3 30 0 230] 
#[0 4 210 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 214 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 13 117 0 150 13 117 0 193 13 117 0 194 3 30 0 230] 
#[1 3 30 0 2 3 30 0 10 3 30 0 58 3 30 0 78 3 30 0 92 3 30 0 133 13 121 0 150 13 121 0 193 13 121 0 194 3 30 0 230] 
#[0 4 218 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 222 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 226 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 0 81 0 74 0 85 0 75 0 117 0 134 13 125 0 172 13 129 0 175] 
#[0 4 230 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 4 234 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 13 133 0 146] 
#[1 4 238 0 1 4 238 0 2 4 238 0 6 4 238 0 20 4 238 0 24 13 137 0 32 4 238 0 33 4 238 0 34 4 238 0 37 4 238 0 41 4 238 0 45 4 238 0 46 4 238 0 50 4 238 0 52 4 238 0 57 4 238 0 59 4 238 0 60 4 238 0 65 4 238 0 70 4 238 0 74 4 238 0 75 4 238 0 87 4 238 0 88 4 238 0 91 4 238 0 112 4 238 0 115 4 238 0 116 4 238 0 118 4 238 0 134 4 238 0 135 4 238 0 141] 
#[1 13 141 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 13 145 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[1 0 21 0 1 0 105 0 115 0 109 0 116 0 125 0 141 13 149 0 187] 
#[0 4 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 4 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 13 153 0 39 13 157 0 132 13 161 0 150] 
#[1 13 165 0 39 13 169 0 132 13 173 0 150] 
#[1 13 177 0 39 13 181 0 132 13 185 0 150] 
#[0 13 189 0 18] 
#[0 13 193 0 18] 
#[0 13 197 0 18] 
#[0 13 201 0 113] 
#[0 13 205 0 106] 
#[0 13 209 0 106] 
#[0 13 213 0 18] 
#[0 13 217 0 18] 
#[0 13 221 0 18] 
#[0 5 6 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 10 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[0 5 14 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 230] 
#[1 13 225 0 2 3 25 0 6 3 29 0 218] 
#[0 5 18 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[1 13 229 0 2 3 25 0 6 3 29 0 218] 
#[0 5 22 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 13 233 0 134] 
#[0 13 237 0 122] 
#[0 5 26 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 30 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 34 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 38 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 42 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 46 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 50 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 13 241 0 118] 
#[0 5 54 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 5 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 13 245 0 2 2 49 0 58 2 53 0 78 2 57 0 92 2 61 0 133] 
#[0 13 249 0 113] 
#[0 13 253 0 106] 
#[0 14 1 0 106] 
#[0 14 5 0 113] 
#[0 14 9 0 106] 
#[0 14 13 0 106] 
#[0 14 17 0 113] 
#[0 14 21 0 106] 
#[0 14 25 0 106] 
#[1 14 29 0 39 14 33 0 132 14 37 0 150] 
#[1 14 41 0 39 14 45 0 132 14 49 0 150] 
#[1 14 53 0 39 14 57 0 132 14 61 0 150] 
#[0 14 65 0 18] 
#[0 14 69 0 18] 
#[0 14 73 0 18] 
#[1 14 77 0 39 14 81 0 132 14 85 0 150] 
#[1 14 89 0 39 14 93 0 132 14 97 0 150] 
#[1 14 101 0 39 14 105 0 132 14 109 0 150] 
#[0 5 62 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 5 66 0 2 0 10 0 58 0 78 0 92 0 133 0 230] 
#[0 14 113 0 118] 
#[0 14 117 0 75] 
#[0 14 121 0 146] 
#[0 5 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 14 125 0 2] 
#[0 14 129 0 2] 
#[0 14 133 0 2] 
#[0 14 137 0 2] 
#[0 14 141 0 2] 
#[0 14 145 0 2] 
#[0 14 149 0 2] 
#[0 14 153 0 2] 
#[0 14 157 0 2] 
#[0 14 161 0 113] 
#[0 14 165 0 106] 
#[0 14 169 0 106] 
#[0 14 173 0 113] 
#[0 14 177 0 106] 
#[0 14 181 0 106] 
#[0 14 185 0 113] 
#[0 14 189 0 106] 
#[0 14 193 0 106] 
#[1 14 197 0 39 14 201 0 132 14 205 0 150] 
#[1 14 209 0 39 14 213 0 132 14 217 0 150] 
#[1 14 221 0 39 14 225 0 132 14 229 0 150] 
#[0 14 233 0 113] 
#[0 14 237 0 106] 
#[0 14 241 0 106] 
#[0 14 245 0 113] 
#[0 14 249 0 106] 
#[0 14 253 0 106] 
#[0 15 1 0 113] 
#[0 15 5 0 106] 
#[0 15 9 0 106] 
#[1 0 10 0 146 15 13 0 173 6 221 0 174 6 225 0 208 6 229 0 226] 
#[0 15 17 0 1] 
#[0 5 74 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 5 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 15 21 0 2] 
#[0 15 25 0 2] 
#[0 15 29 0 2] 
#[0 15 33 0 2] 
#[0 15 37 0 2] 
#[0 15 41 0 2] 
#[0 15 45 0 2] 
#[0 15 49 0 2] 
#[0 15 53 0 2] 
#[0 15 57 0 113] 
#[0 15 61 0 106] 
#[0 15 65 0 106] 
#[0 15 69 0 113] 
#[0 15 73 0 106] 
#[0 15 77 0 106] 
#[0 15 81 0 113] 
#[0 15 85 0 106] 
#[0 15 89 0 106] 
#[0 15 93 0 2] 
#[0 15 97 0 2] 
#[0 15 101 0 2] 
#[0 15 105 0 2] 
#[0 15 109 0 2] 
#[0 15 113 0 2] 
#[0 15 117 0 2] 
#[0 15 121 0 2] 
#[0 15 125 0 2] 
#[1 5 114 0 2 9 13 0 6 5 114 0 10 5 114 0 58 5 114 0 78 5 114 0 92 5 114 0 133 5 114 0 139 5 114 0 230] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 15 129 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[0 5 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 15 133 0 2] 
#[0 15 137 0 2] 
#[0 15 141 0 2] 
#[0 15 145 0 2] 
#[0 15 149 0 2] 
#[0 15 153 0 2] 
#[0 15 157 0 2] 
#[0 15 161 0 2] 
#[0 15 165 0 2] 
#[0 5 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 15 169 0 2 3 25 0 6 3 29 0 218] 
#[0 5 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[0 5 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 230] 
#[1 5 226 0 2 5 226 0 10 5 226 0 58 5 226 0 78 5 226 0 92 5 226 0 133 15 173 0 136 5 226 0 139 5 226 0 230] 
#[0 15 177 0 1] 
#[1 0 217 0 1 0 10 0 3 0 221 0 5 0 225 0 7 0 229 0 28 0 233 0 30 0 237 0 36 0 241 0 42 0 245 0 61 0 249 0 62 0 253 0 79 1 1 0 95 1 5 0 96 1 9 0 120 1 13 0 123 1 17 0 124 1 21 0 128 1 25 0 129 1 29 0 130 1 33 0 144 0 10 0 146 1 37 0 147 1 41 0 148 1 45 0 149 1 49 0 150 1 53 0 208 15 181 0 217 1 81 0 219 1 85 0 220 1 85 0 221 1 85 0 225 1 85 0 226 1 73 0 227] 
#[1 15 185 0 2 3 25 0 6 3 29 0 218] 
#[0 5 230 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 230]
	).
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression1: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression2: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result else: (nodes at: 3).
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression3: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression4: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result else: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement1: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result forToken: (nodes at: 3).
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement2: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement1: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement2: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateMacroStatement1: nodes [
	| result |
	result := TeradataCreateMacroStatementNode new.
	result createToken: (nodes at: 1).
	result macroToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addToken: ((nodes at: 4) at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result statements.
	result addTokens: ((nodes at: 7) at: 2) to: result semicolons.
	result addTokens: (nodes at: 8) to: result semicolons.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDatabaseStatement1: nodes [
	| result |
	result := TeradataDatabaseStatementNode new.
	result databaseToken: (nodes at: 1).
	result database: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery10: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery11: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result where: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery12: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result allToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery7: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery8: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result where: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery9: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result allToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDropTableQuery1: nodes [
	| result |
	result := TeradataDropTableQueryNode new.
	result dropToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForElseExpression1: nodes [
	| result |
	result := TeradataElseExpressionNode new.
	result elseToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForEmptyGroupByExpression1: nodes [
	| result |
	result := TeradataEmptyGroupByExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 2) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement3: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement4: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression100: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression102: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression103: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression104: nodes [
	| result |
	result := TeradataIntervalExpressionNode new.
	result intervalToken: (nodes at: 1).
	result interval: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression105: nodes [
	| result |
	result := TeradataCaseSpecificExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result caseSpecificToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression106: nodes [
	| result |
	result := TeradataTitleExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result titleToken: (nodes at: 3).
	result title: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression107: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression109: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result countType: (nodes at: 3).
	result value: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression112: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression113: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression116: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result existsToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result query: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression117: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result notToken: (nodes at: 1).
	result existsToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression118: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression119: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result withToken: (nodes at: 6).
	result errorToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression11: nodes [
	| result |
	result := TeradataBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression122: nodes [
	| result |
	result := TeradataXmlAggExpressionNode new.
	result xmlaggToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression123: nodes [
	| result |
	result := TeradataUnicodeEscapeExpressionNode new.
	result value: (nodes at: 1).
	result uescapeToken: (nodes at: 2).
	result escape: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression124: nodes [
	| result |
	result := TeradataIgnoreNullsExpressionNode new.
	result value: (nodes at: 1).
	result ignoreToken: (nodes at: 2).
	result nullsToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression26: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression27: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	result escapeToken: (nodes at: 4).
	result escape: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression28: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression29: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	result escapeToken: (nodes at: 5).
	result escape: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression2: nodes [
	| result |
	result := TeradataVariableExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression30: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression31: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result forToken: (nodes at: 6).
	result for: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression32: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result nullToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression33: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result nullToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression34: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression35: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression36: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNode: (nodes at: 4) to: result values.
	result addToken: (nodes at: 5) to: result commas.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression37: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression38: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result commas.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression39: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression3: nodes [
	| result |
	result := TeradataLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression40: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result query: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression41: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result inToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result query: (nodes at: 8).
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression42: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result notToken: (nodes at: 6).
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result query: (nodes at: 9).
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression43: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result formatToken: (nodes at: 3).
	result format: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression44: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression45: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result comma: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression46: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression47: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression48: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression49: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result formatToken: (nodes at: 6).
	result format: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression51: nodes [
	| result |
	result := TeradataUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression52: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result betweenToken: (nodes at: 2).
	result first: (nodes at: 3).
	result andToken: (nodes at: 4).
	result last: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression53: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result betweenToken: (nodes at: 3).
	result first: (nodes at: 4).
	result andToken: (nodes at: 5).
	result last: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression54: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression55: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression56: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result character: (nodes at: 4).
	result fromToken: (nodes at: 5).
	result value: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression5: nodes [
	| result |
	result := TeradataNullExpressionNode new.
	result nullToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression61: nodes [
	| result |
	result := TeradataQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result query: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression63: nodes [
	| result |
	result := TeradataExtractExpressionNode new.
	result extractToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result name: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression64: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression69: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression6: nodes [
	| result |
	result := TeradataStarExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression70: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression72: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression73: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression74: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression79: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression80: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression82: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression83: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression84: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression89: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression90: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression92: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression93: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression94: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression99: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionList2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionListNode1: nodes [
	| result |
	result := TeradataExpressionListNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result values.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionWithDistinct1: nodes [
	| result |
	result := TeradataDistinctExpressionNode new.
	result distinctToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile1: nodes [
	| result |
	result := TeradataFileNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result statements.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolons.
	result addTokens: (nodes at: 2) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile2: nodes [
	| result |
	result := TeradataFileNode new.
	result addTokens: (nodes at: 1) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFromTables1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression1: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression2: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression1: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression2: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHavingExpression1: nodes [
	| result |
	result := TeradataHavingNode new.
	result havingToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHelpSessionStatement1: nodes [
	| result |
	result := TeradataHelpSessionStatementNode new.
	result helpToken: (nodes at: 1).
	result sessionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifier1: nodes [
	| result |
	result := TeradataIdentifierExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifierName1: nodes [
	| result |
	result := TeradataIdentifierNameNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery11: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result query: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery12: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result query: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery5: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result valuesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery6: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result valuesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result addNodes: ((nodes at: 8) at: 1) to: result values.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery7: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result valuesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery8: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result valuesToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result addNodes: ((nodes at: 9) at: 1) to: result values.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIntoExpression1: nodes [
	| result |
	result := TeradataIntoExpressionNode new.
	result intoToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement1: nodes [
	| result |
	result := TeradataBeginLoadingStatementNode new.
	result beginToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result table: (nodes at: 3).
	result errorfilesToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result withToken: (nodes at: 6).
	result intervalToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement2: nodes [
	| result |
	result := TeradataEndLoadingStatementNode new.
	result endToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement5: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement6: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement7: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement8: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	result statement: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery1: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result mergeTable: (nodes at: 2).
	result usingToken: (nodes at: 3).
	result usingTable: (nodes at: 4).
	result onToken: (nodes at: 5).
	result condition: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery2: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result mergeTable: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result usingTable: (nodes at: 5).
	result onToken: (nodes at: 6).
	result condition: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression2: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result alias: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression3: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForOrderByExpression1: nodes [
	| result |
	result := TeradataOrderByExpressionNode new.
	result orderToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForParameter1: nodes [
	| result |
	result := TeradataParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForPartitionByExpression1: nodes [
	| result |
	result := TeradataPartitionByExpressionNode new.
	result partitionToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQualifyExpression1: nodes [
	| result |
	result := TeradataQualifyExpressionNode new.
	result qualifyToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression2: nodes [
	| result |
	result := Array new: 6.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression4: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression5: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression6: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForRollbackStatement1: nodes [
	| result |
	result := TeradataRollbackStatementNode new.
	result rollbackToken: (nodes at: 1).
	result workToken: (nodes at: 2).
	result work: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result tables.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery10: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result topToken: (nodes at: 3).
	result top: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result into: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result wheres.
	result addNodes: ((nodes at: 7) at: 2) to: result groups.
	result addNodes: ((nodes at: 7) at: 3) to: result havings.
	result addNodes: ((nodes at: 7) at: 4) to: result partitions.
	result addNodes: ((nodes at: 7) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 7) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 7) at: 7).
	result addNodes: ((nodes at: 7) at: 8) to: result tables.
	result addTokens: ((nodes at: 7) at: 9) to: result commas.
	result forToken: ((nodes at: 8) at: 1).
	result cursorToken: ((nodes at: 8) at: 2).
	result count: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery13: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery14: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result allToken: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result right: ((nodes at: 4) at: 2).
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery15: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery16: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result allToken: (nodes at: 5).
	result addToken: ((nodes at: 6) at: 1) to: result leftParens.
	result right: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 6) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery17: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result withTables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery18: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result recursiveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result withTables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery19: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result left: (nodes at: 1).
	result minusToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery20: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result minusToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery21: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery22: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery23: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery24: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery7: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result into: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result wheres.
	result addNodes: ((nodes at: 4) at: 2) to: result groups.
	result addNodes: ((nodes at: 4) at: 3) to: result havings.
	result addNodes: ((nodes at: 4) at: 4) to: result partitions.
	result addNodes: ((nodes at: 4) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 4) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result tables.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result forToken: ((nodes at: 5) at: 1).
	result cursorToken: ((nodes at: 5) at: 2).
	result count: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery8: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result topToken: (nodes at: 2).
	result top: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result into: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result wheres.
	result addNodes: ((nodes at: 6) at: 2) to: result groups.
	result addNodes: ((nodes at: 6) at: 3) to: result havings.
	result addNodes: ((nodes at: 6) at: 4) to: result partitions.
	result addNodes: ((nodes at: 6) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 6) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 6) at: 7).
	result addNodes: ((nodes at: 6) at: 8) to: result tables.
	result addTokens: ((nodes at: 6) at: 9) to: result commas.
	result forToken: ((nodes at: 7) at: 1).
	result cursorToken: ((nodes at: 7) at: 2).
	result count: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery9: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result into: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result wheres.
	result addNodes: ((nodes at: 5) at: 2) to: result groups.
	result addNodes: ((nodes at: 5) at: 3) to: result havings.
	result addNodes: ((nodes at: 5) at: 4) to: result partitions.
	result addNodes: ((nodes at: 5) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 5) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result tables.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result forToken: ((nodes at: 6) at: 1).
	result cursorToken: ((nodes at: 6) at: 2).
	result count: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetExpression1: nodes [
	| result |
	result := TeradataSetExpressionNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement1: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result forToken: (nodes at: 5).
	result sessionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement2: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result updateToken: (nodes at: 5).
	result forToken: (nodes at: 6).
	result sessionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable10: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result direction: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable12: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result type: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable13: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable14: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result direction: (nodes at: 3).
	result type: (nodes at: 4).
	result joinToken: (nodes at: 5).
	result right: (nodes at: 6).
	result onToken: ((nodes at: 7) at: 1).
	result on: ((nodes at: 7) at: 2).
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable17: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable1: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable2: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable3: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable4: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable5: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable6: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result asToken: (nodes at: 4).
	result alias: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable7: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result joinToken: (nodes at: 2).
	result right: (nodes at: 3).
	result onToken: ((nodes at: 4) at: 1).
	result on: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement1: nodes [
	| result |
	result := TeradataBeginTransactionStatementNode new.
	result beginToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement2: nodes [
	| result |
	result := TeradataEndTransactionStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType1: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType2: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result characterToken: (nodes at: 2).
	result setToken: (nodes at: 3).
	result encoding: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType3: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType4: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result characterToken: (nodes at: 5).
	result setToken: (nodes at: 6).
	result encoding: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType5: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType6: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result characterToken: (nodes at: 7).
	result setToken: (nodes at: 8).
	result encoding: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeName2: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery10: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery12: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery13: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery15: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery16: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery18: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result else: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery19: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery1: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery20: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery3: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result elseToken: (nodes at: 5).
	result else: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery4: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery6: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery7: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery9: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn1: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn2: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumns2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result columns.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement2: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result columns.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpression1: nodes [
	| result |
	result := TeradataWhenExpressionNode new.
	result whenToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpressions1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition1: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result matchedToken: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result updateToken: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition2: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition3: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	result valuesToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result leftParens.
	result addNodes: ((nodes at: 11) at: 1) to: result values.
	result addTokens: ((nodes at: 11) at: 2) to: result commas.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhereExpression1: nodes [
	| result |
	result := TeradataWhereExpressionNode new.
	result whereToken: (nodes at: 1).
	result where: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable1: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable2: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result query: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_2: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 7 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__ON___onToken__Expression__on___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #testing }
TeradataParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
TeradataParser >> useAllTokenIds [
	^ false
]
