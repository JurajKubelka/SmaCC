Class {
	#name : #VBNetParser,
	#superclass : #SmaCCGLRParser,
	#classInstVars : [
		'keywords'
	],
	#category : #'SmaCC_VB_NET_Parser'
}

{ #category : #generated }
VBNetParser class >> ambiguousTransitions [
^#(
#[ 0 26 0 30 0 34] 
#[ 0 26 0 34] 
#[ 0 238 2 33] 
#[ 1 34 2 33] 
#[ 1 170 2 197] 
#[ 1 174 2 25] 
#[ 1 186 2 249] 
#[ 1 186 3 137] 
#[ 1 218 2 33] 
#[ 1 254 2 25] 
#[ 2 14 5 117] 
#[ 2 25 2 94] 
#[ 2 110 5 213] 
#[ 0 238 2 142] 
#[ 0 238 2 33 2 142] 
#[ 2 158 2 229] 
#[ 2 25 3 194] 
#[ 2 33 3 202] 
#[ 3 226 6 37] 
#[ 2 33 3 226] 
#[ 2 178 3 226] 
#[ 3 230 6 37] 
#[ 2 33 3 230] 
#[ 2 178 3 230] 
#[ 3 234 6 37] 
#[ 2 33 3 234] 
#[ 2 178 3 234] 
#[ 3 242 6 37] 
#[ 2 33 3 242] 
#[ 2 178 3 242] 
#[ 2 33 3 254] 
#[ 3 254 7 209] 
#[ 4 6 6 37] 
#[ 2 33 4 6] 
#[ 2 178 4 6] 
#[ 2 33 4 22] 
#[ 2 246 4 38] 
#[ 2 229 4 62] 
#[ 2 249 4 66] 
#[ 3 137 4 66] 
#[ 3 9 4 82] 
#[ 4 82 10 109] 
#[ 3 89 4 82] 
#[ 4 82 10 113] 
#[ 4 82 10 117] 
#[ 4 82 10 121] 
#[ 4 82 10 125] 
#[ 4 82 10 129] 
#[ 4 82 10 133] 
#[ 4 82 10 137] 
#[ 4 82 10 141] 
#[ 4 82 10 145] 
#[ 4 154 11 161] 
#[ 0 26 0 30 0 34 1 173 4 138 4 142 4 146 4 150 4 154 4 158 4 162] 
#[ 4 138 4 154 11 173] 
#[ 4 138 11 177] 
#[ 4 138 4 154 4 158 11 181] 
#[ 4 138 4 150 4 154 4 158 11 185] 
#[ 4 138 4 154 4 158 11 189] 
#[ 4 138 4 154 4 158 11 193] 
#[ 0 26 0 34 4 138] 
#[ 0 26 0 30 0 34 1 185 4 138 4 142 4 146 4 150 4 154 4 158 4 162] 
#[ 4 154 4 158] 
#[ 0 26 0 30 0 34 1 189 4 138 4 142 4 146 4 150 4 154 4 158 4 162] 
#[ 0 26 0 30 0 34 1 193 4 138 4 142 4 146 4 150 4 154 4 158 4 162] 
#[ 4 154 11 197] 
#[ 0 26 0 30 0 34 4 138 4 142 4 146 4 150 4 154 4 158 11 201] 
#[ 4 138 4 146 4 154 4 158 4 162 11 205] 
#[ 4 138 4 162] 
#[ 4 154 11 213] 
#[ 2 25 4 174] 
#[ 2 229 4 198] 
#[ 0 238 4 202] 
#[ 2 229 4 66] 
#[ 5 18 6 37] 
#[ 2 33 5 18] 
#[ 2 178 5 18] 
#[ 5 22 6 37] 
#[ 2 33 5 22] 
#[ 2 178 5 22] 
#[ 5 26 6 37] 
#[ 2 33 5 26] 
#[ 2 178 5 26] 
#[ 5 30 6 37] 
#[ 2 33 5 30] 
#[ 2 178 5 30] 
#[ 5 34 6 37] 
#[ 2 33 5 34] 
#[ 2 178 5 34] 
#[ 5 38 6 37] 
#[ 2 33 5 38] 
#[ 2 178 5 38] 
#[ 5 42 6 37] 
#[ 2 33 5 42] 
#[ 2 178 5 42] 
#[ 5 46 6 37] 
#[ 2 33 5 46] 
#[ 2 178 5 46] 
#[ 5 50 6 37] 
#[ 2 33 5 50] 
#[ 2 178 5 50] 
#[ 5 54 6 37] 
#[ 2 33 5 54] 
#[ 2 178 5 54] 
#[ 5 58 6 37] 
#[ 2 33 5 58] 
#[ 2 178 5 58] 
#[ 5 62 6 37] 
#[ 2 33 5 62] 
#[ 2 178 5 62] 
#[ 5 66 6 37] 
#[ 2 33 5 66] 
#[ 2 178 5 66] 
#[ 5 70 6 37] 
#[ 2 33 5 70] 
#[ 2 178 5 70] 
#[ 5 74 6 37] 
#[ 2 33 5 74] 
#[ 2 178 5 74] 
#[ 5 78 6 37] 
#[ 2 33 5 78] 
#[ 2 178 5 78] 
#[ 5 82 6 37] 
#[ 2 33 5 82] 
#[ 2 178 5 82] 
#[ 5 86 6 37] 
#[ 2 33 5 86] 
#[ 2 178 5 86] 
#[ 5 90 6 37] 
#[ 2 33 5 90] 
#[ 2 178 5 90] 
#[ 5 94 6 37] 
#[ 2 33 5 94] 
#[ 2 178 5 94] 
#[ 5 98 6 37] 
#[ 2 33 5 98] 
#[ 2 178 5 98] 
#[ 5 102 6 37] 
#[ 2 33 5 102] 
#[ 2 178 5 102] 
#[ 5 106 6 37] 
#[ 2 33 5 106] 
#[ 2 178 5 106] 
#[ 5 110 6 37] 
#[ 2 33 5 110] 
#[ 2 178 5 110] 
#[ 2 229 5 122] 
#[ 2 33 5 130] 
#[ 3 173 4 118] 
#[ 5 138 6 37] 
#[ 2 33 5 138] 
#[ 2 178 5 138] 
#[ 2 245 5 158] 
#[ 2 33 5 158] 
#[ 2 25 5 158] 
#[ 3 9 5 158] 
#[ 3 89 5 158] 
#[ 2 245 5 170] 
#[ 2 33 5 170] 
#[ 2 25 5 170] 
#[ 3 9 5 170] 
#[ 3 89 5 170] 
#[ 2 33 2 142] 
#[ 2 142 5 178] 
#[ 6 37 6 110] 
#[ 6 110 14 233] 
#[ 2 33 6 110] 
#[ 6 110 14 237] 
#[ 6 110 14 241] 
#[ 6 110 14 245] 
#[ 2 178 6 110] 
#[ 6 110 14 249] 
#[ 6 110 14 253] 
#[ 6 110 15 5] 
#[ 6 110 15 9] 
#[ 6 110 15 13] 
#[ 6 202 6 210] 
#[ 0 26 0 30 0 34 6 202 6 206 6 210] 
#[ 7 10 7 14] 
#[ 7 18 7 22] 
#[ 7 26 7 30] 
#[ 7 42 7 46] 
#[ 4 138 4 150 4 154 4 158 7 154 11 185] 
#[ 0 26 0 30 0 34 1 193 4 138 4 142 4 146 4 150 4 154 4 158 4 162 7 154] 
#[ 0 26 0 30 0 34 4 138 4 142 4 146 4 150 4 154 4 158 7 154 11 201] 
#[ 4 138 4 146 4 154 4 158 4 162 7 154 11 205] 
#[ 6 37 7 166] 
#[ 2 33 7 166] 
#[ 2 178 7 166] 
#[ 3 146 7 198] 
#[ 7 198 7 209] 
#[ 4 66 7 206] 
#[ 1 34 2 170] 
#[ 6 37 7 226] 
#[ 2 33 7 226] 
#[ 2 178 7 226] 
#[ 6 37 7 230] 
#[ 2 33 7 230] 
#[ 2 178 7 230] 
#[ 6 37 7 234] 
#[ 2 33 7 234] 
#[ 2 178 7 234] 
#[ 6 37 7 238] 
#[ 2 33 7 238] 
#[ 2 178 7 238] 
#[ 6 37 7 242] 
#[ 2 33 7 242] 
#[ 2 178 7 242] 
#[ 6 37 7 246] 
#[ 2 33 7 246] 
#[ 2 178 7 246] 
#[ 6 37 7 250] 
#[ 2 33 7 250] 
#[ 2 178 7 250] 
#[ 6 37 7 254] 
#[ 2 33 7 254] 
#[ 2 178 7 254] 
#[ 6 37 8 2] 
#[ 2 33 8 2] 
#[ 2 178 8 2] 
#[ 6 37 8 6] 
#[ 2 33 8 6] 
#[ 2 178 8 6] 
#[ 6 37 8 10] 
#[ 2 33 8 10] 
#[ 2 178 8 10] 
#[ 6 37 8 14] 
#[ 2 33 8 14] 
#[ 2 178 8 14] 
#[ 6 37 8 18] 
#[ 2 33 8 18] 
#[ 2 178 8 18] 
#[ 6 37 8 22] 
#[ 2 33 8 22] 
#[ 2 178 8 22] 
#[ 6 37 8 26] 
#[ 2 33 8 26] 
#[ 2 178 8 26] 
#[ 6 37 8 30] 
#[ 2 33 8 30] 
#[ 2 178 8 30] 
#[ 6 37 8 34] 
#[ 2 33 8 34] 
#[ 2 178 8 34] 
#[ 6 37 8 38] 
#[ 2 33 8 38] 
#[ 2 178 8 38] 
#[ 6 37 8 42] 
#[ 2 33 8 42] 
#[ 2 178 8 42] 
#[ 6 37 8 46] 
#[ 2 33 8 46] 
#[ 2 178 8 46] 
#[ 6 37 8 50] 
#[ 2 33 8 50] 
#[ 2 178 8 50] 
#[ 6 37 8 54] 
#[ 2 33 8 54] 
#[ 2 178 8 54] 
#[ 6 37 8 58] 
#[ 2 33 8 58] 
#[ 2 178 8 58] 
#[ 6 37 8 62] 
#[ 2 33 8 62] 
#[ 2 178 8 62] 
#[ 2 229 8 66] 
#[ 8 86 9 57] 
#[ 6 37 8 90] 
#[ 2 33 8 90] 
#[ 2 178 8 90] 
#[ 6 37 8 122] 
#[ 2 33 8 122] 
#[ 2 178 8 122] 
#[ 6 37 8 126] 
#[ 2 33 8 126] 
#[ 2 178 8 126] 
#[ 2 142 8 166] 
#[ 0 238 18 253] 
#[ 2 33 8 182] 
#[ 6 37 8 206] 
#[ 2 33 8 206] 
#[ 2 178 8 206] 
#[ 6 37 8 210] 
#[ 2 33 8 210] 
#[ 2 178 8 210] 
#[ 2 142 8 170] 
#[ 6 37 8 234] 
#[ 2 33 8 234] 
#[ 2 178 8 234] 
#[ 2 33 8 170] 
#[ 1 194 2 245] 
#[ 1 194 2 33] 
#[ 1 194 2 25] 
#[ 1 194 3 5] 
#[ 1 194 3 9] 
#[ 1 190 1 194] 
#[ 0 221 1 194] 
#[ 0 225 1 194] 
#[ 1 194 3 17] 
#[ 1 194 3 21] 
#[ 1 194 3 25] 
#[ 1 194 3 29] 
#[ 1 194 3 33] 
#[ 1 194 3 37] 
#[ 1 194 3 41] 
#[ 1 194 3 45] 
#[ 1 194 3 49] 
#[ 1 194 3 53] 
#[ 1 194 3 57] 
#[ 1 194 3 61] 
#[ 1 194 3 65] 
#[ 1 194 3 69] 
#[ 1 194 3 73] 
#[ 1 194 3 77] 
#[ 1 194 3 81] 
#[ 0 229 1 194] 
#[ 0 233 1 194] 
#[ 0 237 1 194] 
#[ 1 194 3 85] 
#[ 0 241 1 194] 
#[ 1 194 3 89] 
#[ 1 194 3 93] 
#[ 1 194 3 97] 
#[ 1 194 3 101] 
#[ 0 249 1 194] 
#[ 0 253 1 194] 
#[ 1 194 3 105] 
#[ 1 194 3 109] 
#[ 1 194 3 113] 
#[ 1 194 3 117] 
#[ 1 5 1 194] 
#[ 1 9 1 194] 
#[ 1 13 1 194] 
#[ 1 17 1 194] 
#[ 1 21 1 194] 
#[ 1 194 3 125] 
#[ 1 194 3 129] 
#[ 1 25 1 194] 
#[ 1 29 1 194] 
#[ 1 33 1 194] 
#[ 1 194 3 133] 
#[ 1 194 3 141] 
#[ 1 194 3 145] 
#[ 1 194 3 149] 
#[ 1 194 3 153] 
#[ 1 194 3 157] 
#[ 1 194 3 161] 
#[ 1 194 3 165] 
#[ 1 194 3 173] 
#[ 6 37 9 38] 
#[ 2 33 9 38] 
#[ 2 178 9 38] 
#[ 6 37 9 42] 
#[ 2 33 9 42] 
#[ 2 178 9 42] 
#[ 6 37 9 46] 
#[ 2 33 9 46] 
#[ 2 178 9 46] 
#[ 6 37 10 122] 
#[ 2 33 10 122] 
#[ 2 178 10 122] 
#[ 2 33 10 158] 
#[ 7 209 10 166] 
#[ 4 182 10 174] 
#[ 2 245 10 194] 
#[ 2 33 10 194] 
#[ 2 25 10 194] 
#[ 3 9 10 194] 
#[ 3 89 10 194] 
#[ 9 89 10 194] 
#[ 9 113 10 194] 
#[ 10 202 18 189] 
#[ 10 214 18 189] 
#[ 6 37 10 218] 
#[ 2 33 10 218] 
#[ 2 178 10 218] 
#[ 2 229 10 222] 
#[ 2 33 10 230] 
#[ 2 229 10 250] 
#[ 2 229 11 14] 
#[ 2 229 11 18] 
#[ 2 245 3 130] 
#[ 2 33 3 130] 
#[ 2 25 3 130] 
#[ 3 5 3 130] 
#[ 3 9 3 130] 
#[ 1 190 3 130] 
#[ 0 221 3 130] 
#[ 0 225 3 130] 
#[ 3 17 3 130] 
#[ 3 21 3 130] 
#[ 3 25 3 130] 
#[ 3 29 3 130] 
#[ 3 33 3 130] 
#[ 3 37 3 130] 
#[ 3 41 3 130] 
#[ 3 45 3 130] 
#[ 3 49 3 130] 
#[ 3 53 3 130] 
#[ 3 57 3 130] 
#[ 3 61 3 130] 
#[ 3 65 3 130] 
#[ 3 69 3 130] 
#[ 3 73 3 130] 
#[ 3 77 3 130] 
#[ 3 81 3 130] 
#[ 0 229 3 130] 
#[ 0 233 3 130] 
#[ 0 237 3 130] 
#[ 3 85 3 130] 
#[ 0 241 3 130] 
#[ 3 89 3 130] 
#[ 3 93 3 130] 
#[ 3 97 3 130] 
#[ 3 101 3 130] 
#[ 0 249 3 130] 
#[ 0 253 3 130] 
#[ 3 105 3 130] 
#[ 3 109 3 130] 
#[ 3 113 3 130] 
#[ 3 117 3 130] 
#[ 1 5 3 130] 
#[ 1 9 3 130] 
#[ 1 13 3 130] 
#[ 1 17 3 130] 
#[ 1 21 3 130] 
#[ 3 125 3 130] 
#[ 3 129 3 130] 
#[ 1 25 3 130] 
#[ 1 29 3 130] 
#[ 1 33 3 130] 
#[ 3 130 3 133] 
#[ 3 130 3 141] 
#[ 3 130 3 145] 
#[ 3 130 3 149] 
#[ 3 130 3 153] 
#[ 3 130 3 157] 
#[ 3 130 3 161] 
#[ 3 130 3 165] 
#[ 3 130 3 173] 
#[ 6 37 11 26] 
#[ 2 33 11 26] 
#[ 2 178 11 26] 
#[ 6 37 11 30] 
#[ 2 33 11 30] 
#[ 2 178 11 30] 
#[ 2 229 11 38] 
#[ 6 37 11 46] 
#[ 2 33 11 46] 
#[ 2 178 11 46] 
#[ 11 46 24 61] 
#[ 11 46 24 65] 
#[ 6 37 11 62] 
#[ 2 33 11 62] 
#[ 2 178 11 62] 
#[ 6 37 11 66] 
#[ 2 33 11 66] 
#[ 2 178 11 66] 
#[ 6 37 11 70] 
#[ 2 33 11 70] 
#[ 2 178 11 70] 
#[ 6 37 11 74] 
#[ 2 33 11 74] 
#[ 2 178 11 74] 
#[ 6 37 11 78] 
#[ 2 33 11 78] 
#[ 2 178 11 78] 
#[ 6 37 12 74] 
#[ 2 33 12 74] 
#[ 2 178 12 74] 
#[ 12 154 18 189] 
#[ 6 37 12 166] 
#[ 2 33 12 166] 
#[ 2 178 12 166] 
#[ 6 37 12 170] 
#[ 2 33 12 170] 
#[ 2 178 12 170] 
#[ 2 245 5 134 10 194] 
#[ 2 33 5 134 10 194] 
#[ 2 253 5 134 10 194] 
#[ 3 1 5 134 10 194] 
#[ 2 25 5 134 10 194] 
#[ 5 134 10 194] 
#[ 5 134 9 33] 
#[ 3 5 5 134] 
#[ 3 9 5 134 10 194] 
#[ 1 190 5 134] 
#[ 0 221 5 134] 
#[ 0 225 5 134] 
#[ 3 17 5 134] 
#[ 3 21 5 134] 
#[ 3 25 5 134] 
#[ 3 29 5 134] 
#[ 3 33 5 134] 
#[ 3 37 5 134] 
#[ 3 41 5 134] 
#[ 3 45 5 134] 
#[ 3 49 5 134] 
#[ 3 53 5 134] 
#[ 3 57 5 134] 
#[ 3 61 5 134] 
#[ 3 65 5 134] 
#[ 3 69 5 134] 
#[ 3 73 5 134] 
#[ 3 77 5 134] 
#[ 3 81 5 134] 
#[ 5 134 9 37] 
#[ 0 229 5 134] 
#[ 5 134 9 41] 
#[ 5 134 9 45] 
#[ 0 233 5 134] 
#[ 0 237 5 134] 
#[ 5 134 9 49] 
#[ 3 85 5 134] 
#[ 5 134 9 53] 
#[ 0 241 5 134] 
#[ 5 134 9 57] 
#[ 5 134 9 61] 
#[ 5 134 9 65] 
#[ 5 134 9 69] 
#[ 5 134 9 73] 
#[ 3 89 5 134 10 194] 
#[ 3 93 5 134] 
#[ 3 97 5 134] 
#[ 5 134 9 77] 
#[ 5 134 9 81] 
#[ 0 249 5 134] 
#[ 0 253 5 134] 
#[ 3 105 5 134] 
#[ 5 134 9 85] 
#[ 3 109 5 134] 
#[ 3 113 5 134] 
#[ 3 117 5 134] 
#[ 1 5 5 134] 
#[ 5 134 9 89 10 194] 
#[ 5 134 9 93] 
#[ 5 134 9 97] 
#[ 5 134 9 101] 
#[ 5 134 9 105] 
#[ 5 134 9 109] 
#[ 1 9 5 134] 
#[ 5 134 9 113 10 194] 
#[ 1 13 5 134] 
#[ 1 17 5 134] 
#[ 5 134 9 117] 
#[ 5 134 9 121] 
#[ 1 21 5 134] 
#[ 5 134 9 125] 
#[ 5 134 9 129] 
#[ 5 134 9 133] 
#[ 3 125 5 134] 
#[ 3 129 5 134] 
#[ 1 25 5 134] 
#[ 1 29 5 134] 
#[ 1 33 5 134] 
#[ 5 134 9 137] 
#[ 5 134 9 141] 
#[ 5 134 9 145] 
#[ 5 134 9 149] 
#[ 3 133 5 134] 
#[ 3 141 5 134] 
#[ 3 145 5 134] 
#[ 5 134 9 157] 
#[ 3 149 5 134] 
#[ 3 153 5 134] 
#[ 3 157 5 134] 
#[ 3 161 5 134] 
#[ 3 165 5 134] 
#[ 5 134 9 161] 
#[ 12 190 27 137] 
#[ 6 37 12 210] 
#[ 2 33 12 210] 
#[ 2 178 12 210] 
#[ 6 37 12 226] 
#[ 2 33 12 226] 
#[ 2 178 12 226] 
#[ 6 37 12 242] 
#[ 2 33 12 242] 
#[ 2 178 12 242] 
#[ 6 37 12 250] 
#[ 2 33 12 250] 
#[ 2 178 12 250] 
#[ 2 229 13 26] 
#[ 6 37 13 30] 
#[ 2 33 13 30] 
#[ 2 178 13 30] 
#[ 6 37 13 34] 
#[ 2 33 13 34] 
#[ 2 178 13 34] 
#[ 6 37 14 102] 
#[ 2 33 14 102] 
#[ 2 178 14 102] 
#[ 6 37 14 142] 
#[ 2 33 14 142] 
#[ 2 178 14 142] 
#[ 6 37 15 250] 
#[ 2 33 15 250] 
#[ 2 178 15 250] 
#[ 2 245 5 134] 
#[ 2 33 5 134] 
#[ 2 25 5 134] 
#[ 3 9 5 134] 
#[ 3 89 5 134] 
#[ 5 134 9 89] 
#[ 5 134 9 113] 
#[ 6 37 16 54] 
#[ 2 33 16 54] 
#[ 2 178 16 54] 
#[ 6 37 16 74] 
#[ 2 33 16 74] 
#[ 2 178 16 74] 
#[ 6 37 16 90] 
#[ 2 33 16 90] 
#[ 2 178 16 90] 
#[ 6 37 17 170] 
#[ 2 33 17 170] 
#[ 2 178 17 170] 
#[ 2 245 18 90] 
#[ 2 33 18 90] 
#[ 2 25 18 90] 
#[ 3 9 18 90] 
#[ 3 89 18 90] 
#[ 6 37 18 126] 
#[ 2 33 18 126] 
#[ 2 178 18 126] 
#[ 2 245 19 78] 
#[ 2 33 19 78] 
#[ 2 25 19 78] 
#[ 3 9 19 78] 
#[ 3 89 19 78] 
#[ 6 37 19 86] 
#[ 2 33 19 86] 
#[ 2 178 19 86] 
#[ 2 245 19 90] 
#[ 2 33 19 90] 
#[ 2 25 19 90] 
#[ 3 9 19 90] 
#[ 3 89 19 90] 
#[ 6 37 19 110] 
#[ 2 33 19 110] 
#[ 2 178 19 110] 
#[ 2 229 20 14] 
#[ 6 37 20 38] 
#[ 2 33 20 38] 
#[ 2 178 20 38] 
#[ 2 245 20 182] 
#[ 2 33 20 182] 
#[ 2 25 20 182] 
#[ 3 9 20 182] 
#[ 3 89 20 182] 
#[ 6 37 20 186] 
#[ 2 33 20 186] 
#[ 2 178 20 186] 
#[ 6 37 21 78] 
#[ 2 33 21 78] 
#[ 2 178 21 78]
	).
]

{ #category : #'generated-accessing' }
VBNetParser class >> cacheId [
	^'2020-06-21T19:51:15.024466-05:00'
]

{ #category : #generated }
VBNetParser class >> definitionComment [
"/* Much of this grammar was copied and modified for SmaCC from https://github.com/dotnet/vblang/tree/master/spec
(commit 19ec79a287fb79180b05a0ad20e8291e75fc63df) which has the following license:
---------------------------------
The MIT License (MIT)

Copyright (c) .NET Foundation and Contributors

All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
---------------------------------
*/

%glr;
%ignorecase;
%id <LineTerminator> <Identifier> <IdentifierOrKeyword>;

%ignore_variable_warning <LineTerminator>;

%left ""Xor"";
%left ""Or"" ""OrElse"";
%left ""And"" ""AndAlso"";
%right ""Not"";
%nonassoc ""=""  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"";
%left ""+"" ""-"";
%left ""Mod"";
%left ""\"";
%left ""*"" ""/"";
# unary negation
%right ""^"";
%right ""Await"";

%prefix VBNet;
%suffix Node;
%root Program;

%hierarchy Expression (
    AddressOfExpression
    AnonymousCreationExpression
    ArrayCreationExpression
    AwaitExpression
    BinaryExpression
    CastExpression
    CollectionInitializer
    ConditionalExpression
    DictionaryAccessExpression
    GetTypeExpression
    InvocationExpression
    InstanceExpression
    LambdaExpression
    Literal
    MemberAccessExpression
    ObjectCreationExpression
    PrimitiveCastExpression
    QueryExpression
    SimpleNameExpression
    TypeOfIsExpression
    UnaryExpression
);
%hierarchy LambdaExpression (
    FunctionLambdaExpression
    SubLambdaExpression
);
%hierarchy Literal (
    BooleanLiteral
    CharacterLiteral
    DateLiteral
    FloatingPointLiteral
    IntegerLiteral
    NothingLiteral
    StringLiteral
);
%hierarchy Statement (
    AddHandlerStatement
    AssignmentStatement
    ContinueStatement
    DoLoopStatement
    EndStatement
    EraseStatement
    ErrorStatement
    ExitStatement
    ForEachStatement
    ForStatement
    GoToStatement
    IfStatement
    InvocationStatement
    LabelDeclarationStatement
    LocalDeclarationStatement
    MidAssignmentStatement
    OnErrorStatement
    RaiseEventStatement
    RedimStatement
    RemoveHandlerStatement
    ResumeStatement
    ReturnStatement
    SelectStatement
    StopStatement
    SyncLockStatement
    ThrowStatement
    TryStatement
    UsingStatement
    WhileStatement
    WithStatement
    YieldStatement
);
%hierarchy DoLoopStatement (
    DoBottomLoopStatement
    DoTopLoopStatement
);

File : <LineTerminator>* Start {{}};


# 2. Lexical grammar


<Character>:
    [^\r\n\x2028\x2029]
    ;

<LineTerminator>    ###
    : \r
    | \n
    | \r\n
    | \x2028
    | \x2029
    ;

<LineContinuation>
    : _ <whitespace>* (\r\n? | \n | \x2028 | \x2029) ###
    ;

Comma
    : "","" 'comma' <LineTerminator>?
    ;

Period
    : ""."" 'period' <LineTerminator>?
    ;

OpenParenthesis
    : ""("" 'leftParen' <LineTerminator>?
    ;

CloseParenthesis
    : <LineTerminator>? "")"" 'rightParen'
    ;

OpenCurlyBrace
    : ""{"" 'leftBrace' <LineTerminator>?
    ;

CloseCurlyBrace
    : <LineTerminator>? ""}"" 'rightBrace'
    ;

Equals
    : ""="" 'equals' <LineTerminator>?
    ;

ColonEquals
    : "":="" 'colonEquals' <LineTerminator>?
    ;

<whitespace>
    : [\t\ ]+
    ;

<comment>
    : <CommentMarker> <Character>*
    ;

<CommentMarker>
    : <SingleQuoteCharacter>
    | REM
    ;

<SingleQuoteCharacter>
    : \'
    | \x2018
    | \x2019
    ;

<NonEscapedIdentifier>
    : <IdentifierName> # <Any IdentifierName but not Keyword>
    ;

<EscapedIdentifier>
    : \[ <IdentifierName> \]
    ;

<IdentifierName>
    : <IdentifierStart> <IdentifierCharacter>*
    ;

<IdentifierStart>
    : <AlphaCharacter>
    | <UnderscoreCharacter> <IdentifierCharacter>
    ;

<IdentifierCharacter>
    : <UnderscoreCharacter>
    | <AlphaCharacter>
    | <NumericCharacter>
    | <CombiningCharacter>
#    | <FormattingCharacter>
    ;

<AlphaCharacter>
    : <isLetter>
    ;

<NumericCharacter>
    : <isDigit>
    ;

<CombiningCharacter>
    : [\x0300-\x036F]
    ;

#<FormattingCharacter>
#    : \<Unicode\ formatting\ character\ class\ Cf\>
#    ;

<UnderscoreCharacter>
    : _ # <Unicode connection character class Pc>
    ;

<TypeCharacter>
    : <IntegerTypeCharacter>
    | <LongTypeCharacter>
    | <DecimalTypeCharacter>
    | <SingleTypeCharacter>
    | <DoubleTypeCharacter>
    | <StringTypeCharacter>
    ;

<IntegerTypeCharacter>
    : \%
    ;

<LongTypeCharacter>
    : \&
    ;

<DecimalTypeCharacter>
    : \@
    ;

<SingleTypeCharacter>
    : \!
    ;

<DoubleTypeCharacter>
    : \#
    ;

<StringTypeCharacter>
    : \$
    ;

Literal
    : <BooleanLiteral> 'value' {{BooleanLiteral}}
    | <IntegerLiteral> 'value' {{IntegerLiteral}}
    | <FloatingPointLiteral> 'value' {{FloatingPointLiteral}}
    | <StringLiteral> 'value' {{StringLiteral}}
    | <CharacterLiteral> 'value' {{CharacterLiteral}}
    | <DateLiteral> 'value' {{DateLiteral}}
    | <Nothing> 'value' {{NothingLiteral}}
    ;

<BooleanLiteral>
    : True | False
    ;

<IntegerLiteral>
    : <IntegralLiteralValue> <IntegralTypeCharacter>?
    ;

<IntegralLiteralValue>
    : <IntLiteral>
    | <HexLiteral>
    | <OctalLiteral>
    ;

<IntegralTypeCharacter>
    : <ShortCharacter>
    | <UnsignedShortCharacter>
    | <IntegerCharacter>
    | <UnsignedIntegerCharacter>
    | <LongCharacter>
    | <UnsignedLongCharacter>
    | <IntegerTypeCharacter>
    | <LongTypeCharacter>
    ;

<ShortCharacter>
    : S
    ;

<UnsignedShortCharacter>
    : US
    ;

<IntegerCharacter>
    : I
    ;

<UnsignedIntegerCharacter>
    : UI
    ;

<LongCharacter>
    : L
    ;

<UnsignedLongCharacter>
    : UL
    ;

<IntLiteral>
    : <Digit>+
    ;

<HexLiteral>
    : \& H <HexDigit>+
    ;

<OctalLiteral>
    : \& O <OctalDigit>+
    ;

<Digit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    ;

<HexDigit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    | A | B | C | D | E | F
    ;

<OctalDigit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
    ;

<FloatingPointLiteral>
    : <FloatingPointLiteralValue> <FloatingPointTypeCharacter>?
    | <IntLiteral> <FloatingPointTypeCharacter>
    ;

<FloatingPointTypeCharacter>
    : <SingleCharacter>
    | <DoubleCharacter>
    | <DecimalCharacter>
    | <SingleTypeCharacter>
    | <DoubleTypeCharacter>
    | <DecimalTypeCharacter>
    ;

<SingleCharacter>
    : F
    ;

<DoubleCharacter>
    : R
    ;

<DecimalCharacter>
    : D
    ;

<FloatingPointLiteralValue>
    : <IntLiteral> \. <IntLiteral> <Exponent>?
    | \. <IntLiteral> <Exponent>?
    | <IntLiteral> <Exponent>
    ;

<Exponent>
    : E <Sign>? <IntLiteral>
    ;

<Sign>
    : \+
    | \-
    ;

<StringLiteral>
    : <DoubleQuoteCharacter> <StringCharacter>* <DoubleQuoteCharacter>
    ;

<DoubleQuoteCharacter>
    : \""
    | \x201c
    | \x201D
    ;

<StringCharacter>
    : [^\""\x201c\x201D]
    | <DoubleQuoteCharacter> <DoubleQuoteCharacter>
    ;

<CharacterLiteral>
    : <DoubleQuoteCharacter> <StringCharacter> <DoubleQuoteCharacter> C
    ;

<DateLiteral>
    : \# <whitespace>* <DateOrTime> <whitespace>* \#
    ;

<DateOrTime>
    : <DateValue> <whitespace>+ <TimeValue>
    | <DateValue>
    | <TimeValue>
    ;

<DateValue>
    : <MonthValue> \/ <DayValue> \/ <YearValue>
    | <MonthValue> \- <DayValue> \- <YearValue>
    ;

<TimeValue>
    : <HourValue> \: <MinuteValue> ( \: <SecondValue> )? <whitespace>* <AMPM>?
    | <HourValue> <whitespace>* <AMPM>
    ;

<MonthValue>
    : <IntLiteral>
    ;

<DayValue>
    : <IntLiteral>
    ;

<YearValue>
    : <IntLiteral>
    ;

<HourValue>
    : <IntLiteral>
    ;

<MinuteValue>
    : <IntLiteral>
    ;

<SecondValue>
    : <IntLiteral>
    ;

<AMPM>
    : AM | PM
    ;

<ElseIf>
    : ElseIf
    | Else <whitespace> If
    ;

<Nothing>
    : Nothing
    ;

<Separator>
    : \( | \) | \{ | \} | \! | \# | \, | \. | \: | \?
    ;

<Operator>
    : \& | \* | \+ | \- | \/ | \\ | \^ | \< | \= | \>
    ;

# Moved from above
<IdentifierOrKeyword>
    : <Identifier>
#    | <Keyword>    ### not needed
    ;

<Identifier>
    : <NonEscapedIdentifier> <TypeCharacter>?
#    | <Keyword> <TypeCharacter>    ###
    | <EscapedIdentifier>
    ;

/*
<Keyword>
    : ""AddHandler""      | ""AddressOf""      | ""Alias""       | ""And""
    | ""AndAlso""         | ""As""             | ""Boolean""     | ""ByRef""
	| ""Byte""            | ""ByVal""          | ""Call""        | ""Case""        
	| ""Catch""           | ""CBool""          | ""CByte""       | ""CChar""       
	| ""CDate""           | ""CDbl""           | ""CDec""        | ""Char""        
	| ""CInt""            | ""Class""          | ""CLng""        | ""CObj""        
	| ""Const""           | ""Continue""       | ""CSByte""      | ""CShort""      
	| ""CSng""            | ""CStr""           | ""CType""       | ""CUInt""       
	| ""CULng""           | ""CUShort""        | ""Date""        | ""Decimal""     
	| ""Declare""         | ""Default""        | ""Delegate""    | ""Dim""         
	| ""DirectCast""      | ""Do""             | ""Double""      | ""Each""        
	| ""Else""            | <ElseIf>         | ""End""         | ""EndIf""       
	| ""Enum""            | ""Erase""          | ""Error""       | ""Event""       
	| ""Exit""            | ""False""          | ""Finally""     | ""For""         
	| ""Friend""          | ""Function""       | ""Get""         | ""GetType""     
	| ""GetXmlNamespace"" | ""Global""         | ""GoSub""       | ""GoTo""        
	| ""Handles""         | ""If""             | ""Implements""  | ""Imports""     
	| ""In""              | ""Inherits""       | ""Integer""     | ""Interface""   
	| ""Is""              | ""IsNot""          | ""Let""         | ""Lib""         
	| ""Like""            | ""Long""           | ""Loop""        | ""Me""          
	| ""Mod""             | ""Module""         | ""MustInherit"" | ""MustOverride""
	| ""MyBase""          | ""MyClass""        | ""Namespace""   | ""Narrowing""   
	| ""New""             | ""Next""           | ""Not""         | <Nothing>     
	| ""NotInheritable""  | ""NotOverridable"" | ""Object""      | ""Of""          
	| ""On""              | ""Operator""       | ""Option""      | ""Optional""    
	| ""Or""              | ""OrElse""         | ""Overloads""   | ""Overridable"" 
	| ""Overrides""       | ""ParamArray""     | ""Partial""     | ""Private""     
	| ""Property""        | ""Protected""      | ""Public""      | ""RaiseEvent""  
	| ""ReadOnly""        | ""ReDim""          | ""REM""         | ""RemoveHandler""
	| ""Resume""          | ""Return""         | ""SByte""       | ""Select""      
	| ""Set""             | ""Shadows""        | ""Shared""      | ""Short""       
	| ""Single""          | ""Static""         | ""Step""        | ""Stop""        
	| ""String""          | ""Structure""      | ""Sub""         | ""SyncLock""    
	| ""Then""            | ""Throw""          | ""To""          | ""True""        
	| ""Try""             | ""TryCast""        | ""TypeOf""      | ""UInteger""    
	| ""ULong""           | ""UShort""         | ""Using""       | ""Variant""     
	| ""Wend""            | ""When""           | ""While""       | ""Widening""    
	| ""With""            | ""WithEvents""     | ""WriteOnly""   | ""Xor""         
    ;
*/

# 3. Preprocessing Directives

# hacked to ignore in scanner

<preprocessorDirective>
    : \# [\t ]* (Const | If | Else | End | ExternalSource | Region | ExternalChecksum) [^\r\n\x2028\x2029]* (\r\n? | \n | \x2028 | \x2029)?
    ;

# 4. General concepts

AccessModifier
    : ""Public"" 
    | ""Protected""
    | ""Friend""
    | ""Private""
#    | ""Protected"" ""Friend""	### not needed since we are already in a list
    ;

TypeParameterList
    : OpenParenthesis ""Of"" 'ofToken' TypeParameter 'type' ( Comma TypeParameter 'typeParameter' )* CloseParenthesis {{}}
    ;

TypeParameter
    : VarianceModifier 'modifier'? <Identifier> 'name' TypeParameterConstraints? {{}}
    ;

VarianceModifier
    : ""In"" | ""Out""
    ;

TypeParameterConstraints
    : ""As"" 'asToken' Constraint 'constraint'
    | ""As"" 'asToken' OpenCurlyBrace ConstraintList CloseCurlyBrace
    ;

ConstraintList
    : Constraint 'constraint' ( Comma Constraint 'constraint' )*
    ;

Constraint
    : TypeName 'type' {{TypeConstraint}}
    | ""New"" 'newToken' {{NewConstraint}}
    | ""Structure"" 'structureToken' {{StructureConstraint}}
    | ""Class"" 'classToken' {{ClassConstraint}}
    ;



# 5. Attributes

Attributes
    : AttributeBlock 'attributeBlock'+
    ;

AttributeBlock
    : ""<"" 'ltToken' AttributeList <LineTerminator>? "">"" 'gt' (<LineTerminator> | "":"" 'statementSeparator')? {{}} ###
    ;

AttributeList
    : Attribute 'attribute' ( Comma Attribute 'attribute' )*
    ;

Attribute
    : ( AttributeModifier 'modifier' "":"" 'colonToken' )? SimpleTypeName 'type'
    ( OpenParenthesis AttributeArguments? CloseParenthesis )? {{}}
    ;

AttributeModifier
    : ""Assembly"" | ""Module""
    ;

AttributeArguments
    : AttributePositionalArgumentList
    | AttributePositionalArgumentList Comma VariablePropertyInitializerList
    | VariablePropertyInitializerList
    ;

AttributePositionalArgumentList
    : AttributeArgumentExpression 'argument'? ( Comma AttributeArgumentExpression 'argument'? )*
    ;

VariablePropertyInitializerList
    : VariablePropertyInitializer 'argument' ( Comma VariablePropertyInitializer 'argument' )*
    ;

VariablePropertyInitializer
    : <IdentifierOrKeyword> 'name' ColonEquals AttributeArgumentExpression 'value' {{}}
    ;

AttributeArgumentExpression
    : ConstantExpression
#    | GetTypeExpression    ###
#    | ArrayExpression  ###
    ;



# 6. Source files and namespaces

Start
    : OptionStatement 'option'* ImportsStatement 'import'* /* AttributesStatement* */ (NamespaceMemberDeclaration+ | Attributes?)	###
    ;

#StatementTerminator
#    : <LineTerminator> 
#    | "":"" 'statementSeparator'
#    ;

#AttributesStatement
#    : Attributes (<LineTerminator> | "":"" 'statementSeparator')
#    ;

OptionStatement
    : OptionExplicitStatement
    | OptionStrictStatement
    | OptionCompareStatement
    | OptionInferStatement
    ;

OptionExplicitStatement
    : ""Option"" 'optionToken' ""Explicit"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

OnOff
    : ""On"" 'onToken' | ""Off""
    ;

OptionStrictStatement
    : ""Option"" 'optionToken' ""Strict"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

OptionCompareStatement
    : ""Option"" 'optionToken' ""Compare"" 'option' CompareOption 'value' (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

CompareOption
    : ""Binary"" | ""Text""
    ;

OptionInferStatement
    : ""Option"" 'optionToken' ""Infer"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

ImportsStatement
    : ""Imports"" 'importsToken' ImportsClauses (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ImportsClauses
    : ImportsClause 'import' ( Comma ImportsClause 'import' )*
    ;

ImportsClause
    : AliasImportsClause
    | MembersImportsClause
#    | XMLNamespaceImportsClause    ### not yet implemented
    ;

AliasImportsClause
    : <Identifier> 'name' Equals TypeName 'type' {{}}
    ;

MembersImportsClause
    : TypeName 'type' {{}}
    ;

#XMLNamespaceImportsClause
#    : ""<"" 'ltToken' XMLNamespaceAttributeName XMLWhitespace? Equals XMLWhitespace?
#      XMLNamespaceValue "">"" 'gtToken' {{}}
#    ;

#XMLNamespaceValue
#    : <DoubleQuoteCharacter> XMLAttributeDoubleQuoteValueCharacter* <DoubleQuoteCharacter>
#    | <SingleQuoteCharacter> XMLAttributeSingleQuoteValueCharacter* <SingleQuoteCharacter>
#    ;

NamespaceDeclaration
    : ""Namespace"" 'namespaceToken' NamespaceName (<LineTerminator> | "":"" 'statementSeparator')
      NamespaceMemberDeclaration*
      ""End"" 'endToken' ""Namespace"" 'namespaceToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

NamespaceName
    : RelativeNamespaceName
    | ""Global"" 'globalToken'
    | ""Global"" 'globalToken' Period RelativeNamespaceName    ###
    ;

RelativeNamespaceName
    : <Identifier> 'name' ( Period <IdentifierOrKeyword> 'name')*
    ;

NamespaceMemberDeclaration
    : AttributesNamespaceDeclaration
    | TypeDeclaration 'declaration'
    ;
 AttributesNamespaceDeclaration
	: Attributes? NamespaceDeclaration 'declaration'		### moved Attributes here from Start
	;

TypeDeclaration
    : ModuleDeclaration
    | NonModuleDeclaration
    ;

NonModuleDeclaration
    : EnumDeclaration
    | StructureDeclaration
    | InterfaceDeclaration
    | ClassDeclaration
    | DelegateDeclaration
    ;




# 7. Types


TypeName
    : ArrayTypeName
    | NonArrayTypeName
    ;

NonArrayTypeName
    : SimpleTypeName
    | NullableTypeName
    ;

SimpleTypeName
    : QualifiedTypeName
    | BuiltInTypeName
    ;

QualifiedTypeName
    : <Identifier> 'name' TypeArguments? (Period <IdentifierOrKeyword> 'name' TypeArguments?)* {{}}
    | ""Global"" 'globalToken' Period <IdentifierOrKeyword> 'name' TypeArguments?
      (Period <IdentifierOrKeyword> 'name' TypeArguments?)* {{}}
    ;

TypeArguments
    : OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis
    ;

TypeArgumentList
    : TypeName 'type' ( Comma TypeName 'type')*
    ;

BuiltInTypeName
    : ""Object"" 'name' {{}}
    | PrimitiveTypeName 'name' {{}}
    ;

TypeModifier
    : AccessModifier
    | ""Shadows""
    ;

IdentifierModifiers
    : NullableNameModifier? ArrayNameModifier?
    ;

NullableTypeName
    : NonArrayTypeName 'type' ""?"" 'nullableToken' {{}}
    ;

NullableNameModifier
    : ""?"" 'nullableToken'
    ;

TypeImplementsClause
    : ""Implements"" 'implementsToken' TypeImplements (<LineTerminator> | "":"" 'statementSeparator')
    ;

TypeImplements
    : NonArrayTypeName 'implements' ( Comma NonArrayTypeName 'implements')*
    ;

PrimitiveTypeName
    : NumericTypeName
    | ""Boolean""
    | ""Date""
    | ""Char""
    | ""String""
    ;

NumericTypeName
    : IntegralTypeName
    | FloatingPointTypeName
    | ""Decimal""
    ;

IntegralTypeName
    : ""Byte"" | ""SByte"" | ""UShort"" | ""Short"" | ""UInteger""
    | ""Integer"" | ""ULong"" | ""Long""
    ;

FloatingPointTypeName
    : ""Single"" | ""Double""
    ;

EnumDeclaration
    : Attributes? TypeModifier 'modifier'* ""Enum"" 'enumToken' <Identifier> 'name'
      ( ""As"" 'asToken' NonArrayTypeName 'type' )? (<LineTerminator> | "":"" 'statementSeparator')
      EnumMemberDeclaration 'declaration'+
      ""End"" 'endToken' ""Enum"" 'enumToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

EnumMemberDeclaration
    : Attributes? <Identifier> 'name' ( Equals ConstantExpression 'value')? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ClassDeclaration
    : Attributes? ClassModifier 'modifier'* ""Class"" 'classToken' <Identifier> 'name' TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      ClassBase?
      TypeImplementsClause*
      ClassMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Class"" 'classToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ClassModifier
    : TypeModifier
    | ""MustInherit""
    | ""NotInheritable""
    | ""Partial""
    ;

ClassBase
    : ""Inherits"" 'inheritsToken' NonArrayTypeName 'inherits' (<LineTerminator> | "":"" 'statementSeparator')
    ;

ClassMemberDeclaration
    : NonModuleDeclaration
    | EventMemberDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    | OperatorDeclaration
    ;

StructureDeclaration
    : Attributes? StructureModifier 'modifier'* ""Structure"" 'structureToken' <Identifier> 'name'
      TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      TypeImplementsClause*
      StructMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Structure"" 'structureToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

StructureModifier
    : TypeModifier
    | ""Partial""
    ;

StructMemberDeclaration
    : NonModuleDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | EventMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    | OperatorDeclaration
    ;

ModuleDeclaration
    : Attributes? TypeModifier 'modifier'* ""Module"" 'moduleToken' <Identifier> 'name' (<LineTerminator> | "":"" 'statementSeparator')
      ModuleMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Module"" 'moduleToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ModuleMemberDeclaration
    : NonModuleDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | EventMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    ;

InterfaceDeclaration
    : Attributes? TypeModifier 'modifier'* ""Interface"" 'interfaceToken' <Identifier> 'name'
      TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      InterfaceBase*
      InterfaceMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Interface"" 'interfaceToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

InterfaceBase
    : ""Inherits"" 'inheritsToken' InterfaceBases (<LineTerminator> | "":"" 'statementSeparator')
    ;

InterfaceBases
    : NonArrayTypeName 'inherits' ( Comma NonArrayTypeName 'inherits')*
    ;

InterfaceMemberDeclaration
    : NonModuleDeclaration
    | InterfaceEventMemberDeclaration
    | InterfaceMethodMemberDeclaration
    | InterfacePropertyMemberDeclaration
    ;

ArrayTypeName
    : NonArrayTypeName 'type' ArrayTypeModifiers {{}}
    ;

ArrayTypeModifiers
    : ArrayTypeModifier 'arrayTypeModifier'+
    ;

ArrayTypeModifier
    : OpenParenthesis RankList? CloseParenthesis {{}}
    ;

RankList
    : Comma+    ### convert to one or more since use is optional
    ;

ArrayNameModifier
    : ArrayTypeModifiers
    | ArraySizeInitializationModifier
    ;

DelegateDeclaration
    : Attributes? TypeModifier 'modifier'* ""Delegate"" 'delegateToken' MethodSignature  'signature' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MethodSignature
    : SubSignature
    | FunctionSignature
    ;



# 9. Type members


ImplementsClause
    : ""Implements"" 'implementsToken' ImplementsList   ###
    ;

ImplementsList
    : InterfaceMemberSpecifier 'implement' ( Comma InterfaceMemberSpecifier 'implement')*
    ;

InterfaceMemberSpecifier
    : NonArrayTypeName 'type' Period <IdentifierOrKeyword> 'name' {{}}
    ;

MethodMemberDeclaration
    : MethodDeclaration
    | ExternalMethodDeclaration
    ;

InterfaceMethodMemberDeclaration
    : InterfaceMethodDeclaration
    ;

MethodDeclaration
    : SubDeclaration
    | MustOverrideSubDeclaration
    | FunctionDeclaration
    | MustOverrideFunctionDeclaration
    ;

InterfaceMethodDeclaration
    : InterfaceSubDeclaration
    | InterfaceFunctionDeclaration
    ;

SubSignature
    : ""Sub"" 'subToken' <Identifier> 'name' TypeParameterList 'typeParameters'?
      ( OpenParenthesis ParameterList? CloseParenthesis )? {{}}
    ;

FunctionSignature
    : ""Function"" 'functionToken' <Identifier> 'name' TypeParameterList 'typeParameters'?
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')? {{}}
    ;

SubDeclaration
    : Attributes? ProcedureModifier 'modifier'* SubSignature 'signature'
      HandlesOrImplements? <LineTerminator>
      Block
      ""End"" 'endToken' ""Sub"" 'subToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MustOverrideSubDeclaration
    : Attributes? ProcedureModifier 'modifier'* MustOverrideProcedureModifier 'modifier' ProcedureModifier 'modifier'* SubSignature 'signature' ###
      HandlesOrImplements? (<LineTerminator> | "":"" 'statementSeparator') {{SubDeclaration}}
    ;

InterfaceSubDeclaration
    : Attributes? InterfaceProcedureModifier 'modifier'* SubSignature 'signature' (<LineTerminator> | "":"" 'statementSeparator') {{SubDeclaration}}
    ;

FunctionDeclaration
    : Attributes? ProcedureModifier 'modifier'* FunctionSignature 'signature'
      HandlesOrImplements? <LineTerminator>
      Block
      ""End"" 'endToken' ""Function"" 'functionToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MustOverrideFunctionDeclaration
    : Attributes? ProcedureModifier 'modifier'* MustOverrideProcedureModifier 'modifier' ProcedureModifier 'modifier'* FunctionSignature 'signature' ###
      HandlesOrImplements? (<LineTerminator> | "":"" 'statementSeparator') {{FunctionDeclaration}}
    ;

InterfaceFunctionDeclaration
    : Attributes? InterfaceProcedureModifier 'modifier'* FunctionSignature 'signature' (<LineTerminator> | "":"" 'statementSeparator') {{FunctionDeclaration}}
    ;

ProcedureModifier
    : AccessModifier | ""Shadows"" | ""Shared"" | ""Overridable"" | ""NotOverridable"" | ""Overrides""
    | ""Overloads"" | ""Partial"" | ""Iterator"" | ""Async""
    ;

MustOverrideProcedureModifier   ###
#    : ProcedureModifier
    : ""MustOverride""
    ;

InterfaceProcedureModifier
    : ""Shadows"" | ""Overloads""
    ;

HandlesOrImplements
    : HandlesClause
    | ImplementsClause
    ;

ExternalMethodDeclaration
    : ExternalSubDeclaration
    | ExternalFunctionDeclaration
    ;

ExternalSubDeclaration
    : Attributes? ExternalMethodModifier 'modifier'* ""Declare"" 'declareToken' CharsetModifier 'charset'? ""Sub"" 'subToken'
      <Identifier> 'name' LibraryClause AliasClause?
      ( OpenParenthesis ParameterList? CloseParenthesis )? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ExternalFunctionDeclaration
    : Attributes? ExternalMethodModifier 'modifier'* ""Declare"" 'declareToken' CharsetModifier 'charset'? ""Function"" 'functionToken'
      <Identifier> 'name' LibraryClause AliasClause?
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')?
      (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ExternalMethodModifier
    : AccessModifier
    | ""Shadows""
    | ""Overloads""
    ;

CharsetModifier
    : ""Ansi"" | ""Unicode"" | ""Auto""
    ;

LibraryClause
    : ""Lib"" 'libToken' <StringLiteral> 'library'
    ;

AliasClause
    : ""Alias"" 'aliasToken' <StringLiteral> 'alias'
    ;

ParameterList
    : Parameter 'parameter' ( Comma Parameter 'parameter')*
    ;

Parameter
    : Attributes? ParameterModifier 'modifier'* ParameterIdentifier 'identifier' ( ""As"" 'asToken' TypeName 'type' )?
      ( Equals ConstantExpression 'value')? {{}}
    ;

ParameterModifier
    : ""ByVal"" | ""ByRef"" | ""Optional"" | ""ParamArray""
    ;

ParameterIdentifier
    : <Identifier> 'name' IdentifierModifiers {{}}
    ;

HandlesClause
    : ""Handles"" 'handlesToken' EventHandlesList  ###
    ;

EventHandlesList
    : EventMemberSpecifier 'handle' ( Comma EventMemberSpecifier 'handle')*
    ;

EventMemberSpecifier
    : <Identifier> 'name' Period <IdentifierOrKeyword> 'name' {{}}
    | ""MyBase"" 'name' Period <IdentifierOrKeyword> 'name' {{}}
    | ""MyClass"" 'name' Period <IdentifierOrKeyword> 'name' {{}}
    | ""Me"" 'name' Period <IdentifierOrKeyword> 'name' {{}}
    ;

ConstructorMemberDeclaration
    : Attributes? ConstructorModifier 'modifier'* ""Sub"" 'subToken' ""New"" 'newToken'
      ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Sub"" 'subToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstructorModifier
    : AccessModifier
    | ""Shared""
    ;

EventMemberDeclaration
    : RegularEventMemberDeclaration
    | CustomEventMemberDeclaration
    ;

RegularEventMemberDeclaration
    : Attributes? EventModifiers 'modifier'* ""Event"" 'eventToken'
      <Identifier> 'name' ParametersOrType ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

InterfaceEventMemberDeclaration
    : Attributes? InterfaceEventModifiers 'modifier'* ""Event"" 'eventToken'
      <Identifier> 'name' ParametersOrType (<LineTerminator> | "":"" 'statementSeparator') {{RegularEventMemberDeclaration}}
    ;

ParametersOrType
    : ( OpenParenthesis ParameterList? CloseParenthesis )?
    | ""As"" 'asToken' NonArrayTypeName 'type'
    ;

EventModifiers
    : AccessModifier
    | ""Shadows""
    | ""Shared""
    ;

InterfaceEventModifiers
    : ""Shadows""
    ;

CustomEventMemberDeclaration
    : Attributes? EventModifiers 'modifier'* ""Custom"" 'customToken' ""Event"" 'eventToken'
      <Identifier> 'name' ""As"" 'asToken' TypeName 'type' ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator')
      EventAccessorDeclaration 'eventAccessorDeclaration'+
      ""End"" 'endToken' ""Event"" 'eventToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

EventAccessorDeclaration
    : AddHandlerDeclaration
    | RemoveHandlerDeclaration
    | RaiseEventDeclaration
    ;

AddHandlerDeclaration
    : Attributes? ""AddHandler"" 'addHandlerToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""AddHandler"" 'addHandlerToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

RemoveHandlerDeclaration
    : Attributes? ""RemoveHandler"" 'removeHandlerToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""RemoveHandler"" 'removeHandlerToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

RaiseEventDeclaration
    : Attributes? ""RaiseEvent"" 'raiseEventToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""RaiseEvent"" 'raiseEventToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstantMemberDeclaration
    : Attributes? ConstantModifier 'modifier'* ""Const"" 'constToken' ConstantDeclarators (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstantModifier
    : AccessModifier
    | ""Shadows""
    ;

ConstantDeclarators
    : ConstantDeclarator 'constant' ( Comma ConstantDeclarator 'constant')*
    ;

ConstantDeclarator
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? Equals ConstantExpression 'value' {{}}
    ;

VariableMemberDeclaration
    : Attributes? VariableModifier 'modifier'+ VariableDeclarators (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

VariableModifier
    : AccessModifier
    | ""Shadows""
    | ""Shared""
    | ""ReadOnly""
    | ""WithEvents""
    | ""Dim"" 'dimToken'
    ;

VariableDeclarators
    : VariableDeclarator 'variable' ( Comma VariableDeclarator 'variable')*
    ;

VariableDeclarator
    : VariableIdentifiers ""As"" 'asToken' ObjectCreationExpression 'value' {{}}
    | VariableIdentifiers ( ""As"" 'asToken' TypeName 'type' )? ( Equals Expression 'value' )? {{}}
    ;

VariableIdentifiers
    : VariableIdentifier 'variableIdentifier' ( Comma VariableIdentifier 'variableIdentifier' )*
    ;

VariableIdentifier
    : <Identifier> 'name' IdentifierModifiers {{}}
    ;

ArraySizeInitializationModifier
    : OpenParenthesis BoundList CloseParenthesis ArrayTypeModifiers?
    ;

BoundList
    : Bound 'bound' ( Comma Bound 'bound' )*
    ;

Bound
    : Expression
    | <IntegerLiteral> 'from' ""To"" 'toToken' Expression 'to' {{BoundExpression}}  ###
    ;

PropertyMemberDeclaration
    : RegularPropertyMemberDeclaration
    | MustOverridePropertyMemberDeclaration
    | AutoPropertyMemberDeclaration
    ;

PropertySignature
    : ""Property"" 'propertyToken'
      <Identifier> 'name' ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')?
    ;

RegularPropertyMemberDeclaration
    : Attributes? PropertyModifier 'modifier'* PropertySignature
      ImplementsClause? <LineTerminator>
      PropertyAccessorDeclaration 'declaration'+
      ""End"" 'endToken' ""Property"" 'propertyToken' (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

MustOverridePropertyMemberDeclaration
    : Attributes? MustOverridePropertyModifier 'modifier'+ PropertySignature
      ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

AutoPropertyMemberDeclaration
    : Attributes? AutoPropertyModifier 'modifier'* ""Property"" 'propertyToken' <Identifier> 'name'
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')? ( Equals Expression 'value')?
      ImplementsClause? <LineTerminator> {{AutoPropertyMemberDeclaration}}
    | Attributes? AutoPropertyModifier 'modifier'* ""Property"" 'propertyToken' <Identifier> 'name'
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ""As"" 'asToken' Attributes? ""New"" 'newToken'
      ( NonArrayTypeName 'type' ( OpenParenthesis ArgumentList? CloseParenthesis )? )?
      ObjectCreationExpressionInitializer 'initializer'?
      ImplementsClause? <LineTerminator> {{AutoPropertyMemberDeclaration}}
    ;

InterfacePropertyMemberDeclaration
    : Attributes? InterfacePropertyModifier 'modifier'* PropertySignature (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

AutoPropertyModifier
    : AccessModifier
    | ""Shadows""
    | ""Shared""
    | ""Overridable""
    | ""NotOverridable""
    | ""Overrides""
    | ""Overloads""
    ;

PropertyModifier
    : AutoPropertyModifier
    | ""Default""
    | ""ReadOnly""
    | ""WriteOnly""
    | ""Iterator""
    ;

MustOverridePropertyModifier
    : PropertyModifier
    | ""MustOverride""
    ;

InterfacePropertyModifier
    : ""Shadows""
    | ""Overloads""
    | ""Default""
    | ""ReadOnly""
    | ""WriteOnly""
    ;

PropertyAccessorDeclaration
    : PropertyGetDeclaration
    | PropertySetDeclaration
    ;

PropertyGetDeclaration
    : Attributes? AccessModifier 'modifier'? ""Get"" 'getToken' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Get"" 'getToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

PropertySetDeclaration
    : Attributes? AccessModifier 'modifier'? ""Set"" 'setToken'
      ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Set"" 'setToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

OperatorDeclaration
    : Attributes? OperatorModifier 'modifier'* ""Operator"" 'operatorToken' OverloadableOperator 'operator'
      OpenParenthesis ParameterList CloseParenthesis
      ( ""As"" 'asToken' Attributes? TypeName 'type')? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Operator"" 'operatorToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

OperatorModifier
    : ""Public"" | ""Shared"" | ""Overloads"" | ""Shadows"" | ""Widening"" | ""Narrowing""
    ;

OverloadableOperator
    : ""+"" | ""-"" | ""*"" | ""/"" | ""\"" | ""&"" | ""Like"" | ""Mod"" | ""And"" | ""Or"" | ""Xor""
    | ""^"" | ""<<"" | "">>"" | ""="" | ""<>"" | "">"" | ""<"" | "">="" | ""<=""
    | ""Not"" | ""IsTrue"" | ""IsFalse"" | ""CType""
    ;





# 10. Statements


Statement
    : LabelDeclarationStatement
    | LocalDeclarationStatement
    | WithStatement
    | SyncLockStatement
    | EventStatement
    | AssignmentStatement
    | InvocationStatement
    | ConditionalStatement
    | LoopStatement
    | ErrorHandlingStatement
    | BranchStatement
    | ArrayHandlingStatement
    | UsingStatement
#	| AwaitStatement	### handled by InvocationStatement/OperatorExpression
	| YieldStatement
    ;

Block
    : (Statements 'statement'? <LineTerminator>)*
    ;

LabelDeclarationStatement
    : LabelName 'label' "":"" 'colonToken' {{}}
    ;

LabelName
    : <Identifier>
    | <IntLiteral>
    ;

Statements
    : Statement 
    | Statement 'statement'? ( "":"" 'statementSeparator' Statement 'statement'? )+ {{LineStatement}}	###
    ;

LocalDeclarationStatement
    : LocalModifier 'modifier' VariableDeclarators {{}} ###
    ;

LocalModifier
    : ""Static"" | ""Dim"" | ""Const""
    ;

WithStatement
    : ""With"" 'withToken' Expression 'expression' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""With"" 'withToken' {{}} ###
    ;

SyncLockStatement
    : ""SyncLock"" 'syncLockToken' Expression 'expression' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""SyncLock"" 'syncLockToken' {{}} ###
    ;

EventStatement
    : RaiseEventStatement
    | AddHandlerStatement
    | RemoveHandlerStatement
    ;

RaiseEventStatement
    : ""RaiseEvent"" 'raiseEventToken' <IdentifierOrKeyword> 'name'
      ( OpenParenthesis ArgumentList? CloseParenthesis )? {{}}	###
    ;

AddHandlerStatement
    : ""AddHandler"" 'addHandlerToken' Expression 'event' Comma Expression 'handler' {{}} ###
    ;

RemoveHandlerStatement
    : ""RemoveHandler"" 'removeHandlerToken' Expression 'event' Comma Expression 'handler' {{}} ###
    ;

AssignmentStatement
    : RegularAssignmentStatement
    | CompoundAssignmentStatement
    | MidAssignmentStatement
    ;

RegularAssignmentStatement
    : Expression 'lhs' Equals Expression 'value' {{AssignmentStatement}} ###
    ;

CompoundAssignmentStatement
    : Expression 'lhs' CompoundBinaryOperator 'equals' <LineTerminator>? Expression 'value' {{AssignmentStatement}} ###
    ;

CompoundBinaryOperator
    : ""^="" | ""*="" | ""/="" | ""\="" | ""+="" | ""-=""
    | ""&="" | ""<<="" | "">>=""
    ;

MidAssignmentStatement
    : ""Mid"" 'midToken' ""$"" 'typeCharToken'? OpenParenthesis Expression 'string' Comma Expression 'start'
      ( Comma Expression 'length')? CloseParenthesis Equals Expression 'value' {{}} ###
    ;

InvocationStatement
    : ""Call"" 'callToken'? Expression 'expression' {{}}  ###
    ;

ConditionalStatement
    : IfStatement
    | SelectStatement
    ;

IfStatement
    : BlockIfStatement
    | LineIfThenStatement
    ;

BlockIfStatement
    : ""If"" 'ifToken' Expression 'expression' ""Then"" 'thenToken'? (<LineTerminator> | "":"" 'statementSeparator')	###
      Block ###
      ElseIfStatement 'elseIf'*
      ElseStatement 'else'?
      ""End"" 'endToken' ""If"" 'ifToken' {{IfStatement}} ###
    ;

ElseIfStatement
    : <ElseIf> 'elseIfToken' Expression 'expression' ""Then"" 'thenToken'? (<LineTerminator> | "":"" 'statementSeparator')	###
      Block {{}} ###
    ;

ElseStatement
    : ""Else"" 'elseToken' (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

LineIfThenStatement
    : ""If"" 'ifToken' Expression 'expression' ""Then"" 'thenToken' Statements 'statement' (  LineElseStatement 'else' )? {{IfStatement}} ###
    ;
 LineElseStatement
	: ""Else"" 'elseToken' Statements 'statement' {{ElseStatement}}
	;

SelectStatement
    : ""Select"" 'selectToken' ""Case"" 'caseToken'? Expression 'expression' <LineTerminator>
      CaseStatement 'case'*
      CaseElseStatement 'else'?
      ""End"" 'endToken' ""Select"" 'selectToken' {{}} ###
    ;

CaseStatement
    : ""Case"" 'caseToken' CaseClauses (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

CaseClauses
    : CaseClause 'clause' ( Comma CaseClause 'clause')*
    ;

CaseClause
    : ( ""Is"" 'operator' <LineTerminator>? )? ComparisonOperator <LineTerminator>? Expression 'value' {{}}
    | Expression 'value' ( ""To"" 'toToken' Expression 'to' )? {{}}
    ;

ComparisonOperator
    : ""="" 'operator' | ""<>"" 'operator' | ""<"" 'operator' | "">"" 'operator' | "">="" | ""<="" 'operator'
    ;

CaseElseStatement
    : ""Case"" 'caseToken' ""Else"" 'elseToken' (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

LoopStatement
    : WhileStatement
    | DoLoopStatement
    | ForStatement
    | ForEachStatement
    ;

WhileStatement
    : ""While"" 'whileToken' Expression 'expression' <LineTerminator>	###
      Block ###
      ""End"" 'endToken' ""While"" 'whileToken' {{}} ###
    ;

DoLoopStatement
    : DoTopLoopStatement
    | DoBottomLoopStatement
    ;

DoTopLoopStatement
    : ""Do"" 'doToken' ( WhileOrUntil Expression 'expression')? <LineTerminator>	###
      Block ###
      ""Loop"" 'loopToken' {{}} ###
    ;

DoBottomLoopStatement
    : ""Do"" 'doToken' <LineTerminator>
      Block ###
      ""Loop"" 'loopToken' WhileOrUntil Expression 'expression' {{}}	###
    ;

WhileOrUntil
    : ""While"" 'loopToken' | ""Until"" 'loopToken'
    ;

ForStatement
    : ""For"" 'forToken' LoopControlVariable 'variable' Equals Expression 'from' ""To"" 'toToken' Expression 'to'
      ( ""Step"" 'stepToken' Expression 'step')? <LineTerminator>
      Block ###
      ""Next"" 'nextToken' NextExpressionList? {{}}   ###
    | ""For"" 'forToken' LoopControlVariable 'variable' Equals Expression 'from' ""To"" 'toToken' Expression 'to'
      ( ""Step"" 'stepToken' Expression 'step')? (<LineTerminator> | "":"" 'statementSeparator')
      Statement 'statement' {{}}   ###
    ;

LoopControlVariable
    : <Identifier> 'name' ( IdentifierModifiers ""As"" 'asToken' TypeName 'type' )? {{}}
    | Expression
    ;

NextExpressionList
    : Expression 'next' ( Comma Expression 'next')*
    ;

ForEachStatement
    : ""For"" 'forToken' ""Each"" 'eachToken' LoopControlVariable 'variable' ""In"" 'inToken' <LineTerminator>? Expression 'expression' <LineTerminator>
      Block ###
      ""Next"" 'nextToken' NextExpressionList? {{}}  ###
    | ""For"" 'forToken' ""Each"" 'eachToken' LoopControlVariable 'variable' ""In"" 'inToken' <LineTerminator>? Expression 'expression' (<LineTerminator> | "":"" 'statementSeparator')
      Statement 'statement' {{}}   ###
    ;

ErrorHandlingStatement
    : StructuredErrorStatement
    | UnstructuredErrorStatement
    ;

StructuredErrorStatement
    : ThrowStatement
    | TryStatement
    ;

TryStatement
    : ""Try"" 'tryToken' <LineTerminator>
      Block ###
      CatchStatement 'catch'*
      FinallyStatement 'finally'?
      ""End"" 'endToken' ""Try"" 'tryToken' {{}} ###
    ;

FinallyStatement
    : ""Finally"" 'finallyToken' <LineTerminator>
      Block {{}} ###
    ;

CatchStatement
    : ""Catch"" 'catchToken' ( <Identifier> 'name' ( ""As"" 'asToken' NonArrayTypeName 'type' )? )?
	  ( ""When"" 'whenToken' Expression 'when')? <LineTerminator>	###
      Block {{}} ###
    ;

ThrowStatement
    : ""Throw"" 'throwToken' Expression 'value'? {{}} ###
    ;

UnstructuredErrorStatement
    : ErrorStatement
    | OnErrorStatement
    | ResumeStatement
    ;

ErrorStatement
    : ""Error"" 'errorToken' Expression 'value' {{}} ###
    ;

OnErrorStatement
    : ""On"" 'onToken' ""Error"" 'errorToken' ErrorClause 'clause' {{}} ###
    ;

ErrorClause
    : ""GoTo"" 'gotoToken' ""-"" 'minus' <IntegerLiteral> 'location' {{GotoClause}}  ###
    | ""GoTo"" 'gotoToken' <IntegerLiteral> 'location' {{GotoClause}}   ###
    | GoToStatement
    | ""Resume"" 'resumeToken' ""Next"" 'nextToken' {{ResumeClause}}
    ;

ResumeStatement
    : ""Resume"" 'resumeToken' ResumeClause 'resume'? {{}} ###
    ;

ResumeClause
    : ""Next""
    | LabelName
    ;

BranchStatement
    : GoToStatement
    | ExitStatement
    | ContinueStatement
    | StopStatement
    | EndStatement
    | ReturnStatement
    ;

GoToStatement
    : ""GoTo"" 'gotoToken' LabelName 'goto' {{}} ###
    ;

ExitStatement
    : ""Exit"" 'exitToken' ExitKind 'exit' {{}} ###
    ;

ExitKind
    : ""Do"" | ""For"" | ""While"" | ""Select"" | ""Sub"" | ""Function"" | ""Property"" | ""Try""
    ;

ContinueStatement
    : ""Continue"" 'continueToken' ContinueKind 'continue' {{}} 	###
    ;

ContinueKind
    : ""Do"" | ""For"" | ""While""
    ;

StopStatement
    : ""Stop"" 'stopToken' {{}} ###
    ;

EndStatement
    : ""End"" 'endToken' {{}} ###
    ;

ReturnStatement
    : ""Return"" 'returnToken' Expression 'value'? {{}} ###
    ;

ArrayHandlingStatement
    : RedimStatement
    | EraseStatement
    ;

RedimStatement
    : ""ReDim"" 'redimToken' ""Preserve"" 'preserveToken'? RedimClauses {{}} ###
    ;

RedimClauses
    : RedimClause 'redim' ( Comma RedimClause 'redim')*
    ;

RedimClause
    : Expression 'array' ArraySizeInitializationModifier {{}}
    ;

EraseStatement
    : ""Erase"" 'eraseToken' EraseExpressions {{}} ###
    ;

EraseExpressions
    : Expression 'array' ( Comma Expression 'array')*
    ;

UsingStatement
    : ""Using"" 'usingToken' UsingResources <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Using"" 'usingToken' {{}} ###
    ;

UsingResources
    : VariableDeclarators
    | Expression 'variable'
    ;

#AwaitStatement
#    : AwaitOperatorExpression ###
#    ;

YieldStatement
    : ""Yield"" 'yieldToken' Expression 'yield' {{}} ###
    ;



# 11. Expressions

Expression
    : SimpleExpression
    | TypeExpression
    | MemberAccessExpression
    | DictionaryAccessExpression
    | InvocationExpression
#    | IndexExpression	### handled by InvocationExpression
    | NewExpression
    | CastExpression
    | OperatorExpression
    | ConditionalExpression
    | LambdaExpression
    | QueryExpression
#    | XMLLiteralExpression	### not yet implemented
#    | XMLMemberAccessExpression	### not yet implemented
    ;

ConstantExpression
    : Expression
    ;

SimpleExpression
    : LiteralExpression
    | ParenthesizedExpression
    | InstanceExpression
    | SimpleNameExpression
    | AddressOfExpression
    ;

LiteralExpression
    : Literal
    ;

ParenthesizedExpression
    : OpenParenthesis Expression CloseParenthesis {{Expression}}
    ;

InstanceExpression
    : ""Me"" 'meToken' {{}}
    ;

SimpleNameExpression
    : <Identifier> 'name' ( OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis )? {{}}
    ;

AddressOfExpression
    : ""AddressOf"" 'addressOfToken' Expression 'value' {{}}
    ;

TypeExpression
    : GetTypeExpression
    | TypeOfIsExpression
    | IsExpression
#    | GetXmlNamespaceExpression	### not yet implemented
    ;

GetTypeExpression
    : ""GetType"" 'getTypeToken' OpenParenthesis GetTypeTypeName 'type' CloseParenthesis {{}}
    ;

GetTypeTypeName
    : TypeName 
    | QualifiedOpenTypeName
    ;

QualifiedOpenTypeName
    : <Identifier> 'name' TypeArityList? (Period <IdentifierOrKeyword> 'name' TypeArityList?)* {{}}
    | ""Global"" 'globalToken' Period <IdentifierOrKeyword> 'name' TypeArityList?
      (Period <IdentifierOrKeyword> 'name' TypeArityList?)* {{}}
    ;

TypeArityList
    : OpenParenthesis ""Of"" 'ofToken' CommaList? CloseParenthesis
    ;

CommaList
    : Comma+    ###
    ;

TypeOfIsExpression
    : ""TypeOf"" 'typeOfToken' Expression 'expression' ""Is"" 'isToken' <LineTerminator>? TypeName 'type' {{}}
    ;

IsExpression
    : Expression 'left' ""Is"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""IsNot"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

#GetXmlNamespaceExpression
#    : ""GetXmlNamespace"" 'getXmlNamespaceToken' OpenParenthesis XMLNamespaceName? CloseParenthesis
#    ;

MemberAccessExpression
    : MemberAccessBase 'base'? Period <IdentifierOrKeyword> 'name'
      ( OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis )? {{}}
    ;

MemberAccessBase
    : Expression
    | NonArrayTypeName
    | ""Global"" 'globalToken' {{Global}}
    | ""MyClass"" 'myClassToken' {{MyClass}}
    | ""MyBase"" 'myBaseToken' {{MyBase}}
    ;

DictionaryAccessExpression
    : Expression 'value'? ""!"" 'bangToken' <IdentifierOrKeyword> 'name' {{}}
    ;

InvocationExpression
    : Expression 'receiver' ( OpenParenthesis ArgumentList? CloseParenthesis ) {{}} ###
    ;

ArgumentList
    : PositionalArgumentList
    | PositionalArgumentList Comma NamedArgumentList
    | NamedArgumentList
    ;

PositionalArgumentList
    : Expression 'argument'? ( Comma Expression 'argument'? )*
    ;

NamedArgumentList
    : <IdentifierOrKeyword> 'argumentName' ColonEquals Expression 'namedArgument'
      ( Comma <IdentifierOrKeyword> 'argumentName' ColonEquals Expression 'namedArgument')*
    ;

#IndexExpression
#    : Expression 'value' OpenParenthesis ArgumentList? CloseParenthesis
#    ;

NewExpression
    : ObjectCreationExpression
    | ArrayExpression
    | AnonymousObjectCreationExpression
    ;

ObjectCreationExpression
    : ""New"" 'newToken' NonArrayTypeName 'type' ( OpenParenthesis ArgumentList? CloseParenthesis )?
      ObjectCreationExpressionInitializer 'initializer'? {{ObjectCreationExpression}}
    ;

ObjectCreationExpressionInitializer
    : ObjectMemberInitializer
    | ObjectCollectionInitializer
    ;

ObjectMemberInitializer
    : ""With"" 'withToken' OpenCurlyBrace FieldInitializerList CloseCurlyBrace {{}}
    ;

FieldInitializerList
    : FieldInitializer 'initializer' ( Comma FieldInitializer 'initializer')*
    ;

FieldInitializer
    : ""Key"" 'keyToken'? (Period <IdentifierOrKeyword> 'name' Equals )? Expression 'value' {{}} ###
    ;

ObjectCollectionInitializer
    : ""From"" 'fromToken' CollectionInitializer 'initializer' {{}}
    ;

CollectionInitializer
    : OpenCurlyBrace CollectionElementList? CloseCurlyBrace {{}}
    ;

CollectionElementList
    : CollectionElement 'element' ( Comma CollectionElement 'element')*
    ;

CollectionElement
    : Expression
    | CollectionInitializer
    ;

ArrayExpression
    : ArrayCreationExpression
    | ArrayLiteralExpression
    ;

ArrayCreationExpression
    : ""New"" 'newToken' NonArrayTypeName 'type' ArrayNameModifier CollectionInitializer 'initializer' {{ArrayCreationExpression}}
    ;

ArrayLiteralExpression
    : CollectionInitializer
    ;

AnonymousObjectCreationExpression
    : ""New"" 'newToken' ObjectMemberInitializer 'expression' {{AnonymousCreationExpression}}
    ;

CastExpression
    : ""DirectCast"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | ""TryCast"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | ""CType"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | CastTarget 'type' OpenParenthesis Expression 'value' CloseParenthesis {{PrimitiveCastExpression}}
    ;

CastTarget
    : ""CBool"" | ""CByte"" | ""CChar""  | ""CDate""  | ""CDec"" | ""CDbl"" | ""CInt""
    | ""CLng""  | ""CObj""  | ""CSByte"" | ""CShort"" | ""CSng"" | ""CStr"" | ""CUInt""
    | ""CULng"" | ""CUShort""
    ;

OperatorExpression
    : ArithmeticOperatorExpression
    | RelationalOperatorExpression
    | LikeOperatorExpression
    | ConcatenationOperatorExpression
    | ShortCircuitLogicalOperatorExpression
    | LogicalOperatorExpression
    | ShiftOperatorExpression
    | AwaitOperatorExpression
    ;

ArithmeticOperatorExpression
    : UnaryPlusExpression
    | UnaryMinusExpression
    | AdditionOperatorExpression
    | SubtractionOperatorExpression
    | MultiplicationOperatorExpression
    | DivisionOperatorExpression
    | ModuloOperatorExpression
    | ExponentOperatorExpression
    ;

UnaryPlusExpression
    : ""+"" 'operator' Expression 'value' {{UnaryExpression}}
    ;

UnaryMinusExpression
    : ""-"" 'operator' Expression 'value' {{UnaryExpression}}
    ;

AdditionOperatorExpression
    : Expression 'left' ""+"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

SubtractionOperatorExpression
    : Expression 'left' ""-"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

MultiplicationOperatorExpression
    : Expression 'left' ""*"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

DivisionOperatorExpression
    : FPDivisionOperatorExpression
    | IntegerDivisionOperatorExpression
    ;

FPDivisionOperatorExpression
    : Expression 'left' ""/"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

IntegerDivisionOperatorExpression
    : Expression 'left' ""\"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ModuloOperatorExpression
    : Expression 'left' ""Mod"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ExponentOperatorExpression
    : Expression 'left' ""^"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

RelationalOperatorExpression
    : Expression 'left' ""="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<>"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

LikeOperatorExpression
    : Expression 'left' ""Like"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ConcatenationOperatorExpression
    : Expression 'left' ""&"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

LogicalOperatorExpression
    : ""Not"" 'operator' Expression 'value' {{UnaryExpression}}
    | Expression 'left' ""And"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""Or"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""Xor"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ShortCircuitLogicalOperatorExpression
    : Expression 'left' ""AndAlso"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""OrElse"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ShiftOperatorExpression
    : Expression 'left' ""<<"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">>"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

#BooleanExpression
#    : Expression
#    ;

LambdaExpression
    : SingleLineLambda
    | MultiLineLambda
    ;

SingleLineLambda
    : LambdaModifier 'modifier'* ""Function"" 'functionToken' ( OpenParenthesis ParameterList? CloseParenthesis )? Expression 'statement' {{FunctionLambdaExpression}}
    | LambdaModifier 'modifier'* ""Sub"" 'subToken' ( OpenParenthesis ParameterList? CloseParenthesis )? Statement 'statement' {{SubLambdaExpression}}	### added LambdaModifier since it also exists for MultiLineSubLambda
    ;

MultiLineLambda
    : MultiLineFunctionLambda
    | MultiLineSubLambda
    ;

MultiLineFunctionLambda
    : LambdaModifier 'modifier'* ""Function"" 'functionToken' ( OpenParenthesis ParameterList? CloseParenthesis )? ( ""As"" 'asToken' TypeName 'type' )? <LineTerminator>
      Block
      ""End"" 'endToken' ""Function"" 'functionToken' {{FunctionLambdaExpression}}
    ;

MultiLineSubLambda
    : LambdaModifier 'modifier'* ""Sub"" 'subToken' ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block
      ""End"" 'endToken' ""Sub"" 'subToken' {{SubLambdaExpression}}
    ;

LambdaModifier
    : ""Async"" | ""Iterator""
    ;

QueryExpression
    : FromOrAggregateQueryOperator (<LineTerminator>? QueryOperator)* {{}}
    ;

FromOrAggregateQueryOperator
    : FromQueryOperator
    | AggregateQueryOperator
    ;

QueryOperator
    : FromQueryOperator
    | AggregateQueryOperator
    | SelectQueryOperator
    | DistinctQueryOperator
    | WhereQueryOperator
    | OrderByQueryOperator
    | PartitionQueryOperator
    | LetQueryOperator
    | GroupByQueryOperator
    | JoinOrGroupJoinQueryOperator
    ;

JoinOrGroupJoinQueryOperator
    : JoinQueryOperator
    | GroupJoinQueryOperator
    ;

CollectionRangeVariableDeclarationList
    : CollectionRangeVariableDeclaration ( Comma CollectionRangeVariableDeclaration )*
    ;

CollectionRangeVariableDeclaration
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? ""In"" 'inToken' <LineTerminator>? Expression 'value'
    ;

ExpressionRangeVariableDeclarationList
    : ExpressionRangeVariableDeclaration 'declaration' ( Comma ExpressionRangeVariableDeclaration 'declaration')*
    ;

ExpressionRangeVariableDeclaration
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? Equals Expression 'value' {{}}
    ;

FromQueryOperator
    : ""From"" 'fromToken' <LineTerminator>? CollectionRangeVariableDeclarationList
    ;

JoinQueryOperator
    : ""Join"" 'joinToken' <LineTerminator>? CollectionRangeVariableDeclaration
      JoinOrGroupJoinQueryOperator? <LineTerminator>? ""On"" 'onToken' <LineTerminator>? JoinConditionList
    ;

JoinConditionList
    : JoinCondition ( ""And"" 'andToken' <LineTerminator>? JoinCondition )*
    ;

JoinCondition
    : Expression 'lhs' ""Equals"" 'equalsToken' <LineTerminator>? Expression 'rhs'
    ;

LetQueryOperator
    : ""Let"" 'letToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

SelectQueryOperator
    : ""Select"" 'selectToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

DistinctQueryOperator
    : ""Distinct"" 'distinctToken'
    ;

WhereQueryOperator
    : ""Where"" <LineTerminator>? Expression 'expression'	###
    ;

PartitionQueryOperator
    : ""Take"" 'takeToken' <LineTerminator>? Expression 'expression'
    | ""Take"" 'takeToken' ""While"" 'whileToken' <LineTerminator>? Expression 'expression'	###
    | ""Skip"" 'skipToken' <LineTerminator>? Expression 'expression'
    | ""Skip"" 'skipToken' ""While"" 'whileToken' <LineTerminator>? Expression 'expression'	###
    ;

OrderByQueryOperator
    : ""Order"" 'orderToken' ""By"" 'byToken' <LineTerminator>? OrderExpressionList
    ;

OrderExpressionList
    : OrderExpression 'expression' ( Comma OrderExpression 'expression' )*
    ;

OrderExpression
    : Expression 'value' Ordering 'order'? {{}}
    ;

Ordering
    : ""Ascending"" | ""Descending""
    ;

GroupByQueryOperator
    : ""Group"" 'groupToken' ( <LineTerminator>? ExpressionRangeVariableDeclarationList )?
      <LineTerminator>? ""By"" 'byToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

AggregateQueryOperator
    : ""Aggregate"" 'aggregateToken' <LineTerminator>? CollectionRangeVariableDeclaration QueryOperator*
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

GroupJoinQueryOperator
    : ""Group"" 'groupToken' ""Join"" 'joinToken' <LineTerminator>? CollectionRangeVariableDeclaration
      JoinOrGroupJoinQueryOperator? <LineTerminator>? ""On"" 'onToken' <LineTerminator>? JoinConditionList
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

ConditionalExpression
    : ""If"" 'ifToken' OpenParenthesis Expression 'booleanValue' Comma Expression 'trueValue' Comma Expression 'falseValue' CloseParenthesis {{}}	###
    | ""If"" 'ifToken' OpenParenthesis Expression 'booleanValue' Comma Expression 'trueValue' CloseParenthesis {{}}
    ;
/*
XMLLiteralExpression
    : XMLDocument
    | XMLElement
    | XMLProcessingInstruction
    | XMLComment
    | XMLCDATASection
    ;

<XMLCharacter>
    : \t
    | \n
    | \r
    | [\x0020-\xD7FF]
    | [\xE000-\xFFFD]
#    | '<Unicode characters 0x10000 - 0x10FFFF>'
    ;

<XMLString>
    : <XMLCharacter>+
    ;

<XMLWhitespace>
    : <XMLWhitespaceCharacter>+
    ;

<XMLWhitespaceCharacter>
    : \r
    | \n
    | \ 
    | \t
    ;

<XMLNameCharacter>
    : <XMLLetter>
    | <XMLDigit>
    | \.
    | \-
    | \_
    | \:
    | <XMLCombiningCharacter>
#    | <XMLExtender>
    ;

<XMLNameStartCharacter>
    : <XMLLetter>
    | \_
    | \:
    ;

<XMLName>
    : <XMLNameStartCharacter> <XMLNameCharacter>*
    ;

<XMLLetter>
    : <isLetter>
    ;

<XMLDigit>
    : <isDigit>
    ;

XMLCombiningCharacter
    : [\x0300-\x036F]
    ;

#<XMLExtender>
#    : '<Unicode character as defined in the Extender production of the XML 1.0 specification>'
#    ;

XMLEmbeddedExpression
    : ""<%="" <LineTerminator>? Expression <LineTerminator>? ""%>""
    ;

XMLDocument
    : XMLDocumentPrologue XMLMisc* XMLDocumentBody XMLMisc*
    ;

XMLDocumentPrologue
    : ""<?xml"" XMLVersion XMLEncoding? XMLStandalone? <XMLWhitespace>? ""?>""
    ;

XMLVersion
    : <XMLWhitespace> ""version"" <XMLWhitespace>? ""="" <XMLWhitespace>? <XMLVersionNumberValue>
    ;

<XMLVersionNumberValue>
    : <SingleQuoteCharacter> 1 \. 0 <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> 1 \. 0 <DoubleQuoteCharacter>
    ;

XMLEncoding
    : <XMLWhitespace> ""encoding"" <XMLWhitespace>? ""="" <XMLWhitespace>? XMLEncodingNameValue
    ;

<XMLEncodingNameValue>
    : <SingleQuoteCharacter> <XMLEncodingName> <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> <XMLEncodingName> <DoubleQuoteCharacter>
    ;

<XMLEncodingName>
    : <XMLLatinAlphaCharacter> <XMLEncodingNameCharacter>*
    ;

<XMLEncodingNameCharacter>
    : <XMLUnderscoreCharacter>
    | <XMLLatinAlphaCharacter>
    | <XMLNumericCharacter>
    | <XMLPeriodCharacter>
    | <XMLDashCharacter>
    ;

<XMLLatinAlphaCharacter>
    : [a-zA-Z]
    ;

<XMLNumericCharacter>
    : \d
    ;

<XMLHexNumericCharacter>
    : <XMLNumericCharacter>
    | [a-fA-F]
    ;

<XMLPeriodCharacter>
    : \.
    ;

<XMLUnderscoreCharacter>
    : _
    ;

<XMLDashCharacter>
    : \x002d
    ;

XMLStandalone
    : <XMLWhitespace> ""standalone"" <XMLWhitespace>? ""="" <XMLWhitespace>? <XMLYesNoValue>
    ;

<XMLYesNoValue>
    : <SingleQuoteCharacter> <XMLYesNo> <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> <XMLYesNo> <DoubleQuoteCharacter>
    ;

<XMLYesNo>
    : yes
    | no
    ;

XMLMisc
    : XMLComment
    | XMLProcessingInstruction
    | XMLWhitespace
    ;

XMLDocumentBody
    : XMLElement
    | XMLEmbeddedExpression
    ;

XMLElement
    : XMLEmptyElement
    | XMLElementStart XMLContent XMLElementEnd
    ;

XMLEmptyElement
    : '<' XMLQualifiedNameOrExpression XMLAttribute* XMLWhitespace? '/' '>'
    ;

XMLElementStart
    : '<' XMLQualifiedNameOrExpression XMLAttribute* XMLWhitespace? '>'
    ;

XMLElementEnd
    : '<' '/' '>'
    | '<' '/' XMLQualifiedName XMLWhitespace? '>'
    ;

XMLContent
    : XMLCharacterData? ( XMLNestedContent XMLCharacterData? )+
    ;

XMLCharacterData
    : '<Any XMLCharacterDataString that does not contain the string ""]]>"">'
    ;

XMLCharacterDataString
    : '<Any Unicode character except < or &>'+
    ;

XMLNestedContent
    : XMLElement
    | XMLReference
    | XMLCDATASection
    | XMLProcessingInstruction
    | XMLComment
    | XMLEmbeddedExpression
    ;
XMLAttribute

    : XMLWhitespace XMLAttributeName XMLWhitespace? '=' XMLWhitespace? XMLAttributeValue
    | XMLWhitespace XMLEmbeddedExpression
    ;

XMLAttributeName
    : XMLQualifiedNameOrExpression
    | XMLNamespaceAttributeName
    ;

XMLAttributeValue
    : <DoubleQuoteCharacter> XMLAttributeDoubleQuoteValueCharacter* <DoubleQuoteCharacter>
    | <SingleQuoteCharacter> XMLAttributeSingleQuoteValueCharacter* <SingleQuoteCharacter>
    | XMLEmbeddedExpression
    ;

XMLAttributeDoubleQuoteValueCharacter
    : '<Any XMLCharacter except <, &, or DoubleQuoteCharacter>'
    | XMLReference
    ;

XMLAttributeSingleQuoteValueCharacter
    : '<Any XMLCharacter except <, &, or SingleQuoteCharacter>'
    | XMLReference
    ;

XMLReference
    : XMLEntityReference
    | XMLCharacterReference
    ;

XMLEntityReference
    : '&' XMLEntityName ';'
    ;

XMLEntityName
    : 'lt' | 'gt' | 'amp' | 'apos' | 'quot'
    ;

XMLCharacterReference
    : '&' '#' XMLNumericCharacter+ ';'
    | '&' '#' 'x' XMLHexNumericCharacter+ ';'
    ;

XMLNamespaceAttributeName
    : XMLPrefixedNamespaceAttributeName
    | XMLDefaultNamespaceAttributeName
    ;

XMLPrefixedNamespaceAttributeName
    : ""xmlns"" "":"" XMLNamespaceName
    ;

XMLDefaultNamespaceAttributeName
    : ""xmlns""
    ;

XMLNamespaceName
    : XMLNamespaceNameStartCharacter XMLNamespaceNameCharacter*
    ;

XMLNamespaceNameStartCharacter
    : '<Any XMLNameCharacter except :>'
    ;

XMLNamespaceNameCharacter
    : XMLLetter
    | '_'
    ;

XMLQualifiedNameOrExpression
    : XMLQualifiedName
    | XMLEmbeddedExpression
    ;

XMLQualifiedName
    : XMLPrefixedName
    | XMLUnprefixedName
    ;

XMLPrefixedName
    : XMLNamespaceName ':' XMLNamespaceName
    ;

XMLUnprefixedName
    : XMLNamespaceName
    ;

XMLProcessingInstruction
    : '<' '?' XMLProcessingTarget ( XMLWhitespace XMLProcessingValue? )? '?' '>'
    ;

XMLProcessingTarget
    : '<Any XMLName except a casing permutation of the string ""xml"">'
    ;

XMLProcessingValue
    : '<Any XMLString that does not contain a question-mark followed by "">"">'
    ;

XMLComment
    : '<' '!' '-' '-' XMLCommentCharacter* '-' '-' '>'
    ;

XMLCommentCharacter
    : '<Any XMLCharacter except dash (0x002D)>'
    | '-' '<Any XMLCharacter except dash (0x002D)>'
    ;

XMLCDATASection
    : '<' '!' ( 'CDATA' '[' XMLCDATASectionString? ']' )? '>'
    ;

XMLCDATASectionString
    : '<Any XMLString that does not contain the string ""]]>"">'
    ;

XMLMemberAccessExpression
    : Expression '.' <LineTerminator>? '<' XMLQualifiedName '>'
    | Expression '.' <LineTerminator>? '@' <LineTerminator>? '<' XMLQualifiedName '>'
    | Expression '.' <LineTerminator>? '@' <LineTerminator>? <IdentifierOrKeyword>
    | Expression '.' '.' '.' <LineTerminator>? '<' XMLQualifiedName '>'
    ;
*/
AwaitOperatorExpression
    : ""Await"" 'awaitToken' Expression 'value' {{AwaitExpression}}
    ;"
]

{ #category : #'file types' }
VBNetParser class >> fileExtensions [
	^ #('.vb')
]

{ #category : #accessing }
VBNetParser class >> keywords [
	^ keywords
		ifNil:
			[ keywords := (#(
            'AddHandler'       'AddressOf'       'Alias'        'And'
            'AndAlso'          'As'              'Boolean'      'ByRef'
            'Byte'             'ByVal'           'Call'         'Case'        
            'Catch'            'CBool'           'CByte'        'CChar'       
            'CDate'            'CDbl'            'CDec'         'Char'        
            'CInt'             'Class'           'CLng'         'CObj'        
            'Const'            'Continue'        'CSByte'       'CShort'      
            'CSng'             'CStr'            'CType'        'CUInt'       
            'CULng'            'CUShort'         'Date'         'Decimal'     
            'Declare'          'Default'         'Delegate'     'Dim'         
            'DirectCast'       'Do'              'Double'       'Each'        
            'Else'             'ElseIf'          'End'          'EndIf'       
            'Enum'             'Erase'           'Error'        'Event'       
            'Exit'             'False'           'Finally'      'For'         
            'Friend'           'Function'        'Get'          'GetType'     
            'GetXmlNamespace'  'Global'          'GoSub'        'GoTo'        
            'Handles'          'If'              'Implements'   'Imports'     
            'In'               'Inherits'        'Integer'      'Interface'   
            'Is'               'IsNot'           'Let'          'Lib'         
            'Like'             'Long'            'Loop'         'Me'          
            'Mod'              'Module'          'MustInherit'  'MustOverride'
            'MyBase'           'MyClass'         'Namespace'    'Narrowing'   
            'New'              'Next'            'Not'          'Nothing'     
            'NotInheritable'   'NotOverridable'  'Object'       'Of'          
            'On'               'Operator'        'Option'       'Optional'    
            'Or'               'OrElse'          'Overloads'    'Overridable' 
            'Overrides'        'ParamArray'      'Partial'      'Private'     
            'Property'         'Protected'       'Public'       'RaiseEvent'  
            'ReadOnly'         'ReDim'           'REM'          'RemoveHandler'
            'Resume'           'Return'          'SByte'        'Select'      
            'Set'              'Shadows'         'Shared'       'Short'       
            'Single'           'Static'          'Step'         'Stop'        
            'String'           'Structure'       'Sub'          'SyncLock'    
            'Then'             'Throw'           'To'           'True'        
            'Try'              'TryCast'         'TypeOf'       'UInteger'    
            'ULong'            'UShort'          'Using'        'Variant'     
            'Wend'             'When'            'While'        'Widening'    
            'With'             'WithEvents'      'WriteOnly'    'Xor' 
			 ) collect: [ :each | each asUppercase ]) asSet ]
]

{ #category : #generated }
VBNetParser class >> reduceTable [
^#(
	#(233 0 #nil 3428353 false ) 
	#(272 0 #reduceActionForOptionStatement__option__1: 14568449 false ) 
	#(233 2 #liftFirstValue: 3428354 false ) 
	#(232 2 #reduceActionForFile1: 3421185 false ) 
	#(273 0 #reduceActionForOptionStatement__option__1: 14595073 false ) 
	#(327 0 #reduceActionForOptionStatement__option__1: 19782657 false ) 
	#(323 0 #reduceActionForOptionStatement__option__1: 19276801 false ) 
	#(334 0 #reduceActionForOptionStatement__option__1: 20678657 false ) 
	#(271 2 #reduceActionForStart2: 14556162 false ) 
	#(272 2 #reduceActionForOptionStatement__option__2: 14568450 false ) 
	#(275 1 #liftFirstValue: 14889985 false ) 
	#(275 1 #liftFirstValue: 14889986 false ) 
	#(275 1 #liftFirstValue: 14889987 false ) 
	#(275 1 #liftFirstValue: 14889988 false ) 
	#(271 3 #reduceActionForStart3: 14556163 false ) 
	#(254 1 #reduceActionForAttributes1: 13305857 false ) 
	#(255 1 #reduceActionForAttributeBlock__attributeBlock__1: 13323265 false ) 
	#(271 3 #reduceActionForStart1: 14556161 false ) 
	#(273 2 #reduceActionForOptionStatement__option__2: 14595074 false ) 
	#(296 1 #reduceActionForAttributesNamespaceDeclaration1: 17261569 false ) 
	#(274 1 #reduceActionForNamespaceMemberDeclaration_1: 14651393 false ) 
	#(295 1 #reduceActionForAttributes1: 17152001 false ) 
	#(295 1 #reduceActionForAttributesNamespaceDeclaration1: 17152002 false ) 
	#(297 1 #liftFirstValue: 17387522 false ) 
	#(298 1 #liftFirstValue: 17463297 false ) 
	#(298 1 #liftFirstValue: 17463300 false ) 
	#(298 1 #liftFirstValue: 17463298 false ) 
	#(297 1 #liftFirstValue: 17387521 false ) 
	#(298 1 #liftFirstValue: 17463299 false ) 
	#(298 1 #liftFirstValue: 17463301 false ) 
	#(280 1 #liftFirstValue: 15568897 false ) 
	#(280 1 #liftFirstValue: 15568898 false ) 
	#(276 3 #reduceActionForOptionExplicitStatement2: 15030274 false ) 
	#(277 1 #liftFirstValue: 15195138 false ) 
	#(277 1 #liftFirstValue: 15195137 false ) 
	#(276 3 #reduceActionForOptionExplicitStatement1: 15030273 false ) 
	#(281 3 #reduceActionForOptionExplicitStatement2: 15614978 false ) 
	#(281 3 #reduceActionForOptionExplicitStatement1: 15614977 false ) 
	#(278 3 #reduceActionForOptionExplicitStatement2: 15238146 false ) 
	#(278 3 #reduceActionForOptionExplicitStatement1: 15238145 false ) 
	#(261 1 #liftFirstValue: 13757441 false ) 
	#(318 1 #liftFirstValue: 18868226 false ) 
	#(320 1 #liftFirstValue: 19066881 false ) 
	#(318 1 #liftFirstValue: 18868228 false ) 
	#(318 1 #liftFirstValue: 18868227 false ) 
	#(319 1 #liftFirstValue: 18974723 false ) 
	#(321 1 #liftFirstValue: 19185666 false ) 
	#(320 1 #liftFirstValue: 19066886 false ) 
	#(320 1 #liftFirstValue: 19066888 false ) 
	#(261 1 #liftFirstValue: 13757442 false ) 
	#(309 1 #reduceActionForBuiltInTypeName1: 18280449 false ) 
	#(320 1 #liftFirstValue: 19066882 false ) 
	#(320 1 #liftFirstValue: 19066884 false ) 
	#(321 1 #liftFirstValue: 19185665 false ) 
	#(318 1 #liftFirstValue: 18868229 false ) 
	#(320 1 #liftFirstValue: 19066885 false ) 
	#(320 1 #liftFirstValue: 19066887 false ) 
	#(320 1 #liftFirstValue: 19066883 false ) 
	#(304 0 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments___1: 17896449 false ) 
	#(259 0 #reduceActionFor__Comma_Attribute__attribute____1: 13549569 false ) 
	#(260 1 #reduceActionForAttribute1: 13590529 false ) 
	#(301 1 #liftFirstValue: 17766401 false ) 
	#(301 1 #liftFirstValue: 17766402 false ) 
	#(309 1 #reduceActionForBuiltInTypeName1: 18280450 false ) 
	#(318 1 #liftFirstValue: 18868225 false ) 
	#(319 1 #liftFirstValue: 18974721 false ) 
	#(319 1 #liftFirstValue: 18974722 false ) 
	#(285 0 #reduceActionFor__Comma_Attribute__attribute____1: 15942657 false ) 
	#(286 1 #liftFirstValue: 15984641 false ) 
	#(286 1 #liftFirstValue: 15984642 false ) 
	#(288 1 #reduceActionForMembersImportsClause1: 16202753 false ) 
	#(299 1 #liftFirstValue: 17636354 false ) 
	#(300 1 #liftFirstValue: 17696769 false ) 
	#(300 1 #liftFirstValue: 17696770 false ) 
	#(299 1 #liftFirstValue: 17636353 false ) 
	#(291 1 #reduceActionForNamespaceName2: 16908290 false ) 
	#(294 0 #reduceActionFor__Comma_Attribute__attribute____1: 17103873 false ) 
	#(291 1 #reduceActionForNamespaceName1: 16908289 false ) 
	#(296 2 #reduceActionForAttributesNamespaceDeclaration2: 17261570 false ) 
	#(255 2 #reduceActionForOptionStatement__option__2: 13323266 false ) 
	#(274 2 #reduceActionForNamespaceMemberDeclaration_2: 14651394 false ) 
	#(243 1 #liftFirstValue: 12370947 false ) 
	#(243 1 #liftFirstValue: 12370948 false ) 
	#(243 1 #liftFirstValue: 12370946 false ) 
	#(243 1 #liftFirstValue: 12370945 false ) 
	#(310 1 #liftFirstValue: 18368514 false ) 
	#(310 1 #liftFirstValue: 18368513 false ) 
	#(323 2 #reduceActionForOptionStatement__option__2: 19276802 false ) 
	#(330 1 #liftFirstValue: 20130818 false ) 
	#(330 1 #liftFirstValue: 20130819 false ) 
	#(330 1 #liftFirstValue: 20130820 false ) 
	#(330 1 #liftFirstValue: 20130817 false ) 
	#(327 2 #reduceActionForOptionStatement__option__2: 19782658 false ) 
	#(336 1 #liftFirstValue: 21037058 false ) 
	#(336 1 #liftFirstValue: 21037057 false ) 
	#(334 2 #reduceActionForOptionStatement__option__2: 20678658 false ) 
	#(279 4 #reduceActionForOptionCompareStatement2: 15398914 false ) 
	#(279 4 #reduceActionForOptionCompareStatement1: 15398913 false ) 
	#(276 4 #reduceActionForOptionCompareStatement2: 15030276 false ) 
	#(276 4 #reduceActionForOptionCompareStatement1: 15030275 false ) 
	#(281 4 #reduceActionForOptionCompareStatement2: 15614980 false ) 
	#(281 4 #reduceActionForOptionCompareStatement1: 15614979 false ) 
	#(278 4 #reduceActionForOptionCompareStatement2: 15238148 false ) 
	#(278 4 #reduceActionForOptionCompareStatement1: 15238147 false ) 
	#(235 1 #liftFirstValue: 3752961 false ) 
	#(236 1 #liftFirstValue: 3805185 false ) 
	#(302 2 #reduceActionForQualifiedTypeName1: 17836033 false ) 
	#(256 3 #reduceActionForAttributeBlock1: 13364225 false ) 
	#(257 2 #reduceActionForAttributeList1: 13506561 false ) 
	#(265 0 #reduceActionFor__Comma_Attribute__attribute____1: 14073857 false ) 
	#(629 0 #reduceActionForOptionStatement__option__1: 55309313 false ) 
	#(240 1 #liftFirstValue: 4065281 false ) 
	#(282 3 #reduceActionForImportsStatement2: 15773698 false ) 
	#(282 3 #reduceActionForImportsStatement1: 15773697 false ) 
	#(283 2 #reduceActionForAttributeList1: 15897601 false ) 
	#(312 2 #reduceActionForNullableTypeName1: 18502657 false ) 
	#(349 2 #reduceActionForArrayTypeName1: 22725633 false ) 
	#(350 1 #reduceActionForAttributes1: 22802433 false ) 
	#(351 1 #reduceActionForAttributeBlock__attributeBlock__1: 22828033 false ) 
	#(292 2 #reduceActionForAttributeList1: 17054721 false ) 
	#(290 0 #reduceActionFor__Comma_Attribute__attribute____1: 16766977 false ) 
	#(357 1 #liftFirstValue: 23310337 false ) 
	#(357 1 #liftFirstValue: 23310338 false ) 
	#(235 2 #liftFirstValue: 3752962 false ) 
	#(236 2 #liftFirstValue: 3805186 false ) 
	#(304 2 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments___2: 17896450 false ) 
	#(302 3 #reduceActionForQualifiedTypeName2: 17836034 false ) 
	#(256 4 #reduceActionForAttributeBlock3: 13364227 false ) 
	#(256 4 #reduceActionForAttributeBlock1: 13364226 false ) 
	#(256 4 #reduceActionForAttributeBlock4: 13364228 false ) 
	#(234 1 #liftFirstValue: 3702785 false ) 
	#(259 2 #reduceActionFor__Comma_Attribute__attribute____2: 13549570 false ) 
	#(260 3 #reduceActionForAttribute4: 13590532 false ) 
	#(237 1 #liftFirstValue: 3869697 false ) 
	#(608 1 #liftFirstValue: 51320833 false ) 
	#(608 1 #liftFirstValue: 51320834 false ) 
	#(608 1 #liftFirstValue: 51320835 false ) 
	#(608 1 #liftFirstValue: 51320836 false ) 
	#(608 1 #liftFirstValue: 51320838 false ) 
	#(608 1 #liftFirstValue: 51320837 false ) 
	#(608 1 #liftFirstValue: 51320839 false ) 
	#(608 1 #liftFirstValue: 51320840 false ) 
	#(608 1 #liftFirstValue: 51320841 false ) 
	#(608 1 #liftFirstValue: 51320842 false ) 
	#(608 1 #liftFirstValue: 51320843 false ) 
	#(608 1 #liftFirstValue: 51320844 false ) 
	#(608 1 #liftFirstValue: 51320845 false ) 
	#(608 1 #liftFirstValue: 51320846 false ) 
	#(608 1 #liftFirstValue: 51320847 false ) 
	#(608 1 #liftFirstValue: 51320848 false ) 
	#(579 1 #reduceActionForMemberAccessBase3: 48253955 false ) 
	#(565 1 #reduceActionForInstanceExpression1: 46555137 false ) 
	#(579 1 #reduceActionForMemberAccessBase5: 48253957 false ) 
	#(579 1 #reduceActionForMemberAccessBase4: 48253956 false ) 
	#(238 1 #liftFirstValue: 3936257 false ) 
	#(242 1 #reduceActionForLiteral1: 5620737 false ) 
	#(242 1 #reduceActionForLiteral2: 5620738 false ) 
	#(242 1 #reduceActionForLiteral3: 5620739 false ) 
	#(242 1 #reduceActionForLiteral4: 5620740 false ) 
	#(242 1 #reduceActionForLiteral5: 5620741 false ) 
	#(242 1 #reduceActionForLiteral6: 5620742 false ) 
	#(242 1 #reduceActionForLiteral7: 5620743 false ) 
	#(566 1 #reduceActionForSimpleNameExpression1: 46608385 false ) 
	#(260 3 #reduceActionForAttribute2: 13590530 false ) 
	#(563 1 #liftFirstValue: 46416897 false ) 
	#(262 1 #reduceActionForAttributes1: 13811713 false ) 
	#(263 1 #reduceActionForAttributes1: 13993985 false ) 
	#(262 1 #reduceActionForAttributeArguments3: 13811715 false ) 
	#(268 0 #reduceActionFor__Comma_Attribute__attribute____1: 14212097 false ) 
	#(579 1 #liftFirstValue: 48253954 false ) 
	#(561 1 #liftFirstValue: 46213121 false ) 
	#(579 1 #liftFirstValue: 48253953 false ) 
	#(270 1 #liftFirstValue: 14396417 false ) 
	#(560 1 #liftFirstValue: 45744129 false ) 
	#(562 1 #liftFirstValue: 46257153 false ) 
	#(562 1 #liftFirstValue: 46257154 false ) 
	#(562 1 #liftFirstValue: 46257155 false ) 
	#(562 1 #liftFirstValue: 46257156 false ) 
	#(562 1 #liftFirstValue: 46257157 false ) 
	#(560 1 #liftFirstValue: 45744130 false ) 
	#(568 1 #liftFirstValue: 46828545 false ) 
	#(568 1 #liftFirstValue: 46828546 false ) 
	#(568 1 #liftFirstValue: 46828547 false ) 
	#(560 1 #liftFirstValue: 45744131 false ) 
	#(560 1 #liftFirstValue: 45744132 false ) 
	#(560 1 #liftFirstValue: 45744133 false ) 
	#(560 1 #liftFirstValue: 45744134 false ) 
	#(589 1 #liftFirstValue: 49205249 false ) 
	#(605 1 #liftFirstValue: 50626561 false ) 
	#(589 1 #liftFirstValue: 49205250 false ) 
	#(603 1 #liftFirstValue: 50378753 false ) 
	#(603 1 #liftFirstValue: 50378754 false ) 
	#(589 1 #liftFirstValue: 49205251 false ) 
	#(560 1 #liftFirstValue: 45744135 false ) 
	#(560 1 #liftFirstValue: 45744136 false ) 
	#(609 1 #liftFirstValue: 51516417 false ) 
	#(610 1 #liftFirstValue: 51822593 false ) 
	#(610 1 #liftFirstValue: 51822594 false ) 
	#(610 1 #liftFirstValue: 51822595 false ) 
	#(610 1 #liftFirstValue: 51822596 false ) 
	#(610 1 #liftFirstValue: 51822597 false ) 
	#(610 1 #liftFirstValue: 51822598 false ) 
	#(616 1 #liftFirstValue: 52714497 false ) 
	#(616 1 #liftFirstValue: 52714498 false ) 
	#(610 1 #liftFirstValue: 51822599 false ) 
	#(610 1 #liftFirstValue: 51822600 false ) 
	#(609 1 #liftFirstValue: 51516418 false ) 
	#(609 1 #liftFirstValue: 51516419 false ) 
	#(609 1 #liftFirstValue: 51516420 false ) 
	#(609 1 #liftFirstValue: 51516422 false ) 
	#(609 1 #liftFirstValue: 51516421 false ) 
	#(609 1 #liftFirstValue: 51516423 false ) 
	#(560 1 #liftFirstValue: 45744138 false ) 
	#(627 1 #liftFirstValue: 55215105 false ) 
	#(627 1 #liftFirstValue: 55215106 false ) 
	#(630 1 #liftFirstValue: 55702529 false ) 
	#(630 1 #liftFirstValue: 55702530 false ) 
	#(560 1 #liftFirstValue: 45744139 false ) 
	#(636 0 #reduceActionFor__LineTerminator___QueryOperator__1: 56407041 false ) 
	#(637 1 #reduceActionForFromOrAggregateQueryOperator1: 56455169 false ) 
	#(637 1 #reduceActionForFromOrAggregateQueryOperator2: 56455170 false ) 
	#(560 1 #liftFirstValue: 45744137 false ) 
	#(609 1 #liftFirstValue: 51516424 false ) 
	#(240 2 #liftFirstValue: 4065282 false ) 
	#(287 3 #reduceActionForAliasImportsClause1: 16120833 false ) 
	#(285 2 #reduceActionFor__Comma_Attribute__attribute____2: 15942658 false ) 
	#(354 1 #reduceActionForAttributeBlock__attributeBlock__1: 22971393 false ) 
	#(352 2 #reduceActionForArrayTypeModifier1: 22875137 false ) 
	#(353 1 #reduceActionForAttributes1: 22956033 false ) 
	#(351 2 #reduceActionForOptionStatement__option__2: 22828034 false ) 
	#(291 3 #reduceActionForNamespaceName3: 16908291 false ) 
	#(294 2 #reduceActionFor__Comma_Attribute__attribute____2: 17103874 false ) 
	#(368 2 #reduceActionForFunctionSignature1: 24283137 false ) 
	#(367 2 #reduceActionForSubSignature1: 24116225 false ) 
	#(356 4 #reduceActionForDelegateDeclaration2: 23129090 false ) 
	#(356 4 #reduceActionForDelegateDeclaration1: 23129089 false ) 
	#(342 0 #reduceActionForInterfaceBase_1: 22151169 false ) 
	#(339 0 #reduceActionForOptionStatement__option__1: 21538817 false ) 
	#(328 0 #reduceActionForInterfaceBase_1: 19958785 false ) 
	#(302 4 #reduceActionForQualifiedTypeName3: 17836035 false ) 
	#(308 0 #reduceActionFor__Comma_Attribute__attribute____1: 18246657 false ) 
	#(303 2 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments__1: 17896449 false ) 
	#(256 5 #reduceActionForAttributeBlock6: 13364230 false ) 
	#(256 5 #reduceActionForAttributeBlock4: 13364229 false ) 
	#(234 2 #liftFirstValue: 3702786 false ) 
	#(258 2 #reduceActionFor__Comma_Attribute__attribute___1: 13549569 false ) 
	#(580 2 #reduceActionForDictionaryAccessExpression1: 48445441 false ) 
	#(611 2 #reduceActionForUnaryPlusExpression1: 52123649 false ) 
	#(612 2 #reduceActionForUnaryPlusExpression1: 52212737 false ) 
	#(567 2 #reduceActionForAddressOfExpression1: 46740481 false ) 
	#(668 0 #reduceActionFor__LineTerminator___QueryOperator__1: 59567105 false ) 
	#(671 2 #reduceActionForAwaitOperatorExpression1: 66842625 false ) 
	#(648 2 #reduceActionForFromQueryOperator1: 57536513 false ) 
	#(642 0 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: 57020417 false ) 
	#(590 2 #reduceActionForObjectCreationExpression1: 49321985 false ) 
	#(606 2 #reduceActionForAnonymousObjectCreationExpression1: 50685953 false ) 
	#(624 2 #reduceActionForUnaryPlusExpression1: 54280193 false ) 
	#(238 2 #liftFirstValue: 3936258 false ) 
	#(237 2 #liftSecondValue: 3869698 false ) 
	#(241 1 #liftFirstValue: 4117505 false ) 
	#(578 2 #reduceActionForMemberAccessExpression1: 48071681 false ) 
	#(239 1 #liftFirstValue: 3999745 false ) 
	#(598 2 #reduceActionForCollectionInitializer1: 50107393 false ) 
	#(602 1 #liftFirstValue: 50307073 false ) 
	#(602 1 #liftFirstValue: 50307074 false ) 
	#(601 0 #reduceActionFor__Comma_Attribute__attribute____1: 50260993 false ) 
	#(260 4 #reduceActionForAttribute3: 13590531 false ) 
	#(264 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 14073857 false ) 
	#(265 2 #reduceActionFor__Comma_Attribute__attribute____2: 14073858 false ) 
	#(266 2 #reduceActionForAttributeList1: 14133249 false ) 
	#(263 2 #reduceActionForAttributePositionalArgumentList2: 13993986 false ) 
	#(585 0 #reduceActionFor__Comma_Attribute__attribute____1: 48859137 false ) 
	#(633 1 #liftFirstValue: 56304641 false ) 
	#(633 1 #liftFirstValue: 56304642 false ) 
	#(629 2 #reduceActionForOptionStatement__option__2: 55309314 false ) 
	#(634 2 #reduceActionForQueryExpression1: 56354817 false ) 
	#(284 2 #reduceActionFor__Comma_Attribute__attribute___1: 15942657 false ) 
	#(352 3 #reduceActionForArrayTypeModifier2: 22875138 false ) 
	#(354 2 #reduceActionForOptionStatement__option__2: 22971394 false ) 
	#(293 2 #reduceActionFor__Comma_Attribute__attribute___1: 17103873 false ) 
	#(290 2 #reduceActionForNamespaceMemberDeclaration_2: 16766978 false ) 
	#(356 5 #reduceActionForDelegateDeclaration4: 23129092 false ) 
	#(356 5 #reduceActionForDelegateDeclaration3: 23129091 false ) 
	#(369 0 #reduceActionForOptionStatement__option__1: 24476673 false ) 
	#(397 0 #reduceActionForOptionStatement__option__1: 27615233 false ) 
	#(368 3 #reduceActionForFunctionSignature7: 24283143 false ) 
	#(367 3 #reduceActionForSubSignature4: 24116228 false ) 
	#(324 1 #reduceActionForAttributeBlock__attributeBlock__1: 19446785 false ) 
	#(343 0 #reduceActionForOptionStatement__option__1: 22172673 false ) 
	#(371 0 #reduceActionForOptionStatement__option__1: 24553473 false ) 
	#(423 0 #reduceActionForOptionStatement__option__1: 31012865 false ) 
	#(410 0 #reduceActionForOptionStatement__option__1: 28925953 false ) 
	#(384 0 #reduceActionForOptionStatement__option__1: 26535937 false ) 
	#(448 0 #reduceActionForOptionStatement__option__1: 32949249 false ) 
	#(453 0 #reduceActionForOptionStatement__option__1: 33502209 false ) 
	#(406 0 #reduceActionForOptionStatement__option__1: 28446721 false ) 
	#(329 0 #reduceActionForOptionStatement__option__1: 19987457 false ) 
	#(335 0 #reduceActionForOptionStatement__option__1: 20884481 false ) 
	#(302 5 #reduceActionForQualifiedTypeName4: 17836036 false ) 
	#(306 2 #reduceActionForAttributeList1: 18206721 false ) 
	#(305 4 #reduceActionForTypeArguments1: 18112513 false ) 
	#(303 3 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments__2: 17896450 false ) 
	#(260 5 #reduceActionForAttribute5: 13590533 false ) 
	#(648 3 #reduceActionForFromQueryOperator2: 57536514 false ) 
	#(640 2 #reduceActionForCollectionRangeVariableDeclarationList1: 56938497 false ) 
	#(573 0 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: 47232001 false ) 
	#(570 1 #liftFirstValue: 47098881 false ) 
	#(570 1 #liftFirstValue: 47098882 false ) 
	#(355 1 #reduceActionForArrayNameModifier1: 23038977 false ) 
	#(355 1 #reduceActionForArrayNameModifier2: 23038978 false ) 
	#(590 3 #reduceActionForObjectCreationExpression2: 49321986 false ) 
	#(591 1 #liftFirstValue: 49544193 false ) 
	#(591 1 #liftFirstValue: 49544194 false ) 
	#(241 2 #liftFirstValue: 4117506 false ) 
	#(269 3 #reduceActionForVariablePropertyInitializer1: 14270465 false ) 
	#(564 3 #reduceActionForParenthesizedExpression1: 46456833 false ) 
	#(239 2 #liftSecondValue: 3999746 false ) 
	#(598 3 #reduceActionForCollectionInitializer2: 50107394 false ) 
	#(599 2 #reduceActionForAttributeList1: 50203649 false ) 
	#(262 3 #reduceActionForAttributeArguments2: 13811714 false ) 
	#(264 2 #reduceActionFor__Comma_Attribute__attribute___1: 14073858 false ) 
	#(268 2 #reduceActionFor__Comma_Attribute__attribute____2: 14212098 false ) 
	#(580 3 #reduceActionForDictionaryAccessExpression2: 48445442 false ) 
	#(623 3 #reduceActionForConcatenationOperatorExpression1: 54140929 false ) 
	#(615 3 #reduceActionForConcatenationOperatorExpression1: 52574209 false ) 
	#(613 3 #reduceActionForConcatenationOperatorExpression1: 52302849 false ) 
	#(614 3 #reduceActionForConcatenationOperatorExpression1: 52436993 false ) 
	#(617 3 #reduceActionForConcatenationOperatorExpression1: 52826113 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53371909 false ) 
	#(626 3 #reduceActionForConcatenationOperatorExpression1: 54936577 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53371913 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53371907 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53371905 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53371911 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53371915 false ) 
	#(626 3 #reduceActionForConcatenationOperatorExpression1: 54936579 false ) 
	#(624 3 #reduceActionForConcatenationOperatorExpression1: 54280194 false ) 
	#(625 3 #reduceActionForConcatenationOperatorExpression1: 54680577 false ) 
	#(577 3 #reduceActionForConcatenationOperatorExpression1: 47710209 false ) 
	#(577 3 #reduceActionForConcatenationOperatorExpression1: 47710211 false ) 
	#(622 3 #reduceActionForConcatenationOperatorExpression1: 54007809 false ) 
	#(619 3 #reduceActionForConcatenationOperatorExpression1: 53103617 false ) 
	#(624 3 #reduceActionForConcatenationOperatorExpression1: 54280196 false ) 
	#(625 3 #reduceActionForConcatenationOperatorExpression1: 54680579 false ) 
	#(624 3 #reduceActionForConcatenationOperatorExpression1: 54280198 false ) 
	#(618 3 #reduceActionForConcatenationOperatorExpression1: 52962305 false ) 
	#(620 3 #reduceActionForConcatenationOperatorExpression1: 53237761 false ) 
	#(581 3 #reduceActionForInvocationExpression1: 48558081 false ) 
	#(582 1 #reduceActionForArgumentList1: 48676865 false ) 
	#(583 1 #reduceActionForAttributes1: 48805889 false ) 
	#(582 1 #reduceActionForArgumentList3: 48676867 false ) 
	#(578 3 #reduceActionForMemberAccessExpression3: 48071683 false ) 
	#(476 0 #reduceActionForOptionStatement__option__1: 36723713 false ) 
	#(628 3 #reduceActionForSingleLineLambda1: 55285761 false ) 
	#(483 1 #liftFirstValue: 37150723 false ) 
	#(483 1 #liftFirstValue: 37150722 false ) 
	#(545 1 #reduceActionForEndStatement1: 44723201 false ) 
	#(536 1 #reduceActionForResumeStatement1: 43987969 false ) 
	#(546 1 #reduceActionForReturnStatement1: 44776449 false ) 
	#(483 1 #liftFirstValue: 37150721 false ) 
	#(544 1 #reduceActionForStopStatement1: 44666881 false ) 
	#(531 1 #reduceActionForThrowStatement1: 43359233 false ) 
	#(478 1 #liftFirstValue: 36856834 false ) 
	#(478 1 #liftFirstValue: 36856833 false ) 
	#(628 3 #reduceActionForSingleLineLambda4: 55285764 false ) 
	#(473 1 #liftFirstValue: 36263937 false ) 
	#(473 1 #liftFirstValue: 36263938 false ) 
	#(473 1 #liftFirstValue: 36263939 false ) 
	#(473 1 #liftFirstValue: 36263940 false ) 
	#(473 1 #liftFirstValue: 36263941 false ) 
	#(486 1 #liftFirstValue: 37541889 false ) 
	#(486 1 #liftFirstValue: 37541890 false ) 
	#(486 1 #liftFirstValue: 37541891 false ) 
	#(473 1 #liftFirstValue: 36263942 false ) 
	#(490 1 #liftFirstValue: 38064129 false ) 
	#(490 1 #liftFirstValue: 38064130 false ) 
	#(490 1 #liftFirstValue: 38064131 false ) 
	#(473 1 #liftFirstValue: 36263943 false ) 
	#(473 1 #liftFirstValue: 36263944 false ) 
	#(496 1 #liftFirstValue: 38885377 false ) 
	#(497 1 #liftFirstValue: 38955009 false ) 
	#(497 1 #liftFirstValue: 38955010 false ) 
	#(496 1 #liftFirstValue: 38885378 false ) 
	#(473 1 #liftFirstValue: 36263945 false ) 
	#(513 1 #liftFirstValue: 40745985 false ) 
	#(513 1 #liftFirstValue: 40745986 false ) 
	#(515 1 #liftFirstValue: 41021441 false ) 
	#(515 1 #liftFirstValue: 41021442 false ) 
	#(513 1 #liftFirstValue: 40745987 false ) 
	#(513 1 #liftFirstValue: 40745988 false ) 
	#(473 1 #liftFirstValue: 36263946 false ) 
	#(525 1 #liftFirstValue: 42691585 false ) 
	#(526 1 #liftFirstValue: 42787842 false ) 
	#(526 1 #liftFirstValue: 42787841 false ) 
	#(525 1 #liftFirstValue: 42691586 false ) 
	#(532 1 #liftFirstValue: 43439105 false ) 
	#(532 1 #liftFirstValue: 43439106 false ) 
	#(532 1 #liftFirstValue: 43439107 false ) 
	#(473 1 #liftFirstValue: 36263947 false ) 
	#(538 1 #liftFirstValue: 44124161 false ) 
	#(538 1 #liftFirstValue: 44124162 false ) 
	#(538 1 #liftFirstValue: 44124163 false ) 
	#(538 1 #liftFirstValue: 44124164 false ) 
	#(538 1 #liftFirstValue: 44124165 false ) 
	#(538 1 #liftFirstValue: 44124166 false ) 
	#(473 1 #liftFirstValue: 36263948 false ) 
	#(547 1 #liftFirstValue: 44859393 false ) 
	#(547 1 #liftFirstValue: 44859394 false ) 
	#(473 1 #liftFirstValue: 36263949 false ) 
	#(473 1 #liftFirstValue: 36263950 false ) 
	#(495 1 #reduceActionForInvocationStatement1: 38796289 false ) 
	#(656 1 #liftFirstValue: 58287105 false ) 
	#(636 2 #reduceActionFor__LineTerminator___QueryOperator__2: 56407042 false ) 
	#(635 1 #reduceActionForAttributes1: 56407041 false ) 
	#(638 1 #reduceActionForQueryOperator10: 56546314 false ) 
	#(638 1 #reduceActionForFromOrAggregateQueryOperator1: 56546305 false ) 
	#(639 1 #reduceActionForAttributes1: 56847361 false ) 
	#(638 1 #reduceActionForQueryOperator8: 56546312 false ) 
	#(638 1 #reduceActionForQueryOperator3: 56546307 false ) 
	#(638 1 #reduceActionForQueryOperator4: 56546308 false ) 
	#(638 1 #reduceActionForQueryOperator5: 56546309 false ) 
	#(638 1 #reduceActionForQueryOperator7: 56546311 false ) 
	#(638 1 #reduceActionForQueryOperator6: 56546310 false ) 
	#(638 1 #reduceActionForQueryOperator9: 56546313 false ) 
	#(638 1 #reduceActionForFromOrAggregateQueryOperator2: 56546306 false ) 
	#(639 1 #reduceActionForJoinOrGroupJoinQueryOperator2: 56847362 false ) 
	#(369 1 #reduceActionForAttributes1: 24476674 false ) 
	#(368 4 #reduceActionForFunctionSignature3: 24283139 false ) 
	#(395 0 #reduceActionFor__Comma_Attribute__attribute____1: 27546625 false ) 
	#(367 4 #reduceActionForSubSignature2: 24116226 false ) 
	#(325 2 #reduceActionForEnumMemberDeclaration2: 19587074 false ) 
	#(325 2 #reduceActionForEnumMemberDeclaration1: 19587073 false ) 
	#(324 2 #reduceActionForOptionStatement__option__2: 19446786 false ) 
	#(461 0 #reduceActionForOptionStatement__option__1: 34304001 false ) 
	#(412 0 #reduceActionForOptionStatement__option__1: 29148161 false ) 
	#(374 0 #reduceActionForOptionStatement__option__1: 25091073 false ) 
	#(342 2 #reduceActionForInterfaceBase_2: 22151170 false ) 
	#(248 1 #liftFirstValue: 12794881 false ) 
	#(248 1 #liftFirstValue: 12794882 false ) 
	#(247 1 #reduceActionForTypeParameter1: 12685313 false ) 
	#(246 0 #reduceActionFor__Comma_Attribute__attribute____1: 12613633 false ) 
	#(463 1 #liftFirstValue: 34609154 false ) 
	#(431 1 #liftFirstValue: 31596550 false ) 
	#(463 1 #liftFirstValue: 34609157 false ) 
	#(464 1 #liftFirstValue: 34731010 false ) 
	#(462 1 #liftFirstValue: 34446341 false ) 
	#(462 1 #liftFirstValue: 34446343 false ) 
	#(462 1 #liftFirstValue: 34446340 false ) 
	#(462 1 #liftFirstValue: 34446342 false ) 
	#(463 1 #liftFirstValue: 34609155 false ) 
	#(431 1 #liftFirstValue: 31596548 false ) 
	#(462 1 #liftFirstValue: 34446338 false ) 
	#(431 1 #liftFirstValue: 31596546 false ) 
	#(462 1 #liftFirstValue: 34446339 false ) 
	#(431 1 #liftFirstValue: 31596547 false ) 
	#(431 1 #liftFirstValue: 31596549 false ) 
	#(463 1 #liftFirstValue: 34609156 false ) 
	#(462 1 #liftFirstValue: 34446337 false ) 
	#(431 1 #liftFirstValue: 31596545 false ) 
	#(340 1 #liftFirstValue: 21685249 false ) 
	#(339 2 #reduceActionForOptionStatement__option__2: 21538818 false ) 
	#(340 1 #liftFirstValue: 21685253 false ) 
	#(363 1 #liftFirstValue: 23704577 false ) 
	#(365 1 #liftFirstValue: 23868417 false ) 
	#(365 1 #liftFirstValue: 23868418 false ) 
	#(365 1 #liftFirstValue: 23868419 false ) 
	#(365 1 #liftFirstValue: 23868420 false ) 
	#(363 1 #liftFirstValue: 23704578 false ) 
	#(382 1 #liftFirstValue: 26395649 false ) 
	#(382 1 #liftFirstValue: 26395650 false ) 
	#(340 1 #liftFirstValue: 21685255 false ) 
	#(340 1 #liftFirstValue: 21685252 false ) 
	#(408 1 #liftFirstValue: 28773377 false ) 
	#(408 1 #liftFirstValue: 28773378 false ) 
	#(340 1 #liftFirstValue: 21685251 false ) 
	#(340 1 #liftFirstValue: 21685250 false ) 
	#(430 1 #reduceActionForAttributeBlock__attributeBlock__1: 31486977 false ) 
	#(340 1 #liftFirstValue: 21685254 false ) 
	#(445 1 #liftFirstValue: 32546817 false ) 
	#(445 1 #liftFirstValue: 32546818 false ) 
	#(445 1 #liftFirstValue: 32546819 false ) 
	#(463 1 #liftFirstValue: 34609153 false ) 
	#(464 1 #liftFirstValue: 34731009 false ) 
	#(451 1 #reduceActionForAttributeBlock__attributeBlock__1: 33283073 false ) 
	#(328 2 #reduceActionForInterfaceBase_2: 19958786 false ) 
	#(470 0 #reduceActionForOptionStatement__option__1: 35570689 false ) 
	#(308 2 #reduceActionFor__Comma_Attribute__attribute____2: 18246658 false ) 
	#(260 6 #reduceActionForAttribute6: 13590534 false ) 
	#(643 3 #reduceActionForCollectionRangeVariableDeclaration1: 57074689 false ) 
	#(668 2 #reduceActionFor__LineTerminator___QueryOperator__2: 59567106 false ) 
	#(642 2 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___2: 57020418 false ) 
	#(571 2 #reduceActionForQualifiedOpenTypeName1: 47167489 false ) 
	#(569 4 #reduceActionForGetTypeExpression1: 46979073 false ) 
	#(596 1 #reduceActionForFieldInitializer1: 49878017 false ) 
	#(595 0 #reduceActionFor__Comma_Attribute__attribute____1: 49828865 false ) 
	#(597 2 #reduceActionForObjectCollectionInitializer1: 50003969 false ) 
	#(590 4 #reduceActionForObjectCreationExpression3: 49321987 false ) 
	#(443 0 #reduceActionFor__Comma_Attribute__attribute____1: 32395265 false ) 
	#(444 1 #liftFirstValue: 32428033 false ) 
	#(604 4 #reduceActionForArrayCreationExpression1: 50462721 false ) 
	#(576 4 #reduceActionForTypeOfIsExpression1: 47574017 false ) 
	#(601 2 #reduceActionFor__Comma_Attribute__attribute____2: 50260994 false ) 
	#(267 2 #reduceActionFor__Comma_Attribute__attribute___1: 14212097 false ) 
	#(623 4 #reduceActionForConcatenationOperatorExpression2: 54140930 false ) 
	#(615 4 #reduceActionForConcatenationOperatorExpression2: 52574210 false ) 
	#(613 4 #reduceActionForConcatenationOperatorExpression2: 52302850 false ) 
	#(614 4 #reduceActionForConcatenationOperatorExpression2: 52436994 false ) 
	#(617 4 #reduceActionForConcatenationOperatorExpression2: 52826114 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53371910 false ) 
	#(626 4 #reduceActionForConcatenationOperatorExpression2: 54936578 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53371914 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53371908 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53371906 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53371912 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53371916 false ) 
	#(626 4 #reduceActionForConcatenationOperatorExpression2: 54936580 false ) 
	#(624 4 #reduceActionForConcatenationOperatorExpression2: 54280195 false ) 
	#(625 4 #reduceActionForConcatenationOperatorExpression2: 54680578 false ) 
	#(577 4 #reduceActionForConcatenationOperatorExpression2: 47710210 false ) 
	#(577 4 #reduceActionForConcatenationOperatorExpression2: 47710212 false ) 
	#(622 4 #reduceActionForConcatenationOperatorExpression2: 54007810 false ) 
	#(619 4 #reduceActionForConcatenationOperatorExpression2: 53103618 false ) 
	#(624 4 #reduceActionForConcatenationOperatorExpression2: 54280197 false ) 
	#(625 4 #reduceActionForConcatenationOperatorExpression2: 54680580 false ) 
	#(624 4 #reduceActionForConcatenationOperatorExpression2: 54280199 false ) 
	#(618 4 #reduceActionForConcatenationOperatorExpression2: 52962306 false ) 
	#(620 4 #reduceActionForConcatenationOperatorExpression2: 53237762 false ) 
	#(583 2 #reduceActionForAttributePositionalArgumentList2: 48805890 false ) 
	#(581 4 #reduceActionForInvocationExpression2: 48558082 false ) 
	#(584 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 48859137 false ) 
	#(585 2 #reduceActionFor__Comma_Attribute__attribute____2: 48859138 false ) 
	#(607 4 #reduceActionForCastExpression4: 50822148 false ) 
	#(474 1 #reduceActionForAttributes1: 36711425 false ) 
	#(495 2 #reduceActionForInvocationStatement2: 38796290 false ) 
	#(543 1 #liftFirstValue: 44616705 false ) 
	#(543 1 #liftFirstValue: 44616706 false ) 
	#(543 1 #liftFirstValue: 44616707 false ) 
	#(542 2 #reduceActionForContinueStatement1: 44522497 false ) 
	#(518 1 #liftFirstValue: 41419778 false ) 
	#(518 1 #liftFirstValue: 41419777 false ) 
	#(553 2 #reduceActionForEraseStatement1: 45195265 false ) 
	#(556 0 #reduceActionFor__Comma_Attribute__attribute____1: 45315073 false ) 
	#(533 2 #reduceActionForErrorStatement1: 43541505 false ) 
	#(541 1 #liftFirstValue: 44422145 false ) 
	#(541 1 #liftFirstValue: 44422146 false ) 
	#(541 1 #liftFirstValue: 44422150 false ) 
	#(541 1 #liftFirstValue: 44422151 false ) 
	#(541 1 #liftFirstValue: 44422148 false ) 
	#(541 1 #liftFirstValue: 44422149 false ) 
	#(541 1 #liftFirstValue: 44422152 false ) 
	#(541 1 #liftFirstValue: 44422147 false ) 
	#(540 2 #reduceActionForExitStatement1: 44349441 false ) 
	#(520 1 #reduceActionForLoopControlVariable1: 42009601 false ) 
	#(311 0 #reduceActionForIdentifierModifiers1: 18426881 false ) 
	#(520 1 #liftFirstValue: 42009603 false ) 
	#(539 2 #reduceActionForGoToStatement1: 44275713 false ) 
	#(487 2 #reduceActionForRaiseEventStatement1: 37647361 false ) 
	#(548 2 #reduceActionForRedimStatement1: 44933121 false ) 
	#(551 0 #reduceActionFor__Comma_Attribute__attribute____1: 45074433 false ) 
	#(537 1 #liftFirstValue: 44073985 false ) 
	#(537 1 #liftFirstValue: 44073986 false ) 
	#(536 2 #reduceActionForResumeStatement2: 43987970 false ) 
	#(546 2 #reduceActionForReturnStatement2: 44776450 false ) 
	#(531 2 #reduceActionForThrowStatement2: 43359234 false ) 
	#(558 1 #reduceActionForAttributes1: 45505537 false ) 
	#(434 0 #reduceActionFor__Comma_Attribute__attribute____1: 31792129 false ) 
	#(435 1 #reduceActionForVariableDeclarator2: 31840258 false ) 
	#(438 0 #reduceActionFor__Comma_Attribute__attribute____1: 32115713 false ) 
	#(558 1 #reduceActionForUsingResources2: 45505538 false ) 
	#(559 2 #reduceActionForYieldStatement1: 45643777 false ) 
	#(477 2 #reduceActionForLabelDeclarationStatement1: 36775937 false ) 
	#(482 2 #reduceActionForLocalDeclarationStatement1: 37055489 false ) 
	#(493 1 #liftFirstValue: 38462471 false ) 
	#(493 1 #liftFirstValue: 38462466 false ) 
	#(493 1 #liftFirstValue: 38462469 false ) 
	#(493 1 #liftFirstValue: 38462470 false ) 
	#(493 1 #liftFirstValue: 38462467 false ) 
	#(493 1 #liftFirstValue: 38462472 false ) 
	#(493 1 #liftFirstValue: 38462473 false ) 
	#(493 1 #liftFirstValue: 38462468 false ) 
	#(493 1 #liftFirstValue: 38462465 false ) 
	#(646 0 #reduceActionFor__Comma_Attribute__attribute____1: 57330689 false ) 
	#(654 2 #reduceActionForLetQueryOperator1: 58064897 false ) 
	#(655 2 #reduceActionForLetQueryOperator1: 58171393 false ) 
	#(658 2 #reduceActionForPartitionQueryOperator5: 58438661 false ) 
	#(658 2 #reduceActionForPartitionQueryOperator1: 58438657 false ) 
	#(657 2 #liftSecondValue: 58350593 false ) 
	#(635 2 #reduceActionFor__LineTerminator___QueryOperator_2: 56407042 false ) 
	#(289 7 #reduceActionForNamespaceDeclaration4: 16642052 false ) 
	#(289 7 #reduceActionForNamespaceDeclaration3: 16642051 false ) 
	#(289 7 #reduceActionForNamespaceDeclaration2: 16642050 false ) 
	#(289 7 #reduceActionForNamespaceDeclaration1: 16642049 false ) 
	#(368 5 #reduceActionForFunctionSignature2: 24283138 false ) 
	#(368 5 #reduceActionForFunctionSignature5: 24283141 false ) 
	#(393 2 #reduceActionForAttributeList1: 27503617 false ) 
	#(398 1 #liftFirstValue: 27773954 false ) 
	#(398 1 #liftFirstValue: 27773953 false ) 
	#(398 1 #liftFirstValue: 27773955 false ) 
	#(398 1 #liftFirstValue: 27773956 false ) 
	#(397 2 #reduceActionForOptionStatement__option__2: 27615234 false ) 
	#(396 2 #reduceActionForParameter1: 27586561 false ) 
	#(368 5 #reduceActionForFunctionSignature9: 24283145 false ) 
	#(367 5 #reduceActionForSubSignature3: 24116227 false ) 
	#(367 5 #reduceActionForSubSignature5: 24116229 false ) 
	#(325 3 #reduceActionForEnumMemberDeclaration6: 19587078 false ) 
	#(325 3 #reduceActionForEnumMemberDeclaration5: 19587077 false ) 
	#(347 0 #reduceActionFor__Comma_Attribute__attribute____1: 22496257 false ) 
	#(348 1 #liftFirstValue: 22542337 false ) 
	#(343 2 #reduceActionForOptionStatement__option__2: 22172674 false ) 
	#(348 1 #liftFirstValue: 22542339 false ) 
	#(364 1 #liftFirstValue: 23793665 false ) 
	#(366 1 #liftFirstValue: 24014849 false ) 
	#(366 1 #liftFirstValue: 24014850 false ) 
	#(348 1 #liftFirstValue: 22542338 false ) 
	#(348 1 #liftFirstValue: 22542340 false ) 
	#(247 2 #reduceActionForTypeParameter2: 12685314 false ) 
	#(247 2 #reduceActionForTypeParameter3: 12685315 false ) 
	#(378 1 #liftFirstValue: 25992202 false ) 
	#(378 1 #liftFirstValue: 25992201 false ) 
	#(379 1 #liftFirstValue: 26167297 false ) 
	#(378 1 #liftFirstValue: 25992197 false ) 
	#(378 1 #liftFirstValue: 25992199 false ) 
	#(378 1 #liftFirstValue: 25992196 false ) 
	#(378 1 #liftFirstValue: 25992198 false ) 
	#(378 1 #liftFirstValue: 25992200 false ) 
	#(378 1 #liftFirstValue: 25992194 false ) 
	#(378 1 #liftFirstValue: 25992195 false ) 
	#(378 1 #liftFirstValue: 25992193 false ) 
	#(371 2 #reduceActionForOptionStatement__option__2: 24553474 false ) 
	#(389 1 #liftFirstValue: 27214851 false ) 
	#(389 1 #liftFirstValue: 27214850 false ) 
	#(389 1 #liftFirstValue: 27214849 false ) 
	#(384 2 #reduceActionForOptionStatement__option__2: 26535938 false ) 
	#(407 1 #liftFirstValue: 28708866 false ) 
	#(407 1 #liftFirstValue: 28708865 false ) 
	#(406 2 #reduceActionForOptionStatement__option__2: 28446722 false ) 
	#(414 1 #liftFirstValue: 29470722 false ) 
	#(414 1 #liftFirstValue: 29470723 false ) 
	#(414 1 #liftFirstValue: 29470721 false ) 
	#(410 2 #reduceActionForOptionStatement__option__2: 28925954 false ) 
	#(424 1 #liftFirstValue: 31143938 false ) 
	#(424 1 #liftFirstValue: 31143937 false ) 
	#(423 2 #reduceActionForOptionStatement__option__2: 31012866 false ) 
	#(430 2 #reduceActionForOptionStatement__option__2: 31486978 false ) 
	#(448 2 #reduceActionForOptionStatement__option__2: 32949250 false ) 
	#(451 2 #reduceActionForOptionStatement__option__2: 33283074 false ) 
	#(453 2 #reduceActionForOptionStatement__option__2: 33502210 false ) 
	#(331 3 #reduceActionForClassBase2: 20232194 false ) 
	#(331 3 #reduceActionForClassBase1: 20232193 false ) 
	#(317 0 #reduceActionFor__Comma_Attribute__attribute____1: 18820097 false ) 
	#(332 1 #liftFirstValue: 20359169 false ) 
	#(329 2 #reduceActionForOptionStatement__option__2: 19987458 false ) 
	#(332 1 #liftFirstValue: 20359173 false ) 
	#(332 1 #liftFirstValue: 20359175 false ) 
	#(332 1 #liftFirstValue: 20359170 false ) 
	#(332 1 #liftFirstValue: 20359172 false ) 
	#(332 1 #liftFirstValue: 20359171 false ) 
	#(332 1 #liftFirstValue: 20359174 false ) 
	#(332 1 #liftFirstValue: 20359176 false ) 
	#(337 1 #liftFirstValue: 21098497 false ) 
	#(335 2 #reduceActionForOptionStatement__option__2: 20884482 false ) 
	#(337 1 #liftFirstValue: 21098501 false ) 
	#(337 1 #liftFirstValue: 21098503 false ) 
	#(337 1 #liftFirstValue: 21098500 false ) 
	#(337 1 #liftFirstValue: 21098499 false ) 
	#(337 1 #liftFirstValue: 21098498 false ) 
	#(337 1 #liftFirstValue: 21098502 false ) 
	#(337 1 #liftFirstValue: 21098504 false ) 
	#(307 2 #reduceActionFor__Comma_Attribute__attribute___1: 18246657 false ) 
	#(643 4 #reduceActionForCollectionRangeVariableDeclaration2: 57074690 false ) 
	#(667 5 #reduceActionForAggregateQueryOperator1: 59453441 false ) 
	#(641 2 #reduceActionFor__Comma_CollectionRangeVariableDeclaration__1: 57020417 false ) 
	#(573 2 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArityList___2: 47232002 false ) 
	#(571 3 #reduceActionForQualifiedOpenTypeName2: 47167490 false ) 
	#(596 2 #reduceActionForFieldInitializer3: 49878019 false ) 
	#(592 4 #reduceActionForObjectMemberInitializer1: 49653761 false ) 
	#(593 2 #reduceActionForAttributeList1: 49769473 false ) 
	#(590 5 #reduceActionForObjectCreationExpression4: 49321988 false ) 
	#(440 3 #reduceActionForArraySizeInitializationModifier1: 32253953 false ) 
	#(441 2 #reduceActionForAttributeList1: 32364545 false ) 
	#(590 5 #reduceActionForObjectCreationExpression5: 49321989 false ) 
	#(576 5 #reduceActionForTypeOfIsExpression2: 47574018 false ) 
	#(566 5 #reduceActionForSimpleNameExpression2: 46608386 false ) 
	#(600 2 #reduceActionFor__Comma_Attribute__attribute___1: 50260993 false ) 
	#(588 0 #reduceActionForInterfaceBase_1: 49009665 false ) 
	#(582 3 #reduceActionForArgumentList2: 48676866 false ) 
	#(584 2 #reduceActionFor__Comma_Attribute__attribute___1: 48859138 false ) 
	#(480 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 36971521 false ) 
	#(475 1 #nil 36723713 false ) 
	#(479 1 #liftFirstValue: 36913153 false ) 
	#(476 2 #reduceActionForOptionStatement__option__2: 36723714 false ) 
	#(481 1 #reduceActionFor_______statementSeparator__Statement__statement_____1: 36971521 false ) 
	#(479 1 #reduceActionForStatements2: 36913154 false ) 
	#(628 5 #reduceActionForSingleLineLambda2: 55285762 false ) 
	#(554 2 #reduceActionForAttributeList1: 45272065 false ) 
	#(313 1 #liftFirstValue: 18583553 false ) 
	#(311 1 #reduceActionForIdentifierModifiers3: 18426883 false ) 
	#(311 1 #reduceActionForIdentifierModifiers2: 18426882 false ) 
	#(534 3 #reduceActionForOnErrorStatement1: 43620353 false ) 
	#(535 1 #liftFirstValue: 43718659 false ) 
	#(548 3 #reduceActionForRedimStatement2: 44933122 false ) 
	#(549 2 #reduceActionForAttributeList1: 45034497 false ) 
	#(552 2 #reduceActionForRedimClause1: 45112321 false ) 
	#(505 0 #reduceActionForOptionStatement__option__1: 39961601 false ) 
	#(528 0 #reduceActionForOptionStatement__option__1: 42938369 false ) 
	#(439 2 #reduceActionForVariableIdentifier1: 32175105 false ) 
	#(432 2 #reduceActionForAttributeList1: 31734785 false ) 
	#(436 2 #reduceActionForAttributeList1: 32048129 false ) 
	#(628 5 #reduceActionForSingleLineLambda5: 55285765 false ) 
	#(491 3 #reduceActionForRegularAssignmentStatement1: 38190081 false ) 
	#(492 3 #reduceActionForRegularAssignmentStatement1: 38303745 false ) 
	#(666 0 #nil 59350017 false ) 
	#(644 2 #reduceActionForAttributeList1: 57234433 false ) 
	#(654 3 #reduceActionForLetQueryOperator2: 58064898 false ) 
	#(663 1 #reduceActionForOrderExpression1: 59010049 false ) 
	#(659 3 #reduceActionForOrderByQueryOperator1: 58795009 false ) 
	#(662 0 #reduceActionFor__Comma_Attribute__attribute____1: 58961921 false ) 
	#(655 3 #reduceActionForLetQueryOperator2: 58171394 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator7: 58438663 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator6: 58438662 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator3: 58438659 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator2: 58438658 false ) 
	#(657 3 #reduceActionForWhereQueryOperator2: 58350594 false ) 
	#(396 3 #reduceActionForParameter5: 27586565 false ) 
	#(395 2 #reduceActionFor__Comma_Attribute__attribute____2: 27546626 false ) 
	#(399 2 #reduceActionForParameterIdentifier1: 27852801 false ) 
	#(368 6 #reduceActionForFunctionSignature8: 24283144 false ) 
	#(368 6 #reduceActionForFunctionSignature11: 24283147 false ) 
	#(367 6 #reduceActionForSubSignature6: 24116230 false ) 
	#(325 4 #reduceActionForEnumMemberDeclaration4: 19587076 false ) 
	#(325 4 #reduceActionForEnumMemberDeclaration3: 19587075 false ) 
	#(322 8 #reduceActionForEnumDeclaration4: 19241988 false ) 
	#(322 8 #reduceActionForEnumDeclaration3: 19241987 false ) 
	#(322 8 #reduceActionForEnumDeclaration2: 19241986 false ) 
	#(322 8 #reduceActionForEnumDeclaration1: 19241985 false ) 
	#(345 2 #reduceActionForAttributeList1: 22446081 false ) 
	#(344 3 #reduceActionForInterfaceBase2: 22328322 false ) 
	#(344 3 #reduceActionForInterfaceBase1: 22328321 false ) 
	#(380 1 #liftFirstValue: 26258434 false ) 
	#(380 1 #liftFirstValue: 26258433 false ) 
	#(374 2 #reduceActionForOptionStatement__option__2: 25091074 false ) 
	#(415 1 #liftFirstValue: 29546497 false ) 
	#(412 2 #reduceActionForOptionStatement__option__2: 29148162 false ) 
	#(465 1 #liftFirstValue: 34812931 false ) 
	#(465 1 #liftFirstValue: 34812930 false ) 
	#(465 1 #liftFirstValue: 34812932 false ) 
	#(465 1 #liftFirstValue: 34812929 false ) 
	#(465 1 #liftFirstValue: 34812933 false ) 
	#(461 2 #reduceActionForOptionStatement__option__2: 34304002 false ) 
	#(253 1 #reduceActionForConstraint4: 13075460 false ) 
	#(253 1 #reduceActionForConstraint2: 13075458 false ) 
	#(253 1 #reduceActionForConstraint3: 13075459 false ) 
	#(249 2 #reduceActionForTypeParameterConstraints1: 12838913 false ) 
	#(253 1 #reduceActionForConstraint1: 13075457 false ) 
	#(244 5 #reduceActionForTypeParameterList1: 12535809 false ) 
	#(246 2 #reduceActionFor__Comma_Attribute__attribute____2: 12613634 false ) 
	#(247 3 #reduceActionForTypeParameter4: 12685316 false ) 
	#(338 8 #reduceActionForModuleDeclaration4: 21379076 false ) 
	#(338 8 #reduceActionForModuleDeclaration3: 21379075 false ) 
	#(381 1 #reduceActionForHandlesOrImplements2: 26323970 false ) 
	#(381 1 #reduceActionForHandlesOrImplements1: 26323969 false ) 
	#(390 1 #liftFirstValue: 27301889 false ) 
	#(390 1 #liftFirstValue: 27301891 false ) 
	#(390 1 #liftFirstValue: 27301890 false ) 
	#(413 0 #reduceActionForParametersOrType1: 29339649 false ) 
	#(427 0 #reduceActionFor__Comma_Attribute__attribute____1: 31263745 false ) 
	#(429 3 #reduceActionForVariableMemberDeclaration2: 31441922 false ) 
	#(429 3 #reduceActionForVariableMemberDeclaration1: 31441921 false ) 
	#(446 2 #reduceActionForPropertySignature1: 32702465 false ) 
	#(450 3 #reduceActionForMustOverridePropertyMemberDeclaration2: 33225730 false ) 
	#(450 3 #reduceActionForMustOverridePropertyMemberDeclaration1: 33225729 false ) 
	#(455 0 #reduceActionFor__Equals_Expression__value___1: 33698817 false ) 
	#(338 8 #reduceActionForModuleDeclaration2: 21379074 false ) 
	#(338 8 #reduceActionForModuleDeclaration1: 21379073 false ) 
	#(315 2 #reduceActionForAttributeList1: 18767873 false ) 
	#(314 3 #reduceActionForInterfaceBase2: 18638850 false ) 
	#(314 3 #reduceActionForInterfaceBase1: 18638849 false ) 
	#(471 1 #liftFirstValue: 35913734 false ) 
	#(471 1 #liftFirstValue: 35913731 false ) 
	#(471 1 #liftFirstValue: 35913729 false ) 
	#(471 1 #liftFirstValue: 35913732 false ) 
	#(471 1 #liftFirstValue: 35913730 false ) 
	#(471 1 #liftFirstValue: 35913733 false ) 
	#(470 2 #reduceActionForOptionStatement__option__2: 35570690 false ) 
	#(667 6 #reduceActionForAggregateQueryOperator5: 59453445 false ) 
	#(643 5 #reduceActionForCollectionRangeVariableDeclaration3: 57074691 false ) 
	#(667 6 #reduceActionForAggregateQueryOperator2: 59453442 false ) 
	#(667 6 #reduceActionForAggregateQueryOperator3: 59453443 false ) 
	#(607 6 #reduceActionForCastExpression3: 50822147 false ) 
	#(607 6 #reduceActionForCastExpression3: 50822145 false ) 
	#(571 4 #reduceActionForQualifiedOpenTypeName3: 47167491 false ) 
	#(574 3 #reduceActionForTypeArityList1: 47448065 false ) 
	#(575 1 #reduceActionForAttributes1: 47536129 false ) 
	#(572 2 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArityList__1: 47232001 false ) 
	#(670 6 #reduceActionForConditionalExpression2: 60034050 false ) 
	#(595 2 #reduceActionFor__Comma_Attribute__attribute____2: 49828866 false ) 
	#(444 3 #reduceActionForBound2: 32428034 false ) 
	#(440 4 #reduceActionForArraySizeInitializationModifier2: 32253954 false ) 
	#(443 2 #reduceActionFor__Comma_Attribute__attribute____2: 32395266 false ) 
	#(590 6 #reduceActionForObjectCreationExpression6: 49321990 false ) 
	#(607 6 #reduceActionForCastExpression3: 50822146 false ) 
	#(578 6 #reduceActionForMemberAccessExpression2: 48071682 false ) 
	#(586 4 #reduceActionForNamedArgumentList1: 48901121 false ) 
	#(631 6 #reduceActionForMultiLineFunctionLambda1: 55782401 false ) 
	#(480 2 #reduceActionFor__Comma_Attribute__attribute___1: 36971522 false ) 
	#(479 2 #reduceActionForStatements3: 36913155 false ) 
	#(475 2 #liftFirstValue: 36723714 false ) 
	#(481 2 #reduceActionFor__Comma_Attribute__attribute____2: 36971522 false ) 
	#(628 6 #reduceActionForSingleLineLambda3: 55285763 false ) 
	#(488 4 #reduceActionForAddHandlerStatement1: 37811201 false ) 
	#(516 4 #reduceActionForDoTopLoopStatement1: 41099265 false ) 
	#(556 2 #reduceActionFor__Comma_Attribute__attribute____2: 45315074 false ) 
	#(311 2 #reduceActionForIdentifierModifiers4: 18426884 false ) 
	#(499 0 #reduceActionForOptionStatement__option__1: 39182337 false ) 
	#(502 4 #reduceActionForLineIfThenStatement1: 39590913 false ) 
	#(535 2 #reduceActionForErrorClause2: 43718658 false ) 
	#(535 2 #reduceActionForErrorClause4: 43718660 false ) 
	#(487 4 #reduceActionForRaiseEventStatement2: 37647362 false ) 
	#(551 2 #reduceActionFor__Comma_Attribute__attribute____2: 45074434 false ) 
	#(489 4 #reduceActionForRemoveHandlerStatement1: 37933057 false ) 
	#(434 2 #reduceActionFor__Comma_Attribute__attribute____2: 31792130 false ) 
	#(435 3 #reduceActionForVariableDeclarator4: 31840260 false ) 
	#(435 3 #reduceActionForVariableDeclarator1: 31840257 false ) 
	#(435 3 #reduceActionForVariableDeclarator3: 31840259 false ) 
	#(438 2 #reduceActionFor__Comma_Attribute__attribute____2: 32115714 false ) 
	#(632 6 #reduceActionForMultiLineSubLambda1: 56077313 false ) 
	#(628 6 #reduceActionForSingleLineLambda6: 55285766 false ) 
	#(492 4 #reduceActionForCompoundAssignmentStatement2: 38303746 false ) 
	#(666 1 #liftFirstValue: 59350018 false ) 
	#(647 3 #reduceActionForExpressionRangeVariableDeclaration1: 57398273 false ) 
	#(646 2 #reduceActionFor__Comma_Attribute__attribute____2: 57330690 false ) 
	#(649 4 #reduceActionForJoinQueryOperator1: 57646081 false ) 
	#(652 0 #reduceActionForInterfaceBase_1: 57897985 false ) 
	#(659 4 #reduceActionForOrderByQueryOperator2: 58795010 false ) 
	#(664 1 #liftFirstValue: 59082753 false ) 
	#(664 1 #liftFirstValue: 59082754 false ) 
	#(663 2 #reduceActionForOrderExpression2: 59010050 false ) 
	#(660 2 #reduceActionForAttributeList1: 58905601 false ) 
	#(658 4 #reduceActionForPartitionQueryOperator8: 58438664 false ) 
	#(658 4 #reduceActionForPartitionQueryOperator4: 58438660 false ) 
	#(322 9 #reduceActionForEnumDeclaration12: 19241996 false ) 
	#(322 9 #reduceActionForEnumDeclaration11: 19241995 false ) 
	#(322 9 #reduceActionForEnumDeclaration10: 19241994 false ) 
	#(322 9 #reduceActionForEnumDeclaration9: 19241993 false ) 
	#(338 9 #reduceActionForModuleDeclaration8: 21379080 false ) 
	#(338 9 #reduceActionForModuleDeclaration7: 21379079 false ) 
	#(338 9 #reduceActionForModuleDeclaration6: 21379078 false ) 
	#(338 9 #reduceActionForModuleDeclaration5: 21379077 false ) 
	#(368 7 #reduceActionForFunctionSignature4: 24283140 false ) 
	#(394 2 #reduceActionFor__Comma_Attribute__attribute___1: 27546625 false ) 
	#(396 4 #reduceActionForParameter3: 27586563 false ) 
	#(396 4 #reduceActionForParameter2: 27586562 false ) 
	#(325 5 #reduceActionForEnumMemberDeclaration8: 19587080 false ) 
	#(325 5 #reduceActionForEnumMemberDeclaration7: 19587079 false ) 
	#(347 2 #reduceActionFor__Comma_Attribute__attribute____2: 22496258 false ) 
	#(341 9 #reduceActionForInterfaceDeclaration4: 21939204 false ) 
	#(341 9 #reduceActionForInterfaceDeclaration3: 21939203 false ) 
	#(373 3 #reduceActionForInterfaceSubDeclaration2: 25048066 false ) 
	#(373 3 #reduceActionForInterfaceSubDeclaration1: 25048065 false ) 
	#(377 3 #reduceActionForInterfaceFunctionDeclaration2: 25794562 false ) 
	#(377 3 #reduceActionForInterfaceFunctionDeclaration1: 25794561 false ) 
	#(460 3 #reduceActionForMustOverridePropertyMemberDeclaration2: 34249730 false ) 
	#(460 3 #reduceActionForMustOverridePropertyMemberDeclaration1: 34249729 false ) 
	#(341 9 #reduceActionForInterfaceDeclaration2: 21939202 false ) 
	#(341 9 #reduceActionForInterfaceDeclaration1: 21939201 false ) 
	#(252 0 #reduceActionFor__Comma_Attribute__attribute____1: 13032449 false ) 
	#(245 2 #reduceActionFor__Comma_Attribute__attribute___1: 12613633 false ) 
	#(429 4 #reduceActionForVariableMemberDeclaration4: 31441924 false ) 
	#(429 4 #reduceActionForVariableMemberDeclaration3: 31441923 false ) 
	#(450 4 #reduceActionForMustOverridePropertyMemberDeclaration6: 33225734 false ) 
	#(450 4 #reduceActionForMustOverridePropertyMemberDeclaration5: 33225733 false ) 
	#(400 2 #reduceActionForLetQueryOperator1: 27932673 false ) 
	#(403 0 #reduceActionFor__Comma_Attribute__attribute____1: 28062721 false ) 
	#(358 2 #reduceActionForLetQueryOperator1: 23400449 false ) 
	#(361 0 #reduceActionFor__Comma_Attribute__attribute____1: 23543809 false ) 
	#(422 4 #reduceActionForConstantMemberDeclaration2: 30967810 false ) 
	#(422 4 #reduceActionForConstantMemberDeclaration1: 30967809 false ) 
	#(425 2 #reduceActionForAttributeList1: 31206401 false ) 
	#(449 1 #reduceActionForAttributeBlock__attributeBlock__1: 33045505 false ) 
	#(466 1 #liftFirstValue: 34933761 false ) 
	#(466 1 #liftFirstValue: 34933762 false ) 
	#(450 4 #reduceActionForMustOverridePropertyMemberDeclaration4: 33225732 false ) 
	#(450 4 #reduceActionForMustOverridePropertyMemberDeclaration3: 33225731 false ) 
	#(455 1 #reduceActionForAttributes1: 33698818 false ) 
	#(456 0 #reduceActionForImplementsClause_1: 33735681 false ) 
	#(317 2 #reduceActionFor__Comma_Attribute__attribute____2: 18820098 false ) 
	#(326 9 #reduceActionForClassDeclaration6: 19746822 false ) 
	#(326 9 #reduceActionForClassDeclaration5: 19746821 false ) 
	#(472 1 #liftFirstValue: 36019206 false ) 
	#(472 1 #liftFirstValue: 36019203 false ) 
	#(472 1 #liftFirstValue: 36019201 false ) 
	#(472 1 #liftFirstValue: 36019202 false ) 
	#(472 1 #liftFirstValue: 36019204 false ) 
	#(472 1 #liftFirstValue: 36019218 false ) 
	#(472 1 #liftFirstValue: 36019213 false ) 
	#(472 1 #liftFirstValue: 36019220 false ) 
	#(472 1 #liftFirstValue: 36019216 false ) 
	#(472 1 #liftFirstValue: 36019215 false ) 
	#(472 1 #liftFirstValue: 36019217 false ) 
	#(472 1 #liftFirstValue: 36019219 false ) 
	#(472 1 #liftFirstValue: 36019214 false ) 
	#(472 1 #liftFirstValue: 36019209 false ) 
	#(472 1 #liftFirstValue: 36019224 false ) 
	#(472 1 #liftFirstValue: 36019223 false ) 
	#(472 1 #liftFirstValue: 36019222 false ) 
	#(472 1 #liftFirstValue: 36019207 false ) 
	#(472 1 #liftFirstValue: 36019208 false ) 
	#(472 1 #liftFirstValue: 36019221 false ) 
	#(472 1 #liftFirstValue: 36019210 false ) 
	#(472 1 #liftFirstValue: 36019211 false ) 
	#(472 1 #liftFirstValue: 36019205 false ) 
	#(472 1 #liftFirstValue: 36019212 false ) 
	#(326 9 #reduceActionForClassDeclaration2: 19746818 false ) 
	#(326 9 #reduceActionForClassDeclaration1: 19746817 false ) 
	#(333 9 #reduceActionForStructureDeclaration4: 20638724 false ) 
	#(333 9 #reduceActionForStructureDeclaration3: 20638723 false ) 
	#(333 9 #reduceActionForStructureDeclaration2: 20638722 false ) 
	#(333 9 #reduceActionForStructureDeclaration1: 20638721 false ) 
	#(667 7 #reduceActionForAggregateQueryOperator6: 59453446 false ) 
	#(667 7 #reduceActionForAggregateQueryOperator7: 59453447 false ) 
	#(643 6 #reduceActionForCollectionRangeVariableDeclaration4: 57074692 false ) 
	#(667 7 #reduceActionForAggregateQueryOperator4: 59453444 false ) 
	#(571 5 #reduceActionForQualifiedOpenTypeName4: 47167492 false ) 
	#(574 4 #reduceActionForTypeArityList2: 47448066 false ) 
	#(572 3 #reduceActionFor_Period__IdentifierOrKeyword___name__TypeArityList__2: 47232002 false ) 
	#(596 4 #reduceActionForFieldInitializer2: 49878018 false ) 
	#(594 2 #reduceActionFor__Comma_Attribute__attribute___1: 49828865 false ) 
	#(442 2 #reduceActionFor__Comma_Attribute__attribute___1: 32395265 false ) 
	#(588 2 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: 49009666 false ) 
	#(578 7 #reduceActionForMemberAccessExpression4: 48071684 false ) 
	#(555 2 #reduceActionFor__Comma_Attribute__attribute___1: 45315073 false ) 
	#(520 4 #reduceActionForLoopControlVariable2: 42009602 false ) 
	#(502 5 #reduceActionForLineIfThenStatement2: 39590914 false ) 
	#(535 3 #reduceActionForErrorClause1: 43718657 false ) 
	#(487 5 #reduceActionForRaiseEventStatement3: 37647363 false ) 
	#(550 2 #reduceActionFor__Comma_Attribute__attribute___1: 45074433 false ) 
	#(505 2 #reduceActionForOptionStatement__option__2: 39961602 false ) 
	#(528 2 #reduceActionForOptionStatement__option__2: 42938370 false ) 
	#(433 2 #reduceActionFor__Comma_Attribute__attribute___1: 31792129 false ) 
	#(437 2 #reduceActionFor__Comma_Attribute__attribute___1: 32115713 false ) 
	#(645 2 #reduceActionFor__Comma_Attribute__attribute___1: 57330689 false ) 
	#(649 5 #reduceActionForJoinQueryOperator9: 57646089 false ) 
	#(649 5 #reduceActionForJoinQueryOperator2: 57646082 false ) 
	#(650 2 #reduceActionForJoinConditionList1: 57859073 false ) 
	#(649 5 #reduceActionForJoinQueryOperator3: 57646083 false ) 
	#(649 5 #reduceActionForJoinQueryOperator5: 57646085 false ) 
	#(662 2 #reduceActionFor__Comma_Attribute__attribute____2: 58961922 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration12: 21939212 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration11: 21939211 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration10: 21939210 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration9: 21939209 false ) 
	#(326 10 #reduceActionForClassDeclaration22: 19746838 false ) 
	#(326 10 #reduceActionForClassDeclaration21: 19746837 false ) 
	#(326 10 #reduceActionForClassDeclaration18: 19746834 false ) 
	#(326 10 #reduceActionForClassDeclaration17: 19746833 false ) 
	#(333 10 #reduceActionForStructureDeclaration12: 20638732 false ) 
	#(333 10 #reduceActionForStructureDeclaration11: 20638731 false ) 
	#(333 10 #reduceActionForStructureDeclaration10: 20638730 false ) 
	#(333 10 #reduceActionForStructureDeclaration9: 20638729 false ) 
	#(396 5 #reduceActionForParameter7: 27586567 false ) 
	#(396 5 #reduceActionForParameter6: 27586566 false ) 
	#(368 8 #reduceActionForFunctionSignature6: 24283142 false ) 
	#(368 8 #reduceActionForFunctionSignature10: 24283146 false ) 
	#(322 10 #reduceActionForEnumDeclaration8: 19241992 false ) 
	#(322 10 #reduceActionForEnumDeclaration7: 19241991 false ) 
	#(322 10 #reduceActionForEnumDeclaration6: 19241990 false ) 
	#(322 10 #reduceActionForEnumDeclaration5: 19241989 false ) 
	#(346 2 #reduceActionFor__Comma_Attribute__attribute___1: 22496257 false ) 
	#(373 4 #reduceActionForInterfaceSubDeclaration4: 25048068 false ) 
	#(373 4 #reduceActionForInterfaceSubDeclaration3: 25048067 false ) 
	#(377 4 #reduceActionForInterfaceFunctionDeclaration4: 25794564 false ) 
	#(377 4 #reduceActionForInterfaceFunctionDeclaration3: 25794563 false ) 
	#(460 4 #reduceActionForMustOverridePropertyMemberDeclaration6: 34249732 false ) 
	#(460 4 #reduceActionForMustOverridePropertyMemberDeclaration5: 34249731 false ) 
	#(249 4 #reduceActionForTypeParameterConstraints2: 12838914 false ) 
	#(250 2 #reduceActionForAttributeList1: 12986369 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration8: 21939208 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration7: 21939207 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration6: 21939206 false ) 
	#(341 10 #reduceActionForInterfaceDeclaration5: 21939205 false ) 
	#(422 5 #reduceActionForConstantMemberDeclaration4: 30967812 false ) 
	#(422 5 #reduceActionForConstantMemberDeclaration3: 30967811 false ) 
	#(450 5 #reduceActionForMustOverridePropertyMemberDeclaration8: 33225736 false ) 
	#(450 5 #reduceActionForMustOverridePropertyMemberDeclaration7: 33225735 false ) 
	#(401 2 #reduceActionForAttributeList1: 28008449 false ) 
	#(359 2 #reduceActionForAttributeList1: 23484417 false ) 
	#(372 5 #reduceActionForMustOverrideSubDeclaration2: 24767490 false ) 
	#(372 5 #reduceActionForMustOverrideSubDeclaration1: 24767489 false ) 
	#(376 5 #reduceActionForMustOverrideFunctionDeclaration2: 25498626 false ) 
	#(376 5 #reduceActionForMustOverrideFunctionDeclaration1: 25498625 false ) 
	#(388 0 #reduceActionFor___As___asToken__Attributes__TypeName__type___1: 27101185 false ) 
	#(413 2 #reduceActionForParametersOrType4: 29339652 false ) 
	#(413 2 #reduceActionForParametersOrType2: 29339650 false ) 
	#(409 5 #reduceActionForRegularEventMemberDeclaration2: 28876802 false ) 
	#(409 5 #reduceActionForRegularEventMemberDeclaration1: 28876801 false ) 
	#(428 3 #reduceActionForConstantDeclarator1: 31311873 false ) 
	#(427 2 #reduceActionFor__Comma_Attribute__attribute____2: 31263746 false ) 
	#(446 4 #reduceActionForPropertySignature2: 32702466 false ) 
	#(446 4 #reduceActionForPropertySignature4: 32702468 false ) 
	#(449 2 #reduceActionForOptionStatement__option__2: 33045506 false ) 
	#(458 0 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis______1: 34024449 false ) 
	#(454 2 #reduceActionFor__Comma_Attribute__attribute___1: 33698817 false ) 
	#(456 1 #reduceActionForAttributes1: 33735682 false ) 
	#(316 2 #reduceActionFor__Comma_Attribute__attribute___1: 18820097 false ) 
	#(326 10 #reduceActionForClassDeclaration8: 19746824 false ) 
	#(326 10 #reduceActionForClassDeclaration7: 19746823 false ) 
	#(326 10 #reduceActionForClassDeclaration4: 19746820 false ) 
	#(326 10 #reduceActionForClassDeclaration3: 19746819 false ) 
	#(326 10 #reduceActionForClassDeclaration14: 19746830 false ) 
	#(326 10 #reduceActionForClassDeclaration13: 19746829 false ) 
	#(326 10 #reduceActionForClassDeclaration10: 19746826 false ) 
	#(326 10 #reduceActionForClassDeclaration9: 19746825 false ) 
	#(333 10 #reduceActionForStructureDeclaration8: 20638728 false ) 
	#(333 10 #reduceActionForStructureDeclaration7: 20638727 false ) 
	#(333 10 #reduceActionForStructureDeclaration6: 20638726 false ) 
	#(333 10 #reduceActionForStructureDeclaration5: 20638725 false ) 
	#(667 8 #reduceActionForAggregateQueryOperator8: 59453448 false ) 
	#(670 8 #reduceActionForConditionalExpression1: 60034049 false ) 
	#(596 5 #reduceActionForFieldInitializer4: 49878020 false ) 
	#(631 8 #reduceActionForMultiLineFunctionLambda2: 55782402 false ) 
	#(631 8 #reduceActionForMultiLineFunctionLambda3: 55782403 false ) 
	#(517 6 #reduceActionForDoBottomLoopStatement1: 41262081 false ) 
	#(516 6 #reduceActionForDoTopLoopStatement2: 41099266 false ) 
	#(499 2 #reduceActionForOptionStatement__option__2: 39182338 false ) 
	#(503 2 #reduceActionForLineElseStatement1: 39759873 false ) 
	#(511 1 #liftFirstValue: 40479747 false ) 
	#(511 1 #liftFirstValue: 40479750 false ) 
	#(511 1 #liftFirstValue: 40479746 false ) 
	#(511 1 #liftFirstValue: 40479745 false ) 
	#(511 1 #liftFirstValue: 40479748 false ) 
	#(511 1 #nil 40479749 false ) 
	#(509 0 #reduceActionFor__Comma_Attribute__attribute____1: 40247297 false ) 
	#(510 1 #reduceActionForCaseClause7: 40285191 false ) 
	#(504 6 #reduceActionForSelectStatement1: 39846913 false ) 
	#(485 6 #reduceActionForSyncLockStatement1: 37363713 false ) 
	#(527 6 #reduceActionForTryStatement1: 42861569 false ) 
	#(435 5 #reduceActionForVariableDeclarator5: 31840261 false ) 
	#(557 6 #reduceActionForUsingStatement1: 45351937 false ) 
	#(514 6 #reduceActionForWhileStatement1: 40854529 false ) 
	#(484 6 #reduceActionForWithStatement1: 37206017 false ) 
	#(632 8 #reduceActionForMultiLineSubLambda2: 56077314 false ) 
	#(647 5 #reduceActionForExpressionRangeVariableDeclaration2: 57398274 false ) 
	#(649 6 #reduceActionForJoinQueryOperator10: 57646090 false ) 
	#(649 6 #reduceActionForJoinQueryOperator11: 57646091 false ) 
	#(649 6 #reduceActionForJoinQueryOperator13: 57646093 false ) 
	#(653 3 #reduceActionForClassBase2: 57960449 false ) 
	#(652 2 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: 57897986 false ) 
	#(649 6 #reduceActionForJoinQueryOperator4: 57646084 false ) 
	#(649 6 #reduceActionForJoinQueryOperator6: 57646086 false ) 
	#(649 6 #reduceActionForJoinQueryOperator7: 57646087 false ) 
	#(661 2 #reduceActionFor__Comma_Attribute__attribute___1: 58961921 false ) 
	#(322 11 #reduceActionForEnumDeclaration16: 19242000 false ) 
	#(322 11 #reduceActionForEnumDeclaration15: 19241999 false ) 
	#(322 11 #reduceActionForEnumDeclaration14: 19241998 false ) 
	#(322 11 #reduceActionForEnumDeclaration13: 19241997 false ) 
	#(341 11 #reduceActionForInterfaceDeclaration16: 21939216 false ) 
	#(341 11 #reduceActionForInterfaceDeclaration15: 21939215 false ) 
	#(341 11 #reduceActionForInterfaceDeclaration14: 21939214 false ) 
	#(341 11 #reduceActionForInterfaceDeclaration13: 21939213 false ) 
	#(326 11 #reduceActionForClassDeclaration24: 19746840 false ) 
	#(326 11 #reduceActionForClassDeclaration23: 19746839 false ) 
	#(326 11 #reduceActionForClassDeclaration20: 19746836 false ) 
	#(326 11 #reduceActionForClassDeclaration19: 19746835 false ) 
	#(326 11 #reduceActionForClassDeclaration30: 19746846 false ) 
	#(326 11 #reduceActionForClassDeclaration29: 19746845 false ) 
	#(326 11 #reduceActionForClassDeclaration26: 19746842 false ) 
	#(326 11 #reduceActionForClassDeclaration25: 19746841 false ) 
	#(333 11 #reduceActionForStructureDeclaration16: 20638736 false ) 
	#(333 11 #reduceActionForStructureDeclaration15: 20638735 false ) 
	#(333 11 #reduceActionForStructureDeclaration14: 20638734 false ) 
	#(333 11 #reduceActionForStructureDeclaration13: 20638733 false ) 
	#(396 6 #reduceActionForParameter4: 27586564 false ) 
	#(368 9 #reduceActionForFunctionSignature12: 24283148 false ) 
	#(411 5 #reduceActionForRegularEventMemberDeclaration2: 29096962 false ) 
	#(411 5 #reduceActionForRegularEventMemberDeclaration1: 29096961 false ) 
	#(252 2 #reduceActionFor__Comma_Attribute__attribute____2: 13032450 false ) 
	#(372 6 #reduceActionForMustOverrideSubDeclaration6: 24767494 false ) 
	#(372 6 #reduceActionForMustOverrideSubDeclaration5: 24767493 false ) 
	#(376 6 #reduceActionForMustOverrideFunctionDeclaration6: 25498630 false ) 
	#(376 6 #reduceActionForMustOverrideFunctionDeclaration5: 25498629 false ) 
	#(409 6 #reduceActionForRegularEventMemberDeclaration6: 28876806 false ) 
	#(409 6 #reduceActionForRegularEventMemberDeclaration5: 28876805 false ) 
	#(404 3 #reduceActionForEventMemberSpecifier4: 28110852 false ) 
	#(404 3 #reduceActionForEventMemberSpecifier4: 28110850 false ) 
	#(404 3 #reduceActionForEventMemberSpecifier4: 28110851 false ) 
	#(404 3 #reduceActionForEventMemberSpecifier4: 28110849 false ) 
	#(403 2 #reduceActionFor__Comma_Attribute__attribute____2: 28062722 false ) 
	#(362 3 #reduceActionForInterfaceMemberSpecifier1: 23599105 false ) 
	#(361 2 #reduceActionFor__Comma_Attribute__attribute____2: 23543810 false ) 
	#(372 6 #reduceActionForMustOverrideSubDeclaration4: 24767492 false ) 
	#(372 6 #reduceActionForMustOverrideSubDeclaration3: 24767491 false ) 
	#(376 6 #reduceActionForMustOverrideFunctionDeclaration4: 25498628 false ) 
	#(376 6 #reduceActionForMustOverrideFunctionDeclaration3: 25498627 false ) 
	#(391 2 #reduceActionFor__Comma_Attribute__attribute___1: 27360257 false ) 
	#(385 0 #reduceActionFor__Comma_Attribute__attribute____1: 26721281 false ) 
	#(388 1 #reduceActionForAttributes1: 27101186 false ) 
	#(383 6 #reduceActionForExternalSubDeclaration2: 26493954 false ) 
	#(383 6 #reduceActionForExternalSubDeclaration1: 26493953 false ) 
	#(413 3 #reduceActionForParametersOrType3: 29339651 false ) 
	#(409 6 #reduceActionForRegularEventMemberDeclaration4: 28876804 false ) 
	#(409 6 #reduceActionForRegularEventMemberDeclaration3: 28876803 false ) 
	#(426 2 #reduceActionFor__Comma_Attribute__attribute___1: 31263745 false ) 
	#(446 5 #reduceActionForPropertySignature3: 32702467 false ) 
	#(446 5 #reduceActionForPropertySignature7: 32702471 false ) 
	#(457 1 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____1: 34024449 false ) 
	#(458 1 #reduceActionForAttributes1: 34024450 false ) 
	#(459 0 #nil 34113537 false ) 
	#(452 6 #reduceActionForAutoPropertyMemberDeclaration1: 33453057 false ) 
	#(326 11 #reduceActionForClassDeclaration16: 19746832 false ) 
	#(326 11 #reduceActionForClassDeclaration15: 19746831 false ) 
	#(326 11 #reduceActionForClassDeclaration12: 19746828 false ) 
	#(326 11 #reduceActionForClassDeclaration11: 19746827 false ) 
	#(631 9 #reduceActionForMultiLineFunctionLambda5: 55782405 false ) 
	#(524 7 #reduceActionForForEachStatement6: 42223622 false ) 
	#(524 7 #reduceActionForForEachStatement5: 42223621 false ) 
	#(498 7 #reduceActionForBlockIfStatement3: 39024643 false ) 
	#(498 7 #reduceActionForBlockIfStatement1: 39024641 false ) 
	#(504 7 #reduceActionForSelectStatement3: 39846915 false ) 
	#(507 2 #reduceActionForAttributeList1: 40208385 false ) 
	#(510 2 #reduceActionForCaseClause1: 40285185 false ) 
	#(504 7 #reduceActionForSelectStatement2: 39846914 false ) 
	#(530 3 #reduceActionForCatchStatement1: 43150337 false ) 
	#(529 3 #reduceActionForFinallyStatement1: 43055105 false ) 
	#(527 7 #reduceActionForTryStatement2: 42861570 false ) 
	#(632 9 #reduceActionForMultiLineSubLambda3: 56077315 false ) 
	#(665 7 #reduceActionForGroupByQueryOperator1: 59132929 false ) 
	#(649 7 #reduceActionForJoinQueryOperator12: 57646092 false ) 
	#(649 7 #reduceActionForJoinQueryOperator14: 57646094 false ) 
	#(649 7 #reduceActionForJoinQueryOperator15: 57646095 false ) 
	#(653 4 #reduceActionForJoinCondition2: 57960450 false ) 
	#(651 2 #reduceActionFor___And___andToken___LineTerminator___JoinCondition__1: 57897985 false ) 
	#(649 7 #reduceActionForJoinQueryOperator8: 57646088 false ) 
	#(326 12 #reduceActionForClassDeclaration32: 19746848 false ) 
	#(326 12 #reduceActionForClassDeclaration31: 19746847 false ) 
	#(326 12 #reduceActionForClassDeclaration28: 19746844 false ) 
	#(326 12 #reduceActionForClassDeclaration27: 19746843 false ) 
	#(396 7 #reduceActionForParameter8: 27586568 false ) 
	#(411 6 #reduceActionForRegularEventMemberDeclaration6: 29096964 false ) 
	#(411 6 #reduceActionForRegularEventMemberDeclaration5: 29096963 false ) 
	#(251 2 #reduceActionFor__Comma_Attribute__attribute___1: 13032449 false ) 
	#(372 7 #reduceActionForMustOverrideSubDeclaration8: 24767496 false ) 
	#(372 7 #reduceActionForMustOverrideSubDeclaration7: 24767495 false ) 
	#(376 7 #reduceActionForMustOverrideFunctionDeclaration8: 25498632 false ) 
	#(376 7 #reduceActionForMustOverrideFunctionDeclaration7: 25498631 false ) 
	#(383 7 #reduceActionForExternalSubDeclaration18: 26493970 false ) 
	#(383 7 #reduceActionForExternalSubDeclaration17: 26493969 false ) 
	#(409 7 #reduceActionForRegularEventMemberDeclaration8: 28876808 false ) 
	#(409 7 #reduceActionForRegularEventMemberDeclaration7: 28876807 false ) 
	#(452 7 #reduceActionForAutoPropertyMemberDeclaration7: 33453063 false ) 
	#(402 2 #reduceActionFor__Comma_Attribute__attribute___1: 28062721 false ) 
	#(360 2 #reduceActionFor__Comma_Attribute__attribute___1: 23543809 false ) 
	#(370 7 #reduceActionForSubDeclaration2: 24519682 false ) 
	#(370 7 #reduceActionForSubDeclaration1: 24519681 false ) 
	#(375 7 #reduceActionForFunctionDeclaration2: 25230338 false ) 
	#(375 7 #reduceActionForFunctionDeclaration1: 25230337 false ) 
	#(392 2 #reduceActionFor__Comma_Attribute__attribute___1: 27431937 false ) 
	#(387 2 #reduceActionFor___As___asToken__Attributes__TypeName__type__1: 27101185 false ) 
	#(385 1 #reduceActionForAttributes1: 26721282 false ) 
	#(386 7 #reduceActionForExternalFunctionDeclaration2: 26816514 false ) 
	#(386 7 #reduceActionForExternalFunctionDeclaration1: 26816513 false ) 
	#(383 7 #reduceActionForExternalSubDeclaration6: 26493958 false ) 
	#(383 7 #reduceActionForExternalSubDeclaration5: 26493957 false ) 
	#(383 7 #reduceActionForExternalSubDeclaration10: 26493962 false ) 
	#(383 7 #reduceActionForExternalSubDeclaration9: 26493961 false ) 
	#(428 5 #reduceActionForConstantDeclarator2: 31311874 false ) 
	#(446 6 #reduceActionForPropertySignature5: 32702469 false ) 
	#(447 7 #reduceActionForRegularPropertyMemberDeclaration2: 32897026 false ) 
	#(447 7 #reduceActionForRegularPropertyMemberDeclaration1: 32897025 false ) 
	#(459 1 #liftFirstValue: 34113538 false ) 
	#(587 4 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument__1: 49009665 false ) 
	#(631 10 #reduceActionForMultiLineFunctionLambda4: 55782404 false ) 
	#(524 8 #reduceActionForForEachStatement8: 42223624 false ) 
	#(524 8 #reduceActionForForEachStatement7: 42223623 false ) 
	#(524 8 #reduceActionForForEachStatement1: 42223617 false ) 
	#(519 8 #reduceActionForForStatement6: 41489414 false ) 
	#(519 8 #reduceActionForForStatement5: 41489413 false ) 
	#(501 3 #reduceActionForElseStatement2: 39475202 false ) 
	#(501 3 #reduceActionForElseStatement1: 39475201 false ) 
	#(498 8 #reduceActionForBlockIfStatement4: 39024644 false ) 
	#(498 8 #reduceActionForBlockIfStatement7: 39024647 false ) 
	#(498 8 #reduceActionForBlockIfStatement5: 39024645 false ) 
	#(498 8 #reduceActionForBlockIfStatement2: 39024642 false ) 
	#(494 8 #reduceActionForMidAssignmentStatement1: 38567937 false ) 
	#(504 8 #reduceActionForSelectStatement4: 39846916 false ) 
	#(512 4 #reduceActionForCaseElseStatement2: 40606722 false ) 
	#(512 4 #reduceActionForCaseElseStatement1: 40606721 false ) 
	#(510 3 #reduceActionForCaseClause3: 40285187 false ) 
	#(506 4 #reduceActionForCaseStatement2: 40080386 false ) 
	#(506 4 #reduceActionForCaseStatement1: 40080385 false ) 
	#(509 2 #reduceActionFor__Comma_Attribute__attribute____2: 40247298 false ) 
	#(510 3 #reduceActionForCaseClause2: 40285186 false ) 
	#(510 3 #reduceActionForCaseClause8: 40285192 false ) 
	#(530 4 #reduceActionForCatchStatement3: 43150339 false ) 
	#(665 8 #reduceActionForGroupByQueryOperator2: 59132930 false ) 
	#(665 8 #reduceActionForGroupByQueryOperator3: 59132931 false ) 
	#(665 8 #reduceActionForGroupByQueryOperator5: 59132933 false ) 
	#(649 8 #reduceActionForJoinQueryOperator16: 57646096 false ) 
	#(651 3 #reduceActionFor___And___andToken___LineTerminator___JoinCondition__2: 57897986 false ) 
	#(370 8 #reduceActionForSubDeclaration6: 24519686 false ) 
	#(370 8 #reduceActionForSubDeclaration5: 24519685 false ) 
	#(375 8 #reduceActionForFunctionDeclaration6: 25230342 false ) 
	#(375 8 #reduceActionForFunctionDeclaration5: 25230341 false ) 
	#(386 8 #reduceActionForExternalFunctionDeclaration18: 26816530 false ) 
	#(386 8 #reduceActionForExternalFunctionDeclaration17: 26816529 false ) 
	#(383 8 #reduceActionForExternalSubDeclaration22: 26493974 false ) 
	#(383 8 #reduceActionForExternalSubDeclaration21: 26493973 false ) 
	#(383 8 #reduceActionForExternalSubDeclaration26: 26493978 false ) 
	#(383 8 #reduceActionForExternalSubDeclaration25: 26493977 false ) 
	#(447 8 #reduceActionForRegularPropertyMemberDeclaration6: 32897030 false ) 
	#(447 8 #reduceActionForRegularPropertyMemberDeclaration5: 32897029 false ) 
	#(370 8 #reduceActionForSubDeclaration4: 24519684 false ) 
	#(370 8 #reduceActionForSubDeclaration3: 24519683 false ) 
	#(375 8 #reduceActionForFunctionDeclaration4: 25230340 false ) 
	#(375 8 #reduceActionForFunctionDeclaration3: 25230339 false ) 
	#(387 3 #reduceActionFor___As___asToken__Attributes__TypeName__type__2: 27101186 false ) 
	#(386 8 #reduceActionForExternalFunctionDeclaration6: 26816518 false ) 
	#(386 8 #reduceActionForExternalFunctionDeclaration5: 26816517 false ) 
	#(386 8 #reduceActionForExternalFunctionDeclaration10: 26816522 false ) 
	#(386 8 #reduceActionForExternalFunctionDeclaration9: 26816521 false ) 
	#(383 8 #reduceActionForExternalSubDeclaration14: 26493966 false ) 
	#(383 8 #reduceActionForExternalSubDeclaration13: 26493965 false ) 
	#(405 8 #reduceActionForConstructorMemberDeclaration2: 28398594 false ) 
	#(405 8 #reduceActionForConstructorMemberDeclaration1: 28398593 false ) 
	#(417 1 #reduceActionForAttributeBlock__attributeBlock__1: 29845505 false ) 
	#(418 1 #liftFirstValue: 30004225 false ) 
	#(418 1 #liftFirstValue: 30004226 false ) 
	#(418 1 #liftFirstValue: 30004227 false ) 
	#(446 7 #reduceActionForPropertySignature6: 32702470 false ) 
	#(446 7 #reduceActionForPropertySignature8: 32702472 false ) 
	#(447 8 #reduceActionForRegularPropertyMemberDeclaration4: 32897028 false ) 
	#(447 8 #reduceActionForRegularPropertyMemberDeclaration3: 32897027 false ) 
	#(457 3 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____2: 34024450 false ) 
	#(452 8 #reduceActionForAutoPropertyMemberDeclaration3: 33453059 false ) 
	#(631 11 #reduceActionForMultiLineFunctionLambda6: 55782406 false ) 
	#(524 9 #reduceActionForForEachStatement3: 42223619 false ) 
	#(524 9 #reduceActionForForEachStatement2: 42223618 false ) 
	#(523 0 #reduceActionFor__Comma_Attribute__attribute____1: 42187777 false ) 
	#(519 9 #reduceActionForForStatement1: 41489409 false ) 
	#(500 4 #reduceActionForElseIfStatement2: 39304194 false ) 
	#(500 4 #reduceActionForElseIfStatement1: 39304193 false ) 
	#(498 9 #reduceActionForBlockIfStatement8: 39024648 false ) 
	#(498 9 #reduceActionForBlockIfStatement6: 39024646 false ) 
	#(494 9 #reduceActionForMidAssignmentStatement3: 38567939 false ) 
	#(510 4 #reduceActionForCaseClause5: 40285189 false ) 
	#(510 4 #reduceActionForCaseClause4: 40285188 false ) 
	#(508 2 #reduceActionFor__Comma_Attribute__attribute___1: 40247297 false ) 
	#(530 5 #reduceActionForCatchStatement2: 43150338 false ) 
	#(669 9 #reduceActionForGroupJoinQueryOperator1: 59692033 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator4: 59132932 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator9: 59132937 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator6: 59132934 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator7: 59132935 false ) 
	#(370 9 #reduceActionForSubDeclaration8: 24519688 false ) 
	#(370 9 #reduceActionForSubDeclaration7: 24519687 false ) 
	#(375 9 #reduceActionForFunctionDeclaration8: 25230344 false ) 
	#(375 9 #reduceActionForFunctionDeclaration7: 25230343 false ) 
	#(386 9 #reduceActionForExternalFunctionDeclaration22: 26816534 false ) 
	#(386 9 #reduceActionForExternalFunctionDeclaration21: 26816533 false ) 
	#(386 9 #reduceActionForExternalFunctionDeclaration26: 26816538 false ) 
	#(386 9 #reduceActionForExternalFunctionDeclaration25: 26816537 false ) 
	#(383 9 #reduceActionForExternalSubDeclaration30: 26493982 false ) 
	#(383 9 #reduceActionForExternalSubDeclaration29: 26493981 false ) 
	#(405 9 #reduceActionForConstructorMemberDeclaration8: 28398600 false ) 
	#(405 9 #reduceActionForConstructorMemberDeclaration7: 28398599 false ) 
	#(447 9 #reduceActionForRegularPropertyMemberDeclaration8: 32897032 false ) 
	#(447 9 #reduceActionForRegularPropertyMemberDeclaration7: 32897031 false ) 
	#(452 9 #reduceActionForAutoPropertyMemberDeclaration9: 33453065 false ) 
	#(383 9 #reduceActionForExternalSubDeclaration4: 26493956 false ) 
	#(383 9 #reduceActionForExternalSubDeclaration3: 26493955 false ) 
	#(386 9 #reduceActionForExternalFunctionDeclaration14: 26816526 false ) 
	#(386 9 #reduceActionForExternalFunctionDeclaration13: 26816525 false ) 
	#(417 2 #reduceActionForOptionStatement__option__2: 29845506 false ) 
	#(446 8 #reduceActionForPropertySignature9: 32702473 false ) 
	#(467 6 #reduceActionForPropertyGetDeclaration2: 35028994 false ) 
	#(467 6 #reduceActionForPropertyGetDeclaration1: 35028993 false ) 
	#(468 6 #reduceActionForPropertySetDeclaration2: 35250178 false ) 
	#(468 6 #reduceActionForPropertySetDeclaration1: 35250177 false ) 
	#(457 4 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____3: 34024451 false ) 
	#(452 9 #reduceActionForAutoPropertyMemberDeclaration13: 33453069 false ) 
	#(452 9 #reduceActionForAutoPropertyMemberDeclaration2: 33453058 false ) 
	#(452 9 #reduceActionForAutoPropertyMemberDeclaration5: 33453061 false ) 
	#(524 10 #reduceActionForForEachStatement4: 42223620 false ) 
	#(521 2 #reduceActionForAttributeList1: 42143745 false ) 
	#(519 10 #reduceActionForForStatement8: 41489416 false ) 
	#(519 10 #reduceActionForForStatement7: 41489415 false ) 
	#(519 10 #reduceActionForForStatement2: 41489410 false ) 
	#(500 5 #reduceActionForElseIfStatement4: 39304196 false ) 
	#(500 5 #reduceActionForElseIfStatement3: 39304195 false ) 
	#(494 10 #reduceActionForMidAssignmentStatement2: 38567938 false ) 
	#(510 5 #reduceActionForCaseClause6: 40285190 false ) 
	#(530 6 #reduceActionForCatchStatement5: 43150341 false ) 
	#(530 6 #reduceActionForCatchStatement4: 43150340 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator9: 59692041 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator2: 59692034 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator3: 59692035 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator5: 59692037 false ) 
	#(665 10 #reduceActionForGroupByQueryOperator10: 59132938 false ) 
	#(665 10 #reduceActionForGroupByQueryOperator11: 59132939 false ) 
	#(665 10 #reduceActionForGroupByQueryOperator8: 59132936 false ) 
	#(383 10 #reduceActionForExternalSubDeclaration20: 26493972 false ) 
	#(383 10 #reduceActionForExternalSubDeclaration19: 26493971 false ) 
	#(386 10 #reduceActionForExternalFunctionDeclaration30: 26816542 false ) 
	#(386 10 #reduceActionForExternalFunctionDeclaration29: 26816541 false ) 
	#(452 10 #reduceActionForAutoPropertyMemberDeclaration19: 33453075 false ) 
	#(452 10 #reduceActionForAutoPropertyMemberDeclaration8: 33453064 false ) 
	#(452 10 #reduceActionForAutoPropertyMemberDeclaration11: 33453067 false ) 
	#(386 10 #reduceActionForExternalFunctionDeclaration4: 26816516 false ) 
	#(386 10 #reduceActionForExternalFunctionDeclaration3: 26816515 false ) 
	#(383 10 #reduceActionForExternalSubDeclaration8: 26493960 false ) 
	#(383 10 #reduceActionForExternalSubDeclaration7: 26493959 false ) 
	#(383 10 #reduceActionForExternalSubDeclaration12: 26493964 false ) 
	#(383 10 #reduceActionForExternalSubDeclaration11: 26493963 false ) 
	#(405 10 #reduceActionForConstructorMemberDeclaration4: 28398596 false ) 
	#(405 10 #reduceActionForConstructorMemberDeclaration3: 28398595 false ) 
	#(467 7 #reduceActionForPropertyGetDeclaration4: 35028996 false ) 
	#(467 7 #reduceActionForPropertyGetDeclaration3: 35028995 false ) 
	#(468 7 #reduceActionForPropertySetDeclaration8: 35250184 false ) 
	#(468 7 #reduceActionForPropertySetDeclaration7: 35250183 false ) 
	#(467 7 #reduceActionForPropertyGetDeclaration6: 35028998 false ) 
	#(467 7 #reduceActionForPropertyGetDeclaration5: 35028997 false ) 
	#(468 7 #reduceActionForPropertySetDeclaration14: 35250190 false ) 
	#(468 7 #reduceActionForPropertySetDeclaration13: 35250189 false ) 
	#(452 10 #reduceActionForAutoPropertyMemberDeclaration14: 33453070 false ) 
	#(523 2 #reduceActionFor__Comma_Attribute__attribute____2: 42187778 false ) 
	#(519 11 #reduceActionForForStatement3: 41489411 false ) 
	#(494 11 #reduceActionForMidAssignmentStatement4: 38567940 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator10: 59692042 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator11: 59692043 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator13: 59692045 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator4: 59692036 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator6: 59692038 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator7: 59692039 false ) 
	#(665 11 #reduceActionForGroupByQueryOperator12: 59132940 false ) 
	#(386 11 #reduceActionForExternalFunctionDeclaration20: 26816532 false ) 
	#(386 11 #reduceActionForExternalFunctionDeclaration19: 26816531 false ) 
	#(383 11 #reduceActionForExternalSubDeclaration24: 26493976 false ) 
	#(383 11 #reduceActionForExternalSubDeclaration23: 26493975 false ) 
	#(383 11 #reduceActionForExternalSubDeclaration28: 26493980 false ) 
	#(383 11 #reduceActionForExternalSubDeclaration27: 26493979 false ) 
	#(405 11 #reduceActionForConstructorMemberDeclaration10: 28398602 false ) 
	#(405 11 #reduceActionForConstructorMemberDeclaration9: 28398601 false ) 
	#(452 11 #reduceActionForAutoPropertyMemberDeclaration20: 33453076 false ) 
	#(386 11 #reduceActionForExternalFunctionDeclaration8: 26816520 false ) 
	#(386 11 #reduceActionForExternalFunctionDeclaration7: 26816519 false ) 
	#(386 11 #reduceActionForExternalFunctionDeclaration12: 26816524 false ) 
	#(386 11 #reduceActionForExternalFunctionDeclaration11: 26816523 false ) 
	#(383 11 #reduceActionForExternalSubDeclaration16: 26493968 false ) 
	#(383 11 #reduceActionForExternalSubDeclaration15: 26493967 false ) 
	#(405 11 #reduceActionForConstructorMemberDeclaration6: 28398598 false ) 
	#(405 11 #reduceActionForConstructorMemberDeclaration5: 28398597 false ) 
	#(416 11 #reduceActionForCustomEventMemberDeclaration4: 29594628 false ) 
	#(416 11 #reduceActionForCustomEventMemberDeclaration3: 29594627 false ) 
	#(416 11 #reduceActionForCustomEventMemberDeclaration2: 29594626 false ) 
	#(416 11 #reduceActionForCustomEventMemberDeclaration1: 29594625 false ) 
	#(468 8 #reduceActionForPropertySetDeclaration4: 35250180 false ) 
	#(468 8 #reduceActionForPropertySetDeclaration3: 35250179 false ) 
	#(467 8 #reduceActionForPropertyGetDeclaration8: 35029000 false ) 
	#(467 8 #reduceActionForPropertyGetDeclaration7: 35028999 false ) 
	#(468 8 #reduceActionForPropertySetDeclaration20: 35250196 false ) 
	#(468 8 #reduceActionForPropertySetDeclaration19: 35250195 false ) 
	#(452 11 #reduceActionForAutoPropertyMemberDeclaration15: 33453071 false ) 
	#(452 11 #reduceActionForAutoPropertyMemberDeclaration4: 33453060 false ) 
	#(522 2 #reduceActionFor__Comma_Attribute__attribute___1: 42187777 false ) 
	#(519 12 #reduceActionForForStatement4: 41489412 false ) 
	#(530 8 #reduceActionForCatchStatement6: 43150342 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator12: 59692044 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator14: 59692046 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator15: 59692047 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator8: 59692040 false ) 
	#(386 12 #reduceActionForExternalFunctionDeclaration24: 26816536 false ) 
	#(386 12 #reduceActionForExternalFunctionDeclaration23: 26816535 false ) 
	#(386 12 #reduceActionForExternalFunctionDeclaration28: 26816540 false ) 
	#(386 12 #reduceActionForExternalFunctionDeclaration27: 26816539 false ) 
	#(383 12 #reduceActionForExternalSubDeclaration32: 26493984 false ) 
	#(383 12 #reduceActionForExternalSubDeclaration31: 26493983 false ) 
	#(405 12 #reduceActionForConstructorMemberDeclaration12: 28398604 false ) 
	#(405 12 #reduceActionForConstructorMemberDeclaration11: 28398603 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration12: 29594636 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration11: 29594635 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration10: 29594634 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration9: 29594633 false ) 
	#(452 12 #reduceActionForAutoPropertyMemberDeclaration21: 33453077 false ) 
	#(452 12 #reduceActionForAutoPropertyMemberDeclaration10: 33453066 false ) 
	#(386 12 #reduceActionForExternalFunctionDeclaration16: 26816528 false ) 
	#(386 12 #reduceActionForExternalFunctionDeclaration15: 26816527 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration8: 29594632 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration7: 29594631 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration6: 29594630 false ) 
	#(416 12 #reduceActionForCustomEventMemberDeclaration5: 29594629 false ) 
	#(468 9 #reduceActionForPropertySetDeclaration6: 35250182 false ) 
	#(468 9 #reduceActionForPropertySetDeclaration5: 35250181 false ) 
	#(468 9 #reduceActionForPropertySetDeclaration10: 35250186 false ) 
	#(468 9 #reduceActionForPropertySetDeclaration9: 35250185 false ) 
	#(468 9 #reduceActionForPropertySetDeclaration16: 35250192 false ) 
	#(468 9 #reduceActionForPropertySetDeclaration15: 35250191 false ) 
	#(452 12 #reduceActionForAutoPropertyMemberDeclaration16: 33453072 false ) 
	#(452 12 #reduceActionForAutoPropertyMemberDeclaration17: 33453073 false ) 
	#(452 12 #reduceActionForAutoPropertyMemberDeclaration6: 33453062 false ) 
	#(469 11 #reduceActionForOperatorDeclaration2: 35531778 false ) 
	#(469 11 #reduceActionForOperatorDeclaration1: 35531777 false ) 
	#(669 13 #reduceActionForGroupJoinQueryOperator16: 59692048 false ) 
	#(386 13 #reduceActionForExternalFunctionDeclaration32: 26816544 false ) 
	#(386 13 #reduceActionForExternalFunctionDeclaration31: 26816543 false ) 
	#(416 13 #reduceActionForCustomEventMemberDeclaration16: 29594640 false ) 
	#(416 13 #reduceActionForCustomEventMemberDeclaration15: 29594639 false ) 
	#(416 13 #reduceActionForCustomEventMemberDeclaration14: 29594638 false ) 
	#(416 13 #reduceActionForCustomEventMemberDeclaration13: 29594637 false ) 
	#(452 13 #reduceActionForAutoPropertyMemberDeclaration22: 33453078 false ) 
	#(452 13 #reduceActionForAutoPropertyMemberDeclaration23: 33453079 false ) 
	#(452 13 #reduceActionForAutoPropertyMemberDeclaration12: 33453068 false ) 
	#(468 10 #reduceActionForPropertySetDeclaration12: 35250188 false ) 
	#(468 10 #reduceActionForPropertySetDeclaration11: 35250187 false ) 
	#(468 10 #reduceActionForPropertySetDeclaration18: 35250194 false ) 
	#(468 10 #reduceActionForPropertySetDeclaration17: 35250193 false ) 
	#(468 10 #reduceActionForPropertySetDeclaration22: 35250198 false ) 
	#(468 10 #reduceActionForPropertySetDeclaration21: 35250197 false ) 
	#(452 13 #reduceActionForAutoPropertyMemberDeclaration18: 33453074 false ) 
	#(469 12 #reduceActionForOperatorDeclaration8: 35531784 false ) 
	#(469 12 #reduceActionForOperatorDeclaration7: 35531783 false ) 
	#(452 14 #reduceActionForAutoPropertyMemberDeclaration24: 33453080 false ) 
	#(468 11 #reduceActionForPropertySetDeclaration24: 35250200 false ) 
	#(468 11 #reduceActionForPropertySetDeclaration23: 35250199 false ) 
	#(469 13 #reduceActionForOperatorDeclaration4: 35531780 false ) 
	#(469 13 #reduceActionForOperatorDeclaration3: 35531779 false ) 
	#(469 14 #reduceActionForOperatorDeclaration10: 35531786 false ) 
	#(469 14 #reduceActionForOperatorDeclaration9: 35531785 false ) 
	#(469 14 #reduceActionForOperatorDeclaration6: 35531782 false ) 
	#(469 14 #reduceActionForOperatorDeclaration5: 35531781 false ) 
	#(419 9 #reduceActionForAddHandlerDeclaration2: 30126082 false ) 
	#(419 9 #reduceActionForAddHandlerDeclaration1: 30126081 false ) 
	#(421 9 #reduceActionForRaiseEventDeclaration2: 30692354 false ) 
	#(421 9 #reduceActionForRaiseEventDeclaration1: 30692353 false ) 
	#(420 9 #reduceActionForRemoveHandlerDeclaration2: 30401538 false ) 
	#(420 9 #reduceActionForRemoveHandlerDeclaration1: 30401537 false ) 
	#(469 15 #reduceActionForOperatorDeclaration12: 35531788 false ) 
	#(469 15 #reduceActionForOperatorDeclaration11: 35531787 false ) 
	#(419 10 #reduceActionForAddHandlerDeclaration4: 30126084 false ) 
	#(419 10 #reduceActionForAddHandlerDeclaration3: 30126083 false ) 
	#(421 10 #reduceActionForRaiseEventDeclaration4: 30692356 false ) 
	#(421 10 #reduceActionForRaiseEventDeclaration3: 30692355 false ) 
	#(420 10 #reduceActionForRemoveHandlerDeclaration4: 30401540 false ) 
	#(420 10 #reduceActionForRemoveHandlerDeclaration3: 30401539 false )
	).
]

{ #category : #'generated-accessing' }
VBNetParser class >> scannerClass [
	^VBNetScanner
]

{ #category : #generated }
VBNetParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
VBNetParser class >> symbolNames [
	^ #('"!"' '"$"' '"&"' '"&="' '"("' '")"' '"*"' '"*="' '"+"' '"+="' '","' '"-"' '"-="' '"."' '"/"' '"/="' '":"' '":="' '"<"' '"<<"' '"<<="' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '">>="' '"?"' '"AddHandler"' '"AddressOf"' '"Aggregate"' '"Alias"' '"And"' '"AndAlso"' '"Ansi"' '"As"' '"Ascending"' '"Assembly"' '"Async"' '"Auto"' '"Await"' '"Binary"' '"Boolean"' '"By"' '"ByRef"' '"ByVal"' '"Byte"' '"CBool"' '"CByte"' '"CChar"' '"CDate"' '"CDbl"' '"CDec"' '"CInt"' '"CLng"' '"CObj"' '"CSByte"' '"CShort"' '"CSng"' '"CStr"' '"CType"' '"CUInt"' '"CULng"' '"CUShort"' '"Call"' '"Case"' '"Catch"' '"Char"' '"Class"' '"Compare"' '"Const"' '"Continue"' '"Custom"' '"Date"' '"Decimal"' '"Declare"' '"Default"' '"Delegate"' '"Descending"' '"Dim"' '"DirectCast"' '"Distinct"' '"Do"' '"Double"' '"Each"' '"Else"' '"End"' '"Enum"' '"Equals"' '"Erase"' '"Error"' '"Event"' '"Exit"' '"Explicit"' '"Finally"' '"For"' '"Friend"' '"From"' '"Function"' '"Get"' '"GetType"' '"Global"' '"GoTo"' '"Group"' '"Handles"' '"If"' '"Implements"' '"Imports"' '"In"' '"Infer"' '"Inherits"' '"Integer"' '"Interface"' '"Into"' '"Is"' '"IsFalse"' '"IsNot"' '"IsTrue"' '"Iterator"' '"Join"' '"Key"' '"Let"' '"Lib"' '"Like"' '"Long"' '"Loop"' '"Me"' '"Mid"' '"Mod"' '"Module"' '"MustInherit"' '"MustOverride"' '"MyBase"' '"MyClass"' '"Namespace"' '"Narrowing"' '"New"' '"Next"' '"Not"' '"NotInheritable"' '"NotOverridable"' '"Object"' '"Of"' '"Off"' '"On"' '"Operator"' '"Option"' '"Optional"' '"Or"' '"OrElse"' '"Order"' '"Out"' '"Overloads"' '"Overridable"' '"Overrides"' '"ParamArray"' '"Partial"' '"Preserve"' '"Private"' '"Property"' '"Protected"' '"Public"' '"RaiseEvent"' '"ReDim"' '"ReadOnly"' '"RemoveHandler"' '"Resume"' '"Return"' '"SByte"' '"Select"' '"Set"' '"Shadows"' '"Shared"' '"Short"' '"Single"' '"Skip"' '"Static"' '"Step"' '"Stop"' '"Strict"' '"String"' '"Structure"' '"Sub"' '"SyncLock"' '"Take"' '"Text"' '"Then"' '"Throw"' '"To"' '"Try"' '"TryCast"' '"TypeOf"' '"UInteger"' '"ULong"' '"UShort"' '"Unicode"' '"Until"' '"Using"' '"When"' '"Where"' '"While"' '"Widening"' '"With"' '"WithEvents"' '"WriteOnly"' '"Xor"' '"Yield"' '"\"' '"\="' '"^"' '"^="' '"{"' '"}"' '<LineTerminator>' '<LineContinuation>' '<whitespace>' '<comment>' '<BooleanLiteral>' '<IntegerLiteral>' '<IntLiteral>' '<FloatingPointLiteral>' '<StringLiteral>' '<CharacterLiteral>' '<DateLiteral>' '<ElseIf>' '<Nothing>' '<IdentifierOrKeyword>' '<Identifier>' '<preprocessorDirective>' 'B e g i n' 'File' '<LineTerminator>*' 'Comma' 'Period' 'OpenParenthesis' 'CloseParenthesis' 'OpenCurlyBrace' 'CloseCurlyBrace' 'Equals' 'ColonEquals' 'Literal' 'AccessModifier' 'TypeParameterList' '( Comma TypeParameter ''typeParameter'' )' '( Comma TypeParameter ''typeParameter'' )*' 'TypeParameter' 'VarianceModifier' 'TypeParameterConstraints' 'ConstraintList' '( Comma Constraint ''constraint'' )' '( Comma Constraint ''constraint'' )*' 'Constraint' 'Attributes' 'AttributeBlock ''attributeBlock''+' 'AttributeBlock' 'AttributeList' '( Comma Attribute ''attribute'' )' '( Comma Attribute ''attribute'' )*' 'Attribute' 'AttributeModifier' 'AttributeArguments' 'AttributePositionalArgumentList' '( Comma AttributeArgumentExpression ''argument''? )' '( Comma AttributeArgumentExpression ''argument''? )*' 'VariablePropertyInitializerList' '( Comma VariablePropertyInitializer ''argument'' )' '( Comma VariablePropertyInitializer ''argument'' )*' 'VariablePropertyInitializer' 'AttributeArgumentExpression' 'Start' 'OptionStatement ''option''*' 'ImportsStatement ''import''*' 'NamespaceMemberDeclaration+' 'OptionStatement' 'OptionExplicitStatement' 'OnOff' 'OptionStrictStatement' 'OptionCompareStatement' 'CompareOption' 'OptionInferStatement' 'ImportsStatement' 'ImportsClauses' '( Comma ImportsClause ''import'' )' '( Comma ImportsClause ''import'' )*' 'ImportsClause' 'AliasImportsClause' 'MembersImportsClause' 'NamespaceDeclaration' 'NamespaceMemberDeclaration*' 'NamespaceName' 'RelativeNamespaceName' '( Period <IdentifierOrKeyword> ''name'')' '( Period <IdentifierOrKeyword> ''name'')*' 'NamespaceMemberDeclaration' 'AttributesNamespaceDeclaration' 'TypeDeclaration' 'NonModuleDeclaration' 'TypeName' 'NonArrayTypeName' 'SimpleTypeName' 'QualifiedTypeName' '(Period <IdentifierOrKeyword> ''name'' TypeArguments?)' '(Period <IdentifierOrKeyword> ''name'' TypeArguments?)*' 'TypeArguments' 'TypeArgumentList' '( Comma TypeName ''type'')' '( Comma TypeName ''type'')*' 'BuiltInTypeName' 'TypeModifier' 'IdentifierModifiers' 'NullableTypeName' 'NullableNameModifier' 'TypeImplementsClause' 'TypeImplements' '( Comma NonArrayTypeName ''implements'')' '( Comma NonArrayTypeName ''implements'')*' 'PrimitiveTypeName' 'NumericTypeName' 'IntegralTypeName' 'FloatingPointTypeName' 'EnumDeclaration' 'TypeModifier ''modifier''*' 'EnumMemberDeclaration ''declaration''+' 'EnumMemberDeclaration' 'ClassDeclaration' 'ClassModifier ''modifier''*' 'TypeImplementsClause*' 'ClassMemberDeclaration ''declaration''*' 'ClassModifier' 'ClassBase' 'ClassMemberDeclaration' 'StructureDeclaration' 'StructureModifier ''modifier''*' 'StructMemberDeclaration ''declaration''*' 'StructureModifier' 'StructMemberDeclaration' 'ModuleDeclaration' 'ModuleMemberDeclaration ''declaration''*' 'ModuleMemberDeclaration' 'InterfaceDeclaration' 'InterfaceBase*' 'InterfaceMemberDeclaration ''declaration''*' 'InterfaceBase' 'InterfaceBases' '( Comma NonArrayTypeName ''inherits'')' '( Comma NonArrayTypeName ''inherits'')*' 'InterfaceMemberDeclaration' 'ArrayTypeName' 'ArrayTypeModifiers' 'ArrayTypeModifier ''arrayTypeModifier''+' 'ArrayTypeModifier' 'RankList' 'Comma+' 'ArrayNameModifier' 'DelegateDeclaration' 'MethodSignature' 'ImplementsClause' 'ImplementsList' '( Comma InterfaceMemberSpecifier ''implement'')' '( Comma InterfaceMemberSpecifier ''implement'')*' 'InterfaceMemberSpecifier' 'MethodMemberDeclaration' 'InterfaceMethodMemberDeclaration' 'MethodDeclaration' 'InterfaceMethodDeclaration' 'SubSignature' 'FunctionSignature' 'Attributes?' 'SubDeclaration' 'ProcedureModifier ''modifier''*' 'MustOverrideSubDeclaration' 'InterfaceSubDeclaration' 'InterfaceProcedureModifier ''modifier''*' 'FunctionDeclaration' 'MustOverrideFunctionDeclaration' 'InterfaceFunctionDeclaration' 'ProcedureModifier' 'MustOverrideProcedureModifier' 'InterfaceProcedureModifier' 'HandlesOrImplements' 'ExternalMethodDeclaration' 'ExternalSubDeclaration' 'ExternalMethodModifier ''modifier''*' 'ParameterList?' 'ExternalFunctionDeclaration' '( "As" ''asToken'' Attributes? TypeName ''type'')' '( "As" ''asToken'' Attributes? TypeName ''type'')?' 'ExternalMethodModifier' 'CharsetModifier' 'LibraryClause' 'AliasClause' 'ParameterList' '( Comma Parameter ''parameter'')' '( Comma Parameter ''parameter'')*' 'Parameter' 'ParameterModifier ''modifier''*' 'ParameterModifier' 'ParameterIdentifier' 'HandlesClause' 'EventHandlesList' '( Comma EventMemberSpecifier ''handle'')' '( Comma EventMemberSpecifier ''handle'')*' 'EventMemberSpecifier' 'ConstructorMemberDeclaration' 'ConstructorModifier ''modifier''*' 'ConstructorModifier' 'EventMemberDeclaration' 'RegularEventMemberDeclaration' 'EventModifiers ''modifier''*' 'InterfaceEventMemberDeclaration' 'InterfaceEventModifiers ''modifier''*' 'ParametersOrType' 'EventModifiers' 'InterfaceEventModifiers' 'CustomEventMemberDeclaration' 'EventAccessorDeclaration ''eventAccessorDeclaration''+' 'EventAccessorDeclaration' 'AddHandlerDeclaration' 'RemoveHandlerDeclaration' 'RaiseEventDeclaration' 'ConstantMemberDeclaration' 'ConstantModifier ''modifier''*' 'ConstantModifier' 'ConstantDeclarators' '( Comma ConstantDeclarator ''constant'')' '( Comma ConstantDeclarator ''constant'')*' 'ConstantDeclarator' 'VariableMemberDeclaration' 'VariableModifier ''modifier''+' 'VariableModifier' 'VariableDeclarators' '( Comma VariableDeclarator ''variable'')' '( Comma VariableDeclarator ''variable'')*' 'VariableDeclarator' 'VariableIdentifiers' '( Comma VariableIdentifier ''variableIdentifier'' )' '( Comma VariableIdentifier ''variableIdentifier'' )*' 'VariableIdentifier' 'ArraySizeInitializationModifier' 'BoundList' '( Comma Bound ''bound'' )' '( Comma Bound ''bound'' )*' 'Bound' 'PropertyMemberDeclaration' 'PropertySignature' 'RegularPropertyMemberDeclaration' 'PropertyModifier ''modifier''*' 'PropertyAccessorDeclaration ''declaration''+' 'MustOverridePropertyMemberDeclaration' 'MustOverridePropertyModifier ''modifier''+' 'AutoPropertyMemberDeclaration' 'AutoPropertyModifier ''modifier''*' '( Equals Expression ''value'')' '( Equals Expression ''value'')?' 'ImplementsClause?' '( NonArrayTypeName ''type'' ( OpenParenthesis ArgumentList? CloseParenthesis )? )' '( NonArrayTypeName ''type'' ( OpenParenthesis ArgumentList? CloseParenthesis )? )?' 'ObjectCreationExpressionInitializer ''initializer''?' 'InterfacePropertyMemberDeclaration' 'InterfacePropertyModifier ''modifier''*' 'AutoPropertyModifier' 'PropertyModifier' 'MustOverridePropertyModifier' 'InterfacePropertyModifier' 'PropertyAccessorDeclaration' 'PropertyGetDeclaration' 'PropertySetDeclaration' 'OperatorDeclaration' 'OperatorModifier ''modifier''*' 'OperatorModifier' 'OverloadableOperator' 'Statement' 'Block' '(Statements ''statement''? <LineTerminator>)' '(Statements ''statement''? <LineTerminator>)*' 'LabelDeclarationStatement' 'LabelName' 'Statements' '( ":" ''statementSeparator'' Statement ''statement''? )' '( ":" ''statementSeparator'' Statement ''statement''? )+' 'LocalDeclarationStatement' 'LocalModifier' 'WithStatement' 'SyncLockStatement' 'EventStatement' 'RaiseEventStatement' 'AddHandlerStatement' 'RemoveHandlerStatement' 'AssignmentStatement' 'RegularAssignmentStatement' 'CompoundAssignmentStatement' 'CompoundBinaryOperator' 'MidAssignmentStatement' 'InvocationStatement' 'ConditionalStatement' 'IfStatement' 'BlockIfStatement' 'ElseIfStatement ''elseIf''*' 'ElseIfStatement' 'ElseStatement' 'LineIfThenStatement' 'LineElseStatement' 'SelectStatement' 'CaseStatement ''case''*' 'CaseStatement' 'CaseClauses' '( Comma CaseClause ''clause'')' '( Comma CaseClause ''clause'')*' 'CaseClause' 'ComparisonOperator' 'CaseElseStatement' 'LoopStatement' 'WhileStatement' 'DoLoopStatement' 'DoTopLoopStatement' 'DoBottomLoopStatement' 'WhileOrUntil' 'ForStatement' 'LoopControlVariable' 'NextExpressionList' '( Comma Expression ''next'')' '( Comma Expression ''next'')*' 'ForEachStatement' 'ErrorHandlingStatement' 'StructuredErrorStatement' 'TryStatement' 'CatchStatement ''catch''*' 'FinallyStatement' 'CatchStatement' 'ThrowStatement' 'UnstructuredErrorStatement' 'ErrorStatement' 'OnErrorStatement' 'ErrorClause' 'ResumeStatement' 'ResumeClause' 'BranchStatement' 'GoToStatement' 'ExitStatement' 'ExitKind' 'ContinueStatement' 'ContinueKind' 'StopStatement' 'EndStatement' 'ReturnStatement' 'ArrayHandlingStatement' 'RedimStatement' 'RedimClauses' '( Comma RedimClause ''redim'')' '( Comma RedimClause ''redim'')*' 'RedimClause' 'EraseStatement' 'EraseExpressions' '( Comma Expression ''array'')' '( Comma Expression ''array'')*' 'UsingStatement' 'UsingResources' 'YieldStatement' 'Expression' 'ConstantExpression' 'SimpleExpression' 'LiteralExpression' 'ParenthesizedExpression' 'InstanceExpression' 'SimpleNameExpression' 'AddressOfExpression' 'TypeExpression' 'GetTypeExpression' 'GetTypeTypeName' 'QualifiedOpenTypeName' '(Period <IdentifierOrKeyword> ''name'' TypeArityList?)' '(Period <IdentifierOrKeyword> ''name'' TypeArityList?)*' 'TypeArityList' 'CommaList' 'TypeOfIsExpression' 'IsExpression' 'MemberAccessExpression' 'MemberAccessBase' 'DictionaryAccessExpression' 'InvocationExpression' 'ArgumentList' 'PositionalArgumentList' '( Comma Expression ''argument''? )' '( Comma Expression ''argument''? )*' 'NamedArgumentList' '( Comma <IdentifierOrKeyword> ''argumentName'' ColonEquals Expression ''namedArgument'')' '( Comma <IdentifierOrKeyword> ''argumentName'' ColonEquals Expression ''namedArgument'')*' 'NewExpression' 'ObjectCreationExpression' 'ObjectCreationExpressionInitializer' 'ObjectMemberInitializer' 'FieldInitializerList' '( Comma FieldInitializer ''initializer'')' '( Comma FieldInitializer ''initializer'')*' 'FieldInitializer' 'ObjectCollectionInitializer' 'CollectionInitializer' 'CollectionElementList' '( Comma CollectionElement ''element'')' '( Comma CollectionElement ''element'')*' 'CollectionElement' 'ArrayExpression' 'ArrayCreationExpression' 'ArrayLiteralExpression' 'AnonymousObjectCreationExpression' 'CastExpression' 'CastTarget' 'OperatorExpression' 'ArithmeticOperatorExpression' 'UnaryPlusExpression' 'UnaryMinusExpression' 'AdditionOperatorExpression' 'SubtractionOperatorExpression' 'MultiplicationOperatorExpression' 'DivisionOperatorExpression' 'FPDivisionOperatorExpression' 'IntegerDivisionOperatorExpression' 'ModuloOperatorExpression' 'ExponentOperatorExpression' 'RelationalOperatorExpression' 'LikeOperatorExpression' 'ConcatenationOperatorExpression' 'LogicalOperatorExpression' 'ShortCircuitLogicalOperatorExpression' 'ShiftOperatorExpression' 'LambdaExpression' 'SingleLineLambda' 'LambdaModifier ''modifier''*' 'MultiLineLambda' 'MultiLineFunctionLambda' 'MultiLineSubLambda' 'LambdaModifier' 'QueryExpression' '(<LineTerminator>? QueryOperator)' '(<LineTerminator>? QueryOperator)*' 'FromOrAggregateQueryOperator' 'QueryOperator' 'JoinOrGroupJoinQueryOperator' 'CollectionRangeVariableDeclarationList' '( Comma CollectionRangeVariableDeclaration )' '( Comma CollectionRangeVariableDeclaration )*' 'CollectionRangeVariableDeclaration' 'ExpressionRangeVariableDeclarationList' '( Comma ExpressionRangeVariableDeclaration ''declaration'')' '( Comma ExpressionRangeVariableDeclaration ''declaration'')*' 'ExpressionRangeVariableDeclaration' 'FromQueryOperator' 'JoinQueryOperator' 'JoinConditionList' '( "And" ''andToken'' <LineTerminator>? JoinCondition )' '( "And" ''andToken'' <LineTerminator>? JoinCondition )*' 'JoinCondition' 'LetQueryOperator' 'SelectQueryOperator' 'DistinctQueryOperator' 'WhereQueryOperator' 'PartitionQueryOperator' 'OrderByQueryOperator' 'OrderExpressionList' '( Comma OrderExpression ''expression'' )' '( Comma OrderExpression ''expression'' )*' 'OrderExpression' 'Ordering' 'GroupByQueryOperator' '<LineTerminator>?' 'AggregateQueryOperator' 'QueryOperator*' 'GroupJoinQueryOperator' 'ConditionalExpression' 'AwaitOperatorExpression' 'E O F' 'error')
]

{ #category : #generated }
VBNetParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetFileNode #VBNetFileNode nil #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetLiteralNode #SmaCCToken #VBNetTypeParameterListNode #OrderedCollection #OrderedCollection #VBNetTypeParameterNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #OrderedCollection #OrderedCollection #VBNetAttributeBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetAttributeNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariablePropertyInitializerNode #VBNetExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetOptionStatementNode #VBNetOptionStatementNode #SmaCCToken #VBNetOptionStatementNode #VBNetOptionStatementNode #SmaCCToken #VBNetOptionStatementNode #VBNetImportsStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetAliasImportsClauseNode #VBNetMembersImportsClauseNode #VBNetNamespaceDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetQualifiedTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetBuiltInTypeNameNode #SmaCCToken #OrderedCollection #VBNetNullableTypeNameNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetEnumDeclarationNode #OrderedCollection #OrderedCollection #VBNetEnumMemberDeclarationNode #VBNetClassDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #VBNetProgramNode #VBNetStructureDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #VBNetProgramNode #VBNetModuleDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetInterfaceDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetArrayTypeNameNode #OrderedCollection #OrderedCollection #VBNetArrayTypeModifierNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetDelegateDeclarationNode #VBNetProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetInterfaceMemberSpecifierNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetSubSignatureNode #VBNetFunctionSignatureNode #OrderedCollection #VBNetSubDeclarationNode #OrderedCollection #VBNetSubDeclarationNode #VBNetSubDeclarationNode #OrderedCollection #VBNetFunctionDeclarationNode #VBNetFunctionDeclarationNode #VBNetFunctionDeclarationNode #SmaCCToken #SmaCCToken #SmaCCToken #OrderedCollection #VBNetProgramNode #VBNetExternalSubDeclarationNode #OrderedCollection #OrderedCollection #VBNetExternalFunctionDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetParameterNode #OrderedCollection #SmaCCToken #VBNetParameterIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetEventMemberSpecifierNode #VBNetConstructorMemberDeclarationNode #OrderedCollection #SmaCCToken #VBNetProgramNode #VBNetRegularEventMemberDeclarationNode #OrderedCollection #VBNetRegularEventMemberDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #VBNetCustomEventMemberDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetAddHandlerDeclarationNode #VBNetRemoveHandlerDeclarationNode #VBNetRaiseEventDeclarationNode #VBNetConstantMemberDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetConstantDeclaratorNode #VBNetVariableMemberDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariableDeclaratorNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariableIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetProgramNode #OrderedCollection #VBNetPropertyMemberDeclarationNode #OrderedCollection #OrderedCollection #VBNetPropertyMemberDeclarationNode #OrderedCollection #VBNetAutoPropertyMemberDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetPropertyMemberDeclarationNode #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetProgramNode #VBNetPropertyGetDeclarationNode #VBNetPropertySetDeclarationNode #VBNetOperatorDeclarationNode #OrderedCollection #SmaCCToken #SmaCCToken #VBNetStatementNode #OrderedCollection #VBNetProgramNode #OrderedCollection #VBNetLabelDeclarationStatementNode #SmaCCToken #VBNetProgramNode #OrderedCollection #OrderedCollection #VBNetLocalDeclarationStatementNode #SmaCCToken #VBNetWithStatementNode #VBNetSyncLockStatementNode #VBNetStatementNode #VBNetRaiseEventStatementNode #VBNetAddHandlerStatementNode #VBNetRemoveHandlerStatementNode #VBNetStatementNode #VBNetAssignmentStatementNode #VBNetAssignmentStatementNode #SmaCCToken #VBNetMidAssignmentStatementNode #VBNetInvocationStatementNode #VBNetStatementNode #VBNetIfStatementNode #VBNetIfStatementNode #OrderedCollection #VBNetElseIfStatementNode #VBNetElseStatementNode #VBNetIfStatementNode #VBNetElseStatementNode #VBNetSelectStatementNode #OrderedCollection #VBNetCaseStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetCaseClauseNode #SmaCCToken #VBNetCaseElseStatementNode #VBNetStatementNode #VBNetWhileStatementNode #VBNetDoLoopStatementNode #VBNetDoTopLoopStatementNode #VBNetDoBottomLoopStatementNode #SmaCCToken #VBNetForStatementNode #VBNetProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetForEachStatementNode #VBNetStatementNode #VBNetStatementNode #VBNetTryStatementNode #OrderedCollection #VBNetFinallyStatementNode #VBNetCatchStatementNode #VBNetThrowStatementNode #VBNetStatementNode #VBNetErrorStatementNode #VBNetOnErrorStatementNode #VBNetProgramNode #VBNetResumeStatementNode #SmaCCToken #VBNetStatementNode #VBNetGoToStatementNode #VBNetExitStatementNode #SmaCCToken #VBNetContinueStatementNode #SmaCCToken #VBNetStopStatementNode #VBNetEndStatementNode #VBNetReturnStatementNode #VBNetStatementNode #VBNetRedimStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetRedimClauseNode #VBNetEraseStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetUsingStatementNode #OrderedCollection #VBNetYieldStatementNode #VBNetExpressionNode #VBNetExpressionNode #VBNetExpressionNode #VBNetLiteralNode #VBNetExpressionNode #VBNetInstanceExpressionNode #VBNetSimpleNameExpressionNode #VBNetAddressOfExpressionNode #VBNetExpressionNode #VBNetGetTypeExpressionNode #VBNetProgramNode #VBNetQualifiedOpenTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetTypeOfIsExpressionNode #VBNetBinaryExpressionNode #VBNetMemberAccessExpressionNode #VBNetProgramNode #VBNetDictionaryAccessExpressionNode #VBNetInvocationExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionNode #VBNetObjectCreationExpressionNode #VBNetProgramNode #VBNetObjectMemberInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetFieldInitializerNode #VBNetObjectCollectionInitializerNode #VBNetCollectionInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionNode #VBNetExpressionNode #VBNetArrayCreationExpressionNode #VBNetCollectionInitializerNode #VBNetAnonymousCreationExpressionNode #VBNetExpressionNode #SmaCCToken #VBNetExpressionNode #VBNetExpressionNode #VBNetUnaryExpressionNode #VBNetUnaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetLambdaExpressionNode #VBNetLambdaExpressionNode #OrderedCollection #VBNetLambdaExpressionNode #VBNetFunctionLambdaExpressionNode #VBNetSubLambdaExpressionNode #SmaCCToken #VBNetQueryExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionRangeVariableDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #VBNetExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetOrderExpressionNode #SmaCCToken #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetConditionalExpressionNode #VBNetAwaitExpressionNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBNetParser class >> transitionTable [
^#(
#[1 0 6 0 19 0 6 0 70 0 6 0 79 0 6 0 89 0 6 0 98 0 6 0 109 0 6 0 114 0 6 0 131 0 6 0 132 0 6 0 136 0 6 0 141 0 6 0 148 0 6 0 158 0 6 0 160 0 6 0 162 0 6 0 163 0 6 0 173 0 6 0 183 0 6 0 215 0 9 0 232 0 13 0 233 0 6 2 160] 
#[0 0 0 2 160] 
#[1 0 10 0 19 0 10 0 70 0 10 0 79 0 10 0 89 0 10 0 98 0 10 0 109 0 10 0 114 0 10 0 131 0 10 0 132 0 10 0 136 0 10 0 141 0 10 0 148 0 10 0 158 0 10 0 160 0 10 0 162 0 10 0 163 0 10 0 173 0 10 0 183 0 17 0 215 0 21 1 15 0 25 1 16 0 10 2 160] 
#[0 0 14 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 0 215 2 160] 
#[0 0 18 2 160] 
#[1 0 22 0 19 0 22 0 70 0 22 0 79 0 22 0 89 0 22 0 98 0 22 0 109 0 22 0 114 0 22 0 131 0 22 0 132 0 22 0 136 0 22 0 141 0 29 0 148 0 22 0 158 0 22 0 160 0 22 0 162 0 22 0 163 0 22 0 173 0 22 0 183 0 33 1 17 0 37 1 19 0 37 1 20 0 37 1 22 0 37 1 23 0 37 1 25 0 22 2 160] 
#[1 0 57 0 71 0 61 0 95 0 65 0 111 0 69 0 181] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 77 0 109 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 0 85 0 254 0 89 0 255 0 93 1 0 0 97 1 18 0 101 1 26 0 105 1 33 0 109 1 39 0 113 1 40 0 117 1 41 0 117 1 42 0 117 1 66 0 129 1 67 0 117 1 70 0 137 1 71 0 117 1 77 0 145 1 78 0 117 1 82 0 117 1 85 0 117 1 100 0 38 2 160] 
#[0 0 42 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 46 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 50 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 54 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 58 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 169 0 43 0 187 1 24] 
#[1 0 173 0 17 0 189 0 145 0 189 0 146 0 185 0 215 0 189 1 21] 
#[1 0 193 0 17 0 201 0 145 0 201 0 146 0 197 0 215 0 201 1 21] 
#[1 0 205 0 17 0 213 0 145 0 213 0 146 0 209 0 215 0 213 1 21] 
#[1 1 49 0 39 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 49 0 131 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 1 41 1 1 1 45 1 4 1 49 1 5 1 53 1 45 1 53 1 46 1 53 1 53 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 81 0 229 1 85 1 27 1 89 1 30 1 89 1 31 1 89 1 32 1 101 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 1 101 1 93] 
#[1 1 121 0 103 1 125 0 229 1 129 1 35 1 133 1 36] 
#[1 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 137 1 33 1 141 1 67 1 145 1 71 1 149 1 78 0 62 2 160] 
#[1 0 73 0 19 0 66 0 30 0 66 0 40 0 66 0 44 0 66 0 46 0 66 0 47 0 66 0 48 0 66 0 69 0 66 0 70 0 66 0 72 0 66 0 74 0 66 0 75 0 66 0 76 0 66 0 77 0 66 0 78 0 66 0 79 0 66 0 81 0 66 0 85 0 66 0 89 0 66 0 93 0 66 0 98 0 66 0 100 0 66 0 101 0 66 0 103 0 66 0 113 0 66 0 114 0 66 0 120 0 66 0 126 0 66 0 131 0 66 0 132 0 66 0 133 0 66 0 136 0 66 0 137 0 66 0 138 0 66 0 141 0 66 0 142 0 66 0 143 0 66 0 147 0 66 0 149 0 66 0 154 0 66 0 155 0 66 0 156 0 66 0 157 0 66 0 158 0 66 0 160 0 66 0 161 0 66 0 162 0 66 0 163 0 66 0 164 0 66 0 166 0 66 0 167 0 66 0 170 0 66 0 172 0 66 0 173 0 66 0 174 0 66 0 175 0 66 0 176 0 66 0 182 0 66 0 183 0 66 0 184 0 66 0 194 0 66 0 195 0 66 0 196 0 66 0 203 0 66 0 205 0 66 0 206 0 66 0 229 1 153 1 0 0 66 2 160] 
#[0 0 70 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 157 0 254 0 89 0 255 0 93 1 0 0 105 1 33 1 161 1 39 0 113 1 40 0 117 1 41 0 117 1 42 0 117 1 66 0 129 1 67 0 117 1 70 0 137 1 71 0 117 1 77 0 145 1 78 0 117 1 82 0 117 1 85 0 117 1 100 0 74 2 160] 
#[0 0 78 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 82 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 86 0 19 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 90 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 94 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 98 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 1 165 0 79 1 169 0 89 1 205 0 98 1 177 0 114 1 181 0 131 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 243 1 205 1 54] 
#[0 0 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 1 209 0 70 1 229 0 98 1 229 0 132 1 229 0 141 1 229 0 158 1 229 0 160 1 229 0 162 1 229 0 163 1 229 0 173 1 229 0 243 1 229 1 54 1 229 1 74] 
#[0 0 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 1 245 0 98 1 245 0 158 1 245 0 160 1 245 0 162 1 245 0 163 1 245 0 173 1 237 0 183 1 245 0 243 1 245 1 54 1 245 1 80] 
#[0 0 114 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 0 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 0 126 0 17 0 215] 
#[0 0 130 0 17 0 215] 
#[1 1 249 0 17 1 253 0 215] 
#[0 0 134 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 138 0 17 0 215] 
#[0 0 142 0 17 0 215] 
#[0 0 146 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 1 0 17 2 5 0 215] 
#[0 0 150 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 154 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 9 0 17 2 13 0 215] 
#[0 0 158 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 162 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 17 0 17 2 21 0 215] 
#[0 0 166 0 17] 
#[0 0 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 25 0 14 2 29 0 235] 
#[0 0 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 202 0 17] 
#[0 0 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 15 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 37 0 236 2 41 1 48 2 45 1 49] 
#[1 2 49 0 25 2 53 0 215] 
#[1 0 242 0 11 0 242 0 25 0 242 0 215 2 57 1 3] 
#[0 2 61 0 17] 
#[1 2 33 0 5 0 246 0 11 0 246 0 25 0 246 0 215 2 65 0 236] 
#[0 0 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 15 0 5 0 238 0 11 0 238 0 14 0 238 0 17 2 69 0 24 0 238 0 29 0 238 0 215 2 37 0 236 2 73 0 240 2 41 1 48 2 45 1 49] 
#[1 2 77 0 17 2 81 0 215] 
#[1 1 18 0 11 1 18 0 17 1 18 0 215 2 85 1 29] 
#[0 1 22 0 11 0 17 0 215] 
#[0 1 26 0 11 0 17 0 215] 
#[0 1 30 0 11 0 17 0 215] 
#[1 1 34 0 1 1 34 0 3 1 34 0 4 0 19 0 5 1 34 0 6 1 34 0 7 1 34 0 8 1 34 0 9 1 34 0 10 1 34 0 11 1 34 0 12 1 34 0 13 1 34 0 14 1 34 0 15 1 34 0 16 1 34 0 17 1 34 0 19 1 34 0 20 1 34 0 21 1 34 0 22 1 34 0 23 1 34 0 24 1 34 0 25 1 34 0 26 1 34 0 27 1 34 0 28 2 89 0 29 1 34 0 32 1 34 0 34 1 34 0 35 1 34 0 38 1 34 0 45 1 34 0 80 1 34 0 83 1 34 0 87 1 34 0 90 1 34 0 99 1 34 0 105 1 34 0 106 1 34 0 108 1 34 0 110 1 34 0 115 1 34 0 116 1 34 0 118 1 34 0 121 1 34 0 123 1 34 0 125 1 34 0 130 1 34 0 146 1 34 0 150 1 34 0 151 1 34 0 152 1 34 0 171 1 34 0 177 1 34 0 179 1 34 0 186 1 34 0 188 1 34 0 190 1 34 0 201 1 34 0 207 1 34 0 209 1 34 0 210 1 34 0 211 1 34 0 212 1 34 0 214 1 34 0 215 2 93 0 236 2 97 1 94 2 101 1 95 2 105 1 96] 
#[0 1 38 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 25 0 14 1 50 0 17 1 50 0 215 2 109 0 235] 
#[1 1 54 0 14 1 54 0 17 1 54 0 215 2 113 1 38] 
#[1 2 117 0 17 2 121 0 215] 
#[0 1 58 0 17 0 215] 
#[0 1 62 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 125 0 79 2 129 0 89 1 205 0 98 2 133 0 114 2 137 0 131 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 243 1 205 1 54] 
#[1 2 141 0 70 1 229 0 98 1 229 0 132 1 229 0 141 1 229 0 158 1 229 0 160 1 229 0 162 1 229 0 163 1 229 0 173 1 229 0 243 1 229 1 54 1 229 1 74] 
#[1 1 245 0 98 1 245 0 158 1 245 0 160 1 245 0 162 1 245 0 163 1 245 0 173 2 145 0 183 1 245 0 243 1 245 1 54 1 245 1 80] 
#[0 1 66 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[1 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 137 1 33 1 141 1 67 1 145 1 71 1 149 1 78] 
#[0 1 70 0 19 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 149 0 100 2 153 0 184 2 157 1 101 2 157 1 111 2 157 1 112] 
#[0 2 169 0 229] 
#[0 1 74 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 2 173 0 229] 
#[0 2 177 0 229] 
#[0 1 78 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 1 82 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 1 86 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 1 90 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 141 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 94 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 141 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 98 0 79 0 89 0 98 0 114 0 131 0 160 0 162 0 163 0 173] 
#[0 2 181 0 229] 
#[0 1 102 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 106 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 110 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 114 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 118 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 122 0 98 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 2 185 0 229] 
#[0 1 126 0 98 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 130 0 98 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 134 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 138 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 142 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 146 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 150 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 154 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 158 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 162 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 189 0 215 1 166 0 228 1 166 0 229] 
#[0 2 193 0 228] 
#[1 1 170 0 1 1 170 0 5 1 170 0 6 1 170 0 9 1 170 0 11 1 170 0 12 1 170 0 14 1 170 0 19 1 170 0 31 1 170 0 32 1 170 0 40 1 170 0 42 1 170 0 44 1 170 0 46 1 170 0 47 1 170 0 48 1 170 0 49 1 170 0 50 1 170 0 51 1 170 0 52 1 170 0 53 1 170 0 54 1 170 0 55 1 170 0 56 1 170 0 57 1 170 0 58 1 170 0 59 1 170 0 60 1 170 0 61 1 170 0 62 1 170 0 63 1 170 0 64 1 170 0 65 1 170 0 69 1 170 0 75 1 170 0 76 1 170 0 82 1 170 0 85 1 170 0 99 1 170 0 100 1 170 0 102 1 170 0 103 1 170 0 107 1 170 0 113 1 170 0 120 1 170 0 126 1 170 0 128 1 170 0 134 1 170 0 135 1 170 0 138 1 170 0 140 1 170 0 143 1 170 0 144 1 170 0 149 1 170 0 157 1 170 0 170 1 170 0 175 1 170 0 176 1 170 0 182 1 170 0 184 1 170 0 192 1 170 0 193 1 170 0 194 1 170 0 195 1 170 0 196 1 170 0 213 0 23 0 215 1 170 0 219 1 170 0 220 1 170 0 222 1 170 0 223 1 170 0 224 1 170 0 225 1 170 0 227 1 170 0 228 1 170 0 229] 
#[0 2 201 0 144] 
#[1 1 174 0 1 1 174 0 3 1 174 0 4 1 174 0 5 1 174 0 6 1 174 0 7 1 174 0 8 1 174 0 9 1 174 0 10 1 174 0 11 1 174 0 12 1 174 0 13 0 27 0 14 1 174 0 15 1 174 0 16 1 174 0 17 1 174 0 19 1 174 0 20 1 174 0 21 1 174 0 22 1 174 0 23 1 174 0 24 1 174 0 25 1 174 0 26 1 174 0 27 1 174 0 28 1 174 0 29 1 174 0 32 1 174 0 34 1 174 0 35 1 174 0 38 1 174 0 45 1 174 0 80 1 174 0 83 1 174 0 87 1 174 0 90 1 174 0 99 1 174 0 105 1 174 0 106 1 174 0 108 1 174 0 110 1 174 0 115 1 174 0 116 1 174 0 118 1 174 0 121 1 174 0 123 1 174 0 125 1 174 0 130 1 174 0 146 1 174 0 150 1 174 0 151 1 174 0 152 1 174 0 171 1 174 0 177 1 174 0 179 1 174 0 186 1 174 0 188 1 174 0 190 1 174 0 200 1 174 0 201 1 174 0 204 1 174 0 207 1 174 0 209 1 174 0 210 1 174 0 211 1 174 0 212 1 174 0 214 1 174 0 215 2 205 0 235 2 209 1 47] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 213 1 48] 
#[1 2 217 0 17 1 178 0 19 1 178 0 30 1 178 0 40 1 178 0 44 1 178 0 46 1 178 0 47 1 178 0 48 1 178 0 69 1 178 0 70 1 178 0 72 1 178 0 74 1 178 0 75 1 178 0 76 1 178 0 77 1 178 0 78 1 178 0 79 1 178 0 81 1 178 0 85 1 178 0 89 1 178 0 93 1 178 0 98 1 178 0 100 1 178 0 101 1 178 0 103 1 178 0 113 1 178 0 114 1 178 0 120 1 178 0 126 1 178 0 131 1 178 0 132 1 178 0 133 1 178 0 136 1 178 0 137 1 178 0 138 1 178 0 141 1 178 0 142 1 178 0 143 1 178 0 147 1 178 0 149 1 178 0 154 1 178 0 155 1 178 0 156 1 178 0 157 1 178 0 158 1 178 0 160 1 178 0 161 1 178 0 162 1 178 0 163 1 178 0 164 1 178 0 166 1 178 0 167 1 178 0 170 1 178 0 172 1 178 0 173 1 178 0 174 1 178 0 175 1 178 0 176 1 178 0 182 1 178 0 183 1 178 0 184 1 178 0 194 1 178 0 195 1 178 0 196 1 178 0 203 1 178 0 205 1 178 0 206 2 221 0 215 1 178 0 229 1 178 2 160] 
#[0 2 225 0 25] 
#[1 2 229 0 11 1 182 0 25 1 182 0 215 2 233 0 234 2 237 1 2] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 2 241 1 45 2 241 1 46 2 241 1 53 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 2 245 0 1 2 33 0 5 0 31 0 6 2 253 0 9 1 186 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 35 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 169 0 228 3 173 0 229 3 177 0 235 3 181 0 236 3 185 0 237 3 189 0 238 3 225 0 242 3 197 1 6 3 201 1 7 3 205 1 9 3 209 1 10 3 213 1 13 3 217 1 14 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 3 217 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[1 1 194 0 1 1 194 0 5 1 194 0 9 1 194 0 12 1 194 0 14 1 194 0 31 1 194 0 32 1 194 0 40 1 194 0 42 1 194 0 44 1 194 0 48 1 194 0 49 1 194 0 50 1 194 0 51 1 194 0 52 1 194 0 53 1 194 0 54 1 194 0 55 1 194 0 56 1 194 0 57 1 194 0 58 1 194 0 59 1 194 0 60 1 194 0 61 1 194 0 62 1 194 0 63 1 194 0 64 1 194 0 65 1 194 0 69 1 194 0 75 1 194 0 76 1 194 0 82 1 194 0 85 1 194 0 99 1 194 0 100 1 194 0 102 1 194 0 103 1 194 0 107 1 194 0 113 1 194 0 120 1 194 0 126 1 194 0 128 1 194 0 134 1 194 0 135 1 194 0 138 1 194 0 140 1 194 0 143 1 194 0 170 1 194 0 175 1 194 0 176 1 194 0 182 1 194 0 184 1 194 0 192 1 194 0 193 1 194 0 194 1 194 0 195 1 194 0 196 1 194 0 213 4 189 0 215 1 194 0 219 1 194 0 220 1 194 0 222 1 194 0 223 1 194 0 224 1 194 0 225 1 194 0 227 1 194 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 4 193 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 4 193 1 93] 
#[0 1 198 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 202 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 229 0 11 1 206 0 17 1 206 0 215 4 197 0 234 4 201 1 28] 
#[0 1 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 209 0 6 2 229 0 11 3 137 0 215 4 205 0 234 4 209 0 237 4 213 1 97 4 217 1 98] 
#[0 1 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 218 0 1 1 218 0 3 1 218 0 4 0 39 0 5 1 218 0 6 1 218 0 7 1 218 0 8 1 218 0 9 1 218 0 10 1 218 0 11 1 218 0 12 1 218 0 13 1 218 0 14 1 218 0 15 1 218 0 16 1 218 0 17 1 218 0 19 1 218 0 20 1 218 0 21 1 218 0 22 1 218 0 23 1 218 0 24 1 218 0 25 1 218 0 26 1 218 0 27 1 218 0 28 1 218 0 32 1 218 0 34 1 218 0 35 1 218 0 37 1 218 0 38 1 218 0 45 1 218 0 80 1 218 0 83 1 218 0 87 1 218 0 90 1 218 0 99 1 218 0 105 1 218 0 106 1 218 0 108 1 218 0 110 1 218 0 115 1 218 0 116 1 218 0 118 1 218 0 121 1 218 0 123 1 218 0 125 1 218 0 130 1 218 0 146 1 218 0 150 1 218 0 151 1 218 0 152 1 218 0 171 1 218 0 177 1 218 0 179 1 218 0 186 1 218 0 188 1 218 0 190 1 218 0 201 1 218 0 207 1 218 0 209 1 218 0 210 1 218 0 211 1 218 0 212 1 218 0 213 1 218 0 214 1 218 0 215 2 93 0 236 4 221 1 96] 
#[0 1 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 1 125 0 229 4 225 1 36] 
#[1 2 25 0 14 1 226 0 17 1 226 0 215 4 229 0 235 4 233 1 37] 
#[1 1 230 0 19 1 230 0 70 1 230 0 79 1 230 0 88 1 230 0 89 1 230 0 98 1 230 0 114 1 230 0 131 1 230 0 132 1 230 0 136 1 230 0 141 1 230 0 158 1 230 0 160 1 230 0 162 1 230 0 163 1 230 0 173 1 230 0 183 4 237 1 34] 
#[1 1 230 0 19 1 230 0 70 1 230 0 79 1 230 0 88 1 230 0 89 1 230 0 98 1 230 0 114 1 230 0 131 1 230 0 132 1 230 0 136 1 230 0 141 1 230 0 158 1 230 0 160 1 230 0 162 1 230 0 163 1 230 0 173 1 230 0 183 4 241 1 34] 
#[1 2 149 0 100 2 153 0 184 4 245 1 101 4 245 1 111 4 245 1 112] 
#[0 4 249 0 229] 
#[0 4 253 0 229] 
#[0 5 1 0 229] 
#[0 5 5 0 229] 
#[0 5 9 0 229] 
#[0 5 13 0 229] 
#[0 5 17 0 229] 
#[1 5 21 0 17 5 25 0 215] 
#[0 1 234 0 17 0 215] 
#[0 1 238 0 17 0 215] 
#[1 5 29 0 17 5 33 0 37 5 37 0 215] 
#[1 2 33 0 5 5 41 0 17 5 45 0 215 5 49 0 236 5 53 0 244] 
#[1 5 57 0 17 5 61 0 215] 
#[1 2 33 0 5 5 65 0 17 5 69 0 215 5 49 0 236 5 73 0 244] 
#[1 2 33 0 5 5 77 0 17 5 81 0 215 5 49 0 236 5 85 0 244] 
#[0 1 242 0 228 0 229] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 15 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 37 0 236 5 89 1 48 5 93 1 49] 
#[0 1 246 0 1 0 5 0 6 0 9 0 11 0 12 0 14 0 19 0 31 0 32 0 40 0 42 0 44 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 144 0 149 0 157 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 228 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 97 1 43 1 105 1 44 1 105 1 45 1 105 1 46 5 101 1 50 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 97 1 93] 
#[0 5 105 0 228] 
#[0 1 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 254 0 1 1 254 0 3 1 254 0 4 1 254 0 5 1 254 0 6 1 254 0 7 1 254 0 8 1 254 0 9 1 254 0 10 1 254 0 11 1 254 0 12 1 254 0 13 0 43 0 14 1 254 0 15 1 254 0 16 1 254 0 17 1 254 0 19 1 254 0 20 1 254 0 21 1 254 0 22 1 254 0 23 1 254 0 24 1 254 0 25 1 254 0 26 1 254 0 27 1 254 0 28 1 254 0 29 1 254 0 32 1 254 0 34 1 254 0 35 1 254 0 38 1 254 0 45 1 254 0 80 1 254 0 83 1 254 0 87 1 254 0 90 1 254 0 99 1 254 0 105 1 254 0 106 1 254 0 108 1 254 0 110 1 254 0 115 1 254 0 116 1 254 0 118 1 254 0 121 1 254 0 123 1 254 0 125 1 254 0 130 1 254 0 146 1 254 0 150 1 254 0 151 1 254 0 152 1 254 0 171 1 254 0 177 1 254 0 179 1 254 0 186 1 254 0 188 1 254 0 190 1 254 0 200 1 254 0 201 1 254 0 204 1 254 0 207 1 254 0 209 1 254 0 210 1 254 0 211 1 254 0 212 1 254 0 214 1 254 0 215 2 205 0 235 2 209 1 47] 
#[0 2 2 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[0 2 6 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[1 5 109 0 17 2 10 0 19 2 10 0 30 2 10 0 40 2 10 0 44 2 10 0 46 2 10 0 47 2 10 0 48 2 10 0 69 2 10 0 70 2 10 0 72 2 10 0 74 2 10 0 75 2 10 0 76 2 10 0 77 2 10 0 78 2 10 0 79 2 10 0 81 2 10 0 85 2 10 0 89 2 10 0 93 2 10 0 98 2 10 0 100 2 10 0 101 2 10 0 103 2 10 0 113 2 10 0 114 2 10 0 120 2 10 0 126 2 10 0 131 2 10 0 132 2 10 0 133 2 10 0 136 2 10 0 137 2 10 0 138 2 10 0 141 2 10 0 142 2 10 0 143 2 10 0 147 2 10 0 149 2 10 0 154 2 10 0 155 2 10 0 156 2 10 0 157 2 10 0 158 2 10 0 160 2 10 0 161 2 10 0 162 2 10 0 163 2 10 0 164 2 10 0 166 2 10 0 167 2 10 0 170 2 10 0 172 2 10 0 173 2 10 0 174 2 10 0 175 2 10 0 176 2 10 0 182 2 10 0 183 2 10 0 184 2 10 0 194 2 10 0 195 2 10 0 196 2 10 0 203 2 10 0 205 2 10 0 206 5 113 0 215 2 10 0 229 2 10 2 160] 
#[1 2 14 0 1 2 14 0 5 2 14 0 6 2 14 0 9 2 14 0 11 2 14 0 12 2 14 0 14 2 14 0 19 2 14 0 22 2 14 0 23 2 14 0 24 2 14 0 25 2 14 0 26 2 14 0 31 2 14 0 32 2 14 0 39 2 14 0 40 2 14 0 42 2 14 0 44 2 14 0 46 2 14 0 47 2 14 0 48 2 14 0 49 2 14 0 50 2 14 0 51 2 14 0 52 2 14 0 53 2 14 0 54 2 14 0 55 2 14 0 56 2 14 0 57 2 14 0 58 2 14 0 59 2 14 0 60 2 14 0 61 2 14 0 62 2 14 0 63 2 14 0 64 2 14 0 65 2 14 0 69 2 14 0 70 2 14 0 75 2 14 0 76 2 14 0 82 2 14 0 85 2 14 0 99 2 14 0 100 2 14 0 102 2 14 0 103 2 14 0 107 2 14 0 110 2 14 0 113 2 14 0 116 2 14 0 120 2 14 0 122 2 14 0 126 2 14 0 128 2 14 0 131 2 14 0 134 2 14 0 135 2 14 0 138 2 14 0 140 2 14 0 143 2 14 0 149 2 14 0 153 2 14 0 157 2 14 0 170 2 14 0 175 2 14 0 176 2 14 0 182 2 14 0 183 2 14 0 184 2 14 0 192 2 14 0 193 2 14 0 194 2 14 0 195 2 14 0 196 2 14 0 213 0 47 0 215 2 14 0 219 2 14 0 220 2 14 0 222 2 14 0 223 2 14 0 224 2 14 0 225 2 14 0 227 2 14 0 228 2 14 0 229] 
#[1 1 49 0 39 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 49 0 131 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 121 1 4 1 49 1 5 1 53 1 45 1 53 1 46 1 53 1 53 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[0 2 18 0 11 0 25 0 215] 
#[1 2 33 0 5 2 22 0 11 2 22 0 25 2 22 0 215 5 125 0 236] 
#[0 5 129 0 228] 
#[0 2 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 37 0 38 0 40 0 42 0 44 0 45 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 69 0 72 0 73 0 75 0 76 0 80 0 81 0 82 0 83 0 84 0 85 0 87 0 88 0 90 0 91 0 92 0 94 0 97 0 99 0 100 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 110 0 113 0 115 0 116 0 118 0 120 0 121 0 123 0 125 0 126 0 128 0 129 0 130 0 134 0 135 0 138 0 140 0 143 0 146 0 150 0 151 0 152 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 177 0 178 0 179 0 180 0 182 0 184 0 185 0 186 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 200 0 201 0 202 0 204 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 133 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 133 2 48 5 133 2 50 5 133 2 51 5 133 2 52 5 133 2 53 5 133 2 54 5 133 2 55 5 133 2 56 5 133 2 57 5 133 2 64 5 133 2 65 5 133 2 66 4 21 2 67 5 133 2 68 5 133 2 69 5 133 2 77 5 133 2 78 5 133 2 86 5 133 2 91 5 133 2 92 5 133 2 93 5 133 2 94 5 133 2 95 4 65 2 96 5 133 2 97 5 133 2 98 5 133 2 99 5 133 2 100 5 133 2 101 5 133 2 102 5 133 2 103 5 133 2 104 5 133 2 105 5 133 2 106 5 133 2 107 5 133 2 108 5 133 2 109 5 133 2 110 5 133 2 111 5 133 2 112 5 133 2 113 5 133 2 114 5 133 2 115 5 133 2 116 4 149 2 117 5 133 2 118 5 133 2 119 5 133 2 120 5 133 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 133 2 158 5 133 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 137 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 137 2 48 5 137 2 50 5 137 2 51 5 137 2 52 5 137 2 53 5 137 2 54 5 137 2 55 5 137 2 56 5 137 2 57 5 137 2 64 5 137 2 65 5 137 2 66 4 21 2 67 5 137 2 68 5 137 2 69 5 137 2 77 5 137 2 78 5 137 2 86 5 137 2 91 5 137 2 92 5 137 2 93 5 137 2 94 5 137 2 95 4 65 2 96 5 137 2 97 5 137 2 98 5 137 2 99 5 137 2 100 5 137 2 101 5 137 2 102 5 137 2 103 5 137 2 104 5 137 2 105 5 137 2 106 5 137 2 107 5 137 2 108 5 137 2 109 5 137 2 110 5 137 2 111 5 137 2 112 5 137 2 113 5 137 2 114 5 137 2 115 5 137 2 116 4 149 2 117 5 137 2 118 5 137 2 119 5 137 2 120 5 137 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 137 2 158 5 137 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 141 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 141 2 48 5 141 2 50 5 141 2 51 5 141 2 52 5 141 2 53 5 141 2 54 5 141 2 55 5 141 2 56 5 141 2 57 5 141 2 64 5 141 2 65 5 141 2 66 4 21 2 67 5 141 2 68 5 141 2 69 5 141 2 77 5 141 2 78 5 141 2 86 5 141 2 91 5 141 2 92 5 141 2 93 5 141 2 94 5 141 2 95 4 65 2 96 5 141 2 97 5 141 2 98 5 141 2 99 5 141 2 100 5 141 2 101 5 141 2 102 5 141 2 103 5 141 2 104 5 141 2 105 5 141 2 106 5 141 2 107 5 141 2 108 5 141 2 109 5 141 2 110 5 141 2 111 5 141 2 112 5 141 2 113 5 141 2 114 5 141 2 115 5 141 2 116 4 149 2 117 5 141 2 118 5 141 2 119 5 141 2 120 5 141 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 141 2 158 5 141 2 159] 
#[1 5 145 0 215 5 149 0 229 5 153 2 131] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 157 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 157 2 48 5 157 2 50 5 157 2 51 5 157 2 52 5 157 2 53 5 157 2 54 5 157 2 55 5 157 2 56 5 157 2 57 5 157 2 64 5 157 2 65 5 157 2 66 4 21 2 67 5 157 2 68 5 157 2 69 5 157 2 77 5 157 2 78 5 157 2 86 5 157 2 91 5 157 2 92 5 157 2 93 5 157 2 94 5 157 2 95 4 65 2 96 5 157 2 97 5 157 2 98 5 157 2 99 5 157 2 100 5 157 2 101 5 157 2 102 5 157 2 103 5 157 2 104 5 157 2 105 5 157 2 106 5 157 2 107 5 157 2 108 5 157 2 109 5 157 2 110 5 157 2 111 5 157 2 112 5 157 2 113 5 157 2 114 5 157 2 115 5 157 2 116 4 149 2 117 5 157 2 118 5 157 2 119 5 157 2 120 5 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 157 2 158 5 157 2 159] 
#[0 2 30 0 5] 
#[0 2 34 0 5] 
#[0 2 38 0 5] 
#[0 2 42 0 5] 
#[0 2 46 0 5] 
#[0 2 50 0 5] 
#[0 2 54 0 5] 
#[0 2 58 0 5] 
#[0 2 62 0 5] 
#[0 2 66 0 5] 
#[0 2 70 0 5] 
#[0 2 74 0 5] 
#[0 2 78 0 5] 
#[1 2 33 0 5 5 161 0 236] 
#[0 2 82 0 5] 
#[0 2 86 0 5] 
#[0 2 90 0 5] 
#[1 2 33 0 5 5 165 0 236] 
#[1 5 169 0 215 5 149 0 229 5 173 2 128 5 177 2 131] 
#[1 2 33 0 5 5 181 0 236] 
#[1 0 51 0 14 2 29 0 235] 
#[1 2 33 0 5 5 185 0 236] 
#[0 2 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 102 0 14] 
#[0 2 106 0 14] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 5 189 0 204 1 37 0 229 5 193 1 44 5 193 1 45 5 193 1 46 5 193 1 53 5 193 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 197 2 80] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 201 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 201 2 48 5 201 2 50 5 201 2 51 5 201 2 52 5 201 2 53 5 201 2 54 5 201 2 55 5 201 2 56 5 201 2 57 5 201 2 64 5 201 2 65 5 201 2 66 4 21 2 67 5 201 2 68 5 201 2 69 5 201 2 77 5 201 2 78 5 201 2 86 5 201 2 91 5 201 2 92 5 201 2 93 5 201 2 94 5 201 2 95 4 65 2 96 5 201 2 97 5 201 2 98 5 201 2 99 5 201 2 100 5 201 2 101 5 201 2 102 5 201 2 103 5 201 2 104 5 201 2 105 5 201 2 106 5 201 2 107 5 201 2 108 5 201 2 109 5 201 2 110 5 201 2 111 5 201 2 112 5 201 2 113 5 201 2 114 5 201 2 115 5 201 2 116 4 149 2 117 5 201 2 118 5 201 2 119 5 201 2 120 5 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 201 2 158 5 201 2 159] 
#[1 2 33 0 5 5 205 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 209 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 209 2 48 5 209 2 50 5 209 2 51 5 209 2 52 5 209 2 53 5 209 2 54 5 209 2 55 5 209 2 56 5 209 2 57 5 209 2 64 5 209 2 65 5 209 2 66 4 21 2 67 5 209 2 68 5 209 2 69 5 209 2 77 5 209 2 78 5 209 2 86 5 209 2 91 5 209 2 92 5 209 2 93 5 209 2 94 5 209 2 95 4 65 2 96 5 209 2 97 5 209 2 98 5 209 2 99 5 209 2 100 5 209 2 101 5 209 2 102 5 209 2 103 5 209 2 104 5 209 2 105 5 209 2 106 5 209 2 107 5 209 2 108 5 209 2 109 5 209 2 110 5 209 2 111 5 209 2 112 5 209 2 113 5 209 2 114 5 209 2 115 5 209 2 116 4 149 2 117 5 209 2 118 5 209 2 119 5 209 2 120 5 209 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 209 2 158 5 209 2 159] 
#[1 2 110 0 1 2 110 0 5 2 110 0 9 2 110 0 12 2 110 0 14 2 110 0 31 2 110 0 32 2 110 0 40 2 110 0 42 2 110 0 44 2 110 0 48 2 110 0 49 2 110 0 50 2 110 0 51 2 110 0 52 2 110 0 53 2 110 0 54 2 110 0 55 2 110 0 56 2 110 0 57 2 110 0 58 2 110 0 59 2 110 0 60 2 110 0 61 2 110 0 62 2 110 0 63 2 110 0 64 2 110 0 65 2 110 0 69 2 110 0 70 2 110 0 75 2 110 0 76 2 110 0 82 2 110 0 85 2 110 0 99 2 110 0 100 2 110 0 102 2 110 0 103 2 110 0 107 2 110 0 113 2 110 0 120 2 110 0 122 2 110 0 126 2 110 0 128 2 110 0 134 2 110 0 135 2 110 0 138 2 110 0 140 2 110 0 143 2 110 0 170 2 110 0 175 2 110 0 176 2 110 0 182 2 110 0 183 2 110 0 184 2 110 0 192 2 110 0 193 2 110 0 194 2 110 0 195 2 110 0 196 2 110 0 213 2 110 0 214 0 55 0 215 2 110 0 219 2 110 0 220 2 110 0 222 2 110 0 223 2 110 0 224 2 110 0 225 2 110 0 227 2 110 0 229] 
#[0 5 217 0 6] 
#[0 2 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 126 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 221 0 18 5 225 0 241] 
#[1 0 59 0 1 0 59 0 3 0 59 0 4 0 63 0 5 0 59 0 6 0 59 0 7 0 59 0 8 0 59 0 9 0 59 0 10 0 59 0 11 0 59 0 12 0 59 0 13 0 59 0 14 0 59 0 15 0 59 0 16 0 59 0 17 0 59 0 19 0 59 0 20 0 59 0 21 0 59 0 22 0 59 0 23 0 59 0 24 0 59 0 25 0 59 0 26 0 59 0 27 0 59 0 28 0 238 0 29 0 59 0 32 0 59 0 34 0 59 0 35 0 59 0 38 0 59 0 45 0 59 0 80 0 59 0 83 0 59 0 87 0 59 0 90 0 59 0 99 0 59 0 105 0 59 0 108 0 59 0 110 0 59 0 115 0 59 0 116 0 59 0 118 0 59 0 121 0 59 0 123 0 59 0 125 0 59 0 130 0 59 0 146 0 59 0 150 0 59 0 151 0 59 0 152 0 59 0 171 0 59 0 177 0 59 0 179 0 59 0 186 0 59 0 188 0 59 0 190 0 59 0 201 0 59 0 207 0 59 0 209 0 59 0 210 0 59 0 211 0 59 0 212 0 59 0 214 0 59 0 215 5 229 0 236 2 41 1 48 2 45 1 49] 
#[0 5 233 0 228] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 237 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 237 2 48 5 237 2 50 5 237 2 51 5 237 2 52 5 237 2 53 5 237 2 54 5 237 2 55 5 237 2 56 5 237 2 57 5 237 2 64 5 237 2 65 5 237 2 66 4 21 2 67 5 237 2 68 5 237 2 69 5 237 2 77 5 237 2 78 5 237 2 86 5 237 2 91 5 237 2 92 5 237 2 93 5 237 2 94 5 237 2 95 4 65 2 96 5 237 2 97 5 237 2 98 5 237 2 99 5 237 2 100 5 237 2 101 5 237 2 102 5 237 2 103 5 237 2 104 5 237 2 105 5 237 2 106 5 237 2 107 5 237 2 108 5 237 2 109 5 237 2 110 5 237 2 111 5 237 2 112 5 237 2 113 5 237 2 114 5 237 2 115 5 237 2 116 4 149 2 117 5 237 2 118 5 237 2 119 5 237 2 120 5 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 237 2 158 5 237 2 159] 
#[0 2 146 0 11 0 25 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 5 249 0 214 5 245 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 249 0 239 5 253 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 253 2 48 5 253 2 50 5 253 2 51 5 253 2 52 5 253 2 53 5 253 2 54 5 253 2 55 5 253 2 56 5 253 2 57 5 253 2 64 5 253 2 65 5 253 2 66 4 21 2 67 5 253 2 68 5 253 2 69 5 253 2 77 5 253 2 78 6 1 2 86 6 5 2 87 6 9 2 90 5 253 2 91 5 253 2 92 5 253 2 93 5 253 2 94 5 253 2 95 4 65 2 96 5 253 2 97 5 253 2 98 5 253 2 99 5 253 2 100 5 253 2 101 5 253 2 102 5 253 2 103 5 253 2 104 5 253 2 105 5 253 2 106 5 253 2 107 5 253 2 108 5 253 2 109 5 253 2 110 5 253 2 111 5 253 2 112 5 253 2 113 5 253 2 114 5 253 2 115 5 253 2 116 4 149 2 117 5 253 2 118 5 253 2 119 5 253 2 120 5 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 253 2 158 5 253 2 159] 
#[0 2 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 13 0 6 3 137 0 215 6 13 0 237] 
#[1 2 154 0 6 2 229 0 11 2 154 0 215 6 17 0 234] 
#[1 2 158 0 6 0 67 0 11 2 158 0 215 6 21 0 234 6 25 1 8] 
#[0 2 162 0 6 0 215] 
#[1 2 166 0 6 2 166 0 11 2 166 0 215 6 29 1 12] 
#[1 1 186 0 6 1 186 0 11 1 186 0 215 6 33 1 9] 
#[1 2 170 0 14 2 89 0 29] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 2 174 0 6 6 45 0 7 6 49 0 9 2 174 0 11 6 53 0 12 2 178 0 14 6 57 0 15 2 174 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 2 174 0 215 6 137 0 236] 
#[0 2 182 0 6 0 11 0 215] 
#[0 2 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 25 0 14 6 141 0 235] 
#[0 2 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 33 0 5 6 145 0 236] 
#[0 3 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 34 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 38 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 54 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 58 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 62 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 74 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 165 0 40 6 153 0 100 6 165 0 120 6 161 0 184 6 165 2 121] 
#[0 3 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 110 0 1 3 110 0 3 3 110 0 4 3 110 0 5 3 110 0 6 3 110 0 7 3 110 0 8 3 110 0 9 3 110 0 10 3 110 0 11 3 110 0 12 3 110 0 13 3 110 0 14 3 110 0 15 3 110 0 16 3 110 0 17 3 110 0 19 3 110 0 20 3 110 0 21 3 110 0 22 3 110 0 23 3 110 0 24 3 110 0 25 3 110 0 26 3 110 0 27 3 110 0 28 3 110 0 32 3 110 0 34 3 110 0 35 3 110 0 38 3 110 0 45 3 110 0 80 3 110 0 83 3 110 0 87 3 110 0 90 3 110 0 99 3 110 0 105 3 110 0 108 3 110 0 110 3 110 0 115 3 110 0 116 3 110 0 118 3 110 0 121 3 110 0 123 3 110 0 125 3 110 0 130 3 110 0 146 3 110 0 150 3 110 0 151 3 110 0 152 3 110 0 171 3 110 0 177 3 110 0 179 3 110 0 186 3 110 0 188 3 110 0 190 3 110 0 201 3 110 0 207 3 110 0 209 3 110 0 210 3 110 0 211 3 110 0 212 3 110 0 214 3 110 0 215 6 169 2 124] 
#[0 3 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 126 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 130 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 3 134 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 81 0 229 6 173 1 30 6 173 1 31 6 173 1 32 1 101 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 1 101 1 93] 
#[0 3 138 0 11 0 17 0 215] 
#[0 3 142 0 6 0 11 0 215] 
#[0 3 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 6 177 0 6 3 137 0 215 6 177 0 237] 
#[1 3 150 0 6 2 229 0 11 3 150 0 215 6 181 0 234] 
#[0 3 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 3 158 0 17 0 215] 
#[0 6 185 0 228] 
#[0 3 162 0 14 0 17 0 215] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 6 189 0 88 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 157 0 254 0 89 0 255 0 93 1 0 0 105 1 33 6 193 1 39 0 113 1 40 0 117 1 41 0 117 1 42 0 117 1 66 0 129 1 67 0 117 1 70 0 137 1 71 0 117 1 77 0 145 1 78 0 117 1 82 0 117 1 85 0 117 1 100] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 6 197 0 88 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 157 0 254 0 89 0 255 0 93 1 0 0 105 1 33 6 193 1 39 0 113 1 40 0 117 1 41 0 117 1 42 0 117 1 66 0 129 1 67 0 117 1 70 0 137 1 71 0 117 1 77 0 145 1 78 0 117 1 82 0 117 1 85 0 117 1 100] 
#[1 6 201 0 17 6 205 0 215] 
#[1 6 209 0 17 6 213 0 37 6 217 0 215] 
#[1 2 33 0 5 6 221 0 17 6 225 0 215 5 49 0 236 6 229 0 244] 
#[1 6 233 0 17 6 237 0 215] 
#[1 2 33 0 5 6 241 0 17 6 245 0 215 5 49 0 236 6 249 0 244] 
#[1 2 33 0 5 6 253 0 17 7 1 0 215 5 49 0 236 7 5 0 244] 
#[1 2 33 0 5 3 166 0 17 7 9 0 37 3 166 0 106 3 166 0 108 3 166 0 215 7 13 0 236 7 17 0 244] 
#[1 2 33 0 5 3 170 0 17 3 170 0 106 3 170 0 108 3 170 0 215 7 21 0 236 7 25 0 244] 
#[0 3 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 3 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 7 37 1 68 7 41 1 69] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 7 45 1 44 7 45 1 45 7 45 1 46 7 45 1 53 7 45 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 7 49 1 68 7 41 1 69] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 7 53 1 86] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 7 57 1 86] 
#[0 7 61 0 144] 
#[1 7 65 0 17 7 69 0 215] 
#[1 3 186 0 19 3 186 0 40 3 186 0 70 3 186 0 72 3 186 0 74 3 186 0 77 3 186 0 78 3 186 0 79 3 186 0 81 3 186 0 88 3 186 0 89 3 186 0 93 3 186 0 98 3 186 0 100 3 186 0 114 3 186 0 120 3 186 0 132 3 186 0 133 3 186 0 141 3 186 0 142 3 186 0 154 3 186 0 155 3 186 0 156 3 186 0 158 3 186 0 160 3 186 0 161 3 186 0 162 3 186 0 163 3 186 0 166 3 186 0 173 3 186 0 174 3 186 0 183 3 186 0 184 3 186 0 205 3 186 0 206 7 73 1 83] 
#[1 3 186 0 19 3 186 0 40 3 186 0 70 3 186 0 72 3 186 0 74 3 186 0 77 3 186 0 78 3 186 0 79 3 186 0 81 3 186 0 88 3 186 0 89 3 186 0 93 3 186 0 98 3 186 0 100 3 186 0 114 3 186 0 120 3 186 0 132 3 186 0 133 3 186 0 141 3 186 0 142 3 186 0 154 3 186 0 155 3 186 0 156 3 186 0 158 3 186 0 160 3 186 0 161 3 186 0 162 3 186 0 163 3 186 0 166 3 186 0 173 3 186 0 174 3 186 0 183 3 186 0 184 3 186 0 205 3 186 0 206 7 77 1 83] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 7 85 1 72 7 89 1 75] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 7 93 1 72 7 97 1 75] 
#[1 7 101 0 17 7 105 0 215] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 7 109 1 72] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 7 113 1 72] 
#[1 7 117 0 17 7 121 0 215] 
#[1 3 194 0 1 3 194 0 3 3 194 0 4 3 194 0 5 3 194 0 6 3 194 0 7 3 194 0 8 3 194 0 9 3 194 0 10 3 194 0 11 3 194 0 12 3 194 0 13 0 71 0 14 3 194 0 15 3 194 0 16 3 194 0 17 3 194 0 19 3 194 0 20 3 194 0 21 3 194 0 22 3 194 0 23 3 194 0 24 3 194 0 25 3 194 0 26 3 194 0 27 3 194 0 28 3 194 0 29 3 194 0 32 3 194 0 34 3 194 0 35 3 194 0 38 3 194 0 45 3 194 0 80 3 194 0 83 3 194 0 87 3 194 0 90 3 194 0 99 3 194 0 105 3 194 0 106 3 194 0 108 3 194 0 110 3 194 0 115 3 194 0 116 3 194 0 118 3 194 0 121 3 194 0 123 3 194 0 125 3 194 0 130 3 194 0 146 3 194 0 150 3 194 0 151 3 194 0 152 3 194 0 171 3 194 0 177 3 194 0 179 3 194 0 186 3 194 0 188 3 194 0 190 3 194 0 200 3 194 0 201 3 194 0 204 3 194 0 207 3 194 0 209 3 194 0 210 3 194 0 211 3 194 0 212 3 194 0 214 3 194 0 215 2 205 0 235 2 209 1 47] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 7 125 1 48] 
#[1 3 198 0 6 3 198 0 11 3 198 0 215 7 129 1 52] 
#[1 7 133 0 6 3 137 0 215 7 133 0 237] 
#[1 3 202 0 1 3 202 0 3 3 202 0 4 0 75 0 5 3 202 0 6 3 202 0 7 3 202 0 8 3 202 0 9 3 202 0 10 3 202 0 11 3 202 0 12 3 202 0 13 3 202 0 14 3 202 0 15 3 202 0 16 3 202 0 17 3 202 0 19 3 202 0 20 3 202 0 21 3 202 0 22 3 202 0 23 3 202 0 24 3 202 0 25 3 202 0 26 3 202 0 27 3 202 0 28 3 202 0 29 3 202 0 32 3 202 0 34 3 202 0 35 3 202 0 38 3 202 0 45 3 202 0 80 3 202 0 83 3 202 0 87 3 202 0 90 3 202 0 99 3 202 0 105 3 202 0 106 3 202 0 108 3 202 0 110 3 202 0 115 3 202 0 116 3 202 0 118 3 202 0 121 3 202 0 123 3 202 0 125 3 202 0 130 3 202 0 146 3 202 0 150 3 202 0 151 3 202 0 152 3 202 0 171 3 202 0 177 3 202 0 179 3 202 0 186 3 202 0 188 3 202 0 190 3 202 0 200 3 202 0 201 3 202 0 204 3 202 0 207 3 202 0 209 3 202 0 210 3 202 0 211 3 202 0 212 3 202 0 214 3 202 0 215 2 37 0 236 7 137 1 49] 
#[0 3 206 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[0 3 210 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[0 3 214 0 1 0 5 0 6 0 9 0 11 0 12 0 14 0 19 0 22 0 23 0 24 0 25 0 26 0 31 0 32 0 39 0 40 0 42 0 44 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 70 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 110 0 113 0 116 0 120 0 122 0 126 0 128 0 131 0 134 0 135 0 138 0 140 0 143 0 149 0 153 0 157 0 170 0 175 0 176 0 182 0 183 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 228 0 229] 
#[0 3 218 0 11 0 25 0 215] 
#[1 2 245 0 1 2 33 0 5 0 31 0 6 2 253 0 9 1 186 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 35 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 169 0 228 3 173 0 229 3 177 0 235 3 181 0 236 7 141 0 237 3 189 0 238 3 225 0 242 7 145 1 6 3 201 1 7 3 205 1 9 3 209 1 10 3 213 1 13 3 217 1 14 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 3 217 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 3 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 79 0 1 3 226 0 3 3 226 0 4 0 83 0 5 3 226 0 6 6 45 0 7 3 226 0 8 3 226 0 9 3 226 0 10 3 226 0 11 3 226 0 12 3 226 0 13 0 87 0 14 6 57 0 15 3 226 0 16 3 226 0 17 3 226 0 19 3 226 0 20 3 226 0 21 3 226 0 22 3 226 0 23 3 226 0 24 3 226 0 25 3 226 0 26 3 226 0 27 3 226 0 28 3 226 0 32 3 226 0 34 3 226 0 35 3 226 0 38 3 226 0 45 3 226 0 80 3 226 0 83 3 226 0 87 3 226 0 90 3 226 0 99 3 226 0 105 3 226 0 108 3 226 0 110 3 226 0 115 3 226 0 116 3 226 0 118 3 226 0 121 3 226 0 123 3 226 0 125 6 113 0 130 3 226 0 146 3 226 0 150 3 226 0 151 3 226 0 152 3 226 0 171 3 226 0 177 3 226 0 179 3 226 0 186 3 226 0 188 3 226 0 190 3 226 0 201 3 226 0 207 6 129 0 209 3 226 0 210 6 133 0 211 3 226 0 212 3 226 0 214 3 226 0 215 6 137 0 236] 
#[1 0 91 0 1 3 230 0 3 3 230 0 4 0 95 0 5 3 230 0 6 6 45 0 7 3 230 0 8 3 230 0 9 3 230 0 10 3 230 0 11 3 230 0 12 3 230 0 13 0 99 0 14 6 57 0 15 3 230 0 16 3 230 0 17 3 230 0 19 3 230 0 20 3 230 0 21 3 230 0 22 3 230 0 23 3 230 0 24 3 230 0 25 3 230 0 26 3 230 0 27 3 230 0 28 3 230 0 32 3 230 0 34 3 230 0 35 3 230 0 38 3 230 0 45 3 230 0 80 3 230 0 83 3 230 0 87 3 230 0 90 3 230 0 99 3 230 0 105 3 230 0 108 3 230 0 110 3 230 0 115 3 230 0 116 3 230 0 118 3 230 0 121 3 230 0 123 3 230 0 125 6 113 0 130 3 230 0 146 3 230 0 150 3 230 0 151 3 230 0 152 3 230 0 171 3 230 0 177 3 230 0 179 3 230 0 186 3 230 0 188 3 230 0 190 3 230 0 201 3 230 0 207 6 129 0 209 3 230 0 210 6 133 0 211 3 230 0 212 3 230 0 214 3 230 0 215 6 137 0 236] 
#[1 0 103 0 1 6 41 0 3 3 234 0 4 0 107 0 5 3 234 0 6 6 45 0 7 3 234 0 8 6 49 0 9 3 234 0 10 3 234 0 11 6 53 0 12 3 234 0 13 0 111 0 14 6 57 0 15 3 234 0 16 3 234 0 17 6 61 0 19 6 65 0 20 3 234 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 3 234 0 28 3 234 0 32 6 93 0 34 6 97 0 35 3 234 0 38 3 234 0 45 3 234 0 80 3 234 0 83 3 234 0 87 3 234 0 90 3 234 0 99 3 234 0 105 3 234 0 108 3 234 0 110 3 234 0 115 6 101 0 116 6 105 0 118 3 234 0 121 3 234 0 123 6 109 0 125 6 113 0 130 3 234 0 146 6 117 0 150 6 121 0 151 3 234 0 152 3 234 0 171 3 234 0 177 3 234 0 179 3 234 0 186 3 234 0 188 3 234 0 190 3 234 0 201 6 125 0 207 6 129 0 209 3 234 0 210 6 133 0 211 3 234 0 212 3 234 0 214 3 234 0 215 6 137 0 236] 
#[1 5 149 0 229 7 149 2 131] 
#[1 7 153 0 37 7 157 0 110] 
#[1 3 238 0 32 3 238 0 83 3 238 0 99 3 238 0 105 3 238 0 115 3 238 0 121 3 238 0 123 3 238 0 152 3 238 0 171 3 238 0 177 3 238 0 186 3 238 0 201 3 238 0 215 7 161 2 156] 
#[1 0 115 0 1 3 242 0 3 3 242 0 4 0 119 0 5 3 242 0 6 3 242 0 7 3 242 0 8 3 242 0 9 3 242 0 10 3 242 0 11 3 242 0 12 3 242 0 13 0 123 0 14 3 242 0 15 3 242 0 16 3 242 0 17 3 242 0 19 3 242 0 20 3 242 0 21 3 242 0 22 3 242 0 23 3 242 0 24 3 242 0 25 3 242 0 26 3 242 0 27 3 242 0 28 3 242 0 32 3 242 0 34 3 242 0 35 3 242 0 38 3 242 0 45 3 242 0 80 3 242 0 83 3 242 0 87 3 242 0 90 3 242 0 99 3 242 0 105 3 242 0 108 3 242 0 110 3 242 0 115 3 242 0 116 3 242 0 118 3 242 0 121 3 242 0 123 3 242 0 125 3 242 0 130 3 242 0 146 3 242 0 150 3 242 0 151 3 242 0 152 3 242 0 171 3 242 0 177 3 242 0 179 3 242 0 186 3 242 0 188 3 242 0 190 3 242 0 201 3 242 0 207 3 242 0 209 3 242 0 210 3 242 0 211 3 242 0 212 3 242 0 214 3 242 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 7 165 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 7 165 2 48 7 165 2 50 7 165 2 51 7 165 2 52 7 165 2 53 7 165 2 54 7 165 2 55 7 165 2 56 7 165 2 57 7 165 2 64 7 165 2 65 7 165 2 66 4 21 2 67 7 165 2 68 7 165 2 69 7 165 2 77 7 165 2 78 7 165 2 86 7 165 2 91 7 165 2 92 7 165 2 93 7 165 2 94 7 165 2 95 4 65 2 96 7 165 2 97 7 165 2 98 7 165 2 99 7 165 2 100 7 165 2 101 7 165 2 102 7 165 2 103 7 165 2 104 7 165 2 105 7 165 2 106 7 165 2 107 7 165 2 108 7 165 2 109 7 165 2 110 7 165 2 111 7 165 2 112 7 165 2 113 7 165 2 114 7 165 2 115 7 165 2 116 4 149 2 117 7 165 2 118 7 165 2 119 7 165 2 120 7 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 7 165 2 158 7 165 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 7 169 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 7 169 2 48 7 169 2 50 7 169 2 51 7 169 2 52 7 169 2 53 7 169 2 54 7 169 2 55 7 169 2 56 7 169 2 57 7 169 2 64 7 169 2 65 7 169 2 66 4 21 2 67 7 169 2 68 7 169 2 69 7 169 2 77 7 169 2 78 7 169 2 86 7 169 2 91 7 169 2 92 7 169 2 93 7 169 2 94 7 169 2 95 4 65 2 96 7 169 2 97 7 169 2 98 7 169 2 99 7 169 2 100 7 169 2 101 7 169 2 102 7 169 2 103 7 169 2 104 7 169 2 105 7 169 2 106 7 169 2 107 7 169 2 108 7 169 2 109 7 169 2 110 7 169 2 111 7 169 2 112 7 169 2 113 7 169 2 114 7 169 2 115 7 169 2 116 4 149 2 117 7 169 2 118 7 169 2 119 7 169 2 120 7 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 7 169 2 158 7 169 2 159] 
#[1 5 149 0 229 7 173 2 128 5 177 2 131] 
#[0 3 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 250 0 1 3 250 0 3 3 250 0 4 3 250 0 5 3 250 0 6 3 250 0 7 3 250 0 8 3 250 0 9 3 250 0 10 3 250 0 11 3 250 0 12 3 250 0 13 3 250 0 14 3 250 0 15 3 250 0 16 3 250 0 17 3 250 0 19 3 250 0 20 3 250 0 21 3 250 0 22 3 250 0 23 3 250 0 24 3 250 0 25 3 250 0 26 3 250 0 27 3 250 0 28 3 250 0 32 3 250 0 34 3 250 0 35 3 250 0 38 3 250 0 45 3 250 0 80 3 250 0 83 3 250 0 87 3 250 0 90 3 250 0 99 3 250 0 105 3 250 0 108 3 250 0 110 3 250 0 115 3 250 0 116 3 250 0 118 3 250 0 121 3 250 0 123 3 250 0 125 3 250 0 130 3 250 0 146 3 250 0 150 3 250 0 151 3 250 0 152 3 250 0 171 3 250 0 177 3 250 0 179 3 250 0 186 3 250 0 188 3 250 0 190 3 250 0 201 3 250 0 207 3 250 0 209 3 250 0 210 3 250 0 211 3 250 0 212 3 250 0 214 3 250 0 215 7 177 2 130] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 7 181 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 7 185 0 229 7 193 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 7 193 1 93 7 193 2 58 7 193 2 59] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 7 201 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 7 201 2 48 7 201 2 50 7 201 2 51 7 201 2 52 7 201 2 53 7 201 2 54 7 201 2 55 7 201 2 56 7 201 2 57 7 201 2 64 7 201 2 65 7 201 2 66 4 21 2 67 7 201 2 68 7 201 2 69 7 201 2 77 7 201 2 78 7 201 2 86 7 201 2 91 7 201 2 92 7 201 2 93 7 201 2 94 7 201 2 95 4 65 2 96 7 201 2 97 7 201 2 98 7 201 2 99 7 201 2 100 7 201 2 101 7 201 2 102 7 201 2 103 7 201 2 104 7 201 2 105 7 201 2 106 7 201 2 107 7 201 2 108 7 201 2 109 7 201 2 110 7 201 2 111 7 201 2 112 7 201 2 113 7 201 2 114 7 201 2 115 7 201 2 116 4 149 2 117 7 201 2 118 7 201 2 119 7 201 2 120 7 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 7 201 2 158 7 201 2 159] 
#[1 3 133 0 213 7 205 0 238] 
#[1 3 254 0 1 3 254 0 3 3 254 0 4 0 127 0 5 3 254 0 6 3 254 0 7 3 254 0 8 3 254 0 9 3 254 0 10 3 254 0 11 3 254 0 12 3 254 0 13 3 254 0 14 3 254 0 15 3 254 0 16 3 254 0 17 3 254 0 19 3 254 0 20 3 254 0 21 3 254 0 22 3 254 0 23 3 254 0 24 3 254 0 25 3 254 0 26 3 254 0 27 3 254 0 28 2 89 0 29 3 254 0 32 3 254 0 34 3 254 0 35 3 254 0 38 3 254 0 45 3 254 0 80 3 254 0 83 3 254 0 87 3 254 0 90 0 131 0 99 3 254 0 105 3 254 0 108 3 254 0 110 3 254 0 115 3 254 0 116 3 254 0 118 3 254 0 121 3 254 0 123 3 254 0 125 3 254 0 130 3 254 0 146 3 254 0 150 3 254 0 151 3 254 0 152 3 254 0 171 3 254 0 177 3 254 0 179 3 254 0 186 3 254 0 188 3 254 0 190 3 254 0 201 5 189 0 204 3 254 0 207 3 254 0 209 3 254 0 210 3 254 0 211 3 254 0 212 3 254 0 214 3 254 0 215 7 213 0 236 7 217 1 94 2 101 1 95 2 105 1 96 7 221 1 99 7 225 1 184 7 229 2 79 7 229 2 80 7 229 2 85] 
#[0 4 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 135 0 1 6 41 0 3 4 6 0 4 0 139 0 5 4 6 0 6 6 45 0 7 4 6 0 8 6 49 0 9 4 6 0 10 4 6 0 11 6 53 0 12 4 6 0 13 0 143 0 14 6 57 0 15 4 6 0 16 4 6 0 17 6 61 0 19 6 65 0 20 4 6 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 4 6 0 28 4 6 0 32 4 6 0 34 4 6 0 35 4 6 0 38 4 6 0 45 4 6 0 80 4 6 0 83 4 6 0 87 4 6 0 90 4 6 0 99 4 6 0 105 4 6 0 108 4 6 0 110 4 6 0 115 6 101 0 116 6 105 0 118 4 6 0 121 4 6 0 123 6 109 0 125 6 113 0 130 4 6 0 146 4 6 0 150 4 6 0 151 4 6 0 152 4 6 0 171 4 6 0 177 4 6 0 179 4 6 0 186 4 6 0 188 4 6 0 190 4 6 0 201 4 6 0 207 6 129 0 209 4 6 0 210 6 133 0 211 4 6 0 212 4 6 0 214 4 6 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 7 241 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 7 241 2 48 7 241 2 50 7 241 2 51 7 241 2 52 7 241 2 53 7 241 2 54 7 241 2 55 7 241 2 56 7 241 2 57 7 241 2 64 7 241 2 65 7 241 2 66 4 21 2 67 7 241 2 68 7 241 2 69 7 241 2 77 7 241 2 78 7 241 2 86 7 241 2 91 7 241 2 92 7 241 2 93 7 241 2 94 7 241 2 95 4 65 2 96 7 241 2 97 7 241 2 98 7 241 2 99 7 241 2 100 7 241 2 101 7 241 2 102 7 241 2 103 7 241 2 104 7 241 2 105 7 241 2 106 7 241 2 107 7 241 2 108 7 241 2 109 7 241 2 110 7 241 2 111 7 241 2 112 7 241 2 113 7 241 2 114 7 241 2 115 7 241 2 116 4 149 2 117 7 241 2 118 7 241 2 119 7 241 2 120 7 241 2 122 4 169 2 125 4 173 2 136 4 177 2 155 7 241 2 158 7 241 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 7 245 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 6 137 0 236] 
#[0 4 10 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 70 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 122 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 183 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 214 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 4 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 37 0 38 0 40 0 42 0 44 0 45 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 69 0 72 0 73 0 75 0 76 0 80 0 81 0 82 0 83 0 84 0 85 0 87 0 88 0 90 0 91 0 92 0 94 0 97 0 99 0 100 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 110 0 113 0 115 0 116 0 118 0 120 0 121 0 123 0 125 0 126 0 128 0 129 0 130 0 134 0 135 0 138 0 140 0 143 0 146 0 150 0 151 0 152 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 177 0 178 0 179 0 180 0 182 0 184 0 185 0 186 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 200 0 201 0 202 0 204 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 4 18 0 1 4 18 0 5 4 18 0 9 4 18 0 12 4 18 0 14 4 18 0 31 4 18 0 32 4 18 0 40 4 18 0 42 4 18 0 44 4 18 0 48 4 18 0 49 4 18 0 50 4 18 0 51 4 18 0 52 4 18 0 53 4 18 0 54 4 18 0 55 4 18 0 56 4 18 0 57 4 18 0 58 4 18 0 59 4 18 0 60 4 18 0 61 4 18 0 62 4 18 0 63 4 18 0 64 4 18 0 65 4 18 0 69 4 18 0 75 4 18 0 76 4 18 0 82 4 18 0 85 4 18 0 99 4 18 0 100 4 18 0 102 4 18 0 103 4 18 0 107 4 18 0 113 4 18 0 120 4 18 0 126 4 18 0 128 4 18 0 134 4 18 0 135 4 18 0 138 4 18 0 140 4 18 0 143 4 18 0 170 4 18 0 175 4 18 0 176 4 18 0 182 4 18 0 184 4 18 0 192 4 18 0 193 4 18 0 194 4 18 0 195 4 18 0 196 4 18 0 213 7 249 0 215 4 18 0 219 4 18 0 220 4 18 0 222 4 18 0 223 4 18 0 224 4 18 0 225 4 18 0 227 4 18 0 229] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 7 253 1 14 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 7 253 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 8 1 0 144] 
#[1 4 22 0 1 4 22 0 3 4 22 0 4 0 147 0 5 4 22 0 6 4 22 0 7 4 22 0 8 4 22 0 9 4 22 0 10 4 22 0 11 4 22 0 12 4 22 0 13 4 22 0 14 4 22 0 15 4 22 0 16 4 22 0 17 4 22 0 19 4 22 0 20 4 22 0 21 4 22 0 22 4 22 0 23 4 22 0 24 4 22 0 25 4 22 0 26 4 22 0 27 4 22 0 28 4 22 0 32 4 22 0 34 4 22 0 35 4 22 0 38 4 22 0 45 4 22 0 80 4 22 0 83 4 22 0 87 4 22 0 90 4 22 0 99 4 22 0 105 4 22 0 108 4 22 0 110 4 22 0 115 4 22 0 116 4 22 0 118 4 22 0 121 4 22 0 123 4 22 0 125 4 22 0 130 4 22 0 146 4 22 0 150 4 22 0 151 4 22 0 152 4 22 0 171 4 22 0 177 4 22 0 179 4 22 0 186 4 22 0 188 4 22 0 190 4 22 0 201 4 22 0 207 4 22 0 209 4 22 0 210 4 22 0 211 4 22 0 212 4 22 0 214 4 22 0 215 8 5 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 8 9 0 6 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 6 137 0 236 8 9 0 237] 
#[0 4 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 13 0 214] 
#[0 4 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 4 34 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 4 34 0 214 4 34 0 215 6 137 0 236] 
#[1 2 246 0 1 2 246 0 3 2 246 0 5 2 246 0 7 2 246 0 9 0 151 0 11 2 246 0 12 2 246 0 14 2 246 0 15 2 246 0 19 2 246 0 20 2 246 0 22 2 246 0 23 2 246 0 24 2 246 0 25 2 246 0 26 2 246 0 27 2 246 0 34 2 246 0 35 2 246 0 116 2 246 0 118 2 246 0 125 2 246 0 130 2 246 0 150 2 246 0 151 2 246 0 207 2 246 0 209 2 246 0 211 0 151 0 214 0 151 0 215] 
#[1 8 17 0 214 5 245 0 215 8 17 0 239] 
#[1 4 42 0 11 4 42 0 214 4 42 0 215 8 21 2 89] 
#[0 4 46 0 11 0 25 0 215] 
#[1 3 169 0 228 8 25 1 10 3 213 1 13] 
#[1 2 245 0 1 2 33 0 5 4 50 0 6 2 253 0 9 4 50 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 4 50 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 8 29 1 14 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 8 29 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 4 54 0 6 0 11 0 215] 
#[1 4 58 0 6 2 229 0 11 4 58 0 215 8 33 0 234 8 37 1 11] 
#[1 4 62 0 6 0 155 0 11 4 62 0 215 6 21 0 234 6 25 1 8] 
#[0 8 41 0 228] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 45 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 49 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 49 2 48 8 49 2 50 8 49 2 51 8 49 2 52 8 49 2 53 8 49 2 54 8 49 2 55 8 49 2 56 8 49 2 57 8 49 2 64 8 49 2 65 8 49 2 66 4 21 2 67 8 49 2 68 8 49 2 69 8 49 2 77 8 49 2 78 8 49 2 86 8 49 2 91 8 49 2 92 8 49 2 93 8 49 2 94 8 49 2 95 4 65 2 96 8 49 2 97 8 49 2 98 8 49 2 99 8 49 2 100 8 49 2 101 8 49 2 102 8 49 2 103 8 49 2 104 8 49 2 105 8 49 2 106 8 49 2 107 8 49 2 108 8 49 2 109 8 49 2 110 8 49 2 111 8 49 2 112 8 49 2 113 8 49 2 114 8 49 2 115 8 49 2 116 4 149 2 117 8 49 2 118 8 49 2 119 8 49 2 120 8 49 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 49 2 158 8 49 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 53 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 57 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 57 2 48 8 57 2 50 8 57 2 51 8 57 2 52 8 57 2 53 8 57 2 54 8 57 2 55 8 57 2 56 8 57 2 57 8 57 2 64 8 57 2 65 8 57 2 66 4 21 2 67 8 57 2 68 8 57 2 69 8 57 2 77 8 57 2 78 8 57 2 86 8 57 2 91 8 57 2 92 8 57 2 93 8 57 2 94 8 57 2 95 4 65 2 96 8 57 2 97 8 57 2 98 8 57 2 99 8 57 2 100 8 57 2 101 8 57 2 102 8 57 2 103 8 57 2 104 8 57 2 105 8 57 2 106 8 57 2 107 8 57 2 108 8 57 2 109 8 57 2 110 8 57 2 111 8 57 2 112 8 57 2 113 8 57 2 114 8 57 2 115 8 57 2 116 4 149 2 117 8 57 2 118 8 57 2 119 8 57 2 120 8 57 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 57 2 158 8 57 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 61 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 65 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 65 2 48 8 65 2 50 8 65 2 51 8 65 2 52 8 65 2 53 8 65 2 54 8 65 2 55 8 65 2 56 8 65 2 57 8 65 2 64 8 65 2 65 8 65 2 66 4 21 2 67 8 65 2 68 8 65 2 69 8 65 2 77 8 65 2 78 8 65 2 86 8 65 2 91 8 65 2 92 8 65 2 93 8 65 2 94 8 65 2 95 4 65 2 96 8 65 2 97 8 65 2 98 8 65 2 99 8 65 2 100 8 65 2 101 8 65 2 102 8 65 2 103 8 65 2 104 8 65 2 105 8 65 2 106 8 65 2 107 8 65 2 108 8 65 2 109 8 65 2 110 8 65 2 111 8 65 2 112 8 65 2 113 8 65 2 114 8 65 2 115 8 65 2 116 4 149 2 117 8 65 2 118 8 65 2 119 8 65 2 120 8 65 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 65 2 158 8 65 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 69 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 73 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 73 2 48 8 73 2 50 8 73 2 51 8 73 2 52 8 73 2 53 8 73 2 54 8 73 2 55 8 73 2 56 8 73 2 57 8 73 2 64 8 73 2 65 8 73 2 66 4 21 2 67 8 73 2 68 8 73 2 69 8 73 2 77 8 73 2 78 8 73 2 86 8 73 2 91 8 73 2 92 8 73 2 93 8 73 2 94 8 73 2 95 4 65 2 96 8 73 2 97 8 73 2 98 8 73 2 99 8 73 2 100 8 73 2 101 8 73 2 102 8 73 2 103 8 73 2 104 8 73 2 105 8 73 2 106 8 73 2 107 8 73 2 108 8 73 2 109 8 73 2 110 8 73 2 111 8 73 2 112 8 73 2 113 8 73 2 114 8 73 2 115 8 73 2 116 4 149 2 117 8 73 2 118 8 73 2 119 8 73 2 120 8 73 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 73 2 158 8 73 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 77 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 81 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 81 2 48 8 81 2 50 8 81 2 51 8 81 2 52 8 81 2 53 8 81 2 54 8 81 2 55 8 81 2 56 8 81 2 57 8 81 2 64 8 81 2 65 8 81 2 66 4 21 2 67 8 81 2 68 8 81 2 69 8 81 2 77 8 81 2 78 8 81 2 86 8 81 2 91 8 81 2 92 8 81 2 93 8 81 2 94 8 81 2 95 4 65 2 96 8 81 2 97 8 81 2 98 8 81 2 99 8 81 2 100 8 81 2 101 8 81 2 102 8 81 2 103 8 81 2 104 8 81 2 105 8 81 2 106 8 81 2 107 8 81 2 108 8 81 2 109 8 81 2 110 8 81 2 111 8 81 2 112 8 81 2 113 8 81 2 114 8 81 2 115 8 81 2 116 4 149 2 117 8 81 2 118 8 81 2 119 8 81 2 120 8 81 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 81 2 158 8 81 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 85 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 89 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 89 2 48 8 89 2 50 8 89 2 51 8 89 2 52 8 89 2 53 8 89 2 54 8 89 2 55 8 89 2 56 8 89 2 57 8 89 2 64 8 89 2 65 8 89 2 66 4 21 2 67 8 89 2 68 8 89 2 69 8 89 2 77 8 89 2 78 8 89 2 86 8 89 2 91 8 89 2 92 8 89 2 93 8 89 2 94 8 89 2 95 4 65 2 96 8 89 2 97 8 89 2 98 8 89 2 99 8 89 2 100 8 89 2 101 8 89 2 102 8 89 2 103 8 89 2 104 8 89 2 105 8 89 2 106 8 89 2 107 8 89 2 108 8 89 2 109 8 89 2 110 8 89 2 111 8 89 2 112 8 89 2 113 8 89 2 114 8 89 2 115 8 89 2 116 4 149 2 117 8 89 2 118 8 89 2 119 8 89 2 120 8 89 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 89 2 158 8 89 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 93 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 97 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 97 2 48 8 97 2 50 8 97 2 51 8 97 2 52 8 97 2 53 8 97 2 54 8 97 2 55 8 97 2 56 8 97 2 57 8 97 2 64 8 97 2 65 8 97 2 66 4 21 2 67 8 97 2 68 8 97 2 69 8 97 2 77 8 97 2 78 8 97 2 86 8 97 2 91 8 97 2 92 8 97 2 93 8 97 2 94 8 97 2 95 4 65 2 96 8 97 2 97 8 97 2 98 8 97 2 99 8 97 2 100 8 97 2 101 8 97 2 102 8 97 2 103 8 97 2 104 8 97 2 105 8 97 2 106 8 97 2 107 8 97 2 108 8 97 2 109 8 97 2 110 8 97 2 111 8 97 2 112 8 97 2 113 8 97 2 114 8 97 2 115 8 97 2 116 4 149 2 117 8 97 2 118 8 97 2 119 8 97 2 120 8 97 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 97 2 158 8 97 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 101 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 105 2 48 8 105 2 50 8 105 2 51 8 105 2 52 8 105 2 53 8 105 2 54 8 105 2 55 8 105 2 56 8 105 2 57 8 105 2 64 8 105 2 65 8 105 2 66 4 21 2 67 8 105 2 68 8 105 2 69 8 105 2 77 8 105 2 78 8 105 2 86 8 105 2 91 8 105 2 92 8 105 2 93 8 105 2 94 8 105 2 95 4 65 2 96 8 105 2 97 8 105 2 98 8 105 2 99 8 105 2 100 8 105 2 101 8 105 2 102 8 105 2 103 8 105 2 104 8 105 2 105 8 105 2 106 8 105 2 107 8 105 2 108 8 105 2 109 8 105 2 110 8 105 2 111 8 105 2 112 8 105 2 113 8 105 2 114 8 105 2 115 8 105 2 116 4 149 2 117 8 105 2 118 8 105 2 119 8 105 2 120 8 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 105 2 158 8 105 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 109 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 113 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 113 2 48 8 113 2 50 8 113 2 51 8 113 2 52 8 113 2 53 8 113 2 54 8 113 2 55 8 113 2 56 8 113 2 57 8 113 2 64 8 113 2 65 8 113 2 66 4 21 2 67 8 113 2 68 8 113 2 69 8 113 2 77 8 113 2 78 8 113 2 86 8 113 2 91 8 113 2 92 8 113 2 93 8 113 2 94 8 113 2 95 4 65 2 96 8 113 2 97 8 113 2 98 8 113 2 99 8 113 2 100 8 113 2 101 8 113 2 102 8 113 2 103 8 113 2 104 8 113 2 105 8 113 2 106 8 113 2 107 8 113 2 108 8 113 2 109 8 113 2 110 8 113 2 111 8 113 2 112 8 113 2 113 8 113 2 114 8 113 2 115 8 113 2 116 4 149 2 117 8 113 2 118 8 113 2 119 8 113 2 120 8 113 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 113 2 158 8 113 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 117 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 121 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 121 2 48 8 121 2 50 8 121 2 51 8 121 2 52 8 121 2 53 8 121 2 54 8 121 2 55 8 121 2 56 8 121 2 57 8 121 2 64 8 121 2 65 8 121 2 66 4 21 2 67 8 121 2 68 8 121 2 69 8 121 2 77 8 121 2 78 8 121 2 86 8 121 2 91 8 121 2 92 8 121 2 93 8 121 2 94 8 121 2 95 4 65 2 96 8 121 2 97 8 121 2 98 8 121 2 99 8 121 2 100 8 121 2 101 8 121 2 102 8 121 2 103 8 121 2 104 8 121 2 105 8 121 2 106 8 121 2 107 8 121 2 108 8 121 2 109 8 121 2 110 8 121 2 111 8 121 2 112 8 121 2 113 8 121 2 114 8 121 2 115 8 121 2 116 4 149 2 117 8 121 2 118 8 121 2 119 8 121 2 120 8 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 121 2 158 8 121 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 125 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 129 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 129 2 48 8 129 2 50 8 129 2 51 8 129 2 52 8 129 2 53 8 129 2 54 8 129 2 55 8 129 2 56 8 129 2 57 8 129 2 64 8 129 2 65 8 129 2 66 4 21 2 67 8 129 2 68 8 129 2 69 8 129 2 77 8 129 2 78 8 129 2 86 8 129 2 91 8 129 2 92 8 129 2 93 8 129 2 94 8 129 2 95 4 65 2 96 8 129 2 97 8 129 2 98 8 129 2 99 8 129 2 100 8 129 2 101 8 129 2 102 8 129 2 103 8 129 2 104 8 129 2 105 8 129 2 106 8 129 2 107 8 129 2 108 8 129 2 109 8 129 2 110 8 129 2 111 8 129 2 112 8 129 2 113 8 129 2 114 8 129 2 115 8 129 2 116 4 149 2 117 8 129 2 118 8 129 2 119 8 129 2 120 8 129 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 129 2 158 8 129 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 133 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 137 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 137 2 48 8 137 2 50 8 137 2 51 8 137 2 52 8 137 2 53 8 137 2 54 8 137 2 55 8 137 2 56 8 137 2 57 8 137 2 64 8 137 2 65 8 137 2 66 4 21 2 67 8 137 2 68 8 137 2 69 8 137 2 77 8 137 2 78 8 137 2 86 8 137 2 91 8 137 2 92 8 137 2 93 8 137 2 94 8 137 2 95 4 65 2 96 8 137 2 97 8 137 2 98 8 137 2 99 8 137 2 100 8 137 2 101 8 137 2 102 8 137 2 103 8 137 2 104 8 137 2 105 8 137 2 106 8 137 2 107 8 137 2 108 8 137 2 109 8 137 2 110 8 137 2 111 8 137 2 112 8 137 2 113 8 137 2 114 8 137 2 115 8 137 2 116 4 149 2 117 8 137 2 118 8 137 2 119 8 137 2 120 8 137 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 137 2 158 8 137 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 141 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 145 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 145 2 48 8 145 2 50 8 145 2 51 8 145 2 52 8 145 2 53 8 145 2 54 8 145 2 55 8 145 2 56 8 145 2 57 8 145 2 64 8 145 2 65 8 145 2 66 4 21 2 67 8 145 2 68 8 145 2 69 8 145 2 77 8 145 2 78 8 145 2 86 8 145 2 91 8 145 2 92 8 145 2 93 8 145 2 94 8 145 2 95 4 65 2 96 8 145 2 97 8 145 2 98 8 145 2 99 8 145 2 100 8 145 2 101 8 145 2 102 8 145 2 103 8 145 2 104 8 145 2 105 8 145 2 106 8 145 2 107 8 145 2 108 8 145 2 109 8 145 2 110 8 145 2 111 8 145 2 112 8 145 2 113 8 145 2 114 8 145 2 115 8 145 2 116 4 149 2 117 8 145 2 118 8 145 2 119 8 145 2 120 8 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 145 2 158 8 145 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 149 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 153 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 153 2 48 8 153 2 50 8 153 2 51 8 153 2 52 8 153 2 53 8 153 2 54 8 153 2 55 8 153 2 56 8 153 2 57 8 153 2 64 8 153 2 65 8 153 2 66 4 21 2 67 8 153 2 68 8 153 2 69 8 153 2 77 8 153 2 78 8 153 2 86 8 153 2 91 8 153 2 92 8 153 2 93 8 153 2 94 8 153 2 95 4 65 2 96 8 153 2 97 8 153 2 98 8 153 2 99 8 153 2 100 8 153 2 101 8 153 2 102 8 153 2 103 8 153 2 104 8 153 2 105 8 153 2 106 8 153 2 107 8 153 2 108 8 153 2 109 8 153 2 110 8 153 2 111 8 153 2 112 8 153 2 113 8 153 2 114 8 153 2 115 8 153 2 116 4 149 2 117 8 153 2 118 8 153 2 119 8 153 2 120 8 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 153 2 158 8 153 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 157 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 161 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 161 2 48 8 161 2 50 8 161 2 51 8 161 2 52 8 161 2 53 8 161 2 54 8 161 2 55 8 161 2 56 8 161 2 57 8 161 2 64 8 161 2 65 8 161 2 66 4 21 2 67 8 161 2 68 8 161 2 69 8 161 2 77 8 161 2 78 8 161 2 86 8 161 2 91 8 161 2 92 8 161 2 93 8 161 2 94 8 161 2 95 4 65 2 96 8 161 2 97 8 161 2 98 8 161 2 99 8 161 2 100 8 161 2 101 8 161 2 102 8 161 2 103 8 161 2 104 8 161 2 105 8 161 2 106 8 161 2 107 8 161 2 108 8 161 2 109 8 161 2 110 8 161 2 111 8 161 2 112 8 161 2 113 8 161 2 114 8 161 2 115 8 161 2 116 4 149 2 117 8 161 2 118 8 161 2 119 8 161 2 120 8 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 161 2 158 8 161 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 165 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 169 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 169 2 48 8 169 2 50 8 169 2 51 8 169 2 52 8 169 2 53 8 169 2 54 8 169 2 55 8 169 2 56 8 169 2 57 8 169 2 64 8 169 2 65 8 169 2 66 4 21 2 67 8 169 2 68 8 169 2 69 8 169 2 77 8 169 2 78 8 169 2 86 8 169 2 91 8 169 2 92 8 169 2 93 8 169 2 94 8 169 2 95 4 65 2 96 8 169 2 97 8 169 2 98 8 169 2 99 8 169 2 100 8 169 2 101 8 169 2 102 8 169 2 103 8 169 2 104 8 169 2 105 8 169 2 106 8 169 2 107 8 169 2 108 8 169 2 109 8 169 2 110 8 169 2 111 8 169 2 112 8 169 2 113 8 169 2 114 8 169 2 115 8 169 2 116 4 149 2 117 8 169 2 118 8 169 2 119 8 169 2 120 8 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 169 2 158 8 169 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 173 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 177 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 177 2 48 8 177 2 50 8 177 2 51 8 177 2 52 8 177 2 53 8 177 2 54 8 177 2 55 8 177 2 56 8 177 2 57 8 177 2 64 8 177 2 65 8 177 2 66 4 21 2 67 8 177 2 68 8 177 2 69 8 177 2 77 8 177 2 78 8 177 2 86 8 177 2 91 8 177 2 92 8 177 2 93 8 177 2 94 8 177 2 95 4 65 2 96 8 177 2 97 8 177 2 98 8 177 2 99 8 177 2 100 8 177 2 101 8 177 2 102 8 177 2 103 8 177 2 104 8 177 2 105 8 177 2 106 8 177 2 107 8 177 2 108 8 177 2 109 8 177 2 110 8 177 2 111 8 177 2 112 8 177 2 113 8 177 2 114 8 177 2 115 8 177 2 116 4 149 2 117 8 177 2 118 8 177 2 119 8 177 2 120 8 177 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 177 2 158 8 177 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 181 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 185 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 185 2 48 8 185 2 50 8 185 2 51 8 185 2 52 8 185 2 53 8 185 2 54 8 185 2 55 8 185 2 56 8 185 2 57 8 185 2 64 8 185 2 65 8 185 2 66 4 21 2 67 8 185 2 68 8 185 2 69 8 185 2 77 8 185 2 78 8 185 2 86 8 185 2 91 8 185 2 92 8 185 2 93 8 185 2 94 8 185 2 95 4 65 2 96 8 185 2 97 8 185 2 98 8 185 2 99 8 185 2 100 8 185 2 101 8 185 2 102 8 185 2 103 8 185 2 104 8 185 2 105 8 185 2 106 8 185 2 107 8 185 2 108 8 185 2 109 8 185 2 110 8 185 2 111 8 185 2 112 8 185 2 113 8 185 2 114 8 185 2 115 8 185 2 116 4 149 2 117 8 185 2 118 8 185 2 119 8 185 2 120 8 185 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 185 2 158 8 185 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 189 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 193 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 193 2 48 8 193 2 50 8 193 2 51 8 193 2 52 8 193 2 53 8 193 2 54 8 193 2 55 8 193 2 56 8 193 2 57 8 193 2 64 8 193 2 65 8 193 2 66 4 21 2 67 8 193 2 68 8 193 2 69 8 193 2 77 8 193 2 78 8 193 2 86 8 193 2 91 8 193 2 92 8 193 2 93 8 193 2 94 8 193 2 95 4 65 2 96 8 193 2 97 8 193 2 98 8 193 2 99 8 193 2 100 8 193 2 101 8 193 2 102 8 193 2 103 8 193 2 104 8 193 2 105 8 193 2 106 8 193 2 107 8 193 2 108 8 193 2 109 8 193 2 110 8 193 2 111 8 193 2 112 8 193 2 113 8 193 2 114 8 193 2 115 8 193 2 116 4 149 2 117 8 193 2 118 8 193 2 119 8 193 2 120 8 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 193 2 158 8 193 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 197 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 201 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 201 2 48 8 201 2 50 8 201 2 51 8 201 2 52 8 201 2 53 8 201 2 54 8 201 2 55 8 201 2 56 8 201 2 57 8 201 2 64 8 201 2 65 8 201 2 66 4 21 2 67 8 201 2 68 8 201 2 69 8 201 2 77 8 201 2 78 8 201 2 86 8 201 2 91 8 201 2 92 8 201 2 93 8 201 2 94 8 201 2 95 4 65 2 96 8 201 2 97 8 201 2 98 8 201 2 99 8 201 2 100 8 201 2 101 8 201 2 102 8 201 2 103 8 201 2 104 8 201 2 105 8 201 2 106 8 201 2 107 8 201 2 108 8 201 2 109 8 201 2 110 8 201 2 111 8 201 2 112 8 201 2 113 8 201 2 114 8 201 2 115 8 201 2 116 4 149 2 117 8 201 2 118 8 201 2 119 8 201 2 120 8 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 201 2 158 8 201 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 205 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 209 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 209 2 48 8 209 2 50 8 209 2 51 8 209 2 52 8 209 2 53 8 209 2 54 8 209 2 55 8 209 2 56 8 209 2 57 8 209 2 64 8 209 2 65 8 209 2 66 4 21 2 67 8 209 2 68 8 209 2 69 8 209 2 77 8 209 2 78 8 209 2 86 8 209 2 91 8 209 2 92 8 209 2 93 8 209 2 94 8 209 2 95 4 65 2 96 8 209 2 97 8 209 2 98 8 209 2 99 8 209 2 100 8 209 2 101 8 209 2 102 8 209 2 103 8 209 2 104 8 209 2 105 8 209 2 106 8 209 2 107 8 209 2 108 8 209 2 109 8 209 2 110 8 209 2 111 8 209 2 112 8 209 2 113 8 209 2 114 8 209 2 115 8 209 2 116 4 149 2 117 8 209 2 118 8 209 2 119 8 209 2 120 8 209 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 209 2 158 8 209 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 213 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 217 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 217 2 48 8 217 2 50 8 217 2 51 8 217 2 52 8 217 2 53 8 217 2 54 8 217 2 55 8 217 2 56 8 217 2 57 8 217 2 64 8 217 2 65 8 217 2 66 4 21 2 67 8 217 2 68 8 217 2 69 8 217 2 77 8 217 2 78 8 217 2 86 8 217 2 91 8 217 2 92 8 217 2 93 8 217 2 94 8 217 2 95 4 65 2 96 8 217 2 97 8 217 2 98 8 217 2 99 8 217 2 100 8 217 2 101 8 217 2 102 8 217 2 103 8 217 2 104 8 217 2 105 8 217 2 106 8 217 2 107 8 217 2 108 8 217 2 109 8 217 2 110 8 217 2 111 8 217 2 112 8 217 2 113 8 217 2 114 8 217 2 115 8 217 2 116 4 149 2 117 8 217 2 118 8 217 2 119 8 217 2 120 8 217 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 217 2 158 8 217 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 221 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 225 2 48 8 225 2 50 8 225 2 51 8 225 2 52 8 225 2 53 8 225 2 54 8 225 2 55 8 225 2 56 8 225 2 57 8 225 2 64 8 225 2 65 8 225 2 66 4 21 2 67 8 225 2 68 8 225 2 69 8 225 2 77 8 225 2 78 8 225 2 86 8 225 2 91 8 225 2 92 8 225 2 93 8 225 2 94 8 225 2 95 4 65 2 96 8 225 2 97 8 225 2 98 8 225 2 99 8 225 2 100 8 225 2 101 8 225 2 102 8 225 2 103 8 225 2 104 8 225 2 105 8 225 2 106 8 225 2 107 8 225 2 108 8 225 2 109 8 225 2 110 8 225 2 111 8 225 2 112 8 225 2 113 8 225 2 114 8 225 2 115 8 225 2 116 4 149 2 117 8 225 2 118 8 225 2 119 8 225 2 120 8 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 225 2 158 8 225 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 229 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 233 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 233 2 48 8 233 2 50 8 233 2 51 8 233 2 52 8 233 2 53 8 233 2 54 8 233 2 55 8 233 2 56 8 233 2 57 8 233 2 64 8 233 2 65 8 233 2 66 4 21 2 67 8 233 2 68 8 233 2 69 8 233 2 77 8 233 2 78 8 233 2 86 8 233 2 91 8 233 2 92 8 233 2 93 8 233 2 94 8 233 2 95 4 65 2 96 8 233 2 97 8 233 2 98 8 233 2 99 8 233 2 100 8 233 2 101 8 233 2 102 8 233 2 103 8 233 2 104 8 233 2 105 8 233 2 106 8 233 2 107 8 233 2 108 8 233 2 109 8 233 2 110 8 233 2 111 8 233 2 112 8 233 2 113 8 233 2 114 8 233 2 115 8 233 2 116 4 149 2 117 8 233 2 118 8 233 2 119 8 233 2 120 8 233 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 233 2 158 8 233 2 159] 
#[1 2 245 0 1 2 33 0 5 0 159 0 6 2 253 0 9 4 66 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 163 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 8 237 0 228 3 173 0 229 3 177 0 235 3 181 0 236 8 241 0 237 3 189 0 238 8 245 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 245 2 48 8 245 2 50 8 245 2 51 8 245 2 52 8 245 2 53 8 245 2 54 8 245 2 55 8 245 2 56 8 245 2 57 8 245 2 64 8 245 2 65 8 245 2 66 4 21 2 67 8 245 2 68 8 245 2 69 8 249 2 70 8 253 2 71 9 1 2 73 9 5 2 74 8 245 2 77 8 245 2 78 8 245 2 86 8 245 2 91 8 245 2 92 8 245 2 93 8 245 2 94 8 245 2 95 4 65 2 96 8 245 2 97 8 245 2 98 8 245 2 99 8 245 2 100 8 245 2 101 8 245 2 102 8 245 2 103 8 245 2 104 8 245 2 105 8 245 2 106 8 245 2 107 8 245 2 108 8 245 2 109 8 245 2 110 8 245 2 111 8 245 2 112 8 245 2 113 8 245 2 114 8 245 2 115 8 245 2 116 4 149 2 117 8 245 2 118 8 245 2 119 8 245 2 120 8 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 245 2 158 8 245 2 159] 
#[0 9 9 0 228] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 9 13 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 9 13 2 48 9 13 2 50 9 13 2 51 9 13 2 52 9 13 2 53 9 13 2 54 9 13 2 55 9 13 2 56 9 13 2 57 9 13 2 64 9 13 2 65 9 13 2 66 4 21 2 67 9 13 2 68 9 13 2 69 9 13 2 77 9 13 2 78 9 13 2 86 9 13 2 91 9 13 2 92 9 13 2 93 9 13 2 94 9 13 2 95 4 65 2 96 9 13 2 97 9 13 2 98 9 13 2 99 9 13 2 100 9 13 2 101 9 13 2 102 9 13 2 103 9 13 2 104 9 13 2 105 9 13 2 106 9 13 2 107 9 13 2 108 9 13 2 109 9 13 2 110 9 13 2 111 9 13 2 112 9 13 2 113 9 13 2 114 9 13 2 115 9 13 2 116 4 149 2 117 9 13 2 118 9 13 2 119 9 13 2 120 9 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 9 13 2 158 9 13 2 159] 
#[0 4 70 0 40 0 100 0 120 0 184] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 9 17 0 37 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 9 21 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 9 25 0 236 3 189 0 238 9 29 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 9 29 2 48 9 29 2 50 9 29 2 51 9 29 2 52 9 29 2 53 9 29 2 54 9 29 2 55 9 29 2 56 9 29 2 57 9 29 2 64 9 29 2 65 9 29 2 66 4 21 2 67 9 29 2 68 9 29 2 69 9 29 2 77 9 29 2 78 9 29 2 86 9 29 2 91 9 29 2 92 9 29 2 93 9 29 2 94 9 29 2 95 4 65 2 96 9 29 2 97 9 29 2 98 9 29 2 99 9 29 2 100 9 29 2 101 9 29 2 102 9 29 2 103 9 29 2 104 9 29 2 105 9 29 2 106 9 29 2 107 9 29 2 108 9 29 2 109 9 29 2 110 9 29 2 111 9 29 2 112 9 29 2 113 9 29 2 114 9 29 2 115 9 29 2 116 4 149 2 117 9 29 2 118 9 29 2 119 9 29 2 120 9 29 2 122 4 169 2 125 4 173 2 136 4 177 2 155 9 29 2 158 9 29 2 159] 
#[0 4 74 0 40 0 100 0 120 0 184] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 9 153 0 215 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 9 165 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 9 169 1 217 9 169 1 221 9 177 1 222 9 169 1 226 9 185 1 227 9 169 1 228 9 169 1 229 9 169 1 230 9 169 1 231 9 169 1 232 9 169 1 233 9 169 1 234 9 169 1 235 9 169 1 236 9 169 1 238 9 169 1 239 9 169 1 240 9 169 1 241 9 169 1 242 9 169 1 246 9 169 1 248 9 169 2 1 9 169 2 2 9 169 2 3 9 169 2 4 9 169 2 5 9 169 2 7 9 169 2 12 9 169 2 13 9 169 2 14 9 169 2 15 9 169 2 19 9 169 2 20 9 169 2 21 9 169 2 22 9 169 2 24 9 169 2 26 9 169 2 27 9 169 2 28 9 169 2 30 9 169 2 32 9 169 2 33 9 169 2 34 9 169 2 35 9 169 2 36 9 169 2 41 9 169 2 45 9 169 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[0 4 78 0 40 0 100 0 120 0 184] 
#[1 4 82 0 1 4 82 0 3 4 82 0 4 4 82 0 5 4 82 0 6 4 82 0 7 4 82 0 8 4 82 0 9 4 82 0 10 4 82 0 11 4 82 0 12 4 82 0 13 4 82 0 14 4 82 0 15 4 82 0 16 4 82 0 17 4 82 0 19 4 82 0 20 4 82 0 21 4 82 0 22 4 82 0 23 4 82 0 24 4 82 0 25 4 82 0 26 4 82 0 27 4 82 0 28 0 167 0 32 4 82 0 34 4 82 0 35 4 82 0 38 4 82 0 45 4 82 0 80 0 171 0 83 4 82 0 87 4 82 0 90 0 175 0 99 0 179 0 105 4 82 0 108 4 82 0 110 4 82 0 115 4 82 0 116 4 82 0 118 0 183 0 121 0 187 0 123 4 82 0 125 4 82 0 130 4 82 0 146 4 82 0 150 4 82 0 151 0 191 0 152 0 195 0 171 0 199 0 177 4 82 0 179 0 203 0 186 4 82 0 188 4 82 0 190 0 207 0 201 4 82 0 207 4 82 0 209 4 82 0 210 4 82 0 211 4 82 0 212 4 82 0 214 0 211 0 215 10 149 2 123 10 153 2 126 10 157 2 127 10 161 2 136 10 165 2 137 10 169 2 142 10 173 2 143 10 177 2 144 10 181 2 145 10 185 2 146 10 189 2 147 10 193 2 153 10 197 2 155 10 201 2 157] 
#[0 4 86 0 11 0 17 0 215] 
#[0 4 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 4 94 0 6 0 11 0 215] 
#[0 4 98 0 14 0 17 0 215] 
#[0 10 205 0 136] 
#[0 4 102 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 10 209 0 136] 
#[0 4 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 4 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 10 213 1 68 7 41 1 69] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 10 217 1 44 10 217 1 45 10 217 1 46 10 217 1 53 10 217 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 10 221 1 68 7 41 1 69] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 10 225 1 86] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 10 229 1 86] 
#[1 10 233 0 17 10 237 0 215] 
#[1 3 186 0 19 3 186 0 40 3 186 0 70 3 186 0 72 3 186 0 74 3 186 0 77 3 186 0 78 3 186 0 79 3 186 0 81 3 186 0 88 3 186 0 89 3 186 0 93 3 186 0 98 3 186 0 100 3 186 0 114 3 186 0 120 3 186 0 132 3 186 0 133 3 186 0 141 3 186 0 142 3 186 0 154 3 186 0 155 3 186 0 156 3 186 0 158 3 186 0 160 3 186 0 161 3 186 0 162 3 186 0 163 3 186 0 166 3 186 0 173 3 186 0 174 3 186 0 183 3 186 0 184 3 186 0 205 3 186 0 206 10 241 1 83] 
#[1 3 186 0 19 3 186 0 40 3 186 0 70 3 186 0 72 3 186 0 74 3 186 0 77 3 186 0 78 3 186 0 79 3 186 0 81 3 186 0 88 3 186 0 89 3 186 0 93 3 186 0 98 3 186 0 100 3 186 0 114 3 186 0 120 3 186 0 132 3 186 0 133 3 186 0 141 3 186 0 142 3 186 0 154 3 186 0 155 3 186 0 156 3 186 0 158 3 186 0 160 3 186 0 161 3 186 0 162 3 186 0 163 3 186 0 166 3 186 0 173 3 186 0 174 3 186 0 183 3 186 0 184 3 186 0 205 3 186 0 206 10 245 1 83] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 10 249 1 72 10 253 1 75] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 11 1 1 72 11 5 1 75] 
#[1 11 9 0 17 11 13 0 215] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 11 17 1 72] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 11 21 1 72] 
#[1 11 25 0 17 11 29 0 215] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 11 33 0 254 0 89 0 255 0 93 1 0 11 37 1 113] 
#[1 11 41 0 6 0 73 0 19 4 118 0 46 4 118 0 47 7 61 0 144 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 11 41 0 237 11 45 0 254 0 89 0 255 0 93 1 0 11 49 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 4 122 0 17 11 61 0 37 4 122 0 106 4 122 0 108 4 122 0 215 11 65 0 236] 
#[1 11 69 0 6 0 73 0 19 4 118 0 46 4 118 0 47 7 61 0 144 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 11 69 0 237 11 45 0 254 0 89 0 255 0 93 1 0 11 73 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 4 126 0 17 4 126 0 106 4 126 0 108 4 126 0 215 11 77 0 236] 
#[1 11 81 0 17 2 69 0 24 11 85 0 215 11 89 0 240] 
#[0 11 93 0 229] 
#[1 0 73 0 19 11 97 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[0 4 130 0 19 0 88 0 229] 
#[1 11 105 0 17 2 89 0 29 11 109 0 215] 
#[1 0 73 0 19 11 113 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 11 121 1 87 11 125 1 88] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 11 129 1 87 11 125 1 88] 
#[1 11 149 0 110 11 149 0 153 11 141 0 229 11 145 0 247 11 149 0 248] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 11 153 1 86] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 11 157 1 86] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 11 169 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 0 26 0 141 0 231 0 142 0 235 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 1 7 0 163 1 11 0 166 1 15 0 173 1 19 0 174 0 34 0 183 1 23 0 184 12 65 0 205 1 27 0 206 11 217 0 243 11 221 0 254 0 89 0 255 0 93 1 0 11 233 1 42 11 233 1 66 11 229 1 67 11 233 1 70 0 137 1 71 11 233 1 77 0 145 1 78 11 233 1 84 11 233 1 85 11 233 1 100 11 233 1 107 11 233 1 109 11 233 1 114 11 249 1 115 11 233 1 116 11 233 1 119 11 233 1 120 11 233 1 126 11 233 1 127 12 17 1 128 11 233 1 130 11 233 1 149 12 29 1 150 11 233 1 152 11 233 1 153 12 41 1 154 11 233 1 160 11 233 1 166 12 53 1 167 11 233 1 173 12 61 1 174 12 65 1 175 11 233 1 189 11 233 1 191 12 77 1 192 11 233 1 194 12 85 1 195 11 233 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 12 109 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 0 26 0 141 0 231 0 142 0 235 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 1 7 0 163 1 11 0 166 1 15 0 173 1 19 0 174 0 34 0 183 1 23 0 184 12 65 0 205 1 27 0 206 11 217 0 243 11 221 0 254 0 89 0 255 0 93 1 0 11 233 1 42 11 233 1 66 11 229 1 67 11 233 1 70 0 137 1 71 11 233 1 77 0 145 1 78 11 233 1 84 11 233 1 85 11 233 1 100 11 233 1 107 11 233 1 109 11 233 1 114 11 249 1 115 11 233 1 116 11 233 1 119 11 233 1 120 11 233 1 126 11 233 1 127 12 17 1 128 11 233 1 130 11 233 1 149 12 29 1 150 11 233 1 152 11 233 1 153 12 41 1 154 11 233 1 160 11 233 1 166 12 53 1 167 11 233 1 173 12 61 1 174 12 65 1 175 11 233 1 189 11 233 1 191 12 77 1 192 11 233 1 194 12 85 1 195 11 233 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 12 113 1 44 12 113 1 45 12 113 1 46 12 113 1 53 12 113 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 12 125 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 12 129 1 72] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 12 133 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 12 137 1 72] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 12 141 1 72 12 145 1 75] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 12 149 1 72 12 153 1 75] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 12 157 1 79] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 12 161 1 79] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 12 165 1 72] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 12 169 1 72] 
#[1 4 174 0 1 4 174 0 3 4 174 0 4 4 174 0 5 4 174 0 6 4 174 0 7 4 174 0 8 4 174 0 9 4 174 0 10 4 174 0 11 4 174 0 12 4 174 0 13 1 31 0 14 4 174 0 15 4 174 0 16 4 174 0 17 4 174 0 19 4 174 0 20 4 174 0 21 4 174 0 22 4 174 0 23 4 174 0 24 4 174 0 25 4 174 0 26 4 174 0 27 4 174 0 28 4 174 0 29 4 174 0 32 4 174 0 34 4 174 0 35 4 174 0 38 4 174 0 45 4 174 0 80 4 174 0 83 4 174 0 87 4 174 0 90 4 174 0 99 4 174 0 105 4 174 0 106 4 174 0 108 4 174 0 110 4 174 0 115 4 174 0 116 4 174 0 118 4 174 0 121 4 174 0 123 4 174 0 125 4 174 0 130 4 174 0 146 4 174 0 150 4 174 0 151 4 174 0 152 4 174 0 171 4 174 0 177 4 174 0 179 4 174 0 186 4 174 0 188 4 174 0 190 4 174 0 200 4 174 0 201 4 174 0 204 4 174 0 207 4 174 0 209 4 174 0 210 4 174 0 211 4 174 0 212 4 174 0 214 4 174 0 215 2 205 0 235 2 209 1 47] 
#[1 4 178 0 6 2 229 0 11 4 178 0 215 12 173 0 234 12 177 1 51] 
#[0 4 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 190 0 11 0 25 0 215] 
#[1 12 181 0 6 3 137 0 215 12 181 0 237] 
#[1 3 238 0 32 3 238 0 83 3 238 0 99 3 238 0 105 3 238 0 115 3 238 0 121 3 238 0 123 3 238 0 152 3 238 0 171 3 238 0 177 3 238 0 186 3 238 0 201 3 238 0 215 12 185 2 156] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 12 189 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 12 189 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 12 193 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 12 197 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 12 197 2 48 12 197 2 50 12 197 2 51 12 197 2 52 12 197 2 53 12 197 2 54 12 197 2 55 12 197 2 56 12 197 2 57 12 197 2 64 12 197 2 65 12 197 2 66 4 21 2 67 12 197 2 68 12 197 2 69 12 197 2 77 12 197 2 78 12 197 2 86 12 197 2 91 12 197 2 92 12 197 2 93 12 197 2 94 12 197 2 95 4 65 2 96 12 197 2 97 12 197 2 98 12 197 2 99 12 197 2 100 12 197 2 101 12 197 2 102 12 197 2 103 12 197 2 104 12 197 2 105 12 197 2 106 12 197 2 107 12 197 2 108 12 197 2 109 12 197 2 110 12 197 2 111 12 197 2 112 12 197 2 113 12 197 2 114 12 197 2 115 12 197 2 116 4 149 2 117 12 197 2 118 12 197 2 119 12 197 2 120 12 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 12 197 2 158 12 197 2 159] 
#[1 3 9 0 32 10 177 0 83 3 89 0 99 10 113 0 105 12 201 0 115 10 117 0 121 10 121 0 123 10 125 0 152 10 129 0 171 10 133 0 177 10 137 0 186 10 141 0 201 12 205 0 215 12 209 2 126 10 157 2 127 10 161 2 136 10 165 2 137 10 169 2 142 10 173 2 143 10 177 2 144 10 181 2 145 10 185 2 146 10 189 2 147 10 193 2 153 10 197 2 155 10 201 2 157] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 12 213 0 234 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 12 217 0 234 6 137 0 236] 
#[0 4 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 198 0 1 4 198 0 3 4 198 0 4 4 198 0 5 4 198 0 6 4 198 0 7 4 198 0 8 4 198 0 9 4 198 0 10 1 35 0 11 4 198 0 12 4 198 0 13 4 198 0 14 4 198 0 15 4 198 0 16 4 198 0 17 4 198 0 19 4 198 0 20 4 198 0 21 4 198 0 22 4 198 0 23 4 198 0 24 4 198 0 25 4 198 0 26 4 198 0 27 4 198 0 28 4 198 0 32 4 198 0 34 4 198 0 35 4 198 0 38 4 198 0 45 4 198 0 80 4 198 0 83 4 198 0 87 4 198 0 90 4 198 0 99 4 198 0 105 4 198 0 108 4 198 0 110 4 198 0 115 4 198 0 116 4 198 0 118 4 198 0 121 4 198 0 123 4 198 0 125 4 198 0 130 4 198 0 146 4 198 0 150 4 198 0 151 4 198 0 152 4 198 0 171 4 198 0 177 4 198 0 179 4 198 0 186 4 198 0 188 4 198 0 190 4 198 0 201 4 198 0 207 4 198 0 209 4 198 0 210 4 198 0 211 4 198 0 212 4 198 0 214 4 198 0 215 12 221 0 234 12 225 2 129] 
#[1 2 25 0 14 12 229 0 235] 
#[1 0 15 0 5 1 39 0 6 1 39 0 14 0 238 0 29 1 39 0 215 12 233 0 236 2 41 1 48 2 45 1 49 12 237 2 61 12 241 2 62] 
#[0 4 206 0 6 0 215] 
#[1 12 245 0 6 3 137 0 215 12 245 0 237] 
#[0 4 210 0 6 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 12 249 0 234 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 12 253 0 122 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 13 1 0 235 3 181 0 236 3 189 0 238 13 5 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 5 2 48 13 5 2 50 13 5 2 51 13 5 2 52 13 5 2 53 13 5 2 54 13 5 2 55 13 5 2 56 13 5 2 57 13 5 2 64 13 5 2 65 13 5 2 66 4 21 2 67 13 5 2 68 13 5 2 69 13 5 2 77 13 5 2 78 13 9 2 81 13 13 2 84 13 5 2 86 13 5 2 91 13 5 2 92 13 5 2 93 13 5 2 94 13 5 2 95 4 65 2 96 13 5 2 97 13 5 2 98 13 5 2 99 13 5 2 100 13 5 2 101 13 5 2 102 13 5 2 103 13 5 2 104 13 5 2 105 13 5 2 106 13 5 2 107 13 5 2 108 13 5 2 109 13 5 2 110 13 5 2 111 13 5 2 112 13 5 2 113 13 5 2 114 13 5 2 115 13 5 2 116 4 149 2 117 13 5 2 118 13 5 2 119 13 5 2 120 13 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 5 2 158 13 5 2 159] 
#[1 3 133 0 213 3 189 0 238 13 17 2 86] 
#[1 2 245 0 1 2 33 0 5 0 159 0 6 2 253 0 9 1 43 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 163 0 215 3 141 0 219 13 21 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 8 237 0 228 3 173 0 229 4 205 0 234 3 177 0 235 3 181 0 236 13 25 0 237 3 189 0 238 13 37 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 4 213 1 97 4 217 1 98 13 29 1 185 13 33 1 188 13 37 2 48 13 37 2 50 13 37 2 51 13 37 2 52 13 37 2 53 13 37 2 54 13 37 2 55 13 37 2 56 13 37 2 57 13 37 2 64 13 37 2 65 13 37 2 66 4 21 2 67 13 37 2 68 13 37 2 69 13 41 2 70 8 253 2 71 9 1 2 73 9 5 2 74 13 37 2 77 13 37 2 78 13 37 2 86 13 37 2 91 13 37 2 92 13 37 2 93 13 37 2 94 13 37 2 95 4 65 2 96 13 37 2 97 13 37 2 98 13 37 2 99 13 37 2 100 13 37 2 101 13 37 2 102 13 37 2 103 13 37 2 104 13 37 2 105 13 37 2 106 13 37 2 107 13 37 2 108 13 37 2 109 13 37 2 110 13 37 2 111 13 37 2 112 13 37 2 113 13 37 2 114 13 37 2 115 13 37 2 116 4 149 2 117 13 37 2 118 13 37 2 119 13 37 2 120 13 37 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 37 2 158 13 37 2 159] 
#[0 4 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 3 133 0 213 3 189 0 238 13 45 2 86] 
#[0 4 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 4 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 13 49 0 234 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 13 53 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 169 0 242 13 57 1 43 13 61 1 44 13 61 1 45 13 61 1 46 13 61 1 53 13 61 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 57 1 93 8 169 2 48 8 169 2 50 8 169 2 51 8 169 2 52 8 169 2 53 8 169 2 54 8 169 2 55 8 169 2 56 8 169 2 57 8 169 2 64 8 169 2 65 8 169 2 66 4 21 2 67 8 169 2 68 8 169 2 69 8 169 2 77 8 169 2 78 8 169 2 86 8 169 2 91 8 169 2 92 8 169 2 93 8 169 2 94 8 169 2 95 4 65 2 96 8 169 2 97 8 169 2 98 8 169 2 99 8 169 2 100 8 169 2 101 8 169 2 102 8 169 2 103 8 169 2 104 8 169 2 105 8 169 2 106 8 169 2 107 8 169 2 108 8 169 2 109 8 169 2 110 8 169 2 111 8 169 2 112 8 169 2 113 8 169 2 114 8 169 2 115 8 169 2 116 4 149 2 117 8 169 2 118 8 169 2 119 8 169 2 120 8 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 169 2 158 8 169 2 159] 
#[0 4 234 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 4 238 0 6 0 11 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 97 1 43 1 105 1 44 1 105 1 45 1 105 1 46 13 65 1 50 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 97 1 93] 
#[0 13 69 0 144] 
#[0 4 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 229 0 11 4 254 0 214 4 254 0 215 13 73 0 234 13 77 2 88] 
#[0 5 2 0 6 0 215] 
#[0 5 6 0 6 0 11 0 215] 
#[1 3 169 0 228 13 81 1 13] 
#[0 5 10 0 6 0 11 0 215] 
#[0 5 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 85 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 85 2 48 13 85 2 50 13 85 2 51 13 85 2 52 13 85 2 53 13 85 2 54 13 85 2 55 13 85 2 56 13 85 2 57 13 85 2 64 13 85 2 65 13 85 2 66 4 21 2 67 13 85 2 68 13 85 2 69 13 85 2 77 13 85 2 78 13 85 2 86 13 85 2 91 13 85 2 92 13 85 2 93 13 85 2 94 13 85 2 95 4 65 2 96 13 85 2 97 13 85 2 98 13 85 2 99 13 85 2 100 13 85 2 101 13 85 2 102 13 85 2 103 13 85 2 104 13 85 2 105 13 85 2 106 13 85 2 107 13 85 2 108 13 85 2 109 13 85 2 110 13 85 2 111 13 85 2 112 13 85 2 113 13 85 2 114 13 85 2 115 13 85 2 116 4 149 2 117 13 85 2 118 13 85 2 119 13 85 2 120 13 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 85 2 158 13 85 2 159] 
#[1 1 47 0 1 5 18 0 3 5 18 0 4 1 51 0 5 5 18 0 6 6 45 0 7 5 18 0 8 6 49 0 9 5 18 0 10 5 18 0 11 6 53 0 12 5 18 0 13 1 55 0 14 6 57 0 15 5 18 0 16 5 18 0 17 5 18 0 19 5 18 0 20 5 18 0 21 5 18 0 22 5 18 0 23 5 18 0 24 5 18 0 25 5 18 0 26 5 18 0 27 5 18 0 28 5 18 0 32 5 18 0 34 5 18 0 35 5 18 0 38 5 18 0 45 5 18 0 80 5 18 0 83 5 18 0 87 5 18 0 90 5 18 0 99 5 18 0 105 5 18 0 108 5 18 0 110 5 18 0 115 5 18 0 116 5 18 0 118 5 18 0 121 5 18 0 123 5 18 0 125 6 113 0 130 5 18 0 146 5 18 0 150 5 18 0 151 5 18 0 152 5 18 0 171 5 18 0 177 5 18 0 179 5 18 0 186 5 18 0 188 5 18 0 190 5 18 0 201 5 18 0 207 6 129 0 209 5 18 0 210 6 133 0 211 5 18 0 212 5 18 0 214 5 18 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 89 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 89 2 48 13 89 2 50 13 89 2 51 13 89 2 52 13 89 2 53 13 89 2 54 13 89 2 55 13 89 2 56 13 89 2 57 13 89 2 64 13 89 2 65 13 89 2 66 4 21 2 67 13 89 2 68 13 89 2 69 13 89 2 77 13 89 2 78 13 89 2 86 13 89 2 91 13 89 2 92 13 89 2 93 13 89 2 94 13 89 2 95 4 65 2 96 13 89 2 97 13 89 2 98 13 89 2 99 13 89 2 100 13 89 2 101 13 89 2 102 13 89 2 103 13 89 2 104 13 89 2 105 13 89 2 106 13 89 2 107 13 89 2 108 13 89 2 109 13 89 2 110 13 89 2 111 13 89 2 112 13 89 2 113 13 89 2 114 13 89 2 115 13 89 2 116 4 149 2 117 13 89 2 118 13 89 2 119 13 89 2 120 13 89 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 89 2 158 13 89 2 159] 
#[1 1 59 0 1 5 22 0 3 5 22 0 4 1 63 0 5 5 22 0 6 5 22 0 7 5 22 0 8 5 22 0 9 5 22 0 10 5 22 0 11 5 22 0 12 5 22 0 13 1 67 0 14 5 22 0 15 5 22 0 16 5 22 0 17 5 22 0 19 5 22 0 20 5 22 0 21 5 22 0 22 5 22 0 23 5 22 0 24 5 22 0 25 5 22 0 26 5 22 0 27 5 22 0 28 5 22 0 32 5 22 0 34 5 22 0 35 5 22 0 38 5 22 0 45 5 22 0 80 5 22 0 83 5 22 0 87 5 22 0 90 5 22 0 99 5 22 0 105 5 22 0 108 5 22 0 110 5 22 0 115 5 22 0 116 5 22 0 118 5 22 0 121 5 22 0 123 5 22 0 125 5 22 0 130 5 22 0 146 5 22 0 150 5 22 0 151 5 22 0 152 5 22 0 171 5 22 0 177 5 22 0 179 5 22 0 186 5 22 0 188 5 22 0 190 5 22 0 201 5 22 0 207 5 22 0 209 5 22 0 210 6 133 0 211 5 22 0 212 5 22 0 214 5 22 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 93 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 93 2 48 13 93 2 50 13 93 2 51 13 93 2 52 13 93 2 53 13 93 2 54 13 93 2 55 13 93 2 56 13 93 2 57 13 93 2 64 13 93 2 65 13 93 2 66 4 21 2 67 13 93 2 68 13 93 2 69 13 93 2 77 13 93 2 78 13 93 2 86 13 93 2 91 13 93 2 92 13 93 2 93 13 93 2 94 13 93 2 95 4 65 2 96 13 93 2 97 13 93 2 98 13 93 2 99 13 93 2 100 13 93 2 101 13 93 2 102 13 93 2 103 13 93 2 104 13 93 2 105 13 93 2 106 13 93 2 107 13 93 2 108 13 93 2 109 13 93 2 110 13 93 2 111 13 93 2 112 13 93 2 113 13 93 2 114 13 93 2 115 13 93 2 116 4 149 2 117 13 93 2 118 13 93 2 119 13 93 2 120 13 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 93 2 158 13 93 2 159] 
#[1 1 71 0 1 5 26 0 3 5 26 0 4 1 75 0 5 5 26 0 6 6 45 0 7 5 26 0 8 5 26 0 9 5 26 0 10 5 26 0 11 5 26 0 12 5 26 0 13 1 79 0 14 6 57 0 15 5 26 0 16 5 26 0 17 5 26 0 19 5 26 0 20 5 26 0 21 5 26 0 22 5 26 0 23 5 26 0 24 5 26 0 25 5 26 0 26 5 26 0 27 5 26 0 28 5 26 0 32 5 26 0 34 5 26 0 35 5 26 0 38 5 26 0 45 5 26 0 80 5 26 0 83 5 26 0 87 5 26 0 90 5 26 0 99 5 26 0 105 5 26 0 108 5 26 0 110 5 26 0 115 5 26 0 116 5 26 0 118 5 26 0 121 5 26 0 123 5 26 0 125 6 113 0 130 5 26 0 146 5 26 0 150 5 26 0 151 5 26 0 152 5 26 0 171 5 26 0 177 5 26 0 179 5 26 0 186 5 26 0 188 5 26 0 190 5 26 0 201 5 26 0 207 6 129 0 209 5 26 0 210 6 133 0 211 5 26 0 212 5 26 0 214 5 26 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 97 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 97 2 48 13 97 2 50 13 97 2 51 13 97 2 52 13 97 2 53 13 97 2 54 13 97 2 55 13 97 2 56 13 97 2 57 13 97 2 64 13 97 2 65 13 97 2 66 4 21 2 67 13 97 2 68 13 97 2 69 13 97 2 77 13 97 2 78 13 97 2 86 13 97 2 91 13 97 2 92 13 97 2 93 13 97 2 94 13 97 2 95 4 65 2 96 13 97 2 97 13 97 2 98 13 97 2 99 13 97 2 100 13 97 2 101 13 97 2 102 13 97 2 103 13 97 2 104 13 97 2 105 13 97 2 106 13 97 2 107 13 97 2 108 13 97 2 109 13 97 2 110 13 97 2 111 13 97 2 112 13 97 2 113 13 97 2 114 13 97 2 115 13 97 2 116 4 149 2 117 13 97 2 118 13 97 2 119 13 97 2 120 13 97 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 97 2 158 13 97 2 159] 
#[1 1 83 0 1 5 30 0 3 5 30 0 4 1 87 0 5 5 30 0 6 6 45 0 7 5 30 0 8 5 30 0 9 5 30 0 10 5 30 0 11 5 30 0 12 5 30 0 13 1 91 0 14 6 57 0 15 5 30 0 16 5 30 0 17 5 30 0 19 5 30 0 20 5 30 0 21 5 30 0 22 5 30 0 23 5 30 0 24 5 30 0 25 5 30 0 26 5 30 0 27 5 30 0 28 5 30 0 32 5 30 0 34 5 30 0 35 5 30 0 38 5 30 0 45 5 30 0 80 5 30 0 83 5 30 0 87 5 30 0 90 5 30 0 99 5 30 0 105 5 30 0 108 5 30 0 110 5 30 0 115 5 30 0 116 5 30 0 118 5 30 0 121 5 30 0 123 5 30 0 125 6 113 0 130 5 30 0 146 5 30 0 150 5 30 0 151 5 30 0 152 5 30 0 171 5 30 0 177 5 30 0 179 5 30 0 186 5 30 0 188 5 30 0 190 5 30 0 201 5 30 0 207 6 129 0 209 5 30 0 210 6 133 0 211 5 30 0 212 5 30 0 214 5 30 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 101 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 101 2 48 13 101 2 50 13 101 2 51 13 101 2 52 13 101 2 53 13 101 2 54 13 101 2 55 13 101 2 56 13 101 2 57 13 101 2 64 13 101 2 65 13 101 2 66 4 21 2 67 13 101 2 68 13 101 2 69 13 101 2 77 13 101 2 78 13 101 2 86 13 101 2 91 13 101 2 92 13 101 2 93 13 101 2 94 13 101 2 95 4 65 2 96 13 101 2 97 13 101 2 98 13 101 2 99 13 101 2 100 13 101 2 101 13 101 2 102 13 101 2 103 13 101 2 104 13 101 2 105 13 101 2 106 13 101 2 107 13 101 2 108 13 101 2 109 13 101 2 110 13 101 2 111 13 101 2 112 13 101 2 113 13 101 2 114 13 101 2 115 13 101 2 116 4 149 2 117 13 101 2 118 13 101 2 119 13 101 2 120 13 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 101 2 158 13 101 2 159] 
#[1 1 95 0 1 5 34 0 3 5 34 0 4 1 99 0 5 5 34 0 6 5 34 0 7 5 34 0 8 5 34 0 9 5 34 0 10 5 34 0 11 5 34 0 12 5 34 0 13 1 103 0 14 5 34 0 15 5 34 0 16 5 34 0 17 5 34 0 19 5 34 0 20 5 34 0 21 5 34 0 22 5 34 0 23 5 34 0 24 5 34 0 25 5 34 0 26 5 34 0 27 5 34 0 28 5 34 0 32 5 34 0 34 5 34 0 35 5 34 0 38 5 34 0 45 5 34 0 80 5 34 0 83 5 34 0 87 5 34 0 90 5 34 0 99 5 34 0 105 5 34 0 108 5 34 0 110 5 34 0 115 5 34 0 116 5 34 0 118 5 34 0 121 5 34 0 123 5 34 0 125 5 34 0 130 5 34 0 146 5 34 0 150 5 34 0 151 5 34 0 152 5 34 0 171 5 34 0 177 5 34 0 179 5 34 0 186 5 34 0 188 5 34 0 190 5 34 0 201 5 34 0 207 5 34 0 209 5 34 0 210 6 133 0 211 5 34 0 212 5 34 0 214 5 34 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 105 2 48 13 105 2 50 13 105 2 51 13 105 2 52 13 105 2 53 13 105 2 54 13 105 2 55 13 105 2 56 13 105 2 57 13 105 2 64 13 105 2 65 13 105 2 66 4 21 2 67 13 105 2 68 13 105 2 69 13 105 2 77 13 105 2 78 13 105 2 86 13 105 2 91 13 105 2 92 13 105 2 93 13 105 2 94 13 105 2 95 4 65 2 96 13 105 2 97 13 105 2 98 13 105 2 99 13 105 2 100 13 105 2 101 13 105 2 102 13 105 2 103 13 105 2 104 13 105 2 105 13 105 2 106 13 105 2 107 13 105 2 108 13 105 2 109 13 105 2 110 13 105 2 111 13 105 2 112 13 105 2 113 13 105 2 114 13 105 2 115 13 105 2 116 4 149 2 117 13 105 2 118 13 105 2 119 13 105 2 120 13 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 105 2 158 13 105 2 159] 
#[1 1 107 0 1 6 41 0 3 5 38 0 4 1 111 0 5 5 38 0 6 6 45 0 7 5 38 0 8 6 49 0 9 5 38 0 10 5 38 0 11 6 53 0 12 5 38 0 13 1 115 0 14 6 57 0 15 5 38 0 16 5 38 0 17 6 65 0 20 5 38 0 21 6 89 0 27 5 38 0 28 5 38 0 32 5 38 0 34 5 38 0 35 5 38 0 38 5 38 0 45 5 38 0 80 5 38 0 83 5 38 0 87 5 38 0 90 5 38 0 99 5 38 0 105 5 38 0 108 5 38 0 110 5 38 0 115 5 38 0 121 5 38 0 123 6 113 0 130 5 38 0 146 5 38 0 150 5 38 0 151 5 38 0 152 5 38 0 171 5 38 0 177 5 38 0 179 5 38 0 186 5 38 0 188 5 38 0 190 5 38 0 201 5 38 0 207 6 129 0 209 5 38 0 210 6 133 0 211 5 38 0 212 5 38 0 214 5 38 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 109 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 109 2 48 13 109 2 50 13 109 2 51 13 109 2 52 13 109 2 53 13 109 2 54 13 109 2 55 13 109 2 56 13 109 2 57 13 109 2 64 13 109 2 65 13 109 2 66 4 21 2 67 13 109 2 68 13 109 2 69 13 109 2 77 13 109 2 78 13 109 2 86 13 109 2 91 13 109 2 92 13 109 2 93 13 109 2 94 13 109 2 95 4 65 2 96 13 109 2 97 13 109 2 98 13 109 2 99 13 109 2 100 13 109 2 101 13 109 2 102 13 109 2 103 13 109 2 104 13 109 2 105 13 109 2 106 13 109 2 107 13 109 2 108 13 109 2 109 13 109 2 110 13 109 2 111 13 109 2 112 13 109 2 113 13 109 2 114 13 109 2 115 13 109 2 116 4 149 2 117 13 109 2 118 13 109 2 119 13 109 2 120 13 109 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 109 2 158 13 109 2 159] 
#[1 1 119 0 1 6 41 0 3 5 42 0 4 1 123 0 5 5 42 0 6 6 45 0 7 5 42 0 8 6 49 0 9 5 42 0 10 5 42 0 11 6 53 0 12 5 42 0 13 1 127 0 14 6 57 0 15 5 42 0 16 5 42 0 17 5 42 0 19 5 42 0 20 5 42 0 21 5 42 0 22 5 42 0 23 5 42 0 24 5 42 0 25 5 42 0 26 5 42 0 27 5 42 0 28 5 42 0 32 5 42 0 34 5 42 0 35 5 42 0 38 5 42 0 45 5 42 0 80 5 42 0 83 5 42 0 87 5 42 0 90 5 42 0 99 5 42 0 105 5 42 0 108 5 42 0 110 5 42 0 115 5 42 0 116 5 42 0 118 5 42 0 121 5 42 0 123 5 42 0 125 6 113 0 130 5 42 0 146 5 42 0 150 5 42 0 151 5 42 0 152 5 42 0 171 5 42 0 177 5 42 0 179 5 42 0 186 5 42 0 188 5 42 0 190 5 42 0 201 5 42 0 207 6 129 0 209 5 42 0 210 6 133 0 211 5 42 0 212 5 42 0 214 5 42 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 113 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 113 2 48 13 113 2 50 13 113 2 51 13 113 2 52 13 113 2 53 13 113 2 54 13 113 2 55 13 113 2 56 13 113 2 57 13 113 2 64 13 113 2 65 13 113 2 66 4 21 2 67 13 113 2 68 13 113 2 69 13 113 2 77 13 113 2 78 13 113 2 86 13 113 2 91 13 113 2 92 13 113 2 93 13 113 2 94 13 113 2 95 4 65 2 96 13 113 2 97 13 113 2 98 13 113 2 99 13 113 2 100 13 113 2 101 13 113 2 102 13 113 2 103 13 113 2 104 13 113 2 105 13 113 2 106 13 113 2 107 13 113 2 108 13 113 2 109 13 113 2 110 13 113 2 111 13 113 2 112 13 113 2 113 13 113 2 114 13 113 2 115 13 113 2 116 4 149 2 117 13 113 2 118 13 113 2 119 13 113 2 120 13 113 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 113 2 158 13 113 2 159] 
#[1 1 131 0 1 6 41 0 3 5 46 0 4 1 135 0 5 5 46 0 6 6 45 0 7 5 46 0 8 6 49 0 9 5 46 0 10 5 46 0 11 6 53 0 12 5 46 0 13 1 139 0 14 6 57 0 15 5 46 0 16 5 46 0 17 6 65 0 20 5 46 0 21 6 89 0 27 5 46 0 28 5 46 0 32 5 46 0 34 5 46 0 35 5 46 0 38 5 46 0 45 5 46 0 80 5 46 0 83 5 46 0 87 5 46 0 90 5 46 0 99 5 46 0 105 5 46 0 108 5 46 0 110 5 46 0 115 5 46 0 121 5 46 0 123 6 113 0 130 5 46 0 146 5 46 0 150 5 46 0 151 5 46 0 152 5 46 0 171 5 46 0 177 5 46 0 179 5 46 0 186 5 46 0 188 5 46 0 190 5 46 0 201 5 46 0 207 6 129 0 209 5 46 0 210 6 133 0 211 5 46 0 212 5 46 0 214 5 46 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 117 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 117 2 48 13 117 2 50 13 117 2 51 13 117 2 52 13 117 2 53 13 117 2 54 13 117 2 55 13 117 2 56 13 117 2 57 13 117 2 64 13 117 2 65 13 117 2 66 4 21 2 67 13 117 2 68 13 117 2 69 13 117 2 77 13 117 2 78 13 117 2 86 13 117 2 91 13 117 2 92 13 117 2 93 13 117 2 94 13 117 2 95 4 65 2 96 13 117 2 97 13 117 2 98 13 117 2 99 13 117 2 100 13 117 2 101 13 117 2 102 13 117 2 103 13 117 2 104 13 117 2 105 13 117 2 106 13 117 2 107 13 117 2 108 13 117 2 109 13 117 2 110 13 117 2 111 13 117 2 112 13 117 2 113 13 117 2 114 13 117 2 115 13 117 2 116 4 149 2 117 13 117 2 118 13 117 2 119 13 117 2 120 13 117 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 117 2 158 13 117 2 159] 
#[1 1 143 0 1 6 41 0 3 5 50 0 4 1 147 0 5 5 50 0 6 6 45 0 7 5 50 0 8 6 49 0 9 5 50 0 10 5 50 0 11 6 53 0 12 5 50 0 13 1 151 0 14 6 57 0 15 5 50 0 16 5 50 0 17 6 65 0 20 5 50 0 21 6 89 0 27 5 50 0 28 5 50 0 32 5 50 0 34 5 50 0 35 5 50 0 38 5 50 0 45 5 50 0 80 5 50 0 83 5 50 0 87 5 50 0 90 5 50 0 99 5 50 0 105 5 50 0 108 5 50 0 110 5 50 0 115 5 50 0 121 5 50 0 123 6 113 0 130 5 50 0 146 5 50 0 150 5 50 0 151 5 50 0 152 5 50 0 171 5 50 0 177 5 50 0 179 5 50 0 186 5 50 0 188 5 50 0 190 5 50 0 201 5 50 0 207 6 129 0 209 5 50 0 210 6 133 0 211 5 50 0 212 5 50 0 214 5 50 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 121 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 121 2 48 13 121 2 50 13 121 2 51 13 121 2 52 13 121 2 53 13 121 2 54 13 121 2 55 13 121 2 56 13 121 2 57 13 121 2 64 13 121 2 65 13 121 2 66 4 21 2 67 13 121 2 68 13 121 2 69 13 121 2 77 13 121 2 78 13 121 2 86 13 121 2 91 13 121 2 92 13 121 2 93 13 121 2 94 13 121 2 95 4 65 2 96 13 121 2 97 13 121 2 98 13 121 2 99 13 121 2 100 13 121 2 101 13 121 2 102 13 121 2 103 13 121 2 104 13 121 2 105 13 121 2 106 13 121 2 107 13 121 2 108 13 121 2 109 13 121 2 110 13 121 2 111 13 121 2 112 13 121 2 113 13 121 2 114 13 121 2 115 13 121 2 116 4 149 2 117 13 121 2 118 13 121 2 119 13 121 2 120 13 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 121 2 158 13 121 2 159] 
#[1 1 155 0 1 6 41 0 3 5 54 0 4 1 159 0 5 5 54 0 6 6 45 0 7 5 54 0 8 6 49 0 9 5 54 0 10 5 54 0 11 6 53 0 12 5 54 0 13 1 163 0 14 6 57 0 15 5 54 0 16 5 54 0 17 6 65 0 20 5 54 0 21 6 89 0 27 5 54 0 28 5 54 0 32 5 54 0 34 5 54 0 35 5 54 0 38 5 54 0 45 5 54 0 80 5 54 0 83 5 54 0 87 5 54 0 90 5 54 0 99 5 54 0 105 5 54 0 108 5 54 0 110 5 54 0 115 5 54 0 121 5 54 0 123 6 113 0 130 5 54 0 146 5 54 0 150 5 54 0 151 5 54 0 152 5 54 0 171 5 54 0 177 5 54 0 179 5 54 0 186 5 54 0 188 5 54 0 190 5 54 0 201 5 54 0 207 6 129 0 209 5 54 0 210 6 133 0 211 5 54 0 212 5 54 0 214 5 54 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 125 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 125 2 48 13 125 2 50 13 125 2 51 13 125 2 52 13 125 2 53 13 125 2 54 13 125 2 55 13 125 2 56 13 125 2 57 13 125 2 64 13 125 2 65 13 125 2 66 4 21 2 67 13 125 2 68 13 125 2 69 13 125 2 77 13 125 2 78 13 125 2 86 13 125 2 91 13 125 2 92 13 125 2 93 13 125 2 94 13 125 2 95 4 65 2 96 13 125 2 97 13 125 2 98 13 125 2 99 13 125 2 100 13 125 2 101 13 125 2 102 13 125 2 103 13 125 2 104 13 125 2 105 13 125 2 106 13 125 2 107 13 125 2 108 13 125 2 109 13 125 2 110 13 125 2 111 13 125 2 112 13 125 2 113 13 125 2 114 13 125 2 115 13 125 2 116 4 149 2 117 13 125 2 118 13 125 2 119 13 125 2 120 13 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 125 2 158 13 125 2 159] 
#[1 1 167 0 1 6 41 0 3 5 58 0 4 1 171 0 5 5 58 0 6 6 45 0 7 5 58 0 8 6 49 0 9 5 58 0 10 5 58 0 11 6 53 0 12 5 58 0 13 1 175 0 14 6 57 0 15 5 58 0 16 5 58 0 17 6 65 0 20 5 58 0 21 6 89 0 27 5 58 0 28 5 58 0 32 5 58 0 34 5 58 0 35 5 58 0 38 5 58 0 45 5 58 0 80 5 58 0 83 5 58 0 87 5 58 0 90 5 58 0 99 5 58 0 105 5 58 0 108 5 58 0 110 5 58 0 115 5 58 0 121 5 58 0 123 6 113 0 130 5 58 0 146 5 58 0 150 5 58 0 151 5 58 0 152 5 58 0 171 5 58 0 177 5 58 0 179 5 58 0 186 5 58 0 188 5 58 0 190 5 58 0 201 5 58 0 207 6 129 0 209 5 58 0 210 6 133 0 211 5 58 0 212 5 58 0 214 5 58 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 129 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 129 2 48 13 129 2 50 13 129 2 51 13 129 2 52 13 129 2 53 13 129 2 54 13 129 2 55 13 129 2 56 13 129 2 57 13 129 2 64 13 129 2 65 13 129 2 66 4 21 2 67 13 129 2 68 13 129 2 69 13 129 2 77 13 129 2 78 13 129 2 86 13 129 2 91 13 129 2 92 13 129 2 93 13 129 2 94 13 129 2 95 4 65 2 96 13 129 2 97 13 129 2 98 13 129 2 99 13 129 2 100 13 129 2 101 13 129 2 102 13 129 2 103 13 129 2 104 13 129 2 105 13 129 2 106 13 129 2 107 13 129 2 108 13 129 2 109 13 129 2 110 13 129 2 111 13 129 2 112 13 129 2 113 13 129 2 114 13 129 2 115 13 129 2 116 4 149 2 117 13 129 2 118 13 129 2 119 13 129 2 120 13 129 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 129 2 158 13 129 2 159] 
#[1 1 179 0 1 6 41 0 3 5 62 0 4 1 183 0 5 5 62 0 6 6 45 0 7 5 62 0 8 6 49 0 9 5 62 0 10 5 62 0 11 6 53 0 12 5 62 0 13 1 187 0 14 6 57 0 15 5 62 0 16 5 62 0 17 6 65 0 20 5 62 0 21 6 89 0 27 5 62 0 28 5 62 0 32 5 62 0 34 5 62 0 35 5 62 0 38 5 62 0 45 5 62 0 80 5 62 0 83 5 62 0 87 5 62 0 90 5 62 0 99 5 62 0 105 5 62 0 108 5 62 0 110 5 62 0 115 5 62 0 121 5 62 0 123 6 113 0 130 5 62 0 146 5 62 0 150 5 62 0 151 5 62 0 152 5 62 0 171 5 62 0 177 5 62 0 179 5 62 0 186 5 62 0 188 5 62 0 190 5 62 0 201 5 62 0 207 6 129 0 209 5 62 0 210 6 133 0 211 5 62 0 212 5 62 0 214 5 62 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 133 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 133 2 48 13 133 2 50 13 133 2 51 13 133 2 52 13 133 2 53 13 133 2 54 13 133 2 55 13 133 2 56 13 133 2 57 13 133 2 64 13 133 2 65 13 133 2 66 4 21 2 67 13 133 2 68 13 133 2 69 13 133 2 77 13 133 2 78 13 133 2 86 13 133 2 91 13 133 2 92 13 133 2 93 13 133 2 94 13 133 2 95 4 65 2 96 13 133 2 97 13 133 2 98 13 133 2 99 13 133 2 100 13 133 2 101 13 133 2 102 13 133 2 103 13 133 2 104 13 133 2 105 13 133 2 106 13 133 2 107 13 133 2 108 13 133 2 109 13 133 2 110 13 133 2 111 13 133 2 112 13 133 2 113 13 133 2 114 13 133 2 115 13 133 2 116 4 149 2 117 13 133 2 118 13 133 2 119 13 133 2 120 13 133 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 133 2 158 13 133 2 159] 
#[1 1 191 0 1 6 41 0 3 5 66 0 4 1 195 0 5 5 66 0 6 6 45 0 7 5 66 0 8 6 49 0 9 5 66 0 10 5 66 0 11 6 53 0 12 5 66 0 13 1 199 0 14 6 57 0 15 5 66 0 16 5 66 0 17 5 66 0 19 5 66 0 20 5 66 0 21 5 66 0 22 5 66 0 23 5 66 0 24 5 66 0 25 5 66 0 26 5 66 0 27 5 66 0 28 5 66 0 32 5 66 0 34 5 66 0 35 5 66 0 38 5 66 0 45 5 66 0 80 5 66 0 83 5 66 0 87 5 66 0 90 5 66 0 99 5 66 0 105 5 66 0 108 5 66 0 110 5 66 0 115 5 66 0 116 5 66 0 118 5 66 0 121 5 66 0 123 5 66 0 125 6 113 0 130 5 66 0 146 5 66 0 150 5 66 0 151 5 66 0 152 5 66 0 171 5 66 0 177 5 66 0 179 5 66 0 186 5 66 0 188 5 66 0 190 5 66 0 201 5 66 0 207 6 129 0 209 5 66 0 210 6 133 0 211 5 66 0 212 5 66 0 214 5 66 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 137 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 137 2 48 13 137 2 50 13 137 2 51 13 137 2 52 13 137 2 53 13 137 2 54 13 137 2 55 13 137 2 56 13 137 2 57 13 137 2 64 13 137 2 65 13 137 2 66 4 21 2 67 13 137 2 68 13 137 2 69 13 137 2 77 13 137 2 78 13 137 2 86 13 137 2 91 13 137 2 92 13 137 2 93 13 137 2 94 13 137 2 95 4 65 2 96 13 137 2 97 13 137 2 98 13 137 2 99 13 137 2 100 13 137 2 101 13 137 2 102 13 137 2 103 13 137 2 104 13 137 2 105 13 137 2 106 13 137 2 107 13 137 2 108 13 137 2 109 13 137 2 110 13 137 2 111 13 137 2 112 13 137 2 113 13 137 2 114 13 137 2 115 13 137 2 116 4 149 2 117 13 137 2 118 13 137 2 119 13 137 2 120 13 137 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 137 2 158 13 137 2 159] 
#[1 1 203 0 1 6 41 0 3 5 70 0 4 1 207 0 5 5 70 0 6 6 45 0 7 5 70 0 8 6 49 0 9 5 70 0 10 5 70 0 11 6 53 0 12 5 70 0 13 1 211 0 14 6 57 0 15 5 70 0 16 5 70 0 17 6 61 0 19 6 65 0 20 5 70 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 5 70 0 28 5 70 0 32 5 70 0 34 5 70 0 35 5 70 0 38 5 70 0 45 5 70 0 80 5 70 0 83 5 70 0 87 5 70 0 90 5 70 0 99 5 70 0 105 5 70 0 108 5 70 0 110 5 70 0 115 6 101 0 116 6 105 0 118 5 70 0 121 5 70 0 123 6 109 0 125 6 113 0 130 5 70 0 146 5 70 0 150 5 70 0 151 5 70 0 152 5 70 0 171 5 70 0 177 5 70 0 179 5 70 0 186 5 70 0 188 5 70 0 190 5 70 0 201 5 70 0 207 6 129 0 209 5 70 0 210 6 133 0 211 5 70 0 212 5 70 0 214 5 70 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 141 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 141 2 48 13 141 2 50 13 141 2 51 13 141 2 52 13 141 2 53 13 141 2 54 13 141 2 55 13 141 2 56 13 141 2 57 13 141 2 64 13 141 2 65 13 141 2 66 4 21 2 67 13 141 2 68 13 141 2 69 13 141 2 77 13 141 2 78 13 141 2 86 13 141 2 91 13 141 2 92 13 141 2 93 13 141 2 94 13 141 2 95 4 65 2 96 13 141 2 97 13 141 2 98 13 141 2 99 13 141 2 100 13 141 2 101 13 141 2 102 13 141 2 103 13 141 2 104 13 141 2 105 13 141 2 106 13 141 2 107 13 141 2 108 13 141 2 109 13 141 2 110 13 141 2 111 13 141 2 112 13 141 2 113 13 141 2 114 13 141 2 115 13 141 2 116 4 149 2 117 13 141 2 118 13 141 2 119 13 141 2 120 13 141 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 141 2 158 13 141 2 159] 
#[1 1 215 0 1 6 41 0 3 5 74 0 4 1 219 0 5 5 74 0 6 6 45 0 7 5 74 0 8 6 49 0 9 5 74 0 10 5 74 0 11 6 53 0 12 5 74 0 13 1 223 0 14 6 57 0 15 5 74 0 16 5 74 0 17 6 61 0 19 6 65 0 20 5 74 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 5 74 0 28 5 74 0 32 5 74 0 34 5 74 0 35 5 74 0 38 5 74 0 45 5 74 0 80 5 74 0 83 5 74 0 87 5 74 0 90 5 74 0 99 5 74 0 105 5 74 0 108 5 74 0 110 5 74 0 115 6 101 0 116 6 105 0 118 5 74 0 121 5 74 0 123 6 109 0 125 6 113 0 130 5 74 0 146 5 74 0 150 5 74 0 151 5 74 0 152 5 74 0 171 5 74 0 177 5 74 0 179 5 74 0 186 5 74 0 188 5 74 0 190 5 74 0 201 5 74 0 207 6 129 0 209 5 74 0 210 6 133 0 211 5 74 0 212 5 74 0 214 5 74 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 145 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 145 2 48 13 145 2 50 13 145 2 51 13 145 2 52 13 145 2 53 13 145 2 54 13 145 2 55 13 145 2 56 13 145 2 57 13 145 2 64 13 145 2 65 13 145 2 66 4 21 2 67 13 145 2 68 13 145 2 69 13 145 2 77 13 145 2 78 13 145 2 86 13 145 2 91 13 145 2 92 13 145 2 93 13 145 2 94 13 145 2 95 4 65 2 96 13 145 2 97 13 145 2 98 13 145 2 99 13 145 2 100 13 145 2 101 13 145 2 102 13 145 2 103 13 145 2 104 13 145 2 105 13 145 2 106 13 145 2 107 13 145 2 108 13 145 2 109 13 145 2 110 13 145 2 111 13 145 2 112 13 145 2 113 13 145 2 114 13 145 2 115 13 145 2 116 4 149 2 117 13 145 2 118 13 145 2 119 13 145 2 120 13 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 145 2 158 13 145 2 159] 
#[1 1 227 0 1 6 41 0 3 5 78 0 4 1 231 0 5 5 78 0 6 6 45 0 7 5 78 0 8 6 49 0 9 5 78 0 10 5 78 0 11 6 53 0 12 5 78 0 13 1 235 0 14 6 57 0 15 5 78 0 16 5 78 0 17 6 65 0 20 5 78 0 21 6 89 0 27 5 78 0 28 5 78 0 32 5 78 0 34 5 78 0 35 5 78 0 38 5 78 0 45 5 78 0 80 5 78 0 83 5 78 0 87 5 78 0 90 5 78 0 99 5 78 0 105 5 78 0 108 5 78 0 110 5 78 0 115 5 78 0 121 5 78 0 123 6 113 0 130 5 78 0 146 5 78 0 150 5 78 0 151 5 78 0 152 5 78 0 171 5 78 0 177 5 78 0 179 5 78 0 186 5 78 0 188 5 78 0 190 5 78 0 201 5 78 0 207 6 129 0 209 5 78 0 210 6 133 0 211 5 78 0 212 5 78 0 214 5 78 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 149 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 149 2 48 13 149 2 50 13 149 2 51 13 149 2 52 13 149 2 53 13 149 2 54 13 149 2 55 13 149 2 56 13 149 2 57 13 149 2 64 13 149 2 65 13 149 2 66 4 21 2 67 13 149 2 68 13 149 2 69 13 149 2 77 13 149 2 78 13 149 2 86 13 149 2 91 13 149 2 92 13 149 2 93 13 149 2 94 13 149 2 95 4 65 2 96 13 149 2 97 13 149 2 98 13 149 2 99 13 149 2 100 13 149 2 101 13 149 2 102 13 149 2 103 13 149 2 104 13 149 2 105 13 149 2 106 13 149 2 107 13 149 2 108 13 149 2 109 13 149 2 110 13 149 2 111 13 149 2 112 13 149 2 113 13 149 2 114 13 149 2 115 13 149 2 116 4 149 2 117 13 149 2 118 13 149 2 119 13 149 2 120 13 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 149 2 158 13 149 2 159] 
#[1 1 239 0 1 6 41 0 3 5 82 0 4 1 243 0 5 5 82 0 6 6 45 0 7 5 82 0 8 6 49 0 9 5 82 0 10 5 82 0 11 6 53 0 12 5 82 0 13 1 247 0 14 6 57 0 15 5 82 0 16 5 82 0 17 6 65 0 20 5 82 0 21 6 89 0 27 5 82 0 28 5 82 0 32 5 82 0 34 5 82 0 35 5 82 0 38 5 82 0 45 5 82 0 80 5 82 0 83 5 82 0 87 5 82 0 90 5 82 0 99 5 82 0 105 5 82 0 108 5 82 0 110 5 82 0 115 5 82 0 121 5 82 0 123 6 113 0 130 5 82 0 146 5 82 0 150 5 82 0 151 5 82 0 152 5 82 0 171 5 82 0 177 5 82 0 179 5 82 0 186 5 82 0 188 5 82 0 190 5 82 0 201 5 82 0 207 6 129 0 209 5 82 0 210 6 133 0 211 5 82 0 212 5 82 0 214 5 82 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 153 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 153 2 48 13 153 2 50 13 153 2 51 13 153 2 52 13 153 2 53 13 153 2 54 13 153 2 55 13 153 2 56 13 153 2 57 13 153 2 64 13 153 2 65 13 153 2 66 4 21 2 67 13 153 2 68 13 153 2 69 13 153 2 77 13 153 2 78 13 153 2 86 13 153 2 91 13 153 2 92 13 153 2 93 13 153 2 94 13 153 2 95 4 65 2 96 13 153 2 97 13 153 2 98 13 153 2 99 13 153 2 100 13 153 2 101 13 153 2 102 13 153 2 103 13 153 2 104 13 153 2 105 13 153 2 106 13 153 2 107 13 153 2 108 13 153 2 109 13 153 2 110 13 153 2 111 13 153 2 112 13 153 2 113 13 153 2 114 13 153 2 115 13 153 2 116 4 149 2 117 13 153 2 118 13 153 2 119 13 153 2 120 13 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 153 2 158 13 153 2 159] 
#[1 1 251 0 1 6 41 0 3 5 86 0 4 1 255 0 5 5 86 0 6 6 45 0 7 5 86 0 8 6 49 0 9 5 86 0 10 5 86 0 11 6 53 0 12 5 86 0 13 2 3 0 14 6 57 0 15 5 86 0 16 5 86 0 17 6 65 0 20 5 86 0 21 6 89 0 27 5 86 0 28 5 86 0 32 5 86 0 34 5 86 0 35 5 86 0 38 5 86 0 45 5 86 0 80 5 86 0 83 5 86 0 87 5 86 0 90 5 86 0 99 5 86 0 105 5 86 0 108 5 86 0 110 5 86 0 115 5 86 0 121 5 86 0 123 6 113 0 130 5 86 0 146 5 86 0 150 5 86 0 151 5 86 0 152 5 86 0 171 5 86 0 177 5 86 0 179 5 86 0 186 5 86 0 188 5 86 0 190 5 86 0 201 5 86 0 207 6 129 0 209 5 86 0 210 6 133 0 211 5 86 0 212 5 86 0 214 5 86 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 157 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 157 2 48 13 157 2 50 13 157 2 51 13 157 2 52 13 157 2 53 13 157 2 54 13 157 2 55 13 157 2 56 13 157 2 57 13 157 2 64 13 157 2 65 13 157 2 66 4 21 2 67 13 157 2 68 13 157 2 69 13 157 2 77 13 157 2 78 13 157 2 86 13 157 2 91 13 157 2 92 13 157 2 93 13 157 2 94 13 157 2 95 4 65 2 96 13 157 2 97 13 157 2 98 13 157 2 99 13 157 2 100 13 157 2 101 13 157 2 102 13 157 2 103 13 157 2 104 13 157 2 105 13 157 2 106 13 157 2 107 13 157 2 108 13 157 2 109 13 157 2 110 13 157 2 111 13 157 2 112 13 157 2 113 13 157 2 114 13 157 2 115 13 157 2 116 4 149 2 117 13 157 2 118 13 157 2 119 13 157 2 120 13 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 157 2 158 13 157 2 159] 
#[1 2 7 0 1 5 90 0 3 5 90 0 4 2 11 0 5 5 90 0 6 6 45 0 7 5 90 0 8 5 90 0 9 5 90 0 10 5 90 0 11 5 90 0 12 5 90 0 13 2 15 0 14 6 57 0 15 5 90 0 16 5 90 0 17 5 90 0 19 5 90 0 20 5 90 0 21 5 90 0 22 5 90 0 23 5 90 0 24 5 90 0 25 5 90 0 26 5 90 0 27 5 90 0 28 5 90 0 32 5 90 0 34 5 90 0 35 5 90 0 38 5 90 0 45 5 90 0 80 5 90 0 83 5 90 0 87 5 90 0 90 5 90 0 99 5 90 0 105 5 90 0 108 5 90 0 110 5 90 0 115 5 90 0 116 5 90 0 118 5 90 0 121 5 90 0 123 5 90 0 125 5 90 0 130 5 90 0 146 5 90 0 150 5 90 0 151 5 90 0 152 5 90 0 171 5 90 0 177 5 90 0 179 5 90 0 186 5 90 0 188 5 90 0 190 5 90 0 201 5 90 0 207 6 129 0 209 5 90 0 210 6 133 0 211 5 90 0 212 5 90 0 214 5 90 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 161 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 161 2 48 13 161 2 50 13 161 2 51 13 161 2 52 13 161 2 53 13 161 2 54 13 161 2 55 13 161 2 56 13 161 2 57 13 161 2 64 13 161 2 65 13 161 2 66 4 21 2 67 13 161 2 68 13 161 2 69 13 161 2 77 13 161 2 78 13 161 2 86 13 161 2 91 13 161 2 92 13 161 2 93 13 161 2 94 13 161 2 95 4 65 2 96 13 161 2 97 13 161 2 98 13 161 2 99 13 161 2 100 13 161 2 101 13 161 2 102 13 161 2 103 13 161 2 104 13 161 2 105 13 161 2 106 13 161 2 107 13 161 2 108 13 161 2 109 13 161 2 110 13 161 2 111 13 161 2 112 13 161 2 113 13 161 2 114 13 161 2 115 13 161 2 116 4 149 2 117 13 161 2 118 13 161 2 119 13 161 2 120 13 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 161 2 158 13 161 2 159] 
#[1 2 19 0 1 6 41 0 3 5 94 0 4 2 23 0 5 5 94 0 6 6 45 0 7 5 94 0 8 6 49 0 9 5 94 0 10 5 94 0 11 6 53 0 12 5 94 0 13 2 27 0 14 6 57 0 15 5 94 0 16 5 94 0 17 6 61 0 19 6 65 0 20 5 94 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 5 94 0 28 5 94 0 32 6 93 0 34 6 97 0 35 5 94 0 38 5 94 0 45 5 94 0 80 5 94 0 83 5 94 0 87 5 94 0 90 5 94 0 99 5 94 0 105 5 94 0 108 5 94 0 110 5 94 0 115 6 101 0 116 6 105 0 118 5 94 0 121 5 94 0 123 6 109 0 125 6 113 0 130 5 94 0 146 5 94 0 150 5 94 0 151 5 94 0 152 5 94 0 171 5 94 0 177 5 94 0 179 5 94 0 186 5 94 0 188 5 94 0 190 5 94 0 201 5 94 0 207 6 129 0 209 5 94 0 210 6 133 0 211 5 94 0 212 5 94 0 214 5 94 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 165 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 165 2 48 13 165 2 50 13 165 2 51 13 165 2 52 13 165 2 53 13 165 2 54 13 165 2 55 13 165 2 56 13 165 2 57 13 165 2 64 13 165 2 65 13 165 2 66 4 21 2 67 13 165 2 68 13 165 2 69 13 165 2 77 13 165 2 78 13 165 2 86 13 165 2 91 13 165 2 92 13 165 2 93 13 165 2 94 13 165 2 95 4 65 2 96 13 165 2 97 13 165 2 98 13 165 2 99 13 165 2 100 13 165 2 101 13 165 2 102 13 165 2 103 13 165 2 104 13 165 2 105 13 165 2 106 13 165 2 107 13 165 2 108 13 165 2 109 13 165 2 110 13 165 2 111 13 165 2 112 13 165 2 113 13 165 2 114 13 165 2 115 13 165 2 116 4 149 2 117 13 165 2 118 13 165 2 119 13 165 2 120 13 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 165 2 158 13 165 2 159] 
#[1 2 31 0 1 6 41 0 3 5 98 0 4 2 35 0 5 5 98 0 6 6 45 0 7 5 98 0 8 6 49 0 9 5 98 0 10 5 98 0 11 6 53 0 12 5 98 0 13 2 39 0 14 6 57 0 15 5 98 0 16 5 98 0 17 6 61 0 19 6 65 0 20 5 98 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 5 98 0 28 5 98 0 32 6 93 0 34 6 97 0 35 5 98 0 38 5 98 0 45 5 98 0 80 5 98 0 83 5 98 0 87 5 98 0 90 5 98 0 99 5 98 0 105 5 98 0 108 5 98 0 110 5 98 0 115 6 101 0 116 6 105 0 118 5 98 0 121 5 98 0 123 6 109 0 125 6 113 0 130 5 98 0 146 5 98 0 150 5 98 0 151 5 98 0 152 5 98 0 171 5 98 0 177 5 98 0 179 5 98 0 186 5 98 0 188 5 98 0 190 5 98 0 201 5 98 0 207 6 129 0 209 5 98 0 210 6 133 0 211 5 98 0 212 5 98 0 214 5 98 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 169 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 169 2 48 13 169 2 50 13 169 2 51 13 169 2 52 13 169 2 53 13 169 2 54 13 169 2 55 13 169 2 56 13 169 2 57 13 169 2 64 13 169 2 65 13 169 2 66 4 21 2 67 13 169 2 68 13 169 2 69 13 169 2 77 13 169 2 78 13 169 2 86 13 169 2 91 13 169 2 92 13 169 2 93 13 169 2 94 13 169 2 95 4 65 2 96 13 169 2 97 13 169 2 98 13 169 2 99 13 169 2 100 13 169 2 101 13 169 2 102 13 169 2 103 13 169 2 104 13 169 2 105 13 169 2 106 13 169 2 107 13 169 2 108 13 169 2 109 13 169 2 110 13 169 2 111 13 169 2 112 13 169 2 113 13 169 2 114 13 169 2 115 13 169 2 116 4 149 2 117 13 169 2 118 13 169 2 119 13 169 2 120 13 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 169 2 158 13 169 2 159] 
#[1 2 43 0 1 6 41 0 3 5 102 0 4 2 47 0 5 5 102 0 6 6 45 0 7 5 102 0 8 6 49 0 9 5 102 0 10 5 102 0 11 6 53 0 12 5 102 0 13 2 51 0 14 6 57 0 15 5 102 0 16 5 102 0 17 6 61 0 19 6 65 0 20 5 102 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 5 102 0 28 5 102 0 32 6 93 0 34 6 97 0 35 5 102 0 38 5 102 0 45 5 102 0 80 5 102 0 83 5 102 0 87 5 102 0 90 5 102 0 99 5 102 0 105 5 102 0 108 5 102 0 110 5 102 0 115 6 101 0 116 6 105 0 118 5 102 0 121 5 102 0 123 6 109 0 125 6 113 0 130 5 102 0 146 6 117 0 150 6 121 0 151 5 102 0 152 5 102 0 171 5 102 0 177 5 102 0 179 5 102 0 186 5 102 0 188 5 102 0 190 5 102 0 201 5 102 0 207 6 129 0 209 5 102 0 210 6 133 0 211 5 102 0 212 5 102 0 214 5 102 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 173 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 173 2 48 13 173 2 50 13 173 2 51 13 173 2 52 13 173 2 53 13 173 2 54 13 173 2 55 13 173 2 56 13 173 2 57 13 173 2 64 13 173 2 65 13 173 2 66 4 21 2 67 13 173 2 68 13 173 2 69 13 173 2 77 13 173 2 78 13 173 2 86 13 173 2 91 13 173 2 92 13 173 2 93 13 173 2 94 13 173 2 95 4 65 2 96 13 173 2 97 13 173 2 98 13 173 2 99 13 173 2 100 13 173 2 101 13 173 2 102 13 173 2 103 13 173 2 104 13 173 2 105 13 173 2 106 13 173 2 107 13 173 2 108 13 173 2 109 13 173 2 110 13 173 2 111 13 173 2 112 13 173 2 113 13 173 2 114 13 173 2 115 13 173 2 116 4 149 2 117 13 173 2 118 13 173 2 119 13 173 2 120 13 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 173 2 158 13 173 2 159] 
#[1 2 55 0 1 5 106 0 3 5 106 0 4 2 59 0 5 5 106 0 6 6 45 0 7 5 106 0 8 5 106 0 9 5 106 0 10 5 106 0 11 5 106 0 12 5 106 0 13 2 63 0 14 6 57 0 15 5 106 0 16 5 106 0 17 5 106 0 19 5 106 0 20 5 106 0 21 5 106 0 22 5 106 0 23 5 106 0 24 5 106 0 25 5 106 0 26 5 106 0 27 5 106 0 28 5 106 0 32 5 106 0 34 5 106 0 35 5 106 0 38 5 106 0 45 5 106 0 80 5 106 0 83 5 106 0 87 5 106 0 90 5 106 0 99 5 106 0 105 5 106 0 108 5 106 0 110 5 106 0 115 5 106 0 116 5 106 0 118 5 106 0 121 5 106 0 123 5 106 0 125 5 106 0 130 5 106 0 146 5 106 0 150 5 106 0 151 5 106 0 152 5 106 0 171 5 106 0 177 5 106 0 179 5 106 0 186 5 106 0 188 5 106 0 190 5 106 0 201 5 106 0 207 5 106 0 209 5 106 0 210 6 133 0 211 5 106 0 212 5 106 0 214 5 106 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 177 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 177 2 48 13 177 2 50 13 177 2 51 13 177 2 52 13 177 2 53 13 177 2 54 13 177 2 55 13 177 2 56 13 177 2 57 13 177 2 64 13 177 2 65 13 177 2 66 4 21 2 67 13 177 2 68 13 177 2 69 13 177 2 77 13 177 2 78 13 177 2 86 13 177 2 91 13 177 2 92 13 177 2 93 13 177 2 94 13 177 2 95 4 65 2 96 13 177 2 97 13 177 2 98 13 177 2 99 13 177 2 100 13 177 2 101 13 177 2 102 13 177 2 103 13 177 2 104 13 177 2 105 13 177 2 106 13 177 2 107 13 177 2 108 13 177 2 109 13 177 2 110 13 177 2 111 13 177 2 112 13 177 2 113 13 177 2 114 13 177 2 115 13 177 2 116 4 149 2 117 13 177 2 118 13 177 2 119 13 177 2 120 13 177 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 177 2 158 13 177 2 159] 
#[1 2 67 0 1 5 110 0 3 5 110 0 4 2 71 0 5 5 110 0 6 5 110 0 7 5 110 0 8 5 110 0 9 5 110 0 10 5 110 0 11 5 110 0 12 5 110 0 13 2 75 0 14 5 110 0 15 5 110 0 16 5 110 0 17 5 110 0 19 5 110 0 20 5 110 0 21 5 110 0 22 5 110 0 23 5 110 0 24 5 110 0 25 5 110 0 26 5 110 0 27 5 110 0 28 5 110 0 32 5 110 0 34 5 110 0 35 5 110 0 38 5 110 0 45 5 110 0 80 5 110 0 83 5 110 0 87 5 110 0 90 5 110 0 99 5 110 0 105 5 110 0 108 5 110 0 110 5 110 0 115 5 110 0 116 5 110 0 118 5 110 0 121 5 110 0 123 5 110 0 125 5 110 0 130 5 110 0 146 5 110 0 150 5 110 0 151 5 110 0 152 5 110 0 171 5 110 0 177 5 110 0 179 5 110 0 186 5 110 0 188 5 110 0 190 5 110 0 201 5 110 0 207 5 110 0 209 5 110 0 210 6 133 0 211 5 110 0 212 5 110 0 214 5 110 0 215 6 137 0 236] 
#[1 5 221 0 18 13 181 0 241] 
#[0 5 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 4 66 0 6 6 45 0 7 6 49 0 9 4 66 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 4 66 0 215 6 137 0 236 13 185 2 73] 
#[1 13 189 0 6 3 137 0 215 13 189 0 237] 
#[1 5 118 0 6 2 229 0 11 5 118 0 215 13 193 0 234] 
#[1 5 122 0 6 2 79 0 11 5 122 0 215 13 197 0 234 13 201 2 72] 
#[0 5 126 0 6 0 215] 
#[1 5 130 0 1 5 130 0 3 5 130 0 4 2 83 0 5 5 130 0 6 5 130 0 7 5 130 0 8 5 130 0 9 5 130 0 10 5 130 0 11 5 130 0 12 5 130 0 13 5 130 0 14 5 130 0 15 5 130 0 16 5 130 0 17 5 130 0 19 5 130 0 20 5 130 0 21 5 130 0 22 5 130 0 23 5 130 0 24 5 130 0 25 5 130 0 26 5 130 0 27 5 130 0 28 5 130 0 32 5 130 0 34 5 130 0 35 5 130 0 38 5 130 0 45 5 130 0 80 5 130 0 83 5 130 0 87 5 130 0 90 5 130 0 99 5 130 0 105 5 130 0 108 5 130 0 110 5 130 0 115 5 130 0 116 5 130 0 118 5 130 0 121 5 130 0 123 5 130 0 125 5 130 0 130 5 130 0 146 5 130 0 150 5 130 0 151 5 130 0 152 5 130 0 171 5 130 0 177 5 130 0 179 5 130 0 186 5 130 0 188 5 130 0 190 5 130 0 201 5 130 0 207 5 130 0 209 5 130 0 210 5 130 0 211 5 130 0 212 5 130 0 214 5 130 0 215 13 205 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 13 209 0 6 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 6 137 0 236 13 209 0 237] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 13 213 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 213 1 93] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 13 217 1 218 13 221 1 220] 
#[1 2 245 0 1 2 33 0 5 13 225 0 6 2 253 0 9 3 1 0 12 2 25 0 14 0 73 0 19 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 4 118 0 46 4 118 0 47 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 4 118 0 149 4 118 0 157 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 2 87 0 229 3 177 0 235 3 181 0 236 13 225 0 237 3 189 0 238 5 237 0 242 11 45 0 254 0 89 0 255 0 93 1 0 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 229 1 137 11 53 1 140 11 57 1 141 5 237 2 48 5 237 2 50 5 237 2 51 5 237 2 52 5 237 2 53 5 237 2 54 5 237 2 55 5 237 2 56 5 237 2 57 5 237 2 64 5 237 2 65 5 237 2 66 4 21 2 67 5 237 2 68 5 237 2 69 5 237 2 77 5 237 2 78 5 237 2 86 5 237 2 91 5 237 2 92 5 237 2 93 5 237 2 94 5 237 2 95 4 65 2 96 5 237 2 97 5 237 2 98 5 237 2 99 5 237 2 100 5 237 2 101 5 237 2 102 5 237 2 103 5 237 2 104 5 237 2 105 5 237 2 106 5 237 2 107 5 237 2 108 5 237 2 109 5 237 2 110 5 237 2 111 5 237 2 112 5 237 2 113 5 237 2 114 5 237 2 115 5 237 2 116 4 149 2 117 5 237 2 118 5 237 2 119 5 237 2 120 5 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 237 2 158 5 237 2 159] 
#[1 2 91 0 1 6 41 0 3 5 138 0 4 2 95 0 5 5 138 0 6 6 45 0 7 5 138 0 8 6 49 0 9 5 138 0 10 5 138 0 11 6 53 0 12 5 138 0 13 2 99 0 14 6 57 0 15 5 138 0 16 5 138 0 17 6 61 0 19 6 65 0 20 5 138 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 5 138 0 28 5 138 0 32 6 93 0 34 6 97 0 35 5 138 0 38 5 138 0 45 5 138 0 80 5 138 0 83 5 138 0 87 5 138 0 90 5 138 0 99 5 138 0 105 5 138 0 108 5 138 0 110 5 138 0 115 6 101 0 116 6 105 0 118 5 138 0 121 5 138 0 123 6 109 0 125 6 113 0 130 5 138 0 146 6 117 0 150 6 121 0 151 5 138 0 152 5 138 0 171 5 138 0 177 5 138 0 179 5 138 0 186 5 138 0 188 5 138 0 190 5 138 0 201 6 125 0 207 6 129 0 209 5 138 0 210 6 133 0 211 5 138 0 212 5 138 0 214 5 138 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 233 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 233 2 48 13 233 2 50 13 233 2 51 13 233 2 52 13 233 2 53 13 233 2 54 13 233 2 55 13 233 2 56 13 233 2 57 13 233 2 64 13 233 2 65 13 233 2 66 4 21 2 67 13 233 2 68 13 233 2 69 13 233 2 77 13 233 2 78 13 233 2 86 13 233 2 91 13 233 2 92 13 233 2 93 13 233 2 94 13 233 2 95 4 65 2 96 13 233 2 97 13 233 2 98 13 233 2 99 13 233 2 100 13 233 2 101 13 233 2 102 13 233 2 103 13 233 2 104 13 233 2 105 13 233 2 106 13 233 2 107 13 233 2 108 13 233 2 109 13 233 2 110 13 233 2 111 13 233 2 112 13 233 2 113 13 233 2 114 13 233 2 115 13 233 2 116 4 149 2 117 13 233 2 118 13 233 2 119 13 233 2 120 13 233 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 233 2 158 13 233 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 237 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 237 2 48 13 237 2 50 13 237 2 51 13 237 2 52 13 237 2 53 13 237 2 54 13 237 2 55 13 237 2 56 13 237 2 57 13 237 2 64 13 237 2 65 13 237 2 66 4 21 2 67 13 237 2 68 13 237 2 69 13 237 2 77 13 237 2 78 13 237 2 86 13 237 2 91 13 237 2 92 13 237 2 93 13 237 2 94 13 237 2 95 4 65 2 96 13 237 2 97 13 237 2 98 13 237 2 99 13 237 2 100 13 237 2 101 13 237 2 102 13 237 2 103 13 237 2 104 13 237 2 105 13 237 2 106 13 237 2 107 13 237 2 108 13 237 2 109 13 237 2 110 13 237 2 111 13 237 2 112 13 237 2 113 13 237 2 114 13 237 2 115 13 237 2 116 4 149 2 117 13 237 2 118 13 237 2 119 13 237 2 120 13 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 237 2 158 13 237 2 159] 
#[0 5 142 0 229] 
#[0 13 253 0 84 0 97 0 202 2 31] 
#[0 5 146 0 229] 
#[1 14 13 0 198 14 13 0 202 14 9 0 215 14 13 2 6] 
#[0 5 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 17 2 42 14 21 2 48 14 21 2 50 14 21 2 51 14 21 2 52 14 21 2 53 14 21 2 54 14 21 2 55 14 21 2 56 14 21 2 57 14 21 2 64 14 21 2 65 14 21 2 66 4 21 2 67 14 21 2 68 14 21 2 69 14 21 2 77 14 21 2 78 14 21 2 86 14 21 2 91 14 21 2 92 14 21 2 93 14 21 2 94 14 21 2 95 4 65 2 96 14 21 2 97 14 21 2 98 14 21 2 99 14 21 2 100 14 21 2 101 14 21 2 102 14 21 2 103 14 21 2 104 14 21 2 105 14 21 2 106 14 21 2 107 14 21 2 108 14 21 2 109 14 21 2 110 14 21 2 111 14 21 2 112 14 21 2 113 14 21 2 114 14 21 2 115 14 21 2 116 4 149 2 117 14 21 2 118 14 21 2 119 14 21 2 120 14 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 21 2 158 14 21 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 25 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 25 2 48 14 25 2 50 14 25 2 51 14 25 2 52 14 25 2 53 14 25 2 54 14 25 2 55 14 25 2 56 14 25 2 57 14 25 2 64 14 25 2 65 14 25 2 66 4 21 2 67 14 25 2 68 14 25 2 69 14 25 2 77 14 25 2 78 14 25 2 86 14 25 2 91 14 25 2 92 14 25 2 93 14 25 2 94 14 25 2 95 4 65 2 96 14 25 2 97 14 25 2 98 14 25 2 99 14 25 2 100 14 25 2 101 14 25 2 102 14 25 2 103 14 25 2 104 14 25 2 105 14 25 2 106 14 25 2 107 14 25 2 108 14 25 2 109 14 25 2 110 14 25 2 111 14 25 2 112 14 25 2 113 14 25 2 114 14 25 2 115 14 25 2 116 4 149 2 117 14 25 2 118 14 25 2 119 14 25 2 120 14 25 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 25 2 158 14 25 2 159] 
#[0 14 61 0 84 0 97 0 100 0 161 0 171 0 184 0 191 0 202 2 29] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 14 65 0 86 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 14 69 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 77 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 73 2 8 14 77 2 48 14 77 2 50 14 77 2 51 14 77 2 52 14 77 2 53 14 77 2 54 14 77 2 55 14 77 2 56 14 77 2 57 14 77 2 64 14 77 2 65 14 77 2 66 4 21 2 67 14 77 2 68 14 77 2 69 14 77 2 77 14 77 2 78 14 77 2 86 14 77 2 91 14 77 2 92 14 77 2 93 14 77 2 94 14 77 2 95 4 65 2 96 14 77 2 97 14 77 2 98 14 77 2 99 14 77 2 100 14 77 2 101 14 77 2 102 14 77 2 103 14 77 2 104 14 77 2 105 14 77 2 106 14 77 2 107 14 77 2 108 14 77 2 109 14 77 2 110 14 77 2 111 14 77 2 112 14 77 2 113 14 77 2 114 14 77 2 115 14 77 2 116 4 149 2 117 14 77 2 118 14 77 2 119 14 77 2 120 14 77 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 77 2 158 14 77 2 159] 
#[0 14 85 0 221 0 229 1 222] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 14 89 0 236 3 189 0 238 14 93 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 93 2 48 14 93 2 50 14 93 2 51 14 93 2 52 14 93 2 53 14 93 2 54 14 93 2 55 14 93 2 56 14 93 2 57 14 93 2 64 14 93 2 65 14 93 2 66 4 21 2 67 14 93 2 68 14 93 2 69 14 93 2 77 14 93 2 78 14 93 2 86 14 93 2 91 14 93 2 92 14 93 2 93 14 93 2 94 14 93 2 95 4 65 2 96 14 93 2 97 14 93 2 98 14 93 2 99 14 93 2 100 14 93 2 101 14 93 2 102 14 93 2 103 14 93 2 104 14 93 2 105 14 93 2 106 14 93 2 107 14 93 2 108 14 93 2 109 14 93 2 110 14 93 2 111 14 93 2 112 14 93 2 113 14 93 2 114 14 93 2 115 14 93 2 116 4 149 2 117 14 93 2 118 14 93 2 119 14 93 2 120 14 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 93 2 158 14 93 2 159] 
#[1 14 97 0 2 2 33 0 5 14 101 0 236] 
#[0 14 105 0 92] 
#[0 14 109 0 228] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 14 113 0 159 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 125 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 117 2 37 14 121 2 40 14 125 2 48 14 125 2 50 14 125 2 51 14 125 2 52 14 125 2 53 14 125 2 54 14 125 2 55 14 125 2 56 14 125 2 57 14 125 2 64 14 125 2 65 14 125 2 66 4 21 2 67 14 125 2 68 14 125 2 69 14 125 2 77 14 125 2 78 14 125 2 86 14 125 2 91 14 125 2 92 14 125 2 93 14 125 2 94 14 125 2 95 4 65 2 96 14 125 2 97 14 125 2 98 14 125 2 99 14 125 2 100 14 125 2 101 14 125 2 102 14 125 2 103 14 125 2 104 14 125 2 105 14 125 2 106 14 125 2 107 14 125 2 108 14 125 2 109 14 125 2 110 14 125 2 111 14 125 2 112 14 125 2 113 14 125 2 114 14 125 2 115 14 125 2 116 4 149 2 117 14 125 2 118 14 125 2 119 14 125 2 120 14 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 125 2 158 14 125 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 129 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 129 2 48 14 129 2 50 14 129 2 51 14 129 2 52 14 129 2 53 14 129 2 54 14 129 2 55 14 129 2 56 14 129 2 57 14 129 2 64 14 129 2 65 14 129 2 66 4 21 2 67 14 129 2 68 14 129 2 69 14 129 2 77 14 129 2 78 14 129 2 86 14 129 2 91 14 129 2 92 14 129 2 93 14 129 2 94 14 129 2 95 4 65 2 96 14 129 2 97 14 129 2 98 14 129 2 99 14 129 2 100 14 129 2 101 14 129 2 102 14 129 2 103 14 129 2 104 14 129 2 105 14 129 2 106 14 129 2 107 14 129 2 108 14 129 2 109 14 129 2 110 14 129 2 111 14 129 2 112 14 129 2 113 14 129 2 114 14 129 2 115 14 129 2 116 4 149 2 117 14 129 2 118 14 129 2 119 14 129 2 120 14 129 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 129 2 158 14 129 2 159] 
#[1 5 154 0 1 5 154 0 3 5 154 0 4 5 154 0 5 5 154 0 6 5 154 0 7 5 154 0 8 5 154 0 9 5 154 0 10 5 154 0 11 5 154 0 12 5 154 0 13 5 154 0 14 5 154 0 15 5 154 0 16 5 154 0 17 5 154 0 19 5 154 0 20 5 154 0 21 5 154 0 22 5 154 0 23 5 154 0 24 5 154 0 25 5 154 0 26 5 154 0 27 5 154 0 28 5 154 0 32 5 154 0 34 5 154 0 35 5 154 0 38 5 154 0 45 5 154 0 80 5 154 0 83 5 154 0 87 5 154 0 90 5 154 0 99 5 154 0 105 5 154 0 108 5 154 0 110 5 154 0 115 5 154 0 116 5 154 0 118 5 154 0 121 5 154 0 123 5 154 0 125 5 154 0 130 14 141 0 139 5 154 0 146 5 154 0 150 5 154 0 151 5 154 0 152 5 154 0 171 5 154 0 177 5 154 0 179 5 154 0 186 5 154 0 188 5 154 0 190 5 154 0 201 5 154 0 207 5 154 0 209 5 154 0 210 5 154 0 211 5 154 0 212 5 154 0 214 5 154 0 215 14 141 0 221 14 141 0 229 14 141 1 222 14 141 2 25] 
#[1 2 103 0 1 5 158 0 3 5 158 0 4 2 107 0 5 5 158 0 6 5 158 0 7 5 158 0 8 2 253 0 9 5 158 0 10 5 158 0 11 3 1 0 12 5 158 0 13 2 111 0 14 5 158 0 15 5 158 0 16 5 158 0 17 5 158 0 19 5 158 0 20 5 158 0 21 5 158 0 22 5 158 0 23 5 158 0 24 5 158 0 25 5 158 0 26 5 158 0 27 5 158 0 28 3 5 0 31 2 115 0 32 5 158 0 34 5 158 0 35 5 158 0 38 1 190 0 40 3 13 0 42 1 65 0 44 5 158 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 5 158 0 80 3 85 0 82 5 158 0 83 1 65 0 85 5 158 0 87 5 158 0 90 2 119 0 99 1 190 0 100 3 93 0 102 3 97 0 103 5 158 0 105 3 101 0 107 5 158 0 108 5 158 0 110 1 65 0 113 5 158 0 115 5 158 0 116 5 158 0 118 1 190 0 120 5 158 0 121 5 158 0 123 5 158 0 125 1 65 0 126 3 105 0 128 5 158 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 5 158 0 146 5 158 0 150 5 158 0 151 5 158 0 152 1 65 0 170 5 158 0 171 1 65 0 175 1 65 0 176 5 158 0 177 5 158 0 179 1 65 0 182 1 190 0 184 5 158 0 186 5 158 0 188 5 158 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 5 158 0 201 5 158 0 207 5 158 0 209 5 158 0 210 5 158 0 211 5 158 0 212 3 133 0 213 5 158 0 214 5 158 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 145 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 145 2 48 14 145 2 50 14 145 2 51 14 145 2 52 14 145 2 53 14 145 2 54 14 145 2 55 14 145 2 56 14 145 2 57 14 145 2 64 14 145 2 65 14 145 2 66 4 21 2 67 14 145 2 68 14 145 2 69 14 145 2 77 14 145 2 78 14 145 2 86 14 145 2 91 14 145 2 92 14 145 2 93 14 145 2 94 14 145 2 95 4 65 2 96 14 145 2 97 14 145 2 98 14 145 2 99 14 145 2 100 14 145 2 101 14 145 2 102 14 145 2 103 14 145 2 104 14 145 2 105 14 145 2 106 14 145 2 107 14 145 2 108 14 145 2 109 14 145 2 110 14 145 2 111 14 145 2 112 14 145 2 113 14 145 2 114 14 145 2 115 14 145 2 116 4 149 2 117 14 145 2 118 14 145 2 119 14 145 2 120 14 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 145 2 158 14 145 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 14 149 0 67 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 153 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 153 2 48 14 153 2 50 14 153 2 51 14 153 2 52 14 153 2 53 14 153 2 54 14 153 2 55 14 153 2 56 14 153 2 57 14 153 2 64 14 153 2 65 14 153 2 66 4 21 2 67 14 153 2 68 14 153 2 69 14 153 2 77 14 153 2 78 14 153 2 86 14 153 2 91 14 153 2 92 14 153 2 93 14 153 2 94 14 153 2 95 4 65 2 96 14 153 2 97 14 153 2 98 14 153 2 99 14 153 2 100 14 153 2 101 14 153 2 102 14 153 2 103 14 153 2 104 14 153 2 105 14 153 2 106 14 153 2 107 14 153 2 108 14 153 2 109 14 153 2 110 14 153 2 111 14 153 2 112 14 153 2 113 14 153 2 114 14 153 2 115 14 153 2 116 4 149 2 117 14 153 2 118 14 153 2 119 14 153 2 120 14 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 153 2 158 14 153 2 159] 
#[0 5 162 0 229] 
#[0 5 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 157 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 157 2 48 14 157 2 50 14 157 2 51 14 157 2 52 14 157 2 53 14 157 2 54 14 157 2 55 14 157 2 56 14 157 2 57 14 157 2 64 14 157 2 65 14 157 2 66 4 21 2 67 14 157 2 68 14 157 2 69 14 157 2 77 14 157 2 78 14 157 2 86 14 157 2 91 14 157 2 92 14 157 2 93 14 157 2 94 14 157 2 95 4 65 2 96 14 157 2 97 14 157 2 98 14 157 2 99 14 157 2 100 14 157 2 101 14 157 2 102 14 157 2 103 14 157 2 104 14 157 2 105 14 157 2 106 14 157 2 107 14 157 2 108 14 157 2 109 14 157 2 110 14 157 2 111 14 157 2 112 14 157 2 113 14 157 2 114 14 157 2 115 14 157 2 116 4 149 2 117 14 157 2 118 14 157 2 119 14 157 2 120 14 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 157 2 158 14 157 2 159] 
#[1 2 123 0 1 5 170 0 3 5 170 0 4 2 127 0 5 5 170 0 6 5 170 0 7 5 170 0 8 2 253 0 9 5 170 0 10 5 170 0 11 3 1 0 12 5 170 0 13 2 131 0 14 5 170 0 15 5 170 0 16 5 170 0 17 5 170 0 19 5 170 0 20 5 170 0 21 5 170 0 22 5 170 0 23 5 170 0 24 5 170 0 25 5 170 0 26 5 170 0 27 5 170 0 28 3 5 0 31 2 135 0 32 5 170 0 34 5 170 0 35 5 170 0 38 1 190 0 40 3 13 0 42 1 65 0 44 5 170 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 5 170 0 80 3 85 0 82 5 170 0 83 1 65 0 85 5 170 0 87 5 170 0 90 2 139 0 99 1 190 0 100 3 93 0 102 3 97 0 103 5 170 0 105 3 101 0 107 5 170 0 108 5 170 0 110 1 65 0 113 5 170 0 115 5 170 0 116 5 170 0 118 1 190 0 120 5 170 0 121 5 170 0 123 5 170 0 125 1 65 0 126 3 105 0 128 5 170 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 5 170 0 146 5 170 0 150 5 170 0 151 5 170 0 152 1 65 0 170 5 170 0 171 1 65 0 175 1 65 0 176 5 170 0 177 5 170 0 179 1 65 0 182 1 190 0 184 5 170 0 186 5 170 0 188 5 170 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 5 170 0 201 5 170 0 207 5 170 0 209 5 170 0 210 5 170 0 211 5 170 0 212 3 133 0 213 5 170 0 214 5 170 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 161 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 161 2 48 14 161 2 50 14 161 2 51 14 161 2 52 14 161 2 53 14 161 2 54 14 161 2 55 14 161 2 56 14 161 2 57 14 161 2 64 14 161 2 65 14 161 2 66 4 21 2 67 14 161 2 68 14 161 2 69 14 161 2 77 14 161 2 78 14 161 2 86 14 161 2 91 14 161 2 92 14 161 2 93 14 161 2 94 14 161 2 95 4 65 2 96 14 161 2 97 14 161 2 98 14 161 2 99 14 161 2 100 14 161 2 101 14 161 2 102 14 161 2 103 14 161 2 104 14 161 2 105 14 161 2 106 14 161 2 107 14 161 2 108 14 161 2 109 14 161 2 110 14 161 2 111 14 161 2 112 14 161 2 113 14 161 2 114 14 161 2 115 14 161 2 116 4 149 2 117 14 161 2 118 14 161 2 119 14 161 2 120 14 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 161 2 158 14 161 2 159] 
#[0 14 165 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 14 169 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 193 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 173 1 176 14 177 1 179 14 181 1 180 14 185 1 183 14 189 2 46 14 193 2 48 14 193 2 50 14 193 2 51 14 193 2 52 14 193 2 53 14 193 2 54 14 193 2 55 14 193 2 56 14 193 2 57 14 193 2 64 14 193 2 65 14 193 2 66 4 21 2 67 14 193 2 68 14 193 2 69 14 193 2 77 14 193 2 78 14 193 2 86 14 193 2 91 14 193 2 92 14 193 2 93 14 193 2 94 14 193 2 95 4 65 2 96 14 193 2 97 14 193 2 98 14 193 2 99 14 193 2 100 14 193 2 101 14 193 2 102 14 193 2 103 14 193 2 104 14 193 2 105 14 193 2 106 14 193 2 107 14 193 2 108 14 193 2 109 14 193 2 110 14 193 2 111 14 193 2 112 14 193 2 113 14 193 2 114 14 193 2 115 14 193 2 116 4 149 2 117 14 193 2 118 14 193 2 119 14 193 2 120 14 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 193 2 158 14 193 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 197 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 197 2 48 14 197 2 50 14 197 2 51 14 197 2 52 14 197 2 53 14 197 2 54 14 197 2 55 14 197 2 56 14 197 2 57 14 197 2 64 14 197 2 65 14 197 2 66 4 21 2 67 14 197 2 68 14 197 2 69 14 197 2 77 14 197 2 78 14 197 2 86 14 197 2 91 14 197 2 92 14 197 2 93 14 197 2 94 14 197 2 95 4 65 2 96 14 197 2 97 14 197 2 98 14 197 2 99 14 197 2 100 14 197 2 101 14 197 2 102 14 197 2 103 14 197 2 104 14 197 2 105 14 197 2 106 14 197 2 107 14 197 2 108 14 197 2 109 14 197 2 110 14 197 2 111 14 197 2 112 14 197 2 113 14 197 2 114 14 197 2 115 14 197 2 116 4 149 2 117 14 197 2 118 14 197 2 119 14 197 2 120 14 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 197 2 158 14 197 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 201 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 201 2 48 14 201 2 50 14 201 2 51 14 201 2 52 14 201 2 53 14 201 2 54 14 201 2 55 14 201 2 56 14 201 2 57 14 201 2 64 14 201 2 65 14 201 2 66 4 21 2 67 14 201 2 68 14 201 2 69 14 201 2 77 14 201 2 78 14 201 2 86 14 201 2 91 14 201 2 92 14 201 2 93 14 201 2 94 14 201 2 95 4 65 2 96 14 201 2 97 14 201 2 98 14 201 2 99 14 201 2 100 14 201 2 101 14 201 2 102 14 201 2 103 14 201 2 104 14 201 2 105 14 201 2 106 14 201 2 107 14 201 2 108 14 201 2 109 14 201 2 110 14 201 2 111 14 201 2 112 14 201 2 113 14 201 2 114 14 201 2 115 14 201 2 116 4 149 2 117 14 201 2 118 14 201 2 119 14 201 2 120 14 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 201 2 158 14 201 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 205 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 205 2 48 14 205 2 50 14 205 2 51 14 205 2 52 14 205 2 53 14 205 2 54 14 205 2 55 14 205 2 56 14 205 2 57 14 205 2 64 14 205 2 65 14 205 2 66 4 21 2 67 14 205 2 68 14 205 2 69 14 205 2 77 14 205 2 78 14 205 2 86 14 205 2 91 14 205 2 92 14 205 2 93 14 205 2 94 14 205 2 95 4 65 2 96 14 205 2 97 14 205 2 98 14 205 2 99 14 205 2 100 14 205 2 101 14 205 2 102 14 205 2 103 14 205 2 104 14 205 2 105 14 205 2 106 14 205 2 107 14 205 2 108 14 205 2 109 14 205 2 110 14 205 2 111 14 205 2 112 14 205 2 113 14 205 2 114 14 205 2 115 14 205 2 116 4 149 2 117 14 205 2 118 14 205 2 119 14 205 2 120 14 205 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 205 2 158 14 205 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 14 209 1 218 13 221 1 220] 
#[0 5 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 142 0 1 2 142 0 3 2 142 0 4 2 143 0 5 2 142 0 6 2 142 0 7 2 142 0 8 2 142 0 9 2 142 0 10 2 142 0 11 2 142 0 12 2 142 0 13 0 59 0 14 2 142 0 15 2 142 0 16 2 147 0 17 2 142 0 19 2 142 0 20 2 142 0 21 2 142 0 22 2 142 0 23 2 142 0 24 2 142 0 25 2 142 0 26 2 142 0 27 2 142 0 28 0 238 0 29 2 142 0 32 2 142 0 34 2 142 0 35 2 142 0 38 2 142 0 45 2 142 0 80 2 142 0 83 2 142 0 87 2 142 0 90 2 142 0 99 2 142 0 105 2 142 0 108 2 142 0 110 2 142 0 115 2 142 0 116 2 142 0 118 2 142 0 121 2 142 0 123 2 142 0 125 2 142 0 130 2 142 0 146 2 142 0 150 2 142 0 151 2 142 0 152 2 142 0 171 2 142 0 177 2 142 0 179 2 142 0 186 2 142 0 188 2 142 0 190 2 142 0 201 2 142 0 207 2 142 0 209 2 142 0 210 2 142 0 211 2 142 0 212 2 142 0 214 2 142 0 215 5 229 0 236 2 41 1 48 2 45 1 49] 
#[1 2 245 0 1 2 33 0 5 14 213 0 6 2 253 0 9 3 1 0 12 2 25 0 14 0 73 0 19 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 4 118 0 46 4 118 0 47 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 4 118 0 149 4 118 0 157 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 2 87 0 229 3 177 0 235 3 181 0 236 14 213 0 237 3 189 0 238 5 237 0 242 11 45 0 254 0 89 0 255 0 93 1 0 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 14 217 1 137 11 53 1 140 11 57 1 141 5 237 2 48 5 237 2 50 5 237 2 51 5 237 2 52 5 237 2 53 5 237 2 54 5 237 2 55 5 237 2 56 5 237 2 57 5 237 2 64 5 237 2 65 5 237 2 66 4 21 2 67 5 237 2 68 5 237 2 69 5 237 2 77 5 237 2 78 5 237 2 86 5 237 2 91 5 237 2 92 5 237 2 93 5 237 2 94 5 237 2 95 4 65 2 96 5 237 2 97 5 237 2 98 5 237 2 99 5 237 2 100 5 237 2 101 5 237 2 102 5 237 2 103 5 237 2 104 5 237 2 105 5 237 2 106 5 237 2 107 5 237 2 108 5 237 2 109 5 237 2 110 5 237 2 111 5 237 2 112 5 237 2 113 5 237 2 114 5 237 2 115 5 237 2 116 4 149 2 117 5 237 2 118 5 237 2 119 5 237 2 120 5 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 237 2 158 5 237 2 159] 
#[0 5 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 221 0 17] 
#[0 5 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 14 225 0 229 14 229 1 176 14 177 1 179 14 181 1 180 14 185 1 183] 
#[0 5 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 34 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 38 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 54 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 58 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 62 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 74 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 151 0 1 6 41 0 3 2 155 0 4 2 159 0 5 6 110 0 6 6 45 0 7 2 163 0 8 6 49 0 9 2 167 0 10 6 110 0 11 6 53 0 12 2 171 0 13 2 175 0 14 6 57 0 15 2 179 0 16 6 110 0 17 6 61 0 19 6 65 0 20 2 183 0 21 6 69 0 22 6 73 0 23 15 1 0 24 6 81 0 25 6 85 0 26 6 89 0 27 2 187 0 28 6 110 0 32 6 93 0 34 6 97 0 35 6 110 0 38 6 110 0 45 6 110 0 80 6 110 0 83 6 110 0 87 6 110 0 90 6 110 0 99 6 110 0 105 6 110 0 108 6 110 0 110 6 110 0 115 6 101 0 116 6 105 0 118 6 110 0 121 6 110 0 123 6 109 0 125 6 113 0 130 6 110 0 146 6 117 0 150 6 121 0 151 6 110 0 152 6 110 0 171 6 110 0 177 6 110 0 179 6 110 0 186 6 110 0 188 6 110 0 190 6 110 0 201 6 125 0 207 6 129 0 209 2 191 0 210 6 133 0 211 2 195 0 212 6 110 0 214 6 110 0 215 6 137 0 236 15 17 0 240 15 21 1 237] 
#[0 6 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 25 0 45 15 29 0 121 15 33 0 215 15 37 0 229 15 41 2 132 15 45 2 135] 
#[1 15 49 0 215 5 149 0 229 15 53 2 131] 
#[1 15 57 0 215 15 37 0 229 15 61 2 132 15 45 2 135] 
#[0 15 65 0 45] 
#[1 15 69 0 215 15 37 0 229 15 73 2 132 15 45 2 135] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 15 77 0 202 3 133 0 213 15 81 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 15 85 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 15 85 2 48 15 85 2 50 15 85 2 51 15 85 2 52 15 85 2 53 15 85 2 54 15 85 2 55 15 85 2 56 15 85 2 57 15 85 2 64 15 85 2 65 15 85 2 66 4 21 2 67 15 85 2 68 15 85 2 69 15 85 2 77 15 85 2 78 15 85 2 86 15 85 2 91 15 85 2 92 15 85 2 93 15 85 2 94 15 85 2 95 4 65 2 96 15 85 2 97 15 85 2 98 15 85 2 99 15 85 2 100 15 85 2 101 15 85 2 102 15 85 2 103 15 85 2 104 15 85 2 105 15 85 2 106 15 85 2 107 15 85 2 108 15 85 2 109 15 85 2 110 15 85 2 111 15 85 2 112 15 85 2 113 15 85 2 114 15 85 2 115 15 85 2 116 4 149 2 117 15 85 2 118 15 85 2 119 15 85 2 120 15 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 15 85 2 158 15 85 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 15 89 0 202 3 133 0 213 15 93 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 15 97 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 15 97 2 48 15 97 2 50 15 97 2 51 15 97 2 52 15 97 2 53 15 97 2 54 15 97 2 55 15 97 2 56 15 97 2 57 15 97 2 64 15 97 2 65 15 97 2 66 4 21 2 67 15 97 2 68 15 97 2 69 15 97 2 77 15 97 2 78 15 97 2 86 15 97 2 91 15 97 2 92 15 97 2 93 15 97 2 94 15 97 2 95 4 65 2 96 15 97 2 97 15 97 2 98 15 97 2 99 15 97 2 100 15 97 2 101 15 97 2 102 15 97 2 103 15 97 2 104 15 97 2 105 15 97 2 106 15 97 2 107 15 97 2 108 15 97 2 109 15 97 2 110 15 97 2 111 15 97 2 112 15 97 2 113 15 97 2 114 15 97 2 115 15 97 2 116 4 149 2 117 15 97 2 118 15 97 2 119 15 97 2 120 15 97 2 122 4 169 2 125 4 173 2 136 4 177 2 155 15 97 2 158 15 97 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 15 101 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 15 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 15 105 2 48 15 105 2 50 15 105 2 51 15 105 2 52 15 105 2 53 15 105 2 54 15 105 2 55 15 105 2 56 15 105 2 57 15 105 2 64 15 105 2 65 15 105 2 66 4 21 2 67 15 105 2 68 15 105 2 69 15 105 2 77 15 105 2 78 15 105 2 86 15 105 2 91 15 105 2 92 15 105 2 93 15 105 2 94 15 105 2 95 4 65 2 96 15 105 2 97 15 105 2 98 15 105 2 99 15 105 2 100 15 105 2 101 15 105 2 102 15 105 2 103 15 105 2 104 15 105 2 105 15 105 2 106 15 105 2 107 15 105 2 108 15 105 2 109 15 105 2 110 15 105 2 111 15 105 2 112 15 105 2 113 15 105 2 114 15 105 2 115 15 105 2 116 4 149 2 117 15 105 2 118 15 105 2 119 15 105 2 120 15 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 15 105 2 158 15 105 2 159] 
#[1 3 9 0 32 10 177 0 83 3 89 0 99 10 113 0 105 10 117 0 121 10 121 0 123 10 125 0 152 10 129 0 171 10 133 0 177 10 137 0 186 10 141 0 201 15 109 2 126 10 157 2 127 10 161 2 136 10 165 2 137 10 169 2 142 10 173 2 143 10 177 2 144 10 181 2 145 10 185 2 146 10 189 2 147 10 193 2 153 10 197 2 155 10 201 2 157] 
#[0 6 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 126 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 142 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 113 0 17 15 117 0 215] 
#[1 15 121 0 17 15 125 0 215] 
#[1 0 73 0 19 15 129 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 15 133 0 17 2 89 0 29 15 137 0 215] 
#[1 0 73 0 19 15 141 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 15 145 1 87 11 125 1 88] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 15 149 1 87 11 125 1 88] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 15 153 1 86] 
#[1 3 182 0 19 3 182 0 70 3 182 0 78 3 182 0 79 3 182 0 88 3 182 0 89 3 182 0 93 3 182 0 98 3 182 0 100 3 182 0 112 3 182 0 114 3 182 0 132 3 182 0 141 3 182 0 154 3 182 0 158 3 182 0 160 3 182 0 161 3 182 0 162 3 182 0 163 3 182 0 166 3 182 0 173 3 182 0 183 3 182 0 184 3 182 0 206 15 157 1 86] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 15 161 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 0 26 0 141 0 231 0 142 0 235 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 1 7 0 163 1 11 0 166 1 15 0 173 1 19 0 174 0 34 0 183 1 23 0 184 12 65 0 205 1 27 0 206 11 217 0 243 11 221 0 254 0 89 0 255 0 93 1 0 11 233 1 42 11 233 1 66 11 229 1 67 11 233 1 70 0 137 1 71 11 233 1 77 0 145 1 78 11 233 1 84 11 233 1 85 11 233 1 100 11 233 1 107 11 233 1 109 11 233 1 114 11 249 1 115 11 233 1 116 11 233 1 119 11 233 1 120 11 233 1 126 11 233 1 127 12 17 1 128 11 233 1 130 11 233 1 149 12 29 1 150 11 233 1 152 11 233 1 153 12 41 1 154 11 233 1 160 11 233 1 166 12 53 1 167 11 233 1 173 12 61 1 174 12 65 1 175 11 233 1 189 11 233 1 191 12 77 1 192 11 233 1 194 12 85 1 195 11 233 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 15 165 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 0 26 0 141 0 231 0 142 0 235 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 1 7 0 163 1 11 0 166 1 15 0 173 1 19 0 174 0 34 0 183 1 23 0 184 12 65 0 205 1 27 0 206 11 217 0 243 11 221 0 254 0 89 0 255 0 93 1 0 11 233 1 42 11 233 1 66 11 229 1 67 11 233 1 70 0 137 1 71 11 233 1 77 0 145 1 78 11 233 1 84 11 233 1 85 11 233 1 100 11 233 1 107 11 233 1 109 11 233 1 114 11 249 1 115 11 233 1 116 11 233 1 119 11 233 1 120 11 233 1 126 11 233 1 127 12 17 1 128 11 233 1 130 11 233 1 149 12 29 1 150 11 233 1 152 11 233 1 153 12 41 1 154 11 233 1 160 11 233 1 166 12 53 1 167 11 233 1 173 12 61 1 174 12 65 1 175 11 233 1 189 11 233 1 191 12 77 1 192 11 233 1 194 12 85 1 195 11 233 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 15 169 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 15 173 1 72] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 15 177 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 15 181 1 72] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 15 185 1 72 15 189 1 75] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 7 81 0 112 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 15 193 1 72 15 197 1 75] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 15 201 1 79] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 15 205 1 79] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 15 209 1 72] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 15 213 1 72] 
#[0 6 174 0 44 0 48 0 69 0 75 0 76 0 85 0 103 0 113 0 126 0 143 0 170 0 175 0 176 0 182 0 194 0 195 0 196 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 15 217 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 15 217 1 93] 
#[1 6 178 0 17 15 221 0 37 6 178 0 106 6 178 0 108 6 178 0 215] 
#[1 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 15 225 1 141] 
#[1 15 229 0 6 3 137 0 215 15 229 0 237] 
#[1 6 182 0 6 6 182 0 11 6 182 0 215 15 233 1 139] 
#[1 16 1 0 46 16 1 0 47 16 1 0 149 16 1 0 157 15 253 0 229 16 1 1 142 16 5 1 143] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 11 33 0 254 0 89 0 255 0 93 1 0 16 9 1 113] 
#[1 16 13 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 16 13 0 237 11 45 0 254 0 89 0 255 0 93 1 0 16 17 1 137 11 53 1 140 11 57 1 141] 
#[0 6 186 0 17 0 106 0 108 0 215] 
#[1 16 21 0 6 3 137 0 215 16 21 0 237] 
#[1 16 25 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 16 25 0 237 11 45 0 254 0 89 0 255 0 93 1 0 16 29 1 137 11 53 1 140 11 57 1 141] 
#[0 6 190 0 19 0 88 0 229] 
#[0 6 194 0 19 0 88 0 229] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 16 33 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[1 16 37 0 17 2 69 0 24 16 41 0 215 16 45 0 240] 
#[0 16 49 0 89] 
#[0 6 198 0 19 0 88 0 229] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 16 53 1 68 7 41 1 69] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 16 57 1 68 7 41 1 69] 
#[0 16 61 0 89] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 16 65 1 44 16 65 1 45 16 65 1 46 16 65 1 53 16 65 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 16 69 1 89] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 16 73 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[0 6 214 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 16 125 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[0 6 218 0 229] 
#[0 6 222 0 229] 
#[1 6 226 0 6 6 226 0 11 16 129 0 37 6 226 0 215 16 133 0 249] 
#[1 6 230 0 6 6 230 0 11 6 230 0 215 16 137 0 246] 
#[0 16 141 0 229] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 16 145 1 87 11 125 1 88] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 16 149 1 87 11 125 1 88] 
#[0 6 234 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 6 238 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 16 153 0 131] 
#[0 6 242 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 6 246 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 6 250 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 6 254 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 2 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 6 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 7 10 0 78 7 14 0 81 2 207 0 98 7 10 0 120 7 10 0 133 7 10 0 142 7 10 0 154 7 10 0 155 7 10 0 156 2 207 0 160 7 10 0 161 2 207 0 162 2 207 0 163 2 207 0 166 2 207 0 173 2 207 0 174 7 14 0 205 7 10 0 206 7 14 0 229] 
#[1 7 18 0 78 7 22 0 81 2 211 0 98 7 18 0 120 7 18 0 133 7 18 0 142 7 18 0 154 7 18 0 155 7 18 0 156 2 211 0 160 7 18 0 161 2 211 0 162 2 211 0 163 2 211 0 166 2 211 0 173 2 211 0 174 7 22 0 205 7 18 0 206 7 22 0 229] 
#[1 7 26 0 78 7 30 0 81 2 215 0 98 7 26 0 120 7 26 0 133 7 26 0 142 7 26 0 154 7 26 0 155 7 26 0 156 2 215 0 160 7 26 0 161 2 215 0 162 2 215 0 163 2 215 0 166 2 215 0 173 2 215 0 174 7 30 0 205 7 26 0 206 7 30 0 229] 
#[0 7 34 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 38 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 7 42 0 78 7 46 0 81 2 219 0 98 7 42 0 120 7 42 0 133 7 42 0 142 7 42 0 154 7 42 0 155 7 42 0 156 2 219 0 160 7 42 0 161 2 219 0 162 2 219 0 163 2 219 0 166 2 219 0 173 2 219 0 174 7 46 0 205 7 42 0 206 7 46 0 229] 
#[1 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 0 26 0 141 0 231 0 142 0 235 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 1 7 0 163 1 11 0 166 1 15 0 173 1 19 0 174 0 34 0 183 1 23 0 184 12 65 0 205 1 27 0 206 11 217 0 243 16 157 1 67 1 145 1 71 1 149 1 78 16 161 1 115 16 165 1 128 16 169 1 150 16 173 1 154 16 177 1 167 16 181 1 174 12 65 1 175 16 185 1 192 16 189 1 195 16 193 1 197 12 105 1 206 12 105 1 207 12 105 1 208] 
#[0 7 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 1 165 0 79 1 169 0 89 1 205 0 98 1 177 0 114 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 243 1 205 1 54] 
#[0 7 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 16 249 0 40 16 249 0 98 2 149 0 100 16 249 0 120 16 253 0 133 16 249 0 142 16 249 0 154 16 249 0 155 16 249 0 156 16 249 0 158 16 249 0 160 16 249 0 162 16 249 0 163 16 249 0 173 16 249 0 174 2 153 0 184 16 249 0 243 16 241 1 111 16 245 1 112 16 249 1 122 16 253 1 123] 
#[0 7 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 1 0 77 17 17 0 98 17 17 0 154 17 17 0 160 17 17 0 162 17 17 0 163 17 17 0 173 17 17 0 243 17 17 1 133] 
#[0 7 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 17 33 0 98 17 33 0 160 17 33 0 162 17 33 0 163 17 33 0 174 17 25 0 184 17 33 0 243 17 33 1 151] 
#[0 7 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 37 0 74 17 41 0 93 17 57 0 98 17 57 0 160 17 57 0 162 17 57 0 163 17 57 0 173 17 57 0 174 17 57 0 243 17 57 1 158] 
#[0 7 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 17 61 0 72 17 73 0 98 17 73 0 160 17 73 0 162 17 73 0 163 17 73 0 173 17 73 0 243 17 73 1 168] 
#[0 7 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 17 93 0 81 17 93 0 98 17 93 0 160 17 93 0 162 17 93 0 163 17 93 0 166 17 93 0 173 17 93 0 174 17 93 0 205 14 225 0 229 17 93 0 243 17 93 1 175 17 97 1 176 14 177 1 179 14 181 1 180 14 185 1 183] 
#[0 7 118 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 125 0 78 17 125 0 98 17 125 0 120 17 125 0 142 17 125 0 154 17 125 0 155 17 125 0 156 17 125 0 160 17 101 0 161 17 125 0 162 17 125 0 163 17 125 0 166 17 125 0 173 17 125 0 174 17 125 0 206 17 125 0 243 17 121 1 190 17 125 1 206 17 125 1 207] 
#[0 7 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 133 0 78 17 133 0 98 17 133 0 120 17 133 0 133 17 133 0 142 17 133 0 154 17 133 0 155 17 133 0 156 17 133 0 160 17 101 0 161 17 133 0 162 17 133 0 163 17 133 0 166 17 133 0 173 17 133 0 174 17 133 0 206 17 133 0 243 17 129 1 190 17 133 1 206 17 133 1 207 17 133 1 208] 
#[0 7 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 141 0 98 17 141 0 142 17 141 0 154 17 141 0 155 17 141 0 156 17 141 0 160 17 137 0 161 17 141 0 162 17 141 0 163 17 141 0 173 17 141 0 174 17 141 0 243 17 141 1 206] 
#[0 7 138 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 142 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 146 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 17 145 0 131] 
#[1 17 149 0 17 2 89 0 29 17 153 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 17 157 1 44 17 157 1 45 17 157 1 46 17 157 1 53 17 157 1 56 17 161 1 59 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[0 7 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 17 165 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 17 213 1 73] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 17 217 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 17 221 1 73] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 17 225 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 17 229 1 72] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 17 233 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 17 237 1 72] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 17 241 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 18 25 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 18 29 1 79] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 18 33 1 79] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 37 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 37 1 93] 
#[0 7 158 0 6 0 11 0 215] 
#[0 7 162 0 11 0 25 0 215] 
#[1 3 9 0 32 10 177 0 83 3 89 0 99 10 113 0 105 18 41 0 115 10 117 0 121 10 121 0 123 10 125 0 152 10 129 0 171 10 133 0 177 10 137 0 186 10 141 0 201 18 45 0 215 12 209 2 126 10 157 2 127 10 161 2 136 10 165 2 137 10 169 2 142 10 173 2 143 10 177 2 144 10 181 2 145 10 185 2 146 10 189 2 147 10 193 2 153 10 197 2 155 10 201 2 157] 
#[0 18 49 0 110] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 18 53 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 53 2 48 18 53 2 50 18 53 2 51 18 53 2 52 18 53 2 53 18 53 2 54 18 53 2 55 18 53 2 56 18 53 2 57 18 53 2 64 18 53 2 65 18 53 2 66 4 21 2 67 18 53 2 68 18 53 2 69 18 53 2 77 18 53 2 78 18 53 2 86 18 53 2 91 18 53 2 92 18 53 2 93 18 53 2 94 18 53 2 95 4 65 2 96 18 53 2 97 18 53 2 98 18 53 2 99 18 53 2 100 18 53 2 101 18 53 2 102 18 53 2 103 18 53 2 104 18 53 2 105 18 53 2 106 18 53 2 107 18 53 2 108 18 53 2 109 18 53 2 110 18 53 2 111 18 53 2 112 18 53 2 113 18 53 2 114 18 53 2 115 18 53 2 116 4 149 2 117 18 53 2 118 18 53 2 119 18 53 2 120 18 53 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 53 2 158 18 53 2 159] 
#[1 2 239 0 1 6 41 0 3 7 166 0 4 2 243 0 5 7 166 0 6 6 45 0 7 7 166 0 8 6 49 0 9 7 166 0 10 7 166 0 11 6 53 0 12 7 166 0 13 2 247 0 14 6 57 0 15 7 166 0 16 7 166 0 17 6 61 0 19 6 65 0 20 7 166 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 7 166 0 28 7 166 0 32 6 93 0 34 6 97 0 35 7 166 0 38 7 166 0 45 7 166 0 80 7 166 0 83 7 166 0 87 7 166 0 90 7 166 0 99 7 166 0 105 7 166 0 108 7 166 0 110 7 166 0 115 6 101 0 116 6 105 0 118 7 166 0 121 7 166 0 123 6 109 0 125 6 113 0 130 7 166 0 146 6 117 0 150 6 121 0 151 7 166 0 152 7 166 0 171 7 166 0 177 7 166 0 179 7 166 0 186 7 166 0 188 7 166 0 190 7 166 0 201 6 125 0 207 6 129 0 209 7 166 0 210 6 133 0 211 7 166 0 212 7 166 0 214 7 166 0 215 6 137 0 236] 
#[1 18 57 0 215 15 37 0 229 18 61 2 132 15 45 2 135] 
#[0 18 65 0 115] 
#[0 7 170 0 32 0 83 0 99 0 105 0 115 0 121 0 123 0 152 0 171 0 177 0 186 0 201 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 69 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 69 1 93] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 73 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 73 1 93] 
#[1 5 149 0 229 18 77 2 131] 
#[0 7 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 81 0 228] 
#[0 18 85 0 144] 
#[1 7 178 0 6 2 25 0 14 7 178 0 215 18 89 0 235 18 93 2 60] 
#[1 4 202 0 6 4 202 0 14 4 202 0 215 18 97 2 61] 
#[0 7 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 18 101 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 101 2 48 18 101 2 50 18 101 2 51 18 101 2 52 18 101 2 53 18 101 2 54 18 101 2 55 18 101 2 56 18 101 2 57 18 101 2 64 18 101 2 65 18 101 2 66 4 21 2 67 18 101 2 68 18 101 2 69 18 101 2 77 18 101 2 78 18 101 2 86 18 101 2 91 18 101 2 92 18 101 2 93 18 101 2 94 18 101 2 95 4 65 2 96 18 101 2 97 18 101 2 98 18 101 2 99 18 101 2 100 18 101 2 101 18 101 2 102 18 101 2 103 18 101 2 104 18 101 2 105 18 101 2 106 18 101 2 107 18 101 2 108 18 101 2 109 18 101 2 110 18 101 2 111 18 101 2 112 18 101 2 113 18 101 2 114 18 101 2 115 18 101 2 116 4 149 2 117 18 101 2 118 18 101 2 119 18 101 2 120 18 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 101 2 158 18 101 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 18 105 0 235 3 181 0 236 3 189 0 238 18 109 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 109 2 48 18 109 2 50 18 109 2 51 18 109 2 52 18 109 2 53 18 109 2 54 18 109 2 55 18 109 2 56 18 109 2 57 18 109 2 64 18 109 2 65 18 109 2 66 4 21 2 67 18 109 2 68 18 109 2 69 18 109 2 77 18 109 2 78 18 109 2 86 18 109 2 91 18 109 2 92 18 109 2 93 18 109 2 94 18 109 2 95 4 65 2 96 18 109 2 97 18 109 2 98 18 109 2 99 18 109 2 100 18 109 2 101 18 109 2 102 18 109 2 103 18 109 2 104 18 109 2 105 18 109 2 106 18 109 2 107 18 109 2 108 18 109 2 109 18 109 2 110 18 109 2 111 18 109 2 112 18 109 2 113 18 109 2 114 18 109 2 115 18 109 2 116 4 149 2 117 18 109 2 118 18 109 2 119 18 109 2 120 18 109 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 109 2 158 18 109 2 159] 
#[0 18 113 0 228] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 7 186 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 7 186 0 214 7 186 0 215 6 137 0 236] 
#[1 18 117 0 214 5 245 0 215 18 117 0 239] 
#[1 7 190 0 11 7 190 0 214 7 190 0 215 18 121 2 83] 
#[0 7 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 118 0 1 2 118 0 3 2 118 0 5 2 118 0 6 2 118 0 7 2 118 0 9 2 118 0 11 2 118 0 12 2 118 0 14 2 118 0 15 2 118 0 19 2 118 0 20 2 118 0 22 2 118 0 23 2 118 0 24 2 118 0 25 2 118 0 26 2 118 0 27 2 118 0 34 2 118 0 35 2 118 0 116 2 118 0 118 2 118 0 125 2 118 0 130 2 118 0 150 2 118 0 151 18 125 0 190 2 118 0 207 2 118 0 209 2 118 0 211 2 118 0 215] 
#[1 7 198 0 1 7 198 0 3 7 198 0 4 2 251 0 5 7 198 0 6 7 198 0 7 7 198 0 8 7 198 0 9 7 198 0 10 7 198 0 11 7 198 0 12 7 198 0 13 7 198 0 14 7 198 0 15 7 198 0 16 7 198 0 17 7 198 0 19 7 198 0 20 7 198 0 21 7 198 0 22 7 198 0 23 7 198 0 24 7 198 0 25 7 198 0 26 7 198 0 27 7 198 0 28 7 198 0 32 7 198 0 34 7 198 0 35 7 198 0 38 7 198 0 45 7 198 0 80 7 198 0 83 7 198 0 87 7 198 0 90 2 255 0 99 7 198 0 105 7 198 0 108 7 198 0 110 7 198 0 115 7 198 0 116 7 198 0 118 7 198 0 121 7 198 0 123 7 198 0 125 7 198 0 130 7 198 0 146 7 198 0 150 7 198 0 151 7 198 0 152 7 198 0 171 7 198 0 177 7 198 0 179 7 198 0 186 7 198 0 188 7 198 0 190 7 198 0 201 5 189 0 204 7 198 0 207 7 198 0 209 7 198 0 210 7 198 0 211 7 198 0 212 3 146 0 213 7 198 0 214 7 198 0 215 18 129 2 79 18 129 2 80 18 129 2 85] 
#[1 18 133 0 6 3 137 0 215 18 133 0 237] 
#[1 7 202 0 6 7 202 0 11 7 202 0 215 18 137 1 187] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 3 3 0 6 6 45 0 7 6 49 0 9 3 3 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 3 0 215 6 137 0 236 13 185 2 73] 
#[1 18 141 0 6 3 137 0 215 18 141 0 237] 
#[0 7 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 145 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 145 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 145 0 242 18 149 1 43 13 61 1 44 13 61 1 45 13 61 1 46 13 61 1 53 13 61 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 149 1 93 13 145 2 48 13 145 2 50 13 145 2 51 13 145 2 52 13 145 2 53 13 145 2 54 13 145 2 55 13 145 2 56 13 145 2 57 13 145 2 64 13 145 2 65 13 145 2 66 4 21 2 67 13 145 2 68 13 145 2 69 13 145 2 77 13 145 2 78 13 145 2 86 13 145 2 91 13 145 2 92 13 145 2 93 13 145 2 94 13 145 2 95 4 65 2 96 13 145 2 97 13 145 2 98 13 145 2 99 13 145 2 100 13 145 2 101 13 145 2 102 13 145 2 103 13 145 2 104 13 145 2 105 13 145 2 106 13 145 2 107 13 145 2 108 13 145 2 109 13 145 2 110 13 145 2 111 13 145 2 112 13 145 2 113 13 145 2 114 13 145 2 115 13 145 2 116 4 149 2 117 13 145 2 118 13 145 2 119 13 145 2 120 13 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 145 2 158 13 145 2 159] 
#[0 7 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 34 0 1 1 34 0 3 1 34 0 4 0 19 0 5 1 34 0 6 1 34 0 7 1 34 0 8 1 34 0 9 1 34 0 10 1 34 0 11 1 34 0 12 1 34 0 13 3 7 0 14 1 34 0 15 1 34 0 16 1 34 0 17 1 34 0 19 1 34 0 20 1 34 0 21 1 34 0 22 1 34 0 23 1 34 0 24 1 34 0 25 1 34 0 26 1 34 0 27 1 34 0 28 2 89 0 29 1 34 0 32 1 34 0 34 1 34 0 35 1 34 0 38 1 34 0 45 1 34 0 80 1 34 0 83 1 34 0 87 1 34 0 90 1 34 0 99 1 34 0 105 1 34 0 108 1 34 0 110 1 34 0 115 1 34 0 116 1 34 0 118 1 34 0 121 1 34 0 123 1 34 0 125 1 34 0 130 1 34 0 146 1 34 0 150 1 34 0 151 1 34 0 152 1 34 0 171 1 34 0 177 1 34 0 179 1 34 0 186 1 34 0 188 1 34 0 190 1 34 0 201 1 34 0 207 1 34 0 209 1 34 0 210 1 34 0 211 1 34 0 212 1 34 0 214 1 34 0 215 2 93 0 236 2 97 1 94 2 101 1 95 2 105 1 96] 
#[1 18 153 0 6 3 137 0 215 18 153 0 237] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 97 1 43 1 105 1 44 1 105 1 45 1 105 1 46 18 157 1 50 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 97 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 5 253 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 253 2 48 5 253 2 50 5 253 2 51 5 253 2 52 5 253 2 53 5 253 2 54 5 253 2 55 5 253 2 56 5 253 2 57 5 253 2 64 5 253 2 65 5 253 2 66 4 21 2 67 5 253 2 68 5 253 2 69 5 253 2 77 5 253 2 78 6 1 2 86 18 161 2 90 5 253 2 91 5 253 2 92 5 253 2 93 5 253 2 94 5 253 2 95 4 65 2 96 5 253 2 97 5 253 2 98 5 253 2 99 5 253 2 100 5 253 2 101 5 253 2 102 5 253 2 103 5 253 2 104 5 253 2 105 5 253 2 106 5 253 2 107 5 253 2 108 5 253 2 109 5 253 2 110 5 253 2 111 5 253 2 112 5 253 2 113 5 253 2 114 5 253 2 115 5 253 2 116 4 149 2 117 5 253 2 118 5 253 2 119 5 253 2 120 5 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 5 253 2 158 5 253 2 159] 
#[0 7 218 0 11 0 214 0 215] 
#[0 7 222 0 6 0 11 0 215] 
#[1 3 11 0 1 7 226 0 3 7 226 0 4 3 15 0 5 7 226 0 6 6 45 0 7 7 226 0 8 6 49 0 9 7 226 0 10 7 226 0 11 6 53 0 12 7 226 0 13 3 19 0 14 6 57 0 15 7 226 0 16 7 226 0 17 7 226 0 19 7 226 0 20 7 226 0 21 7 226 0 22 7 226 0 23 7 226 0 24 7 226 0 25 7 226 0 26 7 226 0 27 7 226 0 28 7 226 0 32 7 226 0 34 7 226 0 35 7 226 0 38 7 226 0 45 7 226 0 80 7 226 0 83 7 226 0 87 7 226 0 90 7 226 0 99 7 226 0 105 7 226 0 108 7 226 0 110 7 226 0 115 7 226 0 116 7 226 0 118 7 226 0 121 7 226 0 123 7 226 0 125 6 113 0 130 7 226 0 146 7 226 0 150 7 226 0 151 7 226 0 152 7 226 0 171 7 226 0 177 7 226 0 179 7 226 0 186 7 226 0 188 7 226 0 190 7 226 0 201 7 226 0 207 6 129 0 209 7 226 0 210 6 133 0 211 7 226 0 212 7 226 0 214 7 226 0 215 6 137 0 236] 
#[1 3 23 0 1 7 230 0 3 7 230 0 4 3 27 0 5 7 230 0 6 7 230 0 7 7 230 0 8 7 230 0 9 7 230 0 10 7 230 0 11 7 230 0 12 7 230 0 13 3 31 0 14 7 230 0 15 7 230 0 16 7 230 0 17 7 230 0 19 7 230 0 20 7 230 0 21 7 230 0 22 7 230 0 23 7 230 0 24 7 230 0 25 7 230 0 26 7 230 0 27 7 230 0 28 7 230 0 32 7 230 0 34 7 230 0 35 7 230 0 38 7 230 0 45 7 230 0 80 7 230 0 83 7 230 0 87 7 230 0 90 7 230 0 99 7 230 0 105 7 230 0 108 7 230 0 110 7 230 0 115 7 230 0 116 7 230 0 118 7 230 0 121 7 230 0 123 7 230 0 125 7 230 0 130 7 230 0 146 7 230 0 150 7 230 0 151 7 230 0 152 7 230 0 171 7 230 0 177 7 230 0 179 7 230 0 186 7 230 0 188 7 230 0 190 7 230 0 201 7 230 0 207 7 230 0 209 7 230 0 210 6 133 0 211 7 230 0 212 7 230 0 214 7 230 0 215 6 137 0 236] 
#[1 3 35 0 1 7 234 0 3 7 234 0 4 3 39 0 5 7 234 0 6 6 45 0 7 7 234 0 8 7 234 0 9 7 234 0 10 7 234 0 11 7 234 0 12 7 234 0 13 3 43 0 14 6 57 0 15 7 234 0 16 7 234 0 17 7 234 0 19 7 234 0 20 7 234 0 21 7 234 0 22 7 234 0 23 7 234 0 24 7 234 0 25 7 234 0 26 7 234 0 27 7 234 0 28 7 234 0 32 7 234 0 34 7 234 0 35 7 234 0 38 7 234 0 45 7 234 0 80 7 234 0 83 7 234 0 87 7 234 0 90 7 234 0 99 7 234 0 105 7 234 0 108 7 234 0 110 7 234 0 115 7 234 0 116 7 234 0 118 7 234 0 121 7 234 0 123 7 234 0 125 6 113 0 130 7 234 0 146 7 234 0 150 7 234 0 151 7 234 0 152 7 234 0 171 7 234 0 177 7 234 0 179 7 234 0 186 7 234 0 188 7 234 0 190 7 234 0 201 7 234 0 207 6 129 0 209 7 234 0 210 6 133 0 211 7 234 0 212 7 234 0 214 7 234 0 215 6 137 0 236] 
#[1 3 47 0 1 7 238 0 3 7 238 0 4 3 51 0 5 7 238 0 6 6 45 0 7 7 238 0 8 7 238 0 9 7 238 0 10 7 238 0 11 7 238 0 12 7 238 0 13 3 55 0 14 6 57 0 15 7 238 0 16 7 238 0 17 7 238 0 19 7 238 0 20 7 238 0 21 7 238 0 22 7 238 0 23 7 238 0 24 7 238 0 25 7 238 0 26 7 238 0 27 7 238 0 28 7 238 0 32 7 238 0 34 7 238 0 35 7 238 0 38 7 238 0 45 7 238 0 80 7 238 0 83 7 238 0 87 7 238 0 90 7 238 0 99 7 238 0 105 7 238 0 108 7 238 0 110 7 238 0 115 7 238 0 116 7 238 0 118 7 238 0 121 7 238 0 123 7 238 0 125 6 113 0 130 7 238 0 146 7 238 0 150 7 238 0 151 7 238 0 152 7 238 0 171 7 238 0 177 7 238 0 179 7 238 0 186 7 238 0 188 7 238 0 190 7 238 0 201 7 238 0 207 6 129 0 209 7 238 0 210 6 133 0 211 7 238 0 212 7 238 0 214 7 238 0 215 6 137 0 236] 
#[1 3 59 0 1 7 242 0 3 7 242 0 4 3 63 0 5 7 242 0 6 7 242 0 7 7 242 0 8 7 242 0 9 7 242 0 10 7 242 0 11 7 242 0 12 7 242 0 13 3 67 0 14 7 242 0 15 7 242 0 16 7 242 0 17 7 242 0 19 7 242 0 20 7 242 0 21 7 242 0 22 7 242 0 23 7 242 0 24 7 242 0 25 7 242 0 26 7 242 0 27 7 242 0 28 7 242 0 32 7 242 0 34 7 242 0 35 7 242 0 38 7 242 0 45 7 242 0 80 7 242 0 83 7 242 0 87 7 242 0 90 7 242 0 99 7 242 0 105 7 242 0 108 7 242 0 110 7 242 0 115 7 242 0 116 7 242 0 118 7 242 0 121 7 242 0 123 7 242 0 125 7 242 0 130 7 242 0 146 7 242 0 150 7 242 0 151 7 242 0 152 7 242 0 171 7 242 0 177 7 242 0 179 7 242 0 186 7 242 0 188 7 242 0 190 7 242 0 201 7 242 0 207 7 242 0 209 7 242 0 210 6 133 0 211 7 242 0 212 7 242 0 214 7 242 0 215 6 137 0 236] 
#[1 3 71 0 1 6 41 0 3 7 246 0 4 3 75 0 5 7 246 0 6 6 45 0 7 7 246 0 8 6 49 0 9 7 246 0 10 7 246 0 11 6 53 0 12 7 246 0 13 3 79 0 14 6 57 0 15 7 246 0 16 7 246 0 17 6 65 0 20 7 246 0 21 6 89 0 27 7 246 0 28 7 246 0 32 7 246 0 34 7 246 0 35 7 246 0 38 7 246 0 45 7 246 0 80 7 246 0 83 7 246 0 87 7 246 0 90 7 246 0 99 7 246 0 105 7 246 0 108 7 246 0 110 7 246 0 115 7 246 0 121 7 246 0 123 6 113 0 130 7 246 0 146 7 246 0 150 7 246 0 151 7 246 0 152 7 246 0 171 7 246 0 177 7 246 0 179 7 246 0 186 7 246 0 188 7 246 0 190 7 246 0 201 7 246 0 207 6 129 0 209 7 246 0 210 6 133 0 211 7 246 0 212 7 246 0 214 7 246 0 215 6 137 0 236] 
#[1 3 83 0 1 6 41 0 3 7 250 0 4 3 87 0 5 7 250 0 6 6 45 0 7 7 250 0 8 6 49 0 9 7 250 0 10 7 250 0 11 6 53 0 12 7 250 0 13 3 91 0 14 6 57 0 15 7 250 0 16 7 250 0 17 7 250 0 19 7 250 0 20 7 250 0 21 7 250 0 22 7 250 0 23 7 250 0 24 7 250 0 25 7 250 0 26 7 250 0 27 7 250 0 28 7 250 0 32 7 250 0 34 7 250 0 35 7 250 0 38 7 250 0 45 7 250 0 80 7 250 0 83 7 250 0 87 7 250 0 90 7 250 0 99 7 250 0 105 7 250 0 108 7 250 0 110 7 250 0 115 7 250 0 116 7 250 0 118 7 250 0 121 7 250 0 123 7 250 0 125 6 113 0 130 7 250 0 146 7 250 0 150 7 250 0 151 7 250 0 152 7 250 0 171 7 250 0 177 7 250 0 179 7 250 0 186 7 250 0 188 7 250 0 190 7 250 0 201 7 250 0 207 6 129 0 209 7 250 0 210 6 133 0 211 7 250 0 212 7 250 0 214 7 250 0 215 6 137 0 236] 
#[1 3 95 0 1 6 41 0 3 7 254 0 4 3 99 0 5 7 254 0 6 6 45 0 7 7 254 0 8 6 49 0 9 7 254 0 10 7 254 0 11 6 53 0 12 7 254 0 13 3 103 0 14 6 57 0 15 7 254 0 16 7 254 0 17 6 65 0 20 7 254 0 21 6 89 0 27 7 254 0 28 7 254 0 32 7 254 0 34 7 254 0 35 7 254 0 38 7 254 0 45 7 254 0 80 7 254 0 83 7 254 0 87 7 254 0 90 7 254 0 99 7 254 0 105 7 254 0 108 7 254 0 110 7 254 0 115 7 254 0 121 7 254 0 123 6 113 0 130 7 254 0 146 7 254 0 150 7 254 0 151 7 254 0 152 7 254 0 171 7 254 0 177 7 254 0 179 7 254 0 186 7 254 0 188 7 254 0 190 7 254 0 201 7 254 0 207 6 129 0 209 7 254 0 210 6 133 0 211 7 254 0 212 7 254 0 214 7 254 0 215 6 137 0 236] 
#[1 3 107 0 1 6 41 0 3 8 2 0 4 3 111 0 5 8 2 0 6 6 45 0 7 8 2 0 8 6 49 0 9 8 2 0 10 8 2 0 11 6 53 0 12 8 2 0 13 3 115 0 14 6 57 0 15 8 2 0 16 8 2 0 17 6 65 0 20 8 2 0 21 6 89 0 27 8 2 0 28 8 2 0 32 8 2 0 34 8 2 0 35 8 2 0 38 8 2 0 45 8 2 0 80 8 2 0 83 8 2 0 87 8 2 0 90 8 2 0 99 8 2 0 105 8 2 0 108 8 2 0 110 8 2 0 115 8 2 0 121 8 2 0 123 6 113 0 130 8 2 0 146 8 2 0 150 8 2 0 151 8 2 0 152 8 2 0 171 8 2 0 177 8 2 0 179 8 2 0 186 8 2 0 188 8 2 0 190 8 2 0 201 8 2 0 207 6 129 0 209 8 2 0 210 6 133 0 211 8 2 0 212 8 2 0 214 8 2 0 215 6 137 0 236] 
#[1 3 119 0 1 6 41 0 3 8 6 0 4 3 123 0 5 8 6 0 6 6 45 0 7 8 6 0 8 6 49 0 9 8 6 0 10 8 6 0 11 6 53 0 12 8 6 0 13 3 127 0 14 6 57 0 15 8 6 0 16 8 6 0 17 6 65 0 20 8 6 0 21 6 89 0 27 8 6 0 28 8 6 0 32 8 6 0 34 8 6 0 35 8 6 0 38 8 6 0 45 8 6 0 80 8 6 0 83 8 6 0 87 8 6 0 90 8 6 0 99 8 6 0 105 8 6 0 108 8 6 0 110 8 6 0 115 8 6 0 121 8 6 0 123 6 113 0 130 8 6 0 146 8 6 0 150 8 6 0 151 8 6 0 152 8 6 0 171 8 6 0 177 8 6 0 179 8 6 0 186 8 6 0 188 8 6 0 190 8 6 0 201 8 6 0 207 6 129 0 209 8 6 0 210 6 133 0 211 8 6 0 212 8 6 0 214 8 6 0 215 6 137 0 236] 
#[1 3 131 0 1 6 41 0 3 8 10 0 4 3 135 0 5 8 10 0 6 6 45 0 7 8 10 0 8 6 49 0 9 8 10 0 10 8 10 0 11 6 53 0 12 8 10 0 13 3 139 0 14 6 57 0 15 8 10 0 16 8 10 0 17 6 65 0 20 8 10 0 21 6 89 0 27 8 10 0 28 8 10 0 32 8 10 0 34 8 10 0 35 8 10 0 38 8 10 0 45 8 10 0 80 8 10 0 83 8 10 0 87 8 10 0 90 8 10 0 99 8 10 0 105 8 10 0 108 8 10 0 110 8 10 0 115 8 10 0 121 8 10 0 123 6 113 0 130 8 10 0 146 8 10 0 150 8 10 0 151 8 10 0 152 8 10 0 171 8 10 0 177 8 10 0 179 8 10 0 186 8 10 0 188 8 10 0 190 8 10 0 201 8 10 0 207 6 129 0 209 8 10 0 210 6 133 0 211 8 10 0 212 8 10 0 214 8 10 0 215 6 137 0 236] 
#[1 3 143 0 1 6 41 0 3 8 14 0 4 3 147 0 5 8 14 0 6 6 45 0 7 8 14 0 8 6 49 0 9 8 14 0 10 8 14 0 11 6 53 0 12 8 14 0 13 3 151 0 14 6 57 0 15 8 14 0 16 8 14 0 17 6 65 0 20 8 14 0 21 6 89 0 27 8 14 0 28 8 14 0 32 8 14 0 34 8 14 0 35 8 14 0 38 8 14 0 45 8 14 0 80 8 14 0 83 8 14 0 87 8 14 0 90 8 14 0 99 8 14 0 105 8 14 0 108 8 14 0 110 8 14 0 115 8 14 0 121 8 14 0 123 6 113 0 130 8 14 0 146 8 14 0 150 8 14 0 151 8 14 0 152 8 14 0 171 8 14 0 177 8 14 0 179 8 14 0 186 8 14 0 188 8 14 0 190 8 14 0 201 8 14 0 207 6 129 0 209 8 14 0 210 6 133 0 211 8 14 0 212 8 14 0 214 8 14 0 215 6 137 0 236] 
#[1 3 155 0 1 6 41 0 3 8 18 0 4 3 159 0 5 8 18 0 6 6 45 0 7 8 18 0 8 6 49 0 9 8 18 0 10 8 18 0 11 6 53 0 12 8 18 0 13 3 163 0 14 6 57 0 15 8 18 0 16 8 18 0 17 8 18 0 19 8 18 0 20 8 18 0 21 8 18 0 22 8 18 0 23 8 18 0 24 8 18 0 25 8 18 0 26 8 18 0 27 8 18 0 28 8 18 0 32 8 18 0 34 8 18 0 35 8 18 0 38 8 18 0 45 8 18 0 80 8 18 0 83 8 18 0 87 8 18 0 90 8 18 0 99 8 18 0 105 8 18 0 108 8 18 0 110 8 18 0 115 8 18 0 116 8 18 0 118 8 18 0 121 8 18 0 123 8 18 0 125 6 113 0 130 8 18 0 146 8 18 0 150 8 18 0 151 8 18 0 152 8 18 0 171 8 18 0 177 8 18 0 179 8 18 0 186 8 18 0 188 8 18 0 190 8 18 0 201 8 18 0 207 6 129 0 209 8 18 0 210 6 133 0 211 8 18 0 212 8 18 0 214 8 18 0 215 6 137 0 236] 
#[1 3 167 0 1 6 41 0 3 8 22 0 4 3 171 0 5 8 22 0 6 6 45 0 7 8 22 0 8 6 49 0 9 8 22 0 10 8 22 0 11 6 53 0 12 8 22 0 13 3 175 0 14 6 57 0 15 8 22 0 16 8 22 0 17 6 61 0 19 6 65 0 20 8 22 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 22 0 28 8 22 0 32 8 22 0 34 8 22 0 35 8 22 0 38 8 22 0 45 8 22 0 80 8 22 0 83 8 22 0 87 8 22 0 90 8 22 0 99 8 22 0 105 8 22 0 108 8 22 0 110 8 22 0 115 6 101 0 116 6 105 0 118 8 22 0 121 8 22 0 123 6 109 0 125 6 113 0 130 8 22 0 146 8 22 0 150 8 22 0 151 8 22 0 152 8 22 0 171 8 22 0 177 8 22 0 179 8 22 0 186 8 22 0 188 8 22 0 190 8 22 0 201 8 22 0 207 6 129 0 209 8 22 0 210 6 133 0 211 8 22 0 212 8 22 0 214 8 22 0 215 6 137 0 236] 
#[1 3 179 0 1 6 41 0 3 8 26 0 4 3 183 0 5 8 26 0 6 6 45 0 7 8 26 0 8 6 49 0 9 8 26 0 10 8 26 0 11 6 53 0 12 8 26 0 13 3 187 0 14 6 57 0 15 8 26 0 16 8 26 0 17 6 61 0 19 6 65 0 20 8 26 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 26 0 28 8 26 0 32 8 26 0 34 8 26 0 35 8 26 0 38 8 26 0 45 8 26 0 80 8 26 0 83 8 26 0 87 8 26 0 90 8 26 0 99 8 26 0 105 8 26 0 108 8 26 0 110 8 26 0 115 6 101 0 116 6 105 0 118 8 26 0 121 8 26 0 123 6 109 0 125 6 113 0 130 8 26 0 146 8 26 0 150 8 26 0 151 8 26 0 152 8 26 0 171 8 26 0 177 8 26 0 179 8 26 0 186 8 26 0 188 8 26 0 190 8 26 0 201 8 26 0 207 6 129 0 209 8 26 0 210 6 133 0 211 8 26 0 212 8 26 0 214 8 26 0 215 6 137 0 236] 
#[1 3 191 0 1 6 41 0 3 8 30 0 4 3 195 0 5 8 30 0 6 6 45 0 7 8 30 0 8 6 49 0 9 8 30 0 10 8 30 0 11 6 53 0 12 8 30 0 13 3 199 0 14 6 57 0 15 8 30 0 16 8 30 0 17 6 65 0 20 8 30 0 21 6 89 0 27 8 30 0 28 8 30 0 32 8 30 0 34 8 30 0 35 8 30 0 38 8 30 0 45 8 30 0 80 8 30 0 83 8 30 0 87 8 30 0 90 8 30 0 99 8 30 0 105 8 30 0 108 8 30 0 110 8 30 0 115 8 30 0 121 8 30 0 123 6 113 0 130 8 30 0 146 8 30 0 150 8 30 0 151 8 30 0 152 8 30 0 171 8 30 0 177 8 30 0 179 8 30 0 186 8 30 0 188 8 30 0 190 8 30 0 201 8 30 0 207 6 129 0 209 8 30 0 210 6 133 0 211 8 30 0 212 8 30 0 214 8 30 0 215 6 137 0 236] 
#[1 3 203 0 1 6 41 0 3 8 34 0 4 3 207 0 5 8 34 0 6 6 45 0 7 8 34 0 8 6 49 0 9 8 34 0 10 8 34 0 11 6 53 0 12 8 34 0 13 3 211 0 14 6 57 0 15 8 34 0 16 8 34 0 17 6 65 0 20 8 34 0 21 6 89 0 27 8 34 0 28 8 34 0 32 8 34 0 34 8 34 0 35 8 34 0 38 8 34 0 45 8 34 0 80 8 34 0 83 8 34 0 87 8 34 0 90 8 34 0 99 8 34 0 105 8 34 0 108 8 34 0 110 8 34 0 115 8 34 0 121 8 34 0 123 6 113 0 130 8 34 0 146 8 34 0 150 8 34 0 151 8 34 0 152 8 34 0 171 8 34 0 177 8 34 0 179 8 34 0 186 8 34 0 188 8 34 0 190 8 34 0 201 8 34 0 207 6 129 0 209 8 34 0 210 6 133 0 211 8 34 0 212 8 34 0 214 8 34 0 215 6 137 0 236] 
#[1 3 215 0 1 6 41 0 3 8 38 0 4 3 219 0 5 8 38 0 6 6 45 0 7 8 38 0 8 6 49 0 9 8 38 0 10 8 38 0 11 6 53 0 12 8 38 0 13 3 223 0 14 6 57 0 15 8 38 0 16 8 38 0 17 6 65 0 20 8 38 0 21 6 89 0 27 8 38 0 28 8 38 0 32 8 38 0 34 8 38 0 35 8 38 0 38 8 38 0 45 8 38 0 80 8 38 0 83 8 38 0 87 8 38 0 90 8 38 0 99 8 38 0 105 8 38 0 108 8 38 0 110 8 38 0 115 8 38 0 121 8 38 0 123 6 113 0 130 8 38 0 146 8 38 0 150 8 38 0 151 8 38 0 152 8 38 0 171 8 38 0 177 8 38 0 179 8 38 0 186 8 38 0 188 8 38 0 190 8 38 0 201 8 38 0 207 6 129 0 209 8 38 0 210 6 133 0 211 8 38 0 212 8 38 0 214 8 38 0 215 6 137 0 236] 
#[1 3 227 0 1 8 42 0 3 8 42 0 4 3 231 0 5 8 42 0 6 6 45 0 7 8 42 0 8 8 42 0 9 8 42 0 10 8 42 0 11 8 42 0 12 8 42 0 13 3 235 0 14 6 57 0 15 8 42 0 16 8 42 0 17 8 42 0 19 8 42 0 20 8 42 0 21 8 42 0 22 8 42 0 23 8 42 0 24 8 42 0 25 8 42 0 26 8 42 0 27 8 42 0 28 8 42 0 32 8 42 0 34 8 42 0 35 8 42 0 38 8 42 0 45 8 42 0 80 8 42 0 83 8 42 0 87 8 42 0 90 8 42 0 99 8 42 0 105 8 42 0 108 8 42 0 110 8 42 0 115 8 42 0 116 8 42 0 118 8 42 0 121 8 42 0 123 8 42 0 125 8 42 0 130 8 42 0 146 8 42 0 150 8 42 0 151 8 42 0 152 8 42 0 171 8 42 0 177 8 42 0 179 8 42 0 186 8 42 0 188 8 42 0 190 8 42 0 201 8 42 0 207 6 129 0 209 8 42 0 210 6 133 0 211 8 42 0 212 8 42 0 214 8 42 0 215 6 137 0 236] 
#[1 3 239 0 1 6 41 0 3 8 46 0 4 3 243 0 5 8 46 0 6 6 45 0 7 8 46 0 8 6 49 0 9 8 46 0 10 8 46 0 11 6 53 0 12 8 46 0 13 3 247 0 14 6 57 0 15 8 46 0 16 8 46 0 17 6 61 0 19 6 65 0 20 8 46 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 46 0 28 8 46 0 32 6 93 0 34 6 97 0 35 8 46 0 38 8 46 0 45 8 46 0 80 8 46 0 83 8 46 0 87 8 46 0 90 8 46 0 99 8 46 0 105 8 46 0 108 8 46 0 110 8 46 0 115 6 101 0 116 6 105 0 118 8 46 0 121 8 46 0 123 6 109 0 125 6 113 0 130 8 46 0 146 8 46 0 150 8 46 0 151 8 46 0 152 8 46 0 171 8 46 0 177 8 46 0 179 8 46 0 186 8 46 0 188 8 46 0 190 8 46 0 201 8 46 0 207 6 129 0 209 8 46 0 210 6 133 0 211 8 46 0 212 8 46 0 214 8 46 0 215 6 137 0 236] 
#[1 3 251 0 1 6 41 0 3 8 50 0 4 3 255 0 5 8 50 0 6 6 45 0 7 8 50 0 8 6 49 0 9 8 50 0 10 8 50 0 11 6 53 0 12 8 50 0 13 4 3 0 14 6 57 0 15 8 50 0 16 8 50 0 17 6 61 0 19 6 65 0 20 8 50 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 50 0 28 8 50 0 32 6 93 0 34 6 97 0 35 8 50 0 38 8 50 0 45 8 50 0 80 8 50 0 83 8 50 0 87 8 50 0 90 8 50 0 99 8 50 0 105 8 50 0 108 8 50 0 110 8 50 0 115 6 101 0 116 6 105 0 118 8 50 0 121 8 50 0 123 6 109 0 125 6 113 0 130 8 50 0 146 8 50 0 150 8 50 0 151 8 50 0 152 8 50 0 171 8 50 0 177 8 50 0 179 8 50 0 186 8 50 0 188 8 50 0 190 8 50 0 201 8 50 0 207 6 129 0 209 8 50 0 210 6 133 0 211 8 50 0 212 8 50 0 214 8 50 0 215 6 137 0 236] 
#[1 4 7 0 1 6 41 0 3 8 54 0 4 4 11 0 5 8 54 0 6 6 45 0 7 8 54 0 8 6 49 0 9 8 54 0 10 8 54 0 11 6 53 0 12 8 54 0 13 4 15 0 14 6 57 0 15 8 54 0 16 8 54 0 17 6 61 0 19 6 65 0 20 8 54 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 54 0 28 8 54 0 32 6 93 0 34 6 97 0 35 8 54 0 38 8 54 0 45 8 54 0 80 8 54 0 83 8 54 0 87 8 54 0 90 8 54 0 99 8 54 0 105 8 54 0 108 8 54 0 110 8 54 0 115 6 101 0 116 6 105 0 118 8 54 0 121 8 54 0 123 6 109 0 125 6 113 0 130 8 54 0 146 6 117 0 150 6 121 0 151 8 54 0 152 8 54 0 171 8 54 0 177 8 54 0 179 8 54 0 186 8 54 0 188 8 54 0 190 8 54 0 201 8 54 0 207 6 129 0 209 8 54 0 210 6 133 0 211 8 54 0 212 8 54 0 214 8 54 0 215 6 137 0 236] 
#[1 4 19 0 1 8 58 0 3 8 58 0 4 4 23 0 5 8 58 0 6 6 45 0 7 8 58 0 8 8 58 0 9 8 58 0 10 8 58 0 11 8 58 0 12 8 58 0 13 4 27 0 14 6 57 0 15 8 58 0 16 8 58 0 17 8 58 0 19 8 58 0 20 8 58 0 21 8 58 0 22 8 58 0 23 8 58 0 24 8 58 0 25 8 58 0 26 8 58 0 27 8 58 0 28 8 58 0 32 8 58 0 34 8 58 0 35 8 58 0 38 8 58 0 45 8 58 0 80 8 58 0 83 8 58 0 87 8 58 0 90 8 58 0 99 8 58 0 105 8 58 0 108 8 58 0 110 8 58 0 115 8 58 0 116 8 58 0 118 8 58 0 121 8 58 0 123 8 58 0 125 8 58 0 130 8 58 0 146 8 58 0 150 8 58 0 151 8 58 0 152 8 58 0 171 8 58 0 177 8 58 0 179 8 58 0 186 8 58 0 188 8 58 0 190 8 58 0 201 8 58 0 207 8 58 0 209 8 58 0 210 6 133 0 211 8 58 0 212 8 58 0 214 8 58 0 215 6 137 0 236] 
#[1 4 31 0 1 8 62 0 3 8 62 0 4 4 35 0 5 8 62 0 6 8 62 0 7 8 62 0 8 8 62 0 9 8 62 0 10 8 62 0 11 8 62 0 12 8 62 0 13 4 39 0 14 8 62 0 15 8 62 0 16 8 62 0 17 8 62 0 19 8 62 0 20 8 62 0 21 8 62 0 22 8 62 0 23 8 62 0 24 8 62 0 25 8 62 0 26 8 62 0 27 8 62 0 28 8 62 0 32 8 62 0 34 8 62 0 35 8 62 0 38 8 62 0 45 8 62 0 80 8 62 0 83 8 62 0 87 8 62 0 90 8 62 0 99 8 62 0 105 8 62 0 108 8 62 0 110 8 62 0 115 8 62 0 116 8 62 0 118 8 62 0 121 8 62 0 123 8 62 0 125 8 62 0 130 8 62 0 146 8 62 0 150 8 62 0 151 8 62 0 152 8 62 0 171 8 62 0 177 8 62 0 179 8 62 0 186 8 62 0 188 8 62 0 190 8 62 0 201 8 62 0 207 8 62 0 209 8 62 0 210 6 133 0 211 8 62 0 212 8 62 0 214 8 62 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 18 165 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 165 2 48 18 165 2 50 18 165 2 51 18 165 2 52 18 165 2 53 18 165 2 54 18 165 2 55 18 165 2 56 18 165 2 57 18 165 2 64 18 165 2 65 18 165 2 66 4 21 2 67 18 165 2 68 18 165 2 69 18 165 2 77 18 165 2 78 18 165 2 86 18 165 2 91 18 165 2 92 18 165 2 93 18 165 2 94 18 165 2 95 4 65 2 96 18 165 2 97 18 165 2 98 18 165 2 99 18 165 2 100 18 165 2 101 18 165 2 102 18 165 2 103 18 165 2 104 18 165 2 105 18 165 2 106 18 165 2 107 18 165 2 108 18 165 2 109 18 165 2 110 18 165 2 111 18 165 2 112 18 165 2 113 18 165 2 114 18 165 2 115 18 165 2 116 4 149 2 117 18 165 2 118 18 165 2 119 18 165 2 120 18 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 165 2 158 18 165 2 159] 
#[1 8 66 0 6 4 43 0 11 8 66 0 215 13 197 0 234 13 201 2 72] 
#[0 8 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 237 0 228 18 169 2 74] 
#[1 2 245 0 1 2 33 0 5 8 74 0 6 2 253 0 9 8 74 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 74 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 18 173 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 173 2 48 18 173 2 50 18 173 2 51 18 173 2 52 18 173 2 53 18 173 2 54 18 173 2 55 18 173 2 56 18 173 2 57 18 173 2 64 18 173 2 65 18 173 2 66 4 21 2 67 18 173 2 68 18 173 2 69 18 173 2 77 18 173 2 78 18 173 2 86 18 173 2 91 18 173 2 92 18 173 2 93 18 173 2 94 18 173 2 95 4 65 2 96 18 173 2 97 18 173 2 98 18 173 2 99 18 173 2 100 18 173 2 101 18 173 2 102 18 173 2 103 18 173 2 104 18 173 2 105 18 173 2 106 18 173 2 107 18 173 2 108 18 173 2 109 18 173 2 110 18 173 2 111 18 173 2 112 18 173 2 113 18 173 2 114 18 173 2 115 18 173 2 116 4 149 2 117 18 173 2 118 18 173 2 119 18 173 2 120 18 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 173 2 158 18 173 2 159] 
#[0 8 78 0 6 0 11 0 215] 
#[0 18 177 0 144] 
#[0 8 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 181 0 215] 
#[0 18 185 0 88] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 18 189 0 17 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 8 86 0 67 8 86 0 68 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 8 86 0 87 4 47 0 88 9 61 0 91 9 65 0 92 9 69 0 94 8 86 0 96 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 8 86 0 127 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 8 86 0 139 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 18 193 0 215 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 8 86 0 226 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 197 1 217 18 201 1 219 18 197 1 221 9 177 1 222 18 205 1 223 18 209 1 224 18 213 1 225 18 197 1 226 9 185 1 227 18 197 1 228 18 197 1 229 18 197 1 230 18 197 1 231 18 197 1 232 18 197 1 233 18 197 1 234 18 197 1 235 18 197 1 236 18 197 1 238 18 197 1 239 18 197 1 240 18 197 1 241 18 197 1 242 18 197 1 246 18 197 1 248 18 197 2 1 18 197 2 2 18 197 2 3 18 197 2 4 18 197 2 5 18 197 2 7 18 197 2 12 18 197 2 13 18 197 2 14 18 197 2 15 18 197 2 19 18 197 2 20 18 197 2 21 18 197 2 22 18 197 2 24 18 197 2 26 18 197 2 27 18 197 2 28 18 197 2 30 18 197 2 32 18 197 2 33 18 197 2 34 18 197 2 35 18 197 2 36 18 197 2 41 18 197 2 45 18 197 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 18 217 0 37 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 18 221 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 18 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 225 2 48 18 225 2 50 18 225 2 51 18 225 2 52 18 225 2 53 18 225 2 54 18 225 2 55 18 225 2 56 18 225 2 57 18 225 2 64 18 225 2 65 18 225 2 66 4 21 2 67 18 225 2 68 18 225 2 69 18 225 2 77 18 225 2 78 18 225 2 86 18 225 2 91 18 225 2 92 18 225 2 93 18 225 2 94 18 225 2 95 4 65 2 96 18 225 2 97 18 225 2 98 18 225 2 99 18 225 2 100 18 225 2 101 18 225 2 102 18 225 2 103 18 225 2 104 18 225 2 105 18 225 2 106 18 225 2 107 18 225 2 108 18 225 2 109 18 225 2 110 18 225 2 111 18 225 2 112 18 225 2 113 18 225 2 114 18 225 2 115 18 225 2 116 4 149 2 117 18 225 2 118 18 225 2 119 18 225 2 120 18 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 225 2 158 18 225 2 159] 
#[1 18 229 0 6 3 137 0 215 18 229 0 237] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 18 233 0 234 6 137 0 236] 
#[1 4 51 0 1 6 41 0 3 8 90 0 4 4 55 0 5 8 90 0 6 6 45 0 7 8 90 0 8 6 49 0 9 8 90 0 10 8 90 0 11 6 53 0 12 8 90 0 13 4 59 0 14 6 57 0 15 8 90 0 16 8 90 0 17 6 61 0 19 6 65 0 20 8 90 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 90 0 28 8 90 0 32 6 93 0 34 6 97 0 35 8 90 0 38 8 90 0 45 8 90 0 80 8 90 0 83 8 90 0 87 8 90 0 90 8 90 0 99 8 90 0 105 8 90 0 108 8 90 0 110 8 90 0 115 6 101 0 116 6 105 0 118 8 90 0 121 8 90 0 123 6 109 0 125 6 113 0 130 8 90 0 146 6 117 0 150 6 121 0 151 8 90 0 152 8 90 0 171 8 90 0 177 8 90 0 179 8 90 0 186 8 90 0 188 8 90 0 190 8 90 0 201 6 125 0 207 6 129 0 209 8 90 0 210 6 133 0 211 8 90 0 212 8 90 0 214 8 90 0 215 6 137 0 236] 
#[0 8 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 110 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 114 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 127 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 18 237 1 218 13 221 1 220] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 18 241 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 241 2 48 18 241 2 50 18 241 2 51 18 241 2 52 18 241 2 53 18 241 2 54 18 241 2 55 18 241 2 56 18 241 2 57 18 241 2 64 18 241 2 65 18 241 2 66 4 21 2 67 18 241 2 68 18 241 2 69 18 241 2 77 18 241 2 78 18 241 2 86 18 241 2 91 18 241 2 92 18 241 2 93 18 241 2 94 18 241 2 95 4 65 2 96 18 241 2 97 18 241 2 98 18 241 2 99 18 241 2 100 18 241 2 101 18 241 2 102 18 241 2 103 18 241 2 104 18 241 2 105 18 241 2 106 18 241 2 107 18 241 2 108 18 241 2 109 18 241 2 110 18 241 2 111 18 241 2 112 18 241 2 113 18 241 2 114 18 241 2 115 18 241 2 116 4 149 2 117 18 241 2 118 18 241 2 119 18 241 2 120 18 241 2 122 4 169 2 125 4 173 2 136 4 177 2 155 18 241 2 158 18 241 2 159] 
#[0 8 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 63 0 1 6 41 0 3 8 122 0 4 4 67 0 5 8 122 0 6 6 45 0 7 8 122 0 8 6 49 0 9 8 122 0 10 8 122 0 11 6 53 0 12 8 122 0 13 4 71 0 14 6 57 0 15 8 122 0 16 8 122 0 17 6 61 0 19 6 65 0 20 8 122 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 122 0 28 8 122 0 32 6 93 0 34 6 97 0 35 8 122 0 38 8 122 0 45 8 122 0 80 8 122 0 83 8 122 0 87 8 122 0 90 8 122 0 99 8 122 0 105 8 122 0 108 8 122 0 110 8 122 0 115 6 101 0 116 6 105 0 118 8 122 0 121 8 122 0 123 6 109 0 125 6 113 0 130 8 122 0 146 6 117 0 150 6 121 0 151 8 122 0 152 8 122 0 171 8 122 0 177 8 122 0 179 8 122 0 186 8 122 0 188 8 122 0 190 8 122 0 201 6 125 0 207 6 129 0 209 8 122 0 210 6 133 0 211 8 122 0 212 8 122 0 214 8 122 0 215 6 137 0 236 18 245 2 44] 
#[1 4 75 0 1 6 41 0 3 8 126 0 4 4 79 0 5 8 126 0 6 6 45 0 7 8 126 0 8 6 49 0 9 8 126 0 10 8 126 0 11 6 53 0 12 8 126 0 13 4 83 0 14 6 57 0 15 8 126 0 16 8 126 0 17 6 61 0 19 6 65 0 20 8 126 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 126 0 28 8 126 0 32 6 93 0 34 6 97 0 35 8 126 0 38 8 126 0 45 8 126 0 80 8 126 0 83 8 126 0 87 8 126 0 90 8 126 0 99 8 126 0 105 8 126 0 108 8 126 0 110 8 126 0 115 6 101 0 116 6 105 0 118 8 126 0 121 8 126 0 123 6 109 0 125 6 113 0 130 8 126 0 146 6 117 0 150 6 121 0 151 8 126 0 152 8 126 0 171 8 126 0 177 8 126 0 179 8 126 0 186 8 126 0 188 8 126 0 190 8 126 0 201 6 125 0 207 6 129 0 209 8 126 0 210 6 133 0 211 8 126 0 212 8 126 0 214 8 126 0 215 6 137 0 236] 
#[0 8 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 142 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 14 69 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 77 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 249 2 8 14 77 2 48 14 77 2 50 14 77 2 51 14 77 2 52 14 77 2 53 14 77 2 54 14 77 2 55 14 77 2 56 14 77 2 57 14 77 2 64 14 77 2 65 14 77 2 66 4 21 2 67 14 77 2 68 14 77 2 69 14 77 2 77 14 77 2 78 14 77 2 86 14 77 2 91 14 77 2 92 14 77 2 93 14 77 2 94 14 77 2 95 4 65 2 96 14 77 2 97 14 77 2 98 14 77 2 99 14 77 2 100 14 77 2 101 14 77 2 102 14 77 2 103 14 77 2 104 14 77 2 105 14 77 2 106 14 77 2 107 14 77 2 108 14 77 2 109 14 77 2 110 14 77 2 111 14 77 2 112 14 77 2 113 14 77 2 114 14 77 2 115 14 77 2 116 4 149 2 117 14 77 2 118 14 77 2 119 14 77 2 120 14 77 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 77 2 158 14 77 2 159] 
#[1 2 142 0 1 2 142 0 3 2 143 0 5 2 142 0 7 2 142 0 9 2 142 0 12 0 59 0 14 2 142 0 15 2 142 0 19 2 142 0 20 2 142 0 22 2 142 0 23 4 87 0 24 2 142 0 25 2 142 0 26 2 142 0 27 4 91 0 29 2 142 0 34 2 142 0 35 8 170 0 37 4 87 0 110 2 142 0 116 2 142 0 118 2 142 0 125 2 142 0 130 2 142 0 150 2 142 0 151 2 142 0 207 2 142 0 209 2 142 0 211 19 1 0 236 2 41 1 48 2 45 1 49 19 5 1 55 19 9 1 57 7 217 1 94 2 101 1 95 2 105 1 96 19 13 1 99 7 225 1 184] 
#[1 2 69 0 24 19 17 0 240] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 8 174 0 110 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 6 137 0 236] 
#[0 5 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 21 2 48 19 21 2 50 19 21 2 51 19 21 2 52 19 21 2 53 19 21 2 54 19 21 2 55 19 21 2 56 19 21 2 57 19 21 2 64 19 21 2 65 19 21 2 66 4 21 2 67 19 21 2 68 19 21 2 69 19 21 2 77 19 21 2 78 19 21 2 86 19 21 2 91 19 21 2 92 19 21 2 93 19 21 2 94 19 21 2 95 4 65 2 96 19 21 2 97 19 21 2 98 19 21 2 99 19 21 2 100 19 21 2 101 19 21 2 102 19 21 2 103 19 21 2 104 19 21 2 105 19 21 2 106 19 21 2 107 19 21 2 108 19 21 2 109 19 21 2 110 19 21 2 111 19 21 2 112 19 21 2 113 19 21 2 114 19 21 2 115 19 21 2 116 4 149 2 117 19 21 2 118 19 21 2 119 19 21 2 120 19 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 19 21 2 158 19 21 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 19 25 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 19 29 0 188 6 125 0 207 6 129 0 209 6 133 0 211 19 33 0 215 6 137 0 236] 
#[1 2 33 0 5 19 37 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 41 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 41 2 48 19 41 2 50 19 41 2 51 19 41 2 52 19 41 2 53 19 41 2 54 19 41 2 55 19 41 2 56 19 41 2 57 19 41 2 64 19 41 2 65 19 41 2 66 4 21 2 67 19 41 2 68 19 41 2 69 19 41 2 77 19 41 2 78 19 41 2 86 19 41 2 91 19 41 2 92 19 41 2 93 19 41 2 94 19 41 2 95 4 65 2 96 19 41 2 97 19 41 2 98 19 41 2 99 19 41 2 100 19 41 2 101 19 41 2 102 19 41 2 103 19 41 2 104 19 41 2 105 19 41 2 106 19 41 2 107 19 41 2 108 19 41 2 109 19 41 2 110 19 41 2 111 19 41 2 112 19 41 2 113 19 41 2 114 19 41 2 115 19 41 2 116 4 149 2 117 19 41 2 118 19 41 2 119 19 41 2 120 19 41 2 122 4 169 2 125 4 173 2 136 4 177 2 155 19 41 2 158 19 41 2 159] 
#[1 19 45 0 104 19 49 0 168 19 53 2 23 19 53 2 27] 
#[1 8 182 0 1 8 182 0 3 8 182 0 4 4 95 0 5 8 182 0 6 8 182 0 7 8 182 0 8 8 182 0 9 8 182 0 10 8 182 0 11 8 182 0 12 8 182 0 13 8 182 0 14 8 182 0 15 8 182 0 16 8 182 0 17 8 182 0 19 8 182 0 20 8 182 0 21 8 182 0 22 8 182 0 23 8 182 0 24 8 182 0 25 8 182 0 26 8 182 0 27 8 182 0 28 8 182 0 32 8 182 0 34 8 182 0 35 8 182 0 38 8 182 0 45 8 182 0 80 8 182 0 83 8 182 0 87 8 182 0 90 8 182 0 99 8 182 0 105 8 182 0 108 8 182 0 110 8 182 0 115 8 182 0 116 8 182 0 118 8 182 0 121 8 182 0 123 8 182 0 125 8 182 0 130 8 182 0 146 8 182 0 150 8 182 0 151 8 182 0 152 8 182 0 171 8 182 0 177 8 182 0 179 8 182 0 186 8 182 0 188 8 182 0 190 8 182 0 201 8 182 0 207 8 182 0 209 8 182 0 210 8 182 0 211 8 182 0 212 8 182 0 214 8 182 0 215 19 61 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 125 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 65 2 37 14 121 2 40 14 125 2 48 14 125 2 50 14 125 2 51 14 125 2 52 14 125 2 53 14 125 2 54 14 125 2 55 14 125 2 56 14 125 2 57 14 125 2 64 14 125 2 65 14 125 2 66 4 21 2 67 14 125 2 68 14 125 2 69 14 125 2 77 14 125 2 78 14 125 2 86 14 125 2 91 14 125 2 92 14 125 2 93 14 125 2 94 14 125 2 95 4 65 2 96 14 125 2 97 14 125 2 98 14 125 2 99 14 125 2 100 14 125 2 101 14 125 2 102 14 125 2 103 14 125 2 104 14 125 2 105 14 125 2 106 14 125 2 107 14 125 2 108 14 125 2 109 14 125 2 110 14 125 2 111 14 125 2 112 14 125 2 113 14 125 2 114 14 125 2 115 14 125 2 116 4 149 2 117 14 125 2 118 14 125 2 119 14 125 2 120 14 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 125 2 158 14 125 2 159] 
#[0 8 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 190 0 1 8 190 0 3 8 190 0 4 8 190 0 5 8 190 0 6 8 190 0 7 8 190 0 8 8 190 0 9 8 190 0 10 8 190 0 11 8 190 0 12 8 190 0 13 8 190 0 14 8 190 0 15 8 190 0 16 8 190 0 17 8 190 0 19 8 190 0 20 8 190 0 21 8 190 0 22 8 190 0 23 8 190 0 24 8 190 0 25 8 190 0 26 8 190 0 27 8 190 0 28 8 190 0 32 8 190 0 34 8 190 0 35 8 190 0 38 8 190 0 45 8 190 0 80 8 190 0 83 8 190 0 87 8 190 0 90 8 190 0 99 8 190 0 105 8 190 0 108 8 190 0 110 8 190 0 115 8 190 0 116 8 190 0 118 8 190 0 121 8 190 0 123 8 190 0 125 8 190 0 130 8 190 0 146 8 190 0 150 8 190 0 151 8 190 0 152 8 190 0 171 8 190 0 177 8 190 0 179 8 190 0 186 8 190 0 188 8 190 0 190 8 190 0 201 8 190 0 207 8 190 0 209 8 190 0 210 8 190 0 211 8 190 0 212 8 190 0 214 8 190 0 215 19 69 2 39] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 73 0 236 19 77 1 184] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 81 0 234 6 137 0 236] 
#[0 8 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 99 0 1 6 41 0 3 8 206 0 4 4 103 0 5 8 206 0 6 6 45 0 7 8 206 0 8 6 49 0 9 8 206 0 10 8 206 0 11 6 53 0 12 8 206 0 13 4 107 0 14 6 57 0 15 8 206 0 16 8 206 0 17 6 61 0 19 6 65 0 20 8 206 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 206 0 28 8 206 0 32 6 93 0 34 6 97 0 35 8 206 0 38 8 206 0 45 8 206 0 80 8 206 0 83 8 206 0 87 8 206 0 90 8 206 0 99 8 206 0 105 8 206 0 108 8 206 0 110 8 206 0 115 6 101 0 116 6 105 0 118 8 206 0 121 8 206 0 123 6 109 0 125 6 113 0 130 8 206 0 146 6 117 0 150 6 121 0 151 8 206 0 152 8 206 0 171 8 206 0 177 8 206 0 179 8 206 0 186 8 206 0 188 8 206 0 190 8 206 0 201 6 125 0 207 6 129 0 209 8 206 0 210 6 133 0 211 8 206 0 212 8 206 0 214 8 206 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 85 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 85 2 48 19 85 2 50 19 85 2 51 19 85 2 52 19 85 2 53 19 85 2 54 19 85 2 55 19 85 2 56 19 85 2 57 19 85 2 64 19 85 2 65 19 85 2 66 4 21 2 67 19 85 2 68 19 85 2 69 19 85 2 77 19 85 2 78 19 85 2 86 19 85 2 91 19 85 2 92 19 85 2 93 19 85 2 94 19 85 2 95 4 65 2 96 19 85 2 97 19 85 2 98 19 85 2 99 19 85 2 100 19 85 2 101 19 85 2 102 19 85 2 103 19 85 2 104 19 85 2 105 19 85 2 106 19 85 2 107 19 85 2 108 19 85 2 109 19 85 2 110 19 85 2 111 19 85 2 112 19 85 2 113 19 85 2 114 19 85 2 115 19 85 2 116 4 149 2 117 19 85 2 118 19 85 2 119 19 85 2 120 19 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 19 85 2 158 19 85 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 89 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 93 0 215 6 137 0 236] 
#[1 4 111 0 1 6 41 0 3 8 210 0 4 4 115 0 5 8 210 0 6 6 45 0 7 8 210 0 8 6 49 0 9 8 210 0 10 8 210 0 11 6 53 0 12 8 210 0 13 4 119 0 14 6 57 0 15 8 210 0 16 8 210 0 17 6 61 0 19 6 65 0 20 8 210 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 210 0 28 8 210 0 32 6 93 0 34 6 97 0 35 8 210 0 38 8 210 0 45 8 210 0 80 8 210 0 83 8 210 0 87 8 210 0 90 8 210 0 99 8 210 0 105 8 210 0 108 8 210 0 110 8 210 0 115 6 101 0 116 6 105 0 118 8 210 0 121 8 210 0 123 6 109 0 125 6 113 0 130 8 210 0 146 6 117 0 150 6 121 0 151 8 210 0 152 8 210 0 171 8 210 0 177 8 210 0 179 8 210 0 186 8 210 0 188 8 210 0 190 8 210 0 201 6 125 0 207 6 129 0 209 8 210 0 210 6 133 0 211 8 210 0 212 8 210 0 214 8 210 0 215 6 137 0 236] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 19 97 1 218 13 221 1 220] 
#[1 2 142 0 1 2 142 0 3 2 143 0 5 2 142 0 7 2 142 0 9 8 170 0 11 2 142 0 12 0 59 0 14 2 142 0 15 2 142 0 19 2 142 0 20 2 142 0 22 2 142 0 23 4 123 0 24 2 142 0 25 2 142 0 26 2 142 0 27 4 91 0 29 2 142 0 34 2 142 0 35 8 170 0 37 2 142 0 116 2 142 0 118 2 142 0 125 2 142 0 130 2 142 0 150 2 142 0 151 2 142 0 207 2 142 0 209 2 142 0 211 4 123 0 215 19 1 0 236 2 41 1 48 2 45 1 49 19 101 1 55 19 9 1 57 7 217 1 94 2 101 1 95 2 105 1 96 19 13 1 99 7 225 1 184] 
#[0 8 214 0 215] 
#[1 8 218 0 1 8 218 0 3 8 218 0 4 8 218 0 5 8 218 0 6 8 218 0 7 8 218 0 8 8 218 0 9 8 218 0 10 8 218 0 11 8 218 0 12 8 218 0 13 8 218 0 14 8 218 0 15 8 218 0 16 8 218 0 17 8 218 0 19 8 218 0 20 8 218 0 21 8 218 0 22 8 218 0 23 8 218 0 24 8 218 0 25 8 218 0 26 8 218 0 27 8 218 0 28 8 218 0 32 8 218 0 34 8 218 0 35 8 218 0 38 8 218 0 45 8 218 0 80 8 218 0 83 8 218 0 87 8 218 0 90 8 218 0 99 8 218 0 105 8 218 0 108 8 218 0 110 8 218 0 115 8 218 0 116 8 218 0 118 8 218 0 121 8 218 0 123 8 218 0 125 8 218 0 130 8 218 0 146 8 218 0 150 8 218 0 151 8 218 0 152 8 218 0 171 8 218 0 177 8 218 0 179 8 218 0 186 8 218 0 188 8 218 0 190 8 218 0 201 8 218 0 207 8 218 0 209 8 218 0 210 8 218 0 211 8 218 0 212 8 218 0 214 8 218 0 215 19 105 1 178] 
#[1 8 222 0 1 8 222 0 3 8 222 0 4 8 222 0 5 8 222 0 6 8 222 0 7 8 222 0 8 8 222 0 9 8 222 0 10 8 222 0 11 8 222 0 12 8 222 0 13 8 222 0 14 8 222 0 15 8 222 0 16 8 222 0 17 8 222 0 19 8 222 0 20 8 222 0 21 8 222 0 22 8 222 0 23 2 69 0 24 8 222 0 25 8 222 0 26 8 222 0 27 8 222 0 28 8 222 0 32 8 222 0 34 8 222 0 35 19 109 0 37 8 222 0 38 8 222 0 45 8 222 0 80 8 222 0 83 8 222 0 87 8 222 0 90 8 222 0 99 8 222 0 105 8 222 0 108 8 222 0 110 8 222 0 115 8 222 0 116 8 222 0 118 8 222 0 121 8 222 0 123 8 222 0 125 8 222 0 130 8 222 0 146 8 222 0 150 8 222 0 151 8 222 0 152 8 222 0 171 8 222 0 177 8 222 0 179 8 222 0 186 8 222 0 188 8 222 0 190 8 222 0 201 8 222 0 207 8 222 0 209 8 222 0 210 8 222 0 211 8 222 0 212 8 222 0 214 8 222 0 215 19 113 0 240] 
#[1 8 226 0 1 8 226 0 3 8 226 0 4 8 226 0 5 8 226 0 6 8 226 0 7 8 226 0 8 8 226 0 9 8 226 0 10 8 226 0 11 8 226 0 12 8 226 0 13 8 226 0 14 8 226 0 15 8 226 0 16 8 226 0 17 8 226 0 19 8 226 0 20 8 226 0 21 8 226 0 22 8 226 0 23 8 226 0 24 8 226 0 25 8 226 0 26 8 226 0 27 8 226 0 28 8 226 0 32 8 226 0 34 8 226 0 35 8 226 0 37 8 226 0 38 8 226 0 45 8 226 0 80 8 226 0 83 8 226 0 87 8 226 0 90 8 226 0 99 8 226 0 105 8 226 0 108 8 226 0 110 8 226 0 115 8 226 0 116 8 226 0 118 8 226 0 121 8 226 0 123 8 226 0 125 8 226 0 130 8 226 0 146 8 226 0 150 8 226 0 151 8 226 0 152 8 226 0 171 8 226 0 177 8 226 0 179 8 226 0 186 8 226 0 188 8 226 0 190 8 226 0 201 8 226 0 207 8 226 0 209 8 226 0 210 8 226 0 211 8 226 0 212 8 226 0 214 8 226 0 215 19 117 1 182] 
#[0 19 121 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 8 230 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 125 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 129 0 215 6 137 0 236] 
#[1 4 127 0 1 6 41 0 3 8 234 0 4 4 131 0 5 8 234 0 6 6 45 0 7 8 234 0 8 6 49 0 9 8 234 0 10 8 234 0 11 6 53 0 12 8 234 0 13 4 135 0 14 6 57 0 15 8 234 0 16 8 234 0 17 6 61 0 19 6 65 0 20 8 234 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 8 234 0 28 8 234 0 32 6 93 0 34 6 97 0 35 8 234 0 38 8 234 0 45 8 234 0 80 8 234 0 83 8 234 0 87 8 234 0 90 8 234 0 99 8 234 0 105 8 234 0 108 8 234 0 110 8 234 0 115 6 101 0 116 6 105 0 118 8 234 0 121 8 234 0 123 6 109 0 125 6 113 0 130 8 234 0 146 6 117 0 150 6 121 0 151 8 234 0 152 8 234 0 171 8 234 0 177 8 234 0 179 8 234 0 186 8 234 0 188 8 234 0 190 8 234 0 201 6 125 0 207 6 129 0 209 8 234 0 210 6 133 0 211 8 234 0 212 8 234 0 214 8 234 0 215 6 137 0 236] 
#[0 19 133 0 88] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 19 137 0 215 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 141 1 217 19 141 1 221 9 177 1 222 19 141 1 226 9 185 1 227 19 141 1 228 19 141 1 229 19 141 1 230 19 141 1 231 19 141 1 232 19 141 1 233 19 141 1 234 19 141 1 235 19 141 1 236 19 141 1 238 19 141 1 239 19 141 1 240 19 141 1 241 19 141 1 242 19 141 1 246 19 141 1 248 19 141 2 1 19 141 2 2 19 141 2 3 19 141 2 4 19 141 2 5 19 141 2 7 19 141 2 12 19 141 2 13 19 141 2 14 19 141 2 15 19 141 2 19 19 141 2 20 19 141 2 21 19 141 2 22 19 141 2 24 19 141 2 26 19 141 2 27 19 141 2 28 19 141 2 30 19 141 2 32 19 141 2 33 19 141 2 34 19 141 2 35 19 141 2 36 19 141 2 41 19 141 2 45 19 141 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 19 145 0 6 3 137 0 215 19 145 0 237] 
#[0 8 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 170 0 1 8 170 0 3 8 170 0 4 4 139 0 5 8 170 0 6 8 170 0 7 8 170 0 8 8 170 0 9 8 170 0 10 8 170 0 11 8 170 0 12 8 170 0 13 8 170 0 14 8 170 0 15 8 170 0 16 8 170 0 17 8 170 0 19 8 170 0 20 8 170 0 21 8 170 0 22 8 170 0 23 8 170 0 24 8 170 0 25 8 170 0 26 8 170 0 27 8 170 0 28 19 9 0 29 8 170 0 32 8 170 0 34 8 170 0 35 8 170 0 37 8 170 0 38 8 170 0 45 8 170 0 80 8 170 0 83 8 170 0 87 8 170 0 90 8 170 0 99 8 170 0 105 8 170 0 108 8 170 0 110 8 170 0 115 8 170 0 116 8 170 0 118 8 170 0 121 8 170 0 123 8 170 0 125 8 170 0 130 8 170 0 146 8 170 0 150 8 170 0 151 8 170 0 152 8 170 0 171 8 170 0 177 8 170 0 179 8 170 0 186 8 170 0 188 8 170 0 190 8 170 0 201 8 170 0 207 8 170 0 209 8 170 0 210 8 170 0 211 8 170 0 212 8 170 0 214 8 170 0 215 19 149 0 236 19 101 1 55 19 9 1 57 7 217 1 94 2 101 1 95 2 105 1 96 19 13 1 99 7 225 1 184] 
#[0 8 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 246 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 250 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 254 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 2 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 6 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 10 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 4 143 0 1 4 147 0 5 2 253 0 9 3 1 0 12 4 151 0 14 4 155 0 31 4 159 0 32 4 163 0 40 3 13 0 42 4 167 0 44 4 171 0 48 4 175 0 49 4 179 0 50 4 183 0 51 4 187 0 52 4 191 0 53 4 195 0 54 4 199 0 55 4 203 0 56 4 207 0 57 4 211 0 58 4 215 0 59 4 219 0 60 4 223 0 61 4 227 0 62 4 231 0 63 4 235 0 64 4 239 0 65 4 243 0 69 4 247 0 75 4 251 0 76 4 255 0 82 5 3 0 85 5 7 0 99 4 163 0 100 5 11 0 102 5 15 0 103 5 19 0 107 5 23 0 113 4 163 0 120 5 27 0 126 5 31 0 128 5 35 0 134 5 39 0 135 5 43 0 138 1 194 0 140 5 47 0 143 5 51 0 170 5 55 0 175 5 59 0 176 5 63 0 182 4 163 0 184 5 67 0 192 5 71 0 193 5 75 0 194 5 79 0 195 5 83 0 196 5 87 0 213 19 153 0 215 5 91 0 219 5 95 0 220 5 99 0 222 5 103 0 223 5 107 0 224 5 111 0 225 5 115 0 227 5 119 0 229 3 177 0 235 3 181 0 236 3 189 0 238 8 121 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 121 2 48 8 121 2 50 8 121 2 51 8 121 2 52 8 121 2 53 8 121 2 54 8 121 2 55 8 121 2 56 8 121 2 57 8 121 2 64 8 121 2 65 8 121 2 66 4 21 2 67 8 121 2 68 8 121 2 69 8 121 2 77 8 121 2 78 8 121 2 86 8 121 2 91 8 121 2 92 8 121 2 93 8 121 2 94 8 121 2 95 4 65 2 96 8 121 2 97 8 121 2 98 8 121 2 99 8 121 2 100 8 121 2 101 8 121 2 102 8 121 2 103 8 121 2 104 8 121 2 105 8 121 2 106 8 121 2 107 8 121 2 108 8 121 2 109 8 121 2 110 8 121 2 111 8 121 2 112 8 121 2 113 8 121 2 114 8 121 2 115 8 121 2 116 4 149 2 117 8 121 2 118 8 121 2 119 8 121 2 120 8 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 121 2 158 8 121 2 159] 
#[0 9 14 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 18 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 22 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 157 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 157 2 48 19 157 2 50 19 157 2 51 19 157 2 52 19 157 2 53 19 157 2 54 19 157 2 55 19 157 2 56 19 157 2 57 19 157 2 64 19 157 2 65 19 157 2 66 4 21 2 67 19 157 2 68 19 157 2 69 19 157 2 77 19 157 2 78 19 157 2 86 19 157 2 91 19 157 2 92 19 157 2 93 19 157 2 94 19 157 2 95 4 65 2 96 19 157 2 97 19 157 2 98 19 157 2 99 19 157 2 100 19 157 2 101 19 157 2 102 19 157 2 103 19 157 2 104 19 157 2 105 19 157 2 106 19 157 2 107 19 157 2 108 19 157 2 109 19 157 2 110 19 157 2 111 19 157 2 112 19 157 2 113 19 157 2 114 19 157 2 115 19 157 2 116 4 149 2 117 19 157 2 118 19 157 2 119 19 157 2 120 19 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 19 157 2 158 19 157 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 19 161 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 165 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 165 2 48 19 165 2 50 19 165 2 51 19 165 2 52 19 165 2 53 19 165 2 54 19 165 2 55 19 165 2 56 19 165 2 57 19 165 2 64 19 165 2 65 19 165 2 66 4 21 2 67 19 165 2 68 19 165 2 69 19 165 2 77 19 165 2 78 19 165 2 86 19 165 2 91 19 165 2 92 19 165 2 93 19 165 2 94 19 165 2 95 4 65 2 96 19 165 2 97 19 165 2 98 19 165 2 99 19 165 2 100 19 165 2 101 19 165 2 102 19 165 2 103 19 165 2 104 19 165 2 105 19 165 2 106 19 165 2 107 19 165 2 108 19 165 2 109 19 165 2 110 19 165 2 111 19 165 2 112 19 165 2 113 19 165 2 114 19 165 2 115 19 165 2 116 4 149 2 117 19 165 2 118 19 165 2 119 19 165 2 120 19 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 19 165 2 158 19 165 2 159] 
#[1 19 169 0 215 15 37 0 229 19 173 2 132 15 45 2 135] 
#[1 19 177 0 215 5 149 0 229 19 181 2 131] 
#[1 19 185 0 45 15 37 0 229 19 189 2 132 15 45 2 135] 
#[1 2 69 0 24 19 193 0 37 19 197 0 240] 
#[1 19 201 0 45 19 205 0 215] 
#[1 9 26 0 1 9 26 0 3 9 26 0 4 9 26 0 5 9 26 0 6 9 26 0 7 9 26 0 8 9 26 0 9 9 26 0 10 9 26 0 11 9 26 0 12 9 26 0 13 9 26 0 14 9 26 0 15 9 26 0 16 9 26 0 17 9 26 0 19 9 26 0 20 9 26 0 21 9 26 0 22 9 26 0 23 9 26 0 24 9 26 0 25 9 26 0 26 9 26 0 27 9 26 0 28 9 26 0 32 9 26 0 34 9 26 0 35 9 26 0 38 9 26 0 45 9 26 0 80 9 26 0 83 9 26 0 87 9 26 0 90 9 26 0 99 9 26 0 105 9 26 0 108 9 26 0 110 9 26 0 115 9 26 0 116 9 26 0 118 9 26 0 121 9 26 0 123 9 26 0 125 9 26 0 130 9 26 0 146 9 26 0 150 9 26 0 151 9 26 0 152 9 26 0 171 9 26 0 177 9 26 0 179 9 26 0 186 9 26 0 188 9 26 0 190 9 26 0 201 9 26 0 207 9 26 0 209 9 26 0 210 9 26 0 211 9 26 0 212 9 26 0 214 9 26 0 215 19 209 2 134] 
#[1 5 149 0 229 19 213 2 131] 
#[1 19 217 0 105 10 117 0 121 19 221 0 146 19 225 0 215 19 229 2 127 10 165 2 137 10 201 2 157] 
#[1 15 37 0 229 19 233 2 132 15 45 2 135] 
#[0 9 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 19 237 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 241 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 241 2 48 19 241 2 50 19 241 2 51 19 241 2 52 19 241 2 53 19 241 2 54 19 241 2 55 19 241 2 56 19 241 2 57 19 241 2 64 19 241 2 65 19 241 2 66 4 21 2 67 19 241 2 68 19 241 2 69 19 241 2 77 19 241 2 78 19 241 2 86 19 241 2 91 19 241 2 92 19 241 2 93 19 241 2 94 19 241 2 95 4 65 2 96 19 241 2 97 19 241 2 98 19 241 2 99 19 241 2 100 19 241 2 101 19 241 2 102 19 241 2 103 19 241 2 104 19 241 2 105 19 241 2 106 19 241 2 107 19 241 2 108 19 241 2 109 19 241 2 110 19 241 2 111 19 241 2 112 19 241 2 113 19 241 2 114 19 241 2 115 19 241 2 116 4 149 2 117 19 241 2 118 19 241 2 119 19 241 2 120 19 241 2 122 4 169 2 125 4 173 2 136 19 245 2 148 19 249 2 151 4 177 2 155 19 241 2 158 19 241 2 159] 
#[1 15 37 0 229 19 253 2 132 15 45 2 135] 
#[0 9 34 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 20 1 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 20 5 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 20 5 2 48 20 5 2 50 20 5 2 51 20 5 2 52 20 5 2 53 20 5 2 54 20 5 2 55 20 5 2 56 20 5 2 57 20 5 2 64 20 5 2 65 20 5 2 66 4 21 2 67 20 5 2 68 20 5 2 69 20 5 2 77 20 5 2 78 20 5 2 86 20 5 2 91 20 5 2 92 20 5 2 93 20 5 2 94 20 5 2 95 4 65 2 96 20 5 2 97 20 5 2 98 20 5 2 99 20 5 2 100 20 5 2 101 20 5 2 102 20 5 2 103 20 5 2 104 20 5 2 105 20 5 2 106 20 5 2 107 20 5 2 108 20 5 2 109 20 5 2 110 20 5 2 111 20 5 2 112 20 5 2 113 20 5 2 114 20 5 2 115 20 5 2 116 4 149 2 117 20 5 2 118 20 5 2 119 20 5 2 120 20 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 20 5 2 158 20 5 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 20 9 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 20 9 2 48 20 9 2 50 20 9 2 51 20 9 2 52 20 9 2 53 20 9 2 54 20 9 2 55 20 9 2 56 20 9 2 57 20 9 2 64 20 9 2 65 20 9 2 66 4 21 2 67 20 9 2 68 20 9 2 69 20 9 2 77 20 9 2 78 20 9 2 86 20 9 2 91 20 9 2 92 20 9 2 93 20 9 2 94 20 9 2 95 4 65 2 96 20 9 2 97 20 9 2 98 20 9 2 99 20 9 2 100 20 9 2 101 20 9 2 102 20 9 2 103 20 9 2 104 20 9 2 105 20 9 2 106 20 9 2 107 20 9 2 108 20 9 2 109 20 9 2 110 20 9 2 111 20 9 2 112 20 9 2 113 20 9 2 114 20 9 2 115 20 9 2 116 4 149 2 117 20 9 2 118 20 9 2 119 20 9 2 120 20 9 2 122 4 169 2 125 4 173 2 136 4 177 2 155 20 9 2 158 20 9 2 159] 
#[1 5 123 0 1 6 41 0 3 9 38 0 4 5 127 0 5 9 38 0 6 6 45 0 7 9 38 0 8 6 49 0 9 9 38 0 10 9 38 0 11 6 53 0 12 9 38 0 13 5 131 0 14 6 57 0 15 9 38 0 16 9 38 0 17 6 61 0 19 6 65 0 20 9 38 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 9 38 0 28 9 38 0 32 6 93 0 34 6 97 0 35 9 38 0 38 9 38 0 45 9 38 0 80 9 38 0 83 9 38 0 87 9 38 0 90 9 38 0 99 9 38 0 105 9 38 0 108 9 38 0 110 9 38 0 115 6 101 0 116 6 105 0 118 9 38 0 121 9 38 0 123 6 109 0 125 6 113 0 130 9 38 0 146 6 117 0 150 6 121 0 151 9 38 0 152 9 38 0 171 9 38 0 177 9 38 0 179 9 38 0 186 9 38 0 188 9 38 0 190 9 38 0 201 6 125 0 207 6 129 0 209 9 38 0 210 6 133 0 211 9 38 0 212 9 38 0 214 9 38 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 20 13 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 20 17 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 20 17 2 48 20 17 2 50 20 17 2 51 20 17 2 52 20 17 2 53 20 17 2 54 20 17 2 55 20 17 2 56 20 17 2 57 20 17 2 64 20 17 2 65 20 17 2 66 4 21 2 67 20 17 2 68 20 17 2 69 20 17 2 77 20 17 2 78 20 17 2 86 20 17 2 91 20 17 2 92 20 17 2 93 20 17 2 94 20 17 2 95 4 65 2 96 20 17 2 97 20 17 2 98 20 17 2 99 20 17 2 100 20 17 2 101 20 17 2 102 20 17 2 103 20 17 2 104 20 17 2 105 20 17 2 106 20 17 2 107 20 17 2 108 20 17 2 109 20 17 2 110 20 17 2 111 20 17 2 112 20 17 2 113 20 17 2 114 20 17 2 115 20 17 2 116 4 149 2 117 20 17 2 118 20 17 2 119 20 17 2 120 20 17 2 122 4 169 2 125 4 173 2 136 4 177 2 155 20 17 2 158 20 17 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 20 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 20 21 2 48 20 21 2 50 20 21 2 51 20 21 2 52 20 21 2 53 20 21 2 54 20 21 2 55 20 21 2 56 20 21 2 57 20 21 2 64 20 21 2 65 20 21 2 66 4 21 2 67 20 21 2 68 20 21 2 69 20 21 2 77 20 21 2 78 20 21 2 86 20 21 2 91 20 21 2 92 20 21 2 93 20 21 2 94 20 21 2 95 4 65 2 96 20 21 2 97 20 21 2 98 20 21 2 99 20 21 2 100 20 21 2 101 20 21 2 102 20 21 2 103 20 21 2 104 20 21 2 105 20 21 2 106 20 21 2 107 20 21 2 108 20 21 2 109 20 21 2 110 20 21 2 111 20 21 2 112 20 21 2 113 20 21 2 114 20 21 2 115 20 21 2 116 4 149 2 117 20 21 2 118 20 21 2 119 20 21 2 120 20 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 20 21 2 158 20 21 2 159] 
#[1 5 135 0 1 6 41 0 3 9 42 0 4 5 139 0 5 9 42 0 6 6 45 0 7 9 42 0 8 6 49 0 9 9 42 0 10 9 42 0 11 6 53 0 12 9 42 0 13 5 143 0 14 6 57 0 15 9 42 0 16 9 42 0 17 6 61 0 19 6 65 0 20 9 42 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 9 42 0 28 9 42 0 32 6 93 0 34 6 97 0 35 9 42 0 38 9 42 0 45 9 42 0 80 9 42 0 83 9 42 0 87 9 42 0 90 9 42 0 99 9 42 0 105 9 42 0 108 9 42 0 110 9 42 0 115 6 101 0 116 6 105 0 118 9 42 0 121 9 42 0 123 6 109 0 125 6 113 0 130 9 42 0 146 6 117 0 150 6 121 0 151 9 42 0 152 9 42 0 171 9 42 0 177 9 42 0 179 9 42 0 186 9 42 0 188 9 42 0 190 9 42 0 201 6 125 0 207 6 129 0 209 9 42 0 210 6 133 0 211 9 42 0 212 9 42 0 214 9 42 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 20 25 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 20 25 2 48 20 25 2 50 20 25 2 51 20 25 2 52 20 25 2 53 20 25 2 54 20 25 2 55 20 25 2 56 20 25 2 57 20 25 2 64 20 25 2 65 20 25 2 66 4 21 2 67 20 25 2 68 20 25 2 69 20 25 2 77 20 25 2 78 20 25 2 86 20 25 2 91 20 25 2 92 20 25 2 93 20 25 2 94 20 25 2 95 4 65 2 96 20 25 2 97 20 25 2 98 20 25 2 99 20 25 2 100 20 25 2 101 20 25 2 102 20 25 2 103 20 25 2 104 20 25 2 105 20 25 2 106 20 25 2 107 20 25 2 108 20 25 2 109 20 25 2 110 20 25 2 111 20 25 2 112 20 25 2 113 20 25 2 114 20 25 2 115 20 25 2 116 4 149 2 117 20 25 2 118 20 25 2 119 20 25 2 120 20 25 2 122 4 169 2 125 4 173 2 136 4 177 2 155 20 25 2 158 20 25 2 159] 
#[1 5 147 0 1 6 41 0 3 9 46 0 4 5 151 0 5 9 46 0 6 6 45 0 7 9 46 0 8 6 49 0 9 9 46 0 10 9 46 0 11 6 53 0 12 9 46 0 13 5 155 0 14 6 57 0 15 9 46 0 16 9 46 0 17 6 61 0 19 6 65 0 20 9 46 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 9 46 0 28 9 46 0 32 6 93 0 34 6 97 0 35 9 46 0 38 9 46 0 45 9 46 0 80 9 46 0 83 9 46 0 87 9 46 0 90 9 46 0 99 9 46 0 105 9 46 0 108 9 46 0 110 9 46 0 115 6 101 0 116 6 105 0 118 9 46 0 121 9 46 0 123 6 109 0 125 6 113 0 130 9 46 0 146 6 117 0 150 6 121 0 151 9 46 0 152 9 46 0 171 9 46 0 177 9 46 0 179 9 46 0 186 9 46 0 188 9 46 0 190 9 46 0 201 6 125 0 207 6 129 0 209 9 46 0 210 6 133 0 211 9 46 0 212 9 46 0 214 9 46 0 215 6 137 0 236] 
#[0 9 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 9 54 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 9 58 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 9 62 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 9 66 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 20 29 0 89] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 20 33 1 68 7 41 1 69] 
#[1 0 73 0 19 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 20 37 1 68 7 41 1 69] 
#[0 20 41 0 89] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 20 45 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 20 49 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 20 53 1 87 11 125 1 88] 
#[1 4 134 0 19 4 134 0 70 4 134 0 78 4 134 0 79 4 134 0 88 4 134 0 89 4 134 0 93 4 134 0 98 4 134 0 100 11 117 0 112 4 134 0 114 4 134 0 132 4 134 0 141 4 134 0 154 4 134 0 158 4 134 0 160 4 134 0 161 4 134 0 162 4 134 0 163 4 134 0 166 4 134 0 173 4 134 0 183 4 134 0 184 4 134 0 206 20 57 1 87 11 125 1 88] 
#[0 20 61 0 131] 
#[0 20 65 0 131] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 20 69 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 20 73 1 73] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 20 77 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 20 81 1 73] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 20 85 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 20 89 1 72] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 20 93 1 73] 
#[1 3 190 0 19 3 190 0 40 3 190 0 70 3 190 0 72 3 190 0 74 3 190 0 77 3 190 0 78 3 190 0 79 3 190 0 81 3 190 0 88 3 190 0 89 3 190 0 93 3 190 0 98 3 190 0 100 3 190 0 108 3 190 0 114 3 190 0 120 3 190 0 132 3 190 0 133 3 190 0 137 3 190 0 141 3 190 0 142 3 190 0 147 3 190 0 154 3 190 0 155 3 190 0 156 3 190 0 158 3 190 0 160 3 190 0 161 3 190 0 162 3 190 0 163 3 190 0 166 3 190 0 173 3 190 0 174 3 190 0 183 3 190 0 184 3 190 0 203 3 190 0 205 3 190 0 206 20 97 1 72] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 20 101 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 20 105 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 20 109 1 79] 
#[1 4 170 0 19 4 170 0 40 4 170 0 70 4 170 0 72 4 170 0 74 4 170 0 77 4 170 0 78 4 170 0 79 4 170 0 81 4 170 0 88 4 170 0 89 4 170 0 93 4 170 0 98 4 170 0 100 12 117 0 108 4 170 0 114 4 170 0 120 4 170 0 132 4 170 0 133 4 170 0 137 4 170 0 141 4 170 0 142 4 170 0 147 4 170 0 154 4 170 0 155 4 170 0 156 4 170 0 158 4 170 0 160 4 170 0 161 4 170 0 162 4 170 0 163 4 170 0 166 4 170 0 173 4 170 0 174 4 170 0 183 4 170 0 184 4 170 0 203 4 170 0 205 4 170 0 206 12 121 1 58 20 113 1 79] 
#[0 9 70 0 17 0 106 0 108 0 215] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 11 33 0 254 0 89 0 255 0 93 1 0 20 117 1 113] 
#[1 16 1 0 46 16 1 0 47 16 1 0 149 16 1 0 157 15 253 0 229 16 1 1 142 20 121 1 143] 
#[1 9 74 0 17 20 125 0 37 9 74 0 106 9 74 0 108 9 74 0 215] 
#[1 9 78 0 6 2 229 0 11 9 78 0 215 20 129 0 234 20 133 1 138] 
#[0 9 82 0 46 0 47 0 149 0 157 0 229] 
#[0 9 86 0 46 0 47 0 149 0 157 0 229] 
#[0 9 90 0 46 0 47 0 149 0 157 0 229] 
#[0 9 94 0 46 0 47 0 149 0 157 0 229] 
#[1 2 33 0 5 8 170 0 6 8 170 0 11 8 170 0 24 19 9 0 29 8 170 0 37 8 170 0 215 19 149 0 236 20 137 1 55 19 9 1 57 7 217 1 94 2 101 1 95 2 105 1 96 19 13 1 99 7 225 1 184] 
#[0 9 98 0 46 0 47 0 149 0 157 0 229] 
#[1 9 102 0 6 9 102 0 11 2 69 0 24 20 141 0 37 9 102 0 215 20 145 0 240] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 20 149 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 20 149 1 93] 
#[1 9 106 0 17 20 153 0 37 9 106 0 106 9 106 0 108 9 106 0 215] 
#[1 20 157 0 6 3 137 0 215 20 157 0 237] 
#[0 9 110 0 17 0 106 0 108 0 215] 
#[0 9 114 0 17 0 106 0 108 0 215] 
#[1 20 161 0 6 3 137 0 215 20 161 0 237] 
#[1 20 165 0 17 20 169 0 215] 
#[0 9 118 0 19 0 88 0 229] 
#[0 9 122 0 19 0 88 0 229] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 20 173 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[1 20 177 0 17 20 181 0 215] 
#[1 0 73 0 19 20 185 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 0 73 0 19 20 189 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 20 193 0 17 20 197 0 215] 
#[1 9 126 0 11 9 126 0 17 2 89 0 29 9 126 0 215 20 201 1 91] 
#[1 20 205 0 17 20 209 0 215] 
#[0 20 213 0 114] 
#[1 0 26 0 70 6 202 0 78 0 30 0 79 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 157 1 67 1 145 1 71 1 149 1 78 20 217 1 118 20 221 1 156 20 225 1 205] 
#[0 9 130 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 134 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 138 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 142 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 146 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 2 149 0 100 20 245 0 154 20 245 0 173 2 153 0 184 20 237 1 111 20 241 1 112 20 245 1 124] 
#[0 9 150 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 154 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 20 249 0 93 21 1 0 173 21 1 1 159] 
#[0 9 158 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 21 29 0 78 21 29 0 154 17 101 0 161 21 29 0 166 21 29 0 173 21 29 0 206 21 25 1 190 21 29 1 209] 
#[0 21 33 0 114] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 21 37 0 70 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 21 41 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 21 45 0 183 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 1 37 0 229 21 49 0 238 21 53 0 253 21 57 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 21 57 1 93] 
#[0 9 162 0 6 0 11 0 215] 
#[1 21 65 0 6 2 229 0 11 3 137 0 215 21 61 0 234 21 65 0 237 21 69 0 245] 
#[1 9 166 0 6 9 166 0 11 16 129 0 37 9 166 0 215 21 73 0 249] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 21 77 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 21 81 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[1 21 85 0 17 21 89 0 215] 
#[1 2 125 0 79 2 129 0 89 1 205 0 98 2 133 0 114 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 243 1 205 1 54] 
#[1 16 249 0 40 16 249 0 98 2 149 0 100 16 249 0 120 21 101 0 133 16 249 0 142 16 249 0 154 16 249 0 155 16 249 0 156 16 249 0 158 16 249 0 160 16 249 0 162 16 249 0 163 16 249 0 173 16 249 0 174 2 153 0 184 16 249 0 243 21 93 1 111 21 97 1 112 16 249 1 122 21 101 1 123] 
#[1 21 105 0 77 17 17 0 98 17 17 0 154 17 17 0 160 17 17 0 162 17 17 0 163 17 17 0 173 17 17 0 243 17 17 1 133] 
#[1 17 33 0 98 17 33 0 160 17 33 0 162 17 33 0 163 17 33 0 174 21 109 0 184 17 33 0 243 17 33 1 151] 
#[1 21 113 0 74 21 117 0 93 17 57 0 98 17 57 0 160 17 57 0 162 17 57 0 163 17 57 0 173 17 57 0 174 17 57 0 243 17 57 1 158] 
#[1 21 121 0 72 17 73 0 98 17 73 0 160 17 73 0 162 17 73 0 163 17 73 0 173 17 73 0 243 17 73 1 168] 
#[1 17 93 0 81 17 93 0 98 17 93 0 160 17 93 0 162 17 93 0 163 17 93 0 166 17 93 0 173 17 93 0 174 17 93 0 205 14 225 0 229 17 93 0 243 17 93 1 175 21 125 1 176 14 177 1 179 14 181 1 180 14 185 1 183] 
#[1 17 125 0 78 17 125 0 98 17 125 0 120 17 125 0 142 17 125 0 154 17 125 0 155 17 125 0 156 17 125 0 160 17 101 0 161 17 125 0 162 17 125 0 163 17 125 0 166 17 125 0 173 17 125 0 174 17 125 0 206 17 125 0 243 21 129 1 190 17 125 1 206 17 125 1 207] 
#[1 17 133 0 78 17 133 0 98 17 133 0 120 17 133 0 133 17 133 0 142 17 133 0 154 17 133 0 155 17 133 0 156 17 133 0 160 17 101 0 161 17 133 0 162 17 133 0 163 17 133 0 166 17 133 0 173 17 133 0 174 17 133 0 206 17 133 0 243 21 133 1 190 17 133 1 206 17 133 1 207 17 133 1 208] 
#[1 17 141 0 98 17 141 0 142 17 141 0 154 17 141 0 155 17 141 0 156 17 141 0 160 21 137 0 161 17 141 0 162 17 141 0 163 17 141 0 173 17 141 0 174 17 141 0 243 17 141 1 206] 
#[0 9 170 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 174 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 178 0 40 0 98 0 100 0 120 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 182 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 186 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 190 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 194 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 198 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 202 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 206 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 210 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[1 21 141 0 106 21 145 0 108 21 149 0 215 21 153 1 102 21 157 1 125 21 161 1 144] 
#[1 21 141 0 106 21 145 0 108 21 165 0 215 21 153 1 102 21 169 1 125 21 161 1 144] 
#[0 9 214 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[1 4 138 0 40 4 138 0 98 4 138 0 100 4 138 0 120 4 138 0 142 4 138 0 154 4 138 0 155 4 138 0 156 4 138 0 158 4 138 0 160 4 138 0 162 4 138 0 163 4 138 0 173 4 138 0 174 4 138 0 184 21 173 1 115] 
#[1 21 197 0 36 21 197 0 41 21 185 0 100 21 189 0 184 21 197 0 197 21 197 1 134] 
#[0 9 218 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 9 222 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 9 226 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 9 230 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 9 234 0 98 0 160 0 162 0 163 0 174 0 184] 
#[0 21 201 0 138] 
#[0 9 238 0 98 0 160 0 162 0 163 0 174 0 184] 
#[0 9 242 0 98 0 160 0 162 0 163 0 174 0 184] 
#[0 21 205 0 93] 
#[0 21 209 0 229] 
#[0 9 246 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[0 9 250 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[0 9 254 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[0 10 2 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[1 21 213 0 229 21 217 1 169 21 221 1 172] 
#[0 10 6 0 72 0 98 0 160 0 162 0 163 0 173] 
#[0 10 10 0 72 0 98 0 160 0 162 0 163 0 173] 
#[0 10 14 0 72 0 98 0 160 0 162 0 163 0 173] 
#[0 7 14 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 22 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 30 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 46 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 10 18 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[1 21 225 0 17 21 229 0 215] 
#[0 21 233 0 229] 
#[0 7 10 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 18 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 26 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 42 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 21 145 0 108 21 237 0 215 21 241 1 102] 
#[0 10 22 0 78 0 98 0 120 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 21 245 0 17 21 145 0 108 21 249 0 215 21 253 1 102] 
#[0 10 26 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 22 1 0 229] 
#[0 10 30 0 98 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 173 0 174] 
#[1 22 5 0 17 22 9 0 215] 
#[0 10 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 10 42 0 11 10 42 0 17 2 89 0 29 10 42 0 215 22 13 1 61] 
#[1 22 17 0 17 22 21 0 215] 
#[0 22 25 0 70] 
#[1 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 16 157 1 67 1 145 1 71 1 149 1 78 16 161 1 115 16 165 1 128 16 169 1 150 16 173 1 154 16 177 1 167 16 181 1 174 12 65 1 175 16 185 1 192 16 189 1 195 16 193 1 197 12 105 1 206 12 105 1 207 12 105 1 208 22 29 1 214] 
#[0 10 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 22 61 0 137 22 37 0 147 22 61 0 154 22 61 0 163 22 61 0 173 22 61 0 174 22 61 0 203 22 61 1 215] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 22 65 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[0 22 69 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 22 73 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 22 77 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 22 81 1 73] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 22 85 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 22 89 1 73] 
#[0 22 93 0 183] 
#[0 10 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 97 0 183] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 22 101 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 22 105 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[0 10 118 0 6 0 11 0 215] 
#[1 22 109 0 215 15 37 0 229 22 113 2 132 15 45 2 135] 
#[0 22 117 0 115] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 22 121 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 22 125 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 22 125 2 48 22 125 2 50 22 125 2 51 22 125 2 52 22 125 2 53 22 125 2 54 22 125 2 55 22 125 2 56 22 125 2 57 22 125 2 64 22 125 2 65 22 125 2 66 4 21 2 67 22 125 2 68 22 125 2 69 22 125 2 77 22 125 2 78 22 125 2 86 22 125 2 91 22 125 2 92 22 125 2 93 22 125 2 94 22 125 2 95 4 65 2 96 22 125 2 97 22 125 2 98 22 125 2 99 22 125 2 100 22 125 2 101 22 125 2 102 22 125 2 103 22 125 2 104 22 125 2 105 22 125 2 106 22 125 2 107 22 125 2 108 22 125 2 109 22 125 2 110 22 125 2 111 22 125 2 112 22 125 2 113 22 125 2 114 22 125 2 115 22 125 2 116 4 149 2 117 22 125 2 118 22 125 2 119 22 125 2 120 22 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 22 125 2 158 22 125 2 159] 
#[1 5 159 0 1 6 41 0 3 10 122 0 4 5 163 0 5 10 122 0 6 6 45 0 7 10 122 0 8 6 49 0 9 10 122 0 10 10 122 0 11 6 53 0 12 10 122 0 13 5 167 0 14 6 57 0 15 10 122 0 16 10 122 0 17 6 61 0 19 6 65 0 20 10 122 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 10 122 0 28 10 122 0 32 6 93 0 34 6 97 0 35 10 122 0 38 10 122 0 45 10 122 0 80 10 122 0 83 10 122 0 87 10 122 0 90 10 122 0 99 10 122 0 105 10 122 0 108 10 122 0 110 10 122 0 115 6 101 0 116 6 105 0 118 10 122 0 121 10 122 0 123 6 109 0 125 6 113 0 130 10 122 0 146 6 117 0 150 6 121 0 151 10 122 0 152 10 122 0 171 10 122 0 177 10 122 0 179 10 122 0 186 10 122 0 188 10 122 0 190 10 122 0 201 6 125 0 207 6 129 0 209 10 122 0 210 6 133 0 211 10 122 0 212 10 122 0 214 10 122 0 215 6 137 0 236] 
#[1 15 37 0 229 22 129 2 132 15 45 2 135] 
#[0 10 126 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 22 133 0 215 15 37 0 229 22 137 2 132 15 45 2 135] 
#[1 22 141 0 6 3 137 0 215 22 141 0 237] 
#[1 22 145 0 6 3 137 0 215 22 145 0 237] 
#[0 10 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 15 0 5 1 39 0 6 1 39 0 14 0 238 0 29 1 39 0 215 12 233 0 236 5 89 1 48 5 93 1 49 22 149 2 61 22 153 2 62] 
#[1 22 157 0 6 2 229 0 11 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 3 137 0 215 1 37 0 229 4 205 0 234 22 157 0 237 5 97 1 43 1 105 1 44 1 105 1 45 1 105 1 46 5 101 1 50 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 97 1 93 22 161 1 98 22 165 2 63] 
#[0 22 169 0 228] 
#[0 10 134 0 6 0 14 0 215] 
#[1 10 138 0 6 2 25 0 14 10 138 0 215 18 89 0 235 18 93 2 60] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 22 177 0 6 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 22 173 0 234 6 137 0 236 22 177 0 237] 
#[0 22 181 0 228] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 10 142 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 10 142 0 214 10 142 0 215 6 137 0 236] 
#[1 4 22 0 1 4 22 0 3 0 147 0 5 4 22 0 7 4 22 0 9 4 22 0 11 4 22 0 12 4 22 0 14 4 22 0 15 4 22 0 19 4 22 0 20 4 22 0 22 4 22 0 23 2 69 0 24 4 22 0 25 4 22 0 26 4 22 0 27 4 22 0 34 4 22 0 35 4 22 0 116 4 22 0 118 4 22 0 125 4 22 0 130 4 22 0 150 4 22 0 151 4 22 0 207 4 22 0 209 4 22 0 211 4 22 0 214 4 22 0 215 8 5 0 236 22 185 0 240] 
#[0 10 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 229 0 11 10 150 0 214 10 150 0 215 22 189 0 234 22 193 2 82] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 22 197 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 22 197 2 48 22 197 2 50 22 197 2 51 22 197 2 52 22 197 2 53 22 197 2 54 22 197 2 55 22 197 2 56 22 197 2 57 22 197 2 64 22 197 2 65 22 197 2 66 4 21 2 67 22 197 2 68 22 197 2 69 22 197 2 77 22 197 2 78 22 197 2 86 22 197 2 91 22 197 2 92 22 197 2 93 22 197 2 94 22 197 2 95 4 65 2 96 22 197 2 97 22 197 2 98 22 197 2 99 22 197 2 100 22 197 2 101 22 197 2 102 22 197 2 103 22 197 2 104 22 197 2 105 22 197 2 106 22 197 2 107 22 197 2 108 22 197 2 109 22 197 2 110 22 197 2 111 22 197 2 112 22 197 2 113 22 197 2 114 22 197 2 115 22 197 2 116 4 149 2 117 22 197 2 118 22 197 2 119 22 197 2 120 22 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 22 197 2 158 22 197 2 159] 
#[0 10 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 158 0 1 10 158 0 3 10 158 0 4 5 171 0 5 10 158 0 6 10 158 0 7 10 158 0 8 10 158 0 9 10 158 0 10 10 158 0 11 10 158 0 12 10 158 0 13 10 158 0 14 10 158 0 15 10 158 0 16 10 158 0 17 10 158 0 19 10 158 0 20 10 158 0 21 10 158 0 22 10 158 0 23 10 158 0 24 10 158 0 25 10 158 0 26 10 158 0 27 10 158 0 28 10 158 0 32 10 158 0 34 10 158 0 35 10 158 0 37 10 158 0 38 10 158 0 45 10 158 0 80 10 158 0 83 10 158 0 87 10 158 0 90 10 158 0 99 10 158 0 105 10 158 0 108 10 158 0 110 10 158 0 115 10 158 0 116 10 158 0 118 10 158 0 121 10 158 0 123 10 158 0 125 10 158 0 130 10 158 0 146 10 158 0 150 10 158 0 151 10 158 0 152 10 158 0 171 10 158 0 177 10 158 0 179 10 158 0 186 10 158 0 188 10 158 0 190 10 158 0 201 10 158 0 207 10 158 0 209 10 158 0 210 10 158 0 211 10 158 0 212 10 158 0 213 10 158 0 214 10 158 0 215 2 93 0 236 22 201 1 94 2 101 1 95 2 105 1 96] 
#[1 10 162 0 6 2 229 0 11 10 162 0 215 22 205 0 234 22 209 1 186] 
#[1 10 166 0 1 10 166 0 3 10 166 0 4 10 166 0 5 10 166 0 6 10 166 0 7 10 166 0 8 10 166 0 9 10 166 0 10 10 166 0 11 10 166 0 12 10 166 0 13 10 166 0 14 10 166 0 15 10 166 0 16 10 166 0 17 10 166 0 19 10 166 0 20 10 166 0 21 10 166 0 22 10 166 0 23 10 166 0 24 10 166 0 25 10 166 0 26 10 166 0 27 10 166 0 28 10 166 0 32 10 166 0 34 10 166 0 35 10 166 0 38 10 166 0 45 10 166 0 80 10 166 0 83 10 166 0 87 10 166 0 90 5 175 0 99 10 166 0 105 10 166 0 108 10 166 0 110 10 166 0 115 10 166 0 116 10 166 0 118 10 166 0 121 10 166 0 123 10 166 0 125 10 166 0 130 10 166 0 146 10 166 0 150 10 166 0 151 10 166 0 152 10 166 0 171 10 166 0 177 10 166 0 179 10 166 0 186 10 166 0 188 10 166 0 190 10 166 0 201 5 189 0 204 10 166 0 207 10 166 0 209 10 166 0 210 10 166 0 211 10 166 0 212 10 166 0 214 10 166 0 215 22 213 2 79 22 213 2 80 22 213 2 85] 
#[1 22 217 0 6 3 137 0 215 22 217 0 237] 
#[0 10 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 179 0 1 5 179 0 3 5 179 0 4 5 179 0 5 5 179 0 6 5 179 0 7 5 179 0 8 5 179 0 9 5 179 0 10 5 179 0 11 5 179 0 12 5 179 0 13 5 179 0 14 5 179 0 15 5 179 0 16 5 179 0 17 5 179 0 19 5 179 0 20 5 179 0 21 5 179 0 22 5 179 0 23 5 179 0 24 5 179 0 25 5 179 0 26 5 179 0 27 5 179 0 28 4 182 0 29 5 179 0 32 5 179 0 34 5 179 0 35 5 179 0 38 5 179 0 45 5 179 0 80 5 179 0 83 5 179 0 87 5 179 0 90 5 179 0 99 5 179 0 105 5 179 0 108 5 179 0 110 5 179 0 115 5 179 0 116 5 179 0 118 5 179 0 121 5 179 0 123 5 179 0 125 5 179 0 130 5 179 0 146 5 179 0 150 5 179 0 151 5 179 0 152 5 179 0 171 5 179 0 177 5 179 0 179 5 179 0 186 5 179 0 188 5 179 0 190 5 179 0 201 5 179 0 207 5 179 0 209 5 179 0 210 5 179 0 211 5 179 0 212 5 179 0 214 5 179 0 215] 
#[1 22 221 0 6 3 137 0 215 22 221 0 237] 
#[0 10 178 0 11 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 10 182 0 6 6 45 0 7 6 49 0 9 10 182 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 10 182 0 215 6 137 0 236 22 225 2 76] 
#[0 10 186 0 6 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 10 190 0 6 6 45 0 7 6 49 0 9 10 190 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 10 190 0 215 6 137 0 236] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 97 1 43 1 105 1 44 1 105 1 45 1 105 1 46 22 229 1 50 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 5 97 1 93] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 22 233 1 218 13 221 1 220] 
#[0 22 237 0 100] 
#[1 5 183 0 1 10 194 0 3 10 194 0 4 5 187 0 5 10 194 0 6 10 194 0 7 10 194 0 8 2 253 0 9 10 194 0 10 10 194 0 11 3 1 0 12 10 194 0 13 5 191 0 14 10 194 0 15 10 194 0 16 10 194 0 17 10 194 0 19 10 194 0 20 10 194 0 21 10 194 0 22 10 194 0 23 10 194 0 24 10 194 0 25 10 194 0 26 10 194 0 27 10 194 0 28 9 33 0 30 3 5 0 31 5 195 0 32 10 194 0 34 10 194 0 35 10 194 0 38 1 190 0 40 3 13 0 42 1 65 0 44 10 194 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 10 194 0 80 9 185 0 81 3 85 0 82 10 194 0 83 9 53 0 84 1 65 0 85 10 194 0 87 9 57 0 88 10 194 0 90 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 5 199 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 10 194 0 105 9 81 0 107 10 194 0 108 10 194 0 110 1 65 0 113 10 194 0 115 10 194 0 116 10 194 0 118 1 190 0 120 10 194 0 121 10 194 0 123 10 194 0 125 1 65 0 126 3 105 0 128 9 85 0 129 10 194 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 5 203 0 146 10 194 0 150 10 194 0 151 10 194 0 152 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 5 207 0 171 1 65 0 175 1 65 0 176 10 194 0 177 9 185 0 178 10 194 0 179 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 10 194 0 186 10 194 0 188 9 129 0 189 10 194 0 190 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 10 194 0 201 9 141 0 202 9 145 0 204 10 194 0 207 9 149 0 208 10 194 0 209 10 194 0 210 10 194 0 211 10 194 0 212 3 133 0 213 10 194 0 214 10 194 0 215 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 22 241 1 217 22 241 1 221 9 177 1 222 22 241 1 226 9 185 1 227 22 241 1 228 22 241 1 229 22 241 1 230 22 241 1 231 22 241 1 232 22 241 1 233 22 241 1 234 22 241 1 235 22 241 1 236 22 241 1 238 22 241 1 239 22 241 1 240 22 241 1 241 22 241 1 242 22 241 1 246 22 241 1 248 22 241 2 1 22 241 2 2 22 241 2 3 22 241 2 4 22 241 2 5 22 241 2 7 22 241 2 12 22 241 2 13 22 241 2 14 22 241 2 15 22 241 2 19 22 241 2 20 22 241 2 21 22 241 2 22 22 241 2 24 22 241 2 26 22 241 2 27 22 241 2 28 22 241 2 30 22 241 2 32 22 241 2 33 22 241 2 34 22 241 2 35 22 241 2 36 22 241 2 41 22 241 2 45 22 241 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[0 10 198 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[1 10 202 0 1 10 202 0 3 10 202 0 4 10 202 0 5 10 202 0 6 10 202 0 7 10 202 0 8 10 202 0 9 10 202 0 10 10 202 0 11 10 202 0 12 10 202 0 13 10 202 0 14 10 202 0 15 10 202 0 16 5 211 0 17 10 202 0 19 10 202 0 20 10 202 0 21 10 202 0 22 10 202 0 23 10 202 0 24 10 202 0 25 10 202 0 26 10 202 0 27 10 202 0 28 10 202 0 32 10 202 0 34 10 202 0 35 10 202 0 38 10 202 0 45 10 202 0 80 10 202 0 83 10 202 0 87 10 202 0 90 10 202 0 99 10 202 0 105 10 202 0 108 10 202 0 110 10 202 0 115 10 202 0 116 10 202 0 118 10 202 0 121 10 202 0 123 10 202 0 125 10 202 0 130 10 202 0 146 10 202 0 150 10 202 0 151 10 202 0 152 10 202 0 171 10 202 0 177 10 202 0 179 10 202 0 186 10 202 0 188 10 202 0 190 10 202 0 201 10 202 0 207 10 202 0 209 10 202 0 210 10 202 0 211 10 202 0 212 10 202 0 214 10 202 0 215 18 209 1 224 22 245 1 225] 
#[0 10 206 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[0 22 249 0 215] 
#[0 10 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 214 0 1 10 214 0 3 10 214 0 4 10 214 0 5 10 214 0 6 10 214 0 7 10 214 0 8 10 214 0 9 10 214 0 10 10 214 0 11 10 214 0 12 10 214 0 13 10 214 0 14 10 214 0 15 10 214 0 16 5 215 0 17 10 214 0 19 10 214 0 20 10 214 0 21 10 214 0 22 10 214 0 23 10 214 0 24 10 214 0 25 10 214 0 26 10 214 0 27 10 214 0 28 10 214 0 32 10 214 0 34 10 214 0 35 10 214 0 38 10 214 0 45 10 214 0 80 10 214 0 83 10 214 0 87 10 214 0 90 10 214 0 99 10 214 0 105 10 214 0 108 10 214 0 110 10 214 0 115 10 214 0 116 10 214 0 118 10 214 0 121 10 214 0 123 10 214 0 125 10 214 0 130 10 214 0 146 10 214 0 150 10 214 0 151 10 214 0 152 10 214 0 171 10 214 0 177 10 214 0 179 10 214 0 186 10 214 0 188 10 214 0 190 10 214 0 201 10 214 0 207 10 214 0 209 10 214 0 210 10 214 0 211 10 214 0 212 10 214 0 214 10 214 0 215 22 253 1 224] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 23 1 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 1 1 93] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 23 5 1 218 13 221 1 220] 
#[1 5 219 0 1 6 41 0 3 10 218 0 4 5 223 0 5 10 218 0 6 6 45 0 7 10 218 0 8 6 49 0 9 10 218 0 10 10 218 0 11 6 53 0 12 10 218 0 13 5 227 0 14 6 57 0 15 10 218 0 16 10 218 0 17 6 61 0 19 6 65 0 20 10 218 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 10 218 0 28 10 218 0 32 6 93 0 34 6 97 0 35 10 218 0 38 10 218 0 45 10 218 0 80 10 218 0 83 10 218 0 87 10 218 0 90 10 218 0 99 10 218 0 105 10 218 0 108 10 218 0 110 10 218 0 115 6 101 0 116 6 105 0 118 10 218 0 121 10 218 0 123 6 109 0 125 6 113 0 130 10 218 0 146 6 117 0 150 6 121 0 151 10 218 0 152 10 218 0 171 10 218 0 177 10 218 0 179 10 218 0 186 10 218 0 188 10 218 0 190 10 218 0 201 6 125 0 207 6 129 0 209 10 218 0 210 6 133 0 211 10 218 0 212 10 218 0 214 10 218 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 23 9 0 37 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 23 13 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 17 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 17 2 48 23 17 2 50 23 17 2 51 23 17 2 52 23 17 2 53 23 17 2 54 23 17 2 55 23 17 2 56 23 17 2 57 23 17 2 64 23 17 2 65 23 17 2 66 4 21 2 67 23 17 2 68 23 17 2 69 23 17 2 77 23 17 2 78 23 17 2 86 23 17 2 91 23 17 2 92 23 17 2 93 23 17 2 94 23 17 2 95 4 65 2 96 23 17 2 97 23 17 2 98 23 17 2 99 23 17 2 100 23 17 2 101 23 17 2 102 23 17 2 103 23 17 2 104 23 17 2 105 23 17 2 106 23 17 2 107 23 17 2 108 23 17 2 109 23 17 2 110 23 17 2 111 23 17 2 112 23 17 2 113 23 17 2 114 23 17 2 115 23 17 2 116 4 149 2 117 23 17 2 118 23 17 2 119 23 17 2 120 23 17 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 17 2 158 23 17 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 21 2 48 23 21 2 50 23 21 2 51 23 21 2 52 23 21 2 53 23 21 2 54 23 21 2 55 23 21 2 56 23 21 2 57 23 21 2 64 23 21 2 65 23 21 2 66 4 21 2 67 23 21 2 68 23 21 2 69 23 21 2 77 23 21 2 78 23 21 2 86 23 21 2 91 23 21 2 92 23 21 2 93 23 21 2 94 23 21 2 95 4 65 2 96 23 21 2 97 23 21 2 98 23 21 2 99 23 21 2 100 23 21 2 101 23 21 2 102 23 21 2 103 23 21 2 104 23 21 2 105 23 21 2 106 23 21 2 107 23 21 2 108 23 21 2 109 23 21 2 110 23 21 2 111 23 21 2 112 23 21 2 113 23 21 2 114 23 21 2 115 23 21 2 116 4 149 2 117 23 21 2 118 23 21 2 119 23 21 2 120 23 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 21 2 158 23 21 2 159] 
#[0 23 25 0 127] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 23 29 0 215 6 137 0 236] 
#[1 10 222 0 1 10 222 0 3 10 222 0 4 10 222 0 5 10 222 0 6 10 222 0 7 10 222 0 8 10 222 0 9 10 222 0 10 5 231 0 11 10 222 0 12 10 222 0 13 10 222 0 14 10 222 0 15 10 222 0 16 10 222 0 17 10 222 0 19 10 222 0 20 10 222 0 21 10 222 0 22 10 222 0 23 10 222 0 24 10 222 0 25 10 222 0 26 10 222 0 27 10 222 0 28 10 222 0 32 10 222 0 34 10 222 0 35 10 222 0 38 10 222 0 45 10 222 0 80 10 222 0 83 10 222 0 87 10 222 0 90 10 222 0 99 10 222 0 105 10 222 0 108 10 222 0 110 10 222 0 115 10 222 0 116 10 222 0 118 10 222 0 121 10 222 0 123 10 222 0 125 10 222 0 130 10 222 0 146 10 222 0 150 10 222 0 151 10 222 0 152 10 222 0 171 10 222 0 177 10 222 0 179 10 222 0 186 10 222 0 188 10 222 0 190 10 222 0 201 10 222 0 207 10 222 0 209 10 222 0 210 10 222 0 211 10 222 0 212 10 222 0 214 10 222 0 215 23 33 0 234 23 37 2 43] 
#[0 23 41 0 110] 
#[0 10 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 4 209 0 6 2 253 0 9 2 229 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 8 1 0 144 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 13 21 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 4 205 0 234 3 177 0 235 3 181 0 236 4 209 0 237 3 189 0 238 23 45 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 4 213 1 97 4 217 1 98 13 29 1 185 13 33 1 188 23 45 2 48 23 45 2 50 23 45 2 51 23 45 2 52 23 45 2 53 23 45 2 54 23 45 2 55 23 45 2 56 23 45 2 57 23 45 2 64 23 45 2 65 23 45 2 66 4 21 2 67 23 45 2 68 23 45 2 69 23 45 2 77 23 45 2 78 23 45 2 86 23 45 2 91 23 45 2 92 23 45 2 93 23 45 2 94 23 45 2 95 4 65 2 96 23 45 2 97 23 45 2 98 23 45 2 99 23 45 2 100 23 45 2 101 23 45 2 102 23 45 2 103 23 45 2 104 23 45 2 105 23 45 2 106 23 45 2 107 23 45 2 108 23 45 2 109 23 45 2 110 23 45 2 111 23 45 2 112 23 45 2 113 23 45 2 114 23 45 2 115 23 45 2 116 4 149 2 117 23 45 2 118 23 45 2 119 23 45 2 120 23 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 45 2 158 23 45 2 159] 
#[0 23 49 0 37] 
#[1 10 230 0 1 10 230 0 3 10 230 0 4 5 235 0 5 10 230 0 6 10 230 0 7 10 230 0 8 10 230 0 9 10 230 0 10 10 230 0 11 10 230 0 12 10 230 0 13 10 230 0 14 10 230 0 15 10 230 0 16 10 230 0 17 10 230 0 19 10 230 0 20 10 230 0 21 10 230 0 22 10 230 0 23 10 230 0 24 10 230 0 25 10 230 0 26 10 230 0 27 10 230 0 28 10 230 0 32 10 230 0 34 10 230 0 35 10 230 0 37 10 230 0 38 10 230 0 45 10 230 0 80 10 230 0 83 10 230 0 87 10 230 0 90 10 230 0 99 10 230 0 105 10 230 0 108 10 230 0 110 10 230 0 115 10 230 0 116 10 230 0 118 10 230 0 121 10 230 0 123 10 230 0 125 10 230 0 130 10 230 0 146 10 230 0 150 10 230 0 151 10 230 0 152 10 230 0 171 10 230 0 177 10 230 0 179 10 230 0 186 10 230 0 188 10 230 0 190 10 230 0 201 10 230 0 207 10 230 0 209 10 230 0 210 10 230 0 211 10 230 0 212 10 230 0 214 10 230 0 215 19 149 0 236 7 217 1 94 2 101 1 95 2 105 1 96 23 53 1 99 7 225 1 184] 
#[0 10 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 57 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 57 2 48 23 57 2 50 23 57 2 51 23 57 2 52 23 57 2 53 23 57 2 54 23 57 2 55 23 57 2 56 23 57 2 57 23 57 2 64 23 57 2 65 23 57 2 66 4 21 2 67 23 57 2 68 23 57 2 69 23 57 2 77 23 57 2 78 23 57 2 86 23 57 2 91 23 57 2 92 23 57 2 93 23 57 2 94 23 57 2 95 4 65 2 96 23 57 2 97 23 57 2 98 23 57 2 99 23 57 2 100 23 57 2 101 23 57 2 102 23 57 2 103 23 57 2 104 23 57 2 105 23 57 2 106 23 57 2 107 23 57 2 108 23 57 2 109 23 57 2 110 23 57 2 111 23 57 2 112 23 57 2 113 23 57 2 114 23 57 2 115 23 57 2 116 4 149 2 117 23 57 2 118 23 57 2 119 23 57 2 120 23 57 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 57 2 158 23 57 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 8 9 0 6 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 12 249 0 234 6 137 0 236 8 9 0 237] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 23 61 1 218 13 221 1 220] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 23 65 0 17 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 23 69 0 215 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 197 1 217 18 197 1 221 9 177 1 222 23 73 1 223 18 209 1 224 18 213 1 225 18 197 1 226 9 185 1 227 18 197 1 228 18 197 1 229 18 197 1 230 18 197 1 231 18 197 1 232 18 197 1 233 18 197 1 234 18 197 1 235 18 197 1 236 18 197 1 238 18 197 1 239 18 197 1 240 18 197 1 241 18 197 1 242 18 197 1 246 18 197 1 248 18 197 2 1 18 197 2 2 18 197 2 3 18 197 2 4 18 197 2 5 18 197 2 7 18 197 2 12 18 197 2 13 18 197 2 14 18 197 2 15 18 197 2 19 18 197 2 20 18 197 2 21 18 197 2 22 18 197 2 24 18 197 2 26 18 197 2 27 18 197 2 28 18 197 2 30 18 197 2 32 18 197 2 33 18 197 2 34 18 197 2 35 18 197 2 36 18 197 2 41 18 197 2 45 18 197 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 23 77 1 218 13 221 1 220] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 81 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 81 2 48 23 81 2 50 23 81 2 51 23 81 2 52 23 81 2 53 23 81 2 54 23 81 2 55 23 81 2 56 23 81 2 57 23 81 2 64 23 81 2 65 23 81 2 66 4 21 2 67 23 81 2 68 23 81 2 69 23 81 2 77 23 81 2 78 23 81 2 86 23 81 2 91 23 81 2 92 23 81 2 93 23 81 2 94 23 81 2 95 4 65 2 96 23 81 2 97 23 81 2 98 23 81 2 99 23 81 2 100 23 81 2 101 23 81 2 102 23 81 2 103 23 81 2 104 23 81 2 105 23 81 2 106 23 81 2 107 23 81 2 108 23 81 2 109 23 81 2 110 23 81 2 111 23 81 2 112 23 81 2 113 23 81 2 114 23 81 2 115 23 81 2 116 4 149 2 117 23 81 2 118 23 81 2 119 23 81 2 120 23 81 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 81 2 158 23 81 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 23 85 0 234 6 137 0 236] 
#[1 23 89 0 12 23 93 0 220 14 85 0 221 14 85 0 229 14 85 1 222] 
#[0 23 97 0 139] 
#[0 10 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 10 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 0 159 0 6 2 253 0 9 4 66 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 163 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 8 237 0 228 3 173 0 229 3 177 0 235 3 181 0 236 23 101 0 237 3 189 0 238 8 245 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 245 2 48 8 245 2 50 8 245 2 51 8 245 2 52 8 245 2 53 8 245 2 54 8 245 2 55 8 245 2 56 8 245 2 57 8 245 2 64 8 245 2 65 8 245 2 66 4 21 2 67 8 245 2 68 8 245 2 69 23 105 2 70 8 253 2 71 9 1 2 73 9 5 2 74 8 245 2 77 8 245 2 78 8 245 2 86 8 245 2 91 8 245 2 92 8 245 2 93 8 245 2 94 8 245 2 95 4 65 2 96 8 245 2 97 8 245 2 98 8 245 2 99 8 245 2 100 8 245 2 101 8 245 2 102 8 245 2 103 8 245 2 104 8 245 2 105 8 245 2 106 8 245 2 107 8 245 2 108 8 245 2 109 8 245 2 110 8 245 2 111 8 245 2 112 8 245 2 113 8 245 2 114 8 245 2 115 8 245 2 116 4 149 2 117 8 245 2 118 8 245 2 119 8 245 2 120 8 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 245 2 158 8 245 2 159] 
#[0 10 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 250 0 1 10 250 0 3 10 250 0 4 10 250 0 5 10 250 0 6 10 250 0 7 10 250 0 8 10 250 0 9 10 250 0 10 5 239 0 11 10 250 0 12 10 250 0 13 10 250 0 14 10 250 0 15 10 250 0 16 10 250 0 17 10 250 0 19 10 250 0 20 10 250 0 21 10 250 0 22 10 250 0 23 10 250 0 24 10 250 0 25 10 250 0 26 10 250 0 27 10 250 0 28 10 250 0 32 10 250 0 34 10 250 0 35 10 250 0 38 10 250 0 45 10 250 0 80 10 250 0 83 10 250 0 87 10 250 0 90 10 250 0 99 10 250 0 105 10 250 0 108 10 250 0 110 10 250 0 115 10 250 0 116 10 250 0 118 10 250 0 121 10 250 0 123 10 250 0 125 10 250 0 130 10 250 0 146 10 250 0 150 10 250 0 151 10 250 0 152 10 250 0 171 10 250 0 177 10 250 0 179 10 250 0 186 10 250 0 188 10 250 0 190 10 250 0 201 10 250 0 207 10 250 0 209 10 250 0 210 10 250 0 211 10 250 0 212 10 250 0 214 10 250 0 215 23 109 0 234 23 113 2 38] 
#[1 2 245 0 1 2 33 0 5 0 159 0 6 2 253 0 9 4 66 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 163 0 215 3 141 0 219 13 21 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 8 237 0 228 3 173 0 229 3 177 0 235 3 181 0 236 8 241 0 237 3 189 0 238 13 37 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 29 1 185 13 33 1 188 13 37 2 48 13 37 2 50 13 37 2 51 13 37 2 52 13 37 2 53 13 37 2 54 13 37 2 55 13 37 2 56 13 37 2 57 13 37 2 64 13 37 2 65 13 37 2 66 4 21 2 67 13 37 2 68 13 37 2 69 8 249 2 70 8 253 2 71 9 1 2 73 9 5 2 74 13 37 2 77 13 37 2 78 13 37 2 86 13 37 2 91 13 37 2 92 13 37 2 93 13 37 2 94 13 37 2 95 4 65 2 96 13 37 2 97 13 37 2 98 13 37 2 99 13 37 2 100 13 37 2 101 13 37 2 102 13 37 2 103 13 37 2 104 13 37 2 105 13 37 2 106 13 37 2 107 13 37 2 108 13 37 2 109 13 37 2 110 13 37 2 111 13 37 2 112 13 37 2 113 13 37 2 114 13 37 2 115 13 37 2 116 4 149 2 117 13 37 2 118 13 37 2 119 13 37 2 120 13 37 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 37 2 158 13 37 2 159] 
#[0 10 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 117 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 117 2 48 23 117 2 50 23 117 2 51 23 117 2 52 23 117 2 53 23 117 2 54 23 117 2 55 23 117 2 56 23 117 2 57 23 117 2 64 23 117 2 65 23 117 2 66 4 21 2 67 23 117 2 68 23 117 2 69 23 117 2 77 23 117 2 78 23 117 2 86 23 117 2 91 23 117 2 92 23 117 2 93 23 117 2 94 23 117 2 95 4 65 2 96 23 117 2 97 23 117 2 98 23 117 2 99 23 117 2 100 23 117 2 101 23 117 2 102 23 117 2 103 23 117 2 104 23 117 2 105 23 117 2 106 23 117 2 107 23 117 2 108 23 117 2 109 23 117 2 110 23 117 2 111 23 117 2 112 23 117 2 113 23 117 2 114 23 117 2 115 23 117 2 116 4 149 2 117 23 117 2 118 23 117 2 119 23 117 2 120 23 117 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 117 2 158 23 117 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 23 121 0 215 6 137 0 236] 
#[1 11 2 0 67 11 2 0 88 23 125 1 249] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 23 129 1 218 13 221 1 220] 
#[1 11 6 0 68 11 6 0 88 11 6 0 96 23 133 2 16] 
#[0 11 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 14 0 1 11 14 0 3 11 14 0 4 11 14 0 5 11 14 0 6 11 14 0 7 11 14 0 8 11 14 0 9 11 14 0 10 5 243 0 11 11 14 0 12 11 14 0 13 11 14 0 14 11 14 0 15 11 14 0 16 11 14 0 17 11 14 0 19 11 14 0 20 11 14 0 21 11 14 0 22 11 14 0 23 11 14 0 24 11 14 0 25 11 14 0 26 11 14 0 27 11 14 0 28 11 14 0 32 11 14 0 34 11 14 0 35 11 14 0 38 11 14 0 45 11 14 0 80 11 14 0 83 11 14 0 87 11 14 0 90 11 14 0 99 11 14 0 105 11 14 0 108 11 14 0 110 11 14 0 115 11 14 0 116 11 14 0 118 11 14 0 121 11 14 0 123 11 14 0 125 11 14 0 130 11 14 0 146 11 14 0 150 11 14 0 151 11 14 0 152 11 14 0 171 11 14 0 177 11 14 0 179 11 14 0 186 11 14 0 188 11 14 0 190 11 14 0 201 11 14 0 207 11 14 0 209 11 14 0 210 11 14 0 211 11 14 0 212 11 14 0 214 11 14 0 215 23 137 0 234 23 141 1 177] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 23 145 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 23 149 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 149 1 93 23 153 2 78] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 157 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 157 2 48 23 157 2 50 23 157 2 51 23 157 2 52 23 157 2 53 23 157 2 54 23 157 2 55 23 157 2 56 23 157 2 57 23 157 2 64 23 157 2 65 23 157 2 66 4 21 2 67 23 157 2 68 23 157 2 69 23 157 2 77 23 157 2 78 23 157 2 86 23 157 2 91 23 157 2 92 23 157 2 93 23 157 2 94 23 157 2 95 4 65 2 96 23 157 2 97 23 157 2 98 23 157 2 99 23 157 2 100 23 157 2 101 23 157 2 102 23 157 2 103 23 157 2 104 23 157 2 105 23 157 2 106 23 157 2 107 23 157 2 108 23 157 2 109 23 157 2 110 23 157 2 111 23 157 2 112 23 157 2 113 23 157 2 114 23 157 2 115 23 157 2 116 4 149 2 117 23 157 2 118 23 157 2 119 23 157 2 120 23 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 157 2 158 23 157 2 159] 
#[1 11 18 0 1 11 18 0 3 11 18 0 4 11 18 0 5 11 18 0 6 11 18 0 7 11 18 0 8 11 18 0 9 11 18 0 10 5 247 0 11 11 18 0 12 11 18 0 13 11 18 0 14 11 18 0 15 11 18 0 16 11 18 0 17 11 18 0 19 11 18 0 20 11 18 0 21 11 18 0 22 11 18 0 23 11 18 0 24 11 18 0 25 11 18 0 26 11 18 0 27 11 18 0 28 11 18 0 32 11 18 0 34 11 18 0 35 11 18 0 37 11 18 0 38 11 18 0 45 11 18 0 80 11 18 0 83 11 18 0 87 11 18 0 90 11 18 0 99 11 18 0 105 11 18 0 108 11 18 0 110 11 18 0 115 11 18 0 116 11 18 0 118 11 18 0 121 11 18 0 123 11 18 0 125 11 18 0 130 11 18 0 146 11 18 0 150 11 18 0 151 11 18 0 152 11 18 0 171 11 18 0 177 11 18 0 179 11 18 0 186 11 18 0 188 11 18 0 190 11 18 0 201 11 18 0 207 11 18 0 209 11 18 0 210 11 18 0 211 11 18 0 212 11 18 0 214 11 18 0 215 23 161 0 234 23 165 1 181] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 23 169 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 23 173 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 23 177 1 218 13 221 1 220] 
#[0 23 181 0 184] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 23 185 1 218 13 221 1 220] 
#[0 11 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 23 189 0 215 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 193 1 217 23 193 1 221 9 177 1 222 23 193 1 226 9 185 1 227 23 193 1 228 23 193 1 229 23 193 1 230 23 193 1 231 23 193 1 232 23 193 1 233 23 193 1 234 23 193 1 235 23 193 1 236 23 193 1 238 23 193 1 239 23 193 1 240 23 193 1 241 23 193 1 242 23 193 1 246 23 193 1 248 23 193 2 1 23 193 2 2 23 193 2 3 23 193 2 4 23 193 2 5 23 193 2 7 23 193 2 12 23 193 2 13 23 193 2 14 23 193 2 15 23 193 2 19 23 193 2 20 23 193 2 21 23 193 2 22 23 193 2 24 23 193 2 26 23 193 2 27 23 193 2 28 23 193 2 30 23 193 2 32 23 193 2 33 23 193 2 34 23 193 2 35 23 193 2 36 23 193 2 41 23 193 2 45 23 193 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 2 245 0 1 2 33 0 5 4 209 0 6 2 253 0 9 2 229 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 13 21 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 4 205 0 234 3 177 0 235 3 181 0 236 4 209 0 237 3 189 0 238 23 45 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 4 213 1 97 4 217 1 98 13 29 1 185 13 33 1 188 23 45 2 48 23 45 2 50 23 45 2 51 23 45 2 52 23 45 2 53 23 45 2 54 23 45 2 55 23 45 2 56 23 45 2 57 23 45 2 64 23 45 2 65 23 45 2 66 4 21 2 67 23 45 2 68 23 45 2 69 23 45 2 77 23 45 2 78 23 45 2 86 23 45 2 91 23 45 2 92 23 45 2 93 23 45 2 94 23 45 2 95 4 65 2 96 23 45 2 97 23 45 2 98 23 45 2 99 23 45 2 100 23 45 2 101 23 45 2 102 23 45 2 103 23 45 2 104 23 45 2 105 23 45 2 106 23 45 2 107 23 45 2 108 23 45 2 109 23 45 2 110 23 45 2 111 23 45 2 112 23 45 2 113 23 45 2 114 23 45 2 115 23 45 2 116 4 149 2 117 23 45 2 118 23 45 2 119 23 45 2 120 23 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 45 2 158 23 45 2 159] 
#[1 5 251 0 1 5 255 0 5 2 253 0 9 3 1 0 12 6 3 0 14 6 7 0 31 6 11 0 32 6 15 0 40 3 13 0 42 6 19 0 44 6 23 0 48 6 27 0 49 6 31 0 50 6 35 0 51 6 39 0 52 6 43 0 53 6 47 0 54 6 51 0 55 6 55 0 56 6 59 0 57 6 63 0 58 6 67 0 59 6 71 0 60 6 75 0 61 6 79 0 62 6 83 0 63 6 87 0 64 6 91 0 65 6 95 0 69 6 99 0 75 6 103 0 76 6 107 0 82 6 111 0 85 6 115 0 99 6 15 0 100 6 119 0 102 6 123 0 103 6 127 0 107 6 131 0 113 6 15 0 120 6 135 0 126 6 139 0 128 6 143 0 134 6 147 0 135 6 151 0 138 3 130 0 140 6 155 0 143 6 159 0 170 6 163 0 175 6 167 0 176 6 171 0 182 6 15 0 184 6 175 0 192 6 179 0 193 6 183 0 194 6 187 0 195 6 191 0 196 6 195 0 213 6 199 0 219 6 203 0 220 6 207 0 222 6 211 0 223 6 215 0 224 6 219 0 225 6 223 0 227 6 227 0 229 3 177 0 235 3 181 0 236 3 189 0 238 13 121 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 121 2 48 13 121 2 50 13 121 2 51 13 121 2 52 13 121 2 53 13 121 2 54 13 121 2 55 13 121 2 56 13 121 2 57 13 121 2 64 13 121 2 65 13 121 2 66 4 21 2 67 13 121 2 68 13 121 2 69 13 121 2 77 13 121 2 78 13 121 2 86 13 121 2 91 13 121 2 92 13 121 2 93 13 121 2 94 13 121 2 95 4 65 2 96 13 121 2 97 13 121 2 98 13 121 2 99 13 121 2 100 13 121 2 101 13 121 2 102 13 121 2 103 13 121 2 104 13 121 2 105 13 121 2 106 13 121 2 107 13 121 2 108 13 121 2 109 13 121 2 110 13 121 2 111 13 121 2 112 13 121 2 113 13 121 2 114 13 121 2 115 13 121 2 116 4 149 2 117 13 121 2 118 13 121 2 119 13 121 2 120 13 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 121 2 158 13 121 2 159] 
#[1 6 231 0 1 6 41 0 3 11 26 0 4 6 235 0 5 11 26 0 6 6 45 0 7 11 26 0 8 6 49 0 9 11 26 0 10 11 26 0 11 6 53 0 12 11 26 0 13 6 239 0 14 6 57 0 15 11 26 0 16 11 26 0 17 6 61 0 19 6 65 0 20 11 26 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 26 0 28 11 26 0 32 6 93 0 34 6 97 0 35 11 26 0 38 11 26 0 45 11 26 0 80 11 26 0 83 11 26 0 87 11 26 0 90 11 26 0 99 11 26 0 105 11 26 0 108 11 26 0 110 11 26 0 115 6 101 0 116 6 105 0 118 11 26 0 121 11 26 0 123 6 109 0 125 6 113 0 130 11 26 0 146 6 117 0 150 6 121 0 151 11 26 0 152 11 26 0 171 11 26 0 177 11 26 0 179 11 26 0 186 11 26 0 188 11 26 0 190 11 26 0 201 6 125 0 207 6 129 0 209 11 26 0 210 6 133 0 211 11 26 0 212 11 26 0 214 11 26 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 197 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 197 2 48 23 197 2 50 23 197 2 51 23 197 2 52 23 197 2 53 23 197 2 54 23 197 2 55 23 197 2 56 23 197 2 57 23 197 2 64 23 197 2 65 23 197 2 66 4 21 2 67 23 197 2 68 23 197 2 69 23 197 2 77 23 197 2 78 23 197 2 86 23 197 2 91 23 197 2 92 23 197 2 93 23 197 2 94 23 197 2 95 4 65 2 96 23 197 2 97 23 197 2 98 23 197 2 99 23 197 2 100 23 197 2 101 23 197 2 102 23 197 2 103 23 197 2 104 23 197 2 105 23 197 2 106 23 197 2 107 23 197 2 108 23 197 2 109 23 197 2 110 23 197 2 111 23 197 2 112 23 197 2 113 23 197 2 114 23 197 2 115 23 197 2 116 4 149 2 117 23 197 2 118 23 197 2 119 23 197 2 120 23 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 197 2 158 23 197 2 159] 
#[1 6 243 0 1 6 41 0 3 11 30 0 4 6 247 0 5 11 30 0 6 6 45 0 7 11 30 0 8 6 49 0 9 11 30 0 10 11 30 0 11 6 53 0 12 11 30 0 13 6 251 0 14 6 57 0 15 11 30 0 16 11 30 0 17 6 61 0 19 6 65 0 20 11 30 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 30 0 28 11 30 0 32 6 93 0 34 6 97 0 35 11 30 0 38 11 30 0 45 11 30 0 80 11 30 0 83 11 30 0 87 11 30 0 90 11 30 0 99 11 30 0 105 11 30 0 108 11 30 0 110 11 30 0 115 6 101 0 116 6 105 0 118 11 30 0 121 11 30 0 123 6 109 0 125 6 113 0 130 11 30 0 146 6 117 0 150 6 121 0 151 11 30 0 152 11 30 0 171 11 30 0 177 11 30 0 179 11 30 0 186 11 30 0 188 11 30 0 190 11 30 0 201 6 125 0 207 6 129 0 209 11 30 0 210 6 133 0 211 11 30 0 212 11 30 0 214 11 30 0 215 6 137 0 236] 
#[1 15 37 0 229 23 201 2 132 15 45 2 135] 
#[1 11 34 0 115 23 209 0 215 23 209 2 154] 
#[1 5 149 0 229 23 213 2 131] 
#[1 19 217 0 105 10 117 0 121 23 217 0 146 23 221 0 215 23 225 2 127 10 165 2 137 10 201 2 157] 
#[1 23 229 0 215 15 37 0 229 23 233 2 132 15 45 2 135] 
#[1 23 237 0 45 23 241 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 23 245 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 245 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 249 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 23 249 2 48 23 249 2 50 23 249 2 51 23 249 2 52 23 249 2 53 23 249 2 54 23 249 2 55 23 249 2 56 23 249 2 57 23 249 2 64 23 249 2 65 23 249 2 66 4 21 2 67 23 249 2 68 23 249 2 69 23 249 2 77 23 249 2 78 23 249 2 86 23 249 2 91 23 249 2 92 23 249 2 93 23 249 2 94 23 249 2 95 4 65 2 96 23 249 2 97 23 249 2 98 23 249 2 99 23 249 2 100 23 249 2 101 23 249 2 102 23 249 2 103 23 249 2 104 23 249 2 105 23 249 2 106 23 249 2 107 23 249 2 108 23 249 2 109 23 249 2 110 23 249 2 111 23 249 2 112 23 249 2 113 23 249 2 114 23 249 2 115 23 249 2 116 4 149 2 117 23 249 2 118 23 249 2 119 23 249 2 120 23 249 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 249 2 158 23 249 2 159] 
#[1 23 253 0 215 15 37 0 229 24 1 2 132 15 45 2 135] 
#[0 24 5 0 45] 
#[1 11 38 0 1 11 38 0 3 11 38 0 4 11 38 0 5 11 38 0 6 11 38 0 7 11 38 0 8 11 38 0 9 11 38 0 10 6 255 0 11 11 38 0 12 11 38 0 13 11 38 0 14 11 38 0 15 11 38 0 16 11 38 0 17 11 38 0 19 11 38 0 20 11 38 0 21 11 38 0 22 11 38 0 23 11 38 0 24 11 38 0 25 11 38 0 26 11 38 0 27 11 38 0 28 11 38 0 32 11 38 0 34 11 38 0 35 11 38 0 38 11 38 0 45 11 38 0 80 11 38 0 83 11 38 0 87 11 38 0 90 11 38 0 99 11 38 0 105 11 38 0 108 11 38 0 110 11 38 0 115 11 38 0 116 11 38 0 118 11 38 0 121 11 38 0 123 11 38 0 125 11 38 0 130 11 38 0 146 11 38 0 150 11 38 0 151 11 38 0 152 11 38 0 171 11 38 0 177 11 38 0 179 11 38 0 186 11 38 0 188 11 38 0 190 11 38 0 201 11 38 0 207 11 38 0 209 11 38 0 210 11 38 0 211 11 38 0 212 11 38 0 214 11 38 0 215 24 9 0 234 24 13 2 133] 
#[1 19 217 0 105 10 117 0 121 24 17 0 146 24 21 0 215 24 25 2 127 10 165 2 137 10 201 2 157] 
#[0 15 29 0 121] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 24 29 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 24 37 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 24 45 0 146] 
#[1 24 49 0 146 24 53 0 215] 
#[0 11 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 241 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 241 2 48 19 241 2 50 19 241 2 51 19 241 2 52 19 241 2 53 19 241 2 54 19 241 2 55 19 241 2 56 19 241 2 57 19 241 2 64 19 241 2 65 19 241 2 66 4 21 2 67 19 241 2 68 19 241 2 69 19 241 2 77 19 241 2 78 19 241 2 86 19 241 2 91 19 241 2 92 19 241 2 93 19 241 2 94 19 241 2 95 4 65 2 96 19 241 2 97 19 241 2 98 19 241 2 99 19 241 2 100 19 241 2 101 19 241 2 102 19 241 2 103 19 241 2 104 19 241 2 105 19 241 2 106 19 241 2 107 19 241 2 108 19 241 2 109 19 241 2 110 19 241 2 111 19 241 2 112 19 241 2 113 19 241 2 114 19 241 2 115 19 241 2 116 4 149 2 117 19 241 2 118 19 241 2 119 19 241 2 120 19 241 2 122 4 169 2 125 4 173 2 136 24 57 2 148 19 249 2 151 4 177 2 155 19 241 2 158 19 241 2 159] 
#[1 7 3 0 1 6 41 0 3 11 46 0 4 7 7 0 5 11 46 0 6 6 45 0 7 11 46 0 8 6 49 0 9 11 46 0 10 11 46 0 11 6 53 0 12 11 46 0 13 7 11 0 14 6 57 0 15 11 46 0 16 11 46 0 17 6 61 0 19 6 65 0 20 11 46 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 46 0 28 11 46 0 32 6 93 0 34 6 97 0 35 7 15 0 38 11 46 0 45 7 19 0 80 11 46 0 83 11 46 0 87 11 46 0 90 11 46 0 99 11 46 0 105 11 46 0 108 11 46 0 110 11 46 0 115 6 101 0 116 6 105 0 118 11 46 0 121 11 46 0 123 6 109 0 125 6 113 0 130 11 46 0 146 6 117 0 150 6 121 0 151 11 46 0 152 11 46 0 171 11 46 0 177 11 46 0 179 11 46 0 186 11 46 0 188 11 46 0 190 11 46 0 201 6 125 0 207 6 129 0 209 11 46 0 210 6 133 0 211 11 46 0 212 11 46 0 214 11 46 0 215 6 137 0 236 24 69 2 152] 
#[0 11 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 54 0 1 11 54 0 3 11 54 0 4 11 54 0 5 11 54 0 6 11 54 0 7 11 54 0 8 11 54 0 9 11 54 0 10 11 54 0 11 11 54 0 12 11 54 0 13 11 54 0 14 11 54 0 15 11 54 0 16 11 54 0 17 11 54 0 19 11 54 0 20 11 54 0 21 11 54 0 22 11 54 0 23 11 54 0 24 11 54 0 25 11 54 0 26 11 54 0 27 11 54 0 28 11 54 0 32 11 54 0 34 11 54 0 35 11 54 0 38 11 54 0 45 11 54 0 80 11 54 0 83 11 54 0 87 11 54 0 90 11 54 0 99 11 54 0 105 11 54 0 108 11 54 0 110 11 54 0 115 11 54 0 116 11 54 0 118 11 54 0 121 11 54 0 123 11 54 0 125 11 54 0 130 11 54 0 146 11 54 0 150 11 54 0 151 11 54 0 152 11 54 0 171 11 54 0 177 11 54 0 179 11 54 0 186 11 54 0 188 11 54 0 190 11 54 0 201 11 54 0 207 11 54 0 209 11 54 0 210 11 54 0 211 11 54 0 212 11 54 0 214 11 54 0 215 24 73 2 150] 
#[0 11 58 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 77 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 77 2 48 24 77 2 50 24 77 2 51 24 77 2 52 24 77 2 53 24 77 2 54 24 77 2 55 24 77 2 56 24 77 2 57 24 77 2 64 24 77 2 65 24 77 2 66 4 21 2 67 24 77 2 68 24 77 2 69 24 77 2 77 24 77 2 78 24 77 2 86 24 77 2 91 24 77 2 92 24 77 2 93 24 77 2 94 24 77 2 95 4 65 2 96 24 77 2 97 24 77 2 98 24 77 2 99 24 77 2 100 24 77 2 101 24 77 2 102 24 77 2 103 24 77 2 104 24 77 2 105 24 77 2 106 24 77 2 107 24 77 2 108 24 77 2 109 24 77 2 110 24 77 2 111 24 77 2 112 24 77 2 113 24 77 2 114 24 77 2 115 24 77 2 116 4 149 2 117 24 77 2 118 24 77 2 119 24 77 2 120 24 77 2 122 4 169 2 125 4 173 2 136 4 177 2 155 24 77 2 158 24 77 2 159] 
#[1 7 23 0 1 6 41 0 3 11 62 0 4 7 27 0 5 11 62 0 6 6 45 0 7 11 62 0 8 6 49 0 9 11 62 0 10 11 62 0 11 6 53 0 12 11 62 0 13 7 31 0 14 6 57 0 15 11 62 0 16 11 62 0 17 6 61 0 19 6 65 0 20 11 62 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 62 0 28 11 62 0 32 6 93 0 34 6 97 0 35 11 62 0 38 11 62 0 45 11 62 0 80 11 62 0 83 11 62 0 87 11 62 0 90 11 62 0 99 11 62 0 105 11 62 0 108 11 62 0 110 11 62 0 115 6 101 0 116 6 105 0 118 11 62 0 121 11 62 0 123 6 109 0 125 6 113 0 130 11 62 0 146 6 117 0 150 6 121 0 151 11 62 0 152 11 62 0 171 11 62 0 177 11 62 0 179 11 62 0 186 11 62 0 188 11 62 0 190 11 62 0 201 6 125 0 207 6 129 0 209 11 62 0 210 6 133 0 211 11 62 0 212 11 62 0 214 11 62 0 215 6 137 0 236] 
#[1 7 35 0 1 6 41 0 3 11 66 0 4 7 39 0 5 11 66 0 6 6 45 0 7 11 66 0 8 6 49 0 9 11 66 0 10 11 66 0 11 6 53 0 12 11 66 0 13 7 43 0 14 6 57 0 15 11 66 0 16 11 66 0 17 6 61 0 19 6 65 0 20 11 66 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 66 0 28 11 66 0 32 6 93 0 34 6 97 0 35 11 66 0 38 11 66 0 45 11 66 0 80 11 66 0 83 11 66 0 87 11 66 0 90 11 66 0 99 11 66 0 105 11 66 0 108 11 66 0 110 11 66 0 115 6 101 0 116 6 105 0 118 11 66 0 121 11 66 0 123 6 109 0 125 6 113 0 130 11 66 0 146 6 117 0 150 6 121 0 151 11 66 0 152 11 66 0 171 11 66 0 177 11 66 0 179 11 66 0 186 11 66 0 188 11 66 0 190 11 66 0 201 6 125 0 207 6 129 0 209 11 66 0 210 6 133 0 211 11 66 0 212 11 66 0 214 11 66 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 81 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 81 2 48 24 81 2 50 24 81 2 51 24 81 2 52 24 81 2 53 24 81 2 54 24 81 2 55 24 81 2 56 24 81 2 57 24 81 2 64 24 81 2 65 24 81 2 66 4 21 2 67 24 81 2 68 24 81 2 69 24 81 2 77 24 81 2 78 24 81 2 86 24 81 2 91 24 81 2 92 24 81 2 93 24 81 2 94 24 81 2 95 4 65 2 96 24 81 2 97 24 81 2 98 24 81 2 99 24 81 2 100 24 81 2 101 24 81 2 102 24 81 2 103 24 81 2 104 24 81 2 105 24 81 2 106 24 81 2 107 24 81 2 108 24 81 2 109 24 81 2 110 24 81 2 111 24 81 2 112 24 81 2 113 24 81 2 114 24 81 2 115 24 81 2 116 4 149 2 117 24 81 2 118 24 81 2 119 24 81 2 120 24 81 2 122 4 169 2 125 4 173 2 136 4 177 2 155 24 81 2 158 24 81 2 159] 
#[1 7 47 0 1 6 41 0 3 11 70 0 4 7 51 0 5 11 70 0 6 6 45 0 7 11 70 0 8 6 49 0 9 11 70 0 10 11 70 0 11 6 53 0 12 11 70 0 13 7 55 0 14 6 57 0 15 11 70 0 16 11 70 0 17 6 61 0 19 6 65 0 20 11 70 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 70 0 28 11 70 0 32 6 93 0 34 6 97 0 35 11 70 0 38 11 70 0 45 11 70 0 80 11 70 0 83 11 70 0 87 11 70 0 90 11 70 0 99 11 70 0 105 11 70 0 108 11 70 0 110 11 70 0 115 6 101 0 116 6 105 0 118 11 70 0 121 11 70 0 123 6 109 0 125 6 113 0 130 11 70 0 146 6 117 0 150 6 121 0 151 11 70 0 152 11 70 0 171 11 70 0 177 11 70 0 179 11 70 0 186 11 70 0 188 11 70 0 190 11 70 0 201 6 125 0 207 6 129 0 209 11 70 0 210 6 133 0 211 11 70 0 212 11 70 0 214 11 70 0 215 6 137 0 236] 
#[1 7 59 0 1 6 41 0 3 11 74 0 4 7 63 0 5 11 74 0 6 6 45 0 7 11 74 0 8 6 49 0 9 11 74 0 10 11 74 0 11 6 53 0 12 11 74 0 13 7 67 0 14 6 57 0 15 11 74 0 16 11 74 0 17 6 61 0 19 6 65 0 20 11 74 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 74 0 28 11 74 0 32 6 93 0 34 6 97 0 35 11 74 0 38 11 74 0 45 11 74 0 80 11 74 0 83 11 74 0 87 11 74 0 90 11 74 0 99 11 74 0 105 11 74 0 108 11 74 0 110 11 74 0 115 6 101 0 116 6 105 0 118 11 74 0 121 11 74 0 123 6 109 0 125 6 113 0 130 11 74 0 146 6 117 0 150 6 121 0 151 11 74 0 152 11 74 0 171 11 74 0 177 11 74 0 179 11 74 0 186 11 74 0 188 11 74 0 190 11 74 0 201 6 125 0 207 6 129 0 209 11 74 0 210 6 133 0 211 11 74 0 212 11 74 0 214 11 74 0 215 6 137 0 236] 
#[1 7 71 0 1 6 41 0 3 11 78 0 4 7 75 0 5 11 78 0 6 6 45 0 7 11 78 0 8 6 49 0 9 11 78 0 10 11 78 0 11 6 53 0 12 11 78 0 13 7 79 0 14 6 57 0 15 11 78 0 16 11 78 0 17 6 61 0 19 6 65 0 20 11 78 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 11 78 0 28 11 78 0 32 6 93 0 34 6 97 0 35 11 78 0 38 11 78 0 45 11 78 0 80 11 78 0 83 11 78 0 87 11 78 0 90 11 78 0 99 11 78 0 105 11 78 0 108 11 78 0 110 11 78 0 115 6 101 0 116 6 105 0 118 11 78 0 121 11 78 0 123 6 109 0 125 6 113 0 130 11 78 0 146 6 117 0 150 6 121 0 151 11 78 0 152 11 78 0 171 11 78 0 177 11 78 0 179 11 78 0 186 11 78 0 188 11 78 0 190 11 78 0 201 6 125 0 207 6 129 0 209 11 78 0 210 6 133 0 211 11 78 0 212 11 78 0 214 11 78 0 215 6 137 0 236] 
#[1 24 85 0 17 24 89 0 215] 
#[1 0 73 0 19 24 93 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 0 73 0 19 24 97 0 88 7 29 0 229 7 33 0 254 0 89 0 255 0 93 1 0 11 101 1 69] 
#[1 24 101 0 17 24 105 0 215] 
#[0 24 109 0 114] 
#[0 24 113 0 114] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 24 117 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[1 0 73 0 19 0 26 0 70 6 202 0 78 0 30 0 79 24 121 0 88 0 30 0 89 6 206 0 93 0 7 0 98 6 210 0 100 0 30 0 114 0 26 0 132 0 26 0 141 2 199 0 154 0 11 0 158 0 7 0 160 6 202 0 161 0 7 0 162 0 7 0 163 6 202 0 166 2 203 0 173 0 34 0 183 6 210 0 184 6 202 0 206 16 77 0 254 0 89 0 255 0 93 1 0 16 85 1 42 16 85 1 66 11 229 1 67 16 85 1 70 0 137 1 71 16 85 1 77 0 145 1 78 16 85 1 85 16 85 1 92 16 85 1 100 16 85 1 108 16 85 1 110 16 85 1 117 16 101 1 118 16 85 1 121 16 85 1 155 16 113 1 156 16 85 1 204 16 121 1 205] 
#[1 24 125 0 17 24 129 0 215] 
#[1 24 133 0 17 24 137 0 215] 
#[0 24 141 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 24 145 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[0 24 149 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 24 153 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 24 157 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 24 161 1 73] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 24 165 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 4 166 0 19 4 166 0 40 4 166 0 70 4 166 0 72 4 166 0 74 4 166 0 77 4 166 0 78 4 166 0 79 4 166 0 81 4 166 0 88 4 166 0 89 4 166 0 93 4 166 0 98 4 166 0 100 12 117 0 108 4 166 0 114 4 166 0 120 4 166 0 132 4 166 0 133 4 166 0 137 4 166 0 141 4 166 0 142 4 166 0 147 4 166 0 154 4 166 0 155 4 166 0 156 4 166 0 158 4 166 0 160 4 166 0 161 4 166 0 162 4 166 0 163 4 166 0 166 4 166 0 173 4 166 0 174 4 166 0 183 4 166 0 184 4 166 0 203 4 166 0 205 4 166 0 206 12 121 1 58 24 169 1 73] 
#[0 24 173 0 183] 
#[0 24 177 0 183] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 24 181 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 24 185 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 249 1 42 17 249 1 66 11 229 1 67 17 249 1 70 0 137 1 71 17 249 1 77 0 145 1 78 17 249 1 81 17 249 1 85 17 249 1 100 17 249 1 107 17 249 1 109 17 249 1 114 11 249 1 115 17 249 1 116 17 249 1 119 17 249 1 120 17 249 1 126 17 249 1 127 12 17 1 128 17 249 1 130 17 249 1 149 12 29 1 150 17 249 1 152 17 249 1 153 12 41 1 154 17 249 1 160 17 249 1 166 12 53 1 167 17 249 1 173 12 61 1 174 12 65 1 175 17 249 1 189 17 249 1 191 12 77 1 192 17 249 1 194 12 85 1 195 17 249 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 249 1 213 17 209 1 214] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 24 189 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 189 1 93] 
#[1 11 82 0 6 11 82 0 11 2 69 0 24 24 193 0 37 11 82 0 215 24 197 0 240] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 11 33 0 254 0 89 0 255 0 93 1 0 24 201 1 113] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 24 205 1 140 11 57 1 141] 
#[0 11 86 0 6 0 11 0 215] 
#[0 11 90 0 6 0 11 0 24 0 37 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 24 209 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 209 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 24 213 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 11 94 0 17 0 106 0 108 0 215] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 11 33 0 254 0 89 0 255 0 93 1 0 24 217 1 113] 
#[1 11 98 0 17 24 221 0 37 11 98 0 106 11 98 0 108 11 98 0 215] 
#[0 11 102 0 17 0 106 0 108 0 215] 
#[0 11 106 0 19 0 88 0 229] 
#[0 11 110 0 19 0 88 0 229] 
#[1 24 225 0 17 24 229 0 215] 
#[0 11 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 11 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 24 233 0 89] 
#[0 24 237 0 89] 
#[0 11 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 11 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 2 229 0 11 11 130 0 17 11 130 0 215 24 241 0 234 24 245 1 90] 
#[0 11 134 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 11 138 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 24 249 0 17 24 253 0 215] 
#[1 2 149 0 100 20 245 0 154 20 245 0 173 2 153 0 184 25 1 1 111 25 5 1 112 20 245 1 124] 
#[1 25 9 0 93 21 1 0 173 21 1 1 159] 
#[1 21 29 0 78 21 29 0 154 17 101 0 161 21 29 0 166 21 29 0 173 21 29 0 206 25 13 1 190 21 29 1 209] 
#[0 11 142 0 100 0 154 0 173 0 184] 
#[0 11 146 0 100 0 154 0 173 0 184] 
#[1 25 17 0 17 25 21 0 215] 
#[1 25 25 0 17 25 29 0 215] 
#[0 11 150 0 100 0 154 0 173 0 184] 
#[0 25 33 0 229] 
#[0 11 154 0 93 0 173] 
#[0 11 158 0 93 0 173] 
#[0 11 162 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 166 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 170 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 174 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 178 0 78 0 154 0 161 0 166 0 173 0 206] 
#[1 25 37 0 17 25 41 0 215] 
#[0 11 182 0 78 0 154 0 161 0 166 0 173 0 206] 
#[1 25 45 0 17 25 49 0 215] 
#[0 11 186 0 6 0 11 0 214 0 215] 
#[0 11 190 0 6 0 11 0 214 0 215] 
#[0 11 194 0 6 0 11 0 214 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 21 37 0 70 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 21 41 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 21 45 0 183 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 25 53 0 250 25 57 0 253 21 57 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 21 57 1 93] 
#[0 11 198 0 6 0 11 0 215] 
#[0 11 202 0 6 0 11 0 214 0 215] 
#[1 11 149 0 110 11 149 0 153 11 141 0 229 25 61 0 247 11 149 0 248] 
#[0 11 206 0 5 0 17 0 37 0 106 0 108 0 215] 
#[0 11 210 0 6 0 11 0 215] 
#[0 11 214 0 6 0 11 0 215] 
#[0 25 65 0 114] 
#[0 25 69 0 114] 
#[0 11 218 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 11 222 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 21 141 0 106 21 145 0 108 25 73 0 215 21 153 1 102 25 77 1 125 21 161 1 144] 
#[1 21 141 0 106 21 145 0 108 25 81 0 215 21 153 1 102 25 85 1 125 21 161 1 144] 
#[1 4 138 0 40 4 138 0 98 4 138 0 100 4 138 0 120 4 138 0 142 4 138 0 154 4 138 0 155 4 138 0 156 4 138 0 158 4 138 0 160 4 138 0 162 4 138 0 163 4 138 0 173 4 138 0 174 4 138 0 184 25 89 1 115] 
#[1 25 101 0 36 25 101 0 41 25 93 0 100 25 97 0 184 25 101 0 197 25 101 1 134] 
#[0 25 105 0 138] 
#[0 25 109 0 93] 
#[0 25 113 0 229] 
#[1 21 213 0 229 25 117 1 169 21 221 1 172] 
#[1 25 121 0 17 25 125 0 215] 
#[1 21 145 0 108 25 129 0 215 25 133 1 102] 
#[1 25 137 0 17 21 145 0 108 25 141 0 215 25 145 1 102] 
#[0 25 149 0 229] 
#[1 25 153 0 128 25 157 0 134 25 161 0 135 25 165 0 229 25 169 1 145 25 173 1 148] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 25 177 1 44 25 177 1 45 25 177 1 46 25 177 1 53 25 177 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 25 181 1 103 25 185 1 106] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 25 189 1 218 13 221 1 220] 
#[0 11 226 0 17 0 215] 
#[0 25 193 0 215] 
#[0 11 230 0 17 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 25 197 1 218 13 221 1 220] 
#[0 25 201 0 215] 
#[1 16 249 0 40 16 249 0 98 2 149 0 100 16 249 0 120 16 249 0 142 16 249 0 154 16 249 0 155 16 249 0 156 16 249 0 158 16 249 0 160 16 249 0 162 16 249 0 163 16 249 0 173 16 249 0 174 2 153 0 184 16 249 0 243 25 205 1 111 25 209 1 112 16 249 1 122] 
#[0 11 234 0 100 0 184] 
#[0 11 238 0 100 0 184] 
#[0 25 213 0 229] 
#[0 25 217 0 229] 
#[0 11 242 0 100 0 184] 
#[1 25 221 0 100 25 225 0 184] 
#[1 2 33 0 5 25 229 0 215 25 233 0 236] 
#[0 25 237 0 229] 
#[1 2 33 0 5 11 246 0 17 25 241 0 37 11 246 0 108 11 246 0 215 25 245 0 236 25 249 1 157] 
#[1 2 69 0 24 25 253 0 37 26 1 0 240] 
#[1 26 5 0 17 26 9 0 215] 
#[1 11 250 0 11 11 250 0 17 11 250 0 215 26 13 1 171] 
#[0 11 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 12 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 33 0 5 12 6 0 17 26 17 0 37 12 6 0 108 12 6 0 215 26 21 0 236] 
#[1 0 73 0 19 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 26 41 1 193 26 45 1 210 26 45 1 211 26 45 1 212] 
#[0 26 57 0 215] 
#[0 12 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 12 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 26 61 0 17 26 65 0 215] 
#[1 2 33 0 5 2 69 0 24 26 69 0 37 12 18 0 108 12 18 0 215 26 73 0 236 26 77 0 240 26 81 1 198 26 85 1 199] 
#[0 12 22 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 12 26 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 229 0 11 12 30 0 17 12 30 0 215 26 89 0 234 26 93 1 60] 
#[0 12 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 12 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 26 97 0 17 26 101 0 215] 
#[1 22 61 0 137 26 105 0 147 22 61 0 154 22 61 0 163 22 61 0 173 22 61 0 174 22 61 0 203 22 61 1 215] 
#[0 12 42 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 26 205 0 3 0 7 0 9 0 12 0 15 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 34 0 62 0 117 0 119 0 125 0 130 0 140 0 150 0 207 0 209 0 211 1 216] 
#[0 12 46 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 50 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 54 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 58 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 62 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 66 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 26 209 0 70] 
#[1 26 213 0 17 26 217 0 215] 
#[0 26 221 0 70] 
#[0 26 225 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 26 229 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[0 26 233 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 26 237 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 26 241 0 17 26 245 0 215] 
#[1 26 249 0 17 26 253 0 215] 
#[0 27 1 0 183] 
#[0 27 5 0 183] 
#[1 15 37 0 229 27 9 2 132 15 45 2 135] 
#[0 12 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 27 13 0 215 15 37 0 229 27 17 2 132 15 45 2 135] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 27 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 21 2 48 27 21 2 50 27 21 2 51 27 21 2 52 27 21 2 53 27 21 2 54 27 21 2 55 27 21 2 56 27 21 2 57 27 21 2 64 27 21 2 65 27 21 2 66 4 21 2 67 27 21 2 68 27 21 2 69 27 21 2 77 27 21 2 78 27 21 2 86 27 21 2 91 27 21 2 92 27 21 2 93 27 21 2 94 27 21 2 95 4 65 2 96 27 21 2 97 27 21 2 98 27 21 2 99 27 21 2 100 27 21 2 101 27 21 2 102 27 21 2 103 27 21 2 104 27 21 2 105 27 21 2 106 27 21 2 107 27 21 2 108 27 21 2 109 27 21 2 110 27 21 2 111 27 21 2 112 27 21 2 113 27 21 2 114 27 21 2 115 27 21 2 116 4 149 2 117 27 21 2 118 27 21 2 119 27 21 2 120 27 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 27 21 2 158 27 21 2 159] 
#[1 7 83 0 1 6 41 0 3 12 74 0 4 7 87 0 5 12 74 0 6 6 45 0 7 12 74 0 8 6 49 0 9 12 74 0 10 12 74 0 11 6 53 0 12 12 74 0 13 7 91 0 14 6 57 0 15 12 74 0 16 12 74 0 17 6 61 0 19 6 65 0 20 12 74 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 74 0 28 12 74 0 32 6 93 0 34 6 97 0 35 12 74 0 38 12 74 0 45 12 74 0 80 12 74 0 83 12 74 0 87 12 74 0 90 12 74 0 99 12 74 0 105 12 74 0 108 12 74 0 110 12 74 0 115 6 101 0 116 6 105 0 118 12 74 0 121 12 74 0 123 6 109 0 125 6 113 0 130 12 74 0 146 6 117 0 150 6 121 0 151 12 74 0 152 12 74 0 171 12 74 0 177 12 74 0 179 12 74 0 186 12 74 0 188 12 74 0 190 12 74 0 201 6 125 0 207 6 129 0 209 12 74 0 210 6 133 0 211 12 74 0 212 12 74 0 214 12 74 0 215 6 137 0 236] 
#[0 12 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 27 25 2 132 15 45 2 135] 
#[0 12 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 94 0 6 2 25 0 14 12 94 0 215 18 89 0 235 18 93 2 60] 
#[1 4 202 0 6 4 202 0 14 4 202 0 215 27 29 2 61] 
#[0 12 98 0 6 0 14 0 215] 
#[1 12 102 0 6 2 229 0 11 12 102 0 215 6 181 0 234] 
#[1 27 33 0 6 3 137 0 215 27 33 0 237] 
#[1 2 33 0 5 12 106 0 6 12 106 0 14 12 106 0 215 27 37 0 236 27 41 2 62] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 27 45 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 45 2 48 27 45 2 50 27 45 2 51 27 45 2 52 27 45 2 53 27 45 2 54 27 45 2 55 27 45 2 56 27 45 2 57 27 45 2 64 27 45 2 65 27 45 2 66 4 21 2 67 27 45 2 68 27 45 2 69 27 45 2 77 27 45 2 78 27 45 2 86 27 45 2 91 27 45 2 92 27 45 2 93 27 45 2 94 27 45 2 95 4 65 2 96 27 45 2 97 27 45 2 98 27 45 2 99 27 45 2 100 27 45 2 101 27 45 2 102 27 45 2 103 27 45 2 104 27 45 2 105 27 45 2 106 27 45 2 107 27 45 2 108 27 45 2 109 27 45 2 110 27 45 2 111 27 45 2 112 27 45 2 113 27 45 2 114 27 45 2 115 27 45 2 116 4 149 2 117 27 45 2 118 27 45 2 119 27 45 2 120 27 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 27 45 2 158 27 45 2 159] 
#[0 12 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 22 0 1 4 22 0 3 0 147 0 5 4 22 0 7 4 22 0 9 4 22 0 11 4 22 0 12 4 22 0 14 4 22 0 15 4 22 0 19 4 22 0 20 4 22 0 22 4 22 0 23 2 69 0 24 4 22 0 25 4 22 0 26 4 22 0 27 4 22 0 34 4 22 0 35 4 22 0 116 4 22 0 118 4 22 0 125 4 22 0 130 4 22 0 150 4 22 0 151 4 22 0 207 4 22 0 209 4 22 0 211 4 22 0 214 4 22 0 215 8 5 0 236 27 49 0 240] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 27 53 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 53 2 48 27 53 2 50 27 53 2 51 27 53 2 52 27 53 2 53 27 53 2 54 27 53 2 55 27 53 2 56 27 53 2 57 27 53 2 64 27 53 2 65 27 53 2 66 4 21 2 67 27 53 2 68 27 53 2 69 27 53 2 77 27 53 2 78 27 53 2 86 27 53 2 91 27 53 2 92 27 53 2 93 27 53 2 94 27 53 2 95 4 65 2 96 27 53 2 97 27 53 2 98 27 53 2 99 27 53 2 100 27 53 2 101 27 53 2 102 27 53 2 103 27 53 2 104 27 53 2 105 27 53 2 106 27 53 2 107 27 53 2 108 27 53 2 109 27 53 2 110 27 53 2 111 27 53 2 112 27 53 2 113 27 53 2 114 27 53 2 115 27 53 2 116 4 149 2 117 27 53 2 118 27 53 2 119 27 53 2 120 27 53 2 122 4 169 2 125 4 173 2 136 4 177 2 155 27 53 2 158 27 53 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 12 253 0 122 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 13 1 0 235 3 181 0 236 3 189 0 238 13 5 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 13 5 2 48 13 5 2 50 13 5 2 51 13 5 2 52 13 5 2 53 13 5 2 54 13 5 2 55 13 5 2 56 13 5 2 57 13 5 2 64 13 5 2 65 13 5 2 66 4 21 2 67 13 5 2 68 13 5 2 69 13 5 2 77 13 5 2 78 27 57 2 84 13 5 2 86 13 5 2 91 13 5 2 92 13 5 2 93 13 5 2 94 13 5 2 95 4 65 2 96 13 5 2 97 13 5 2 98 13 5 2 99 13 5 2 100 13 5 2 101 13 5 2 102 13 5 2 103 13 5 2 104 13 5 2 105 13 5 2 106 13 5 2 107 13 5 2 108 13 5 2 109 13 5 2 110 13 5 2 111 13 5 2 112 13 5 2 113 13 5 2 114 13 5 2 115 13 5 2 116 4 149 2 117 13 5 2 118 13 5 2 119 13 5 2 120 13 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 13 5 2 158 13 5 2 159] 
#[0 12 114 0 11 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 12 118 0 6 6 45 0 7 6 49 0 9 12 118 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 12 118 0 215 6 137 0 236] 
#[0 12 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 13 21 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 23 45 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 61 1 188 23 45 2 48 23 45 2 50 23 45 2 51 23 45 2 52 23 45 2 53 23 45 2 54 23 45 2 55 23 45 2 56 23 45 2 57 23 45 2 64 23 45 2 65 23 45 2 66 4 21 2 67 23 45 2 68 23 45 2 69 23 45 2 77 23 45 2 78 23 45 2 86 23 45 2 91 23 45 2 92 23 45 2 93 23 45 2 94 23 45 2 95 4 65 2 96 23 45 2 97 23 45 2 98 23 45 2 99 23 45 2 100 23 45 2 101 23 45 2 102 23 45 2 103 23 45 2 104 23 45 2 105 23 45 2 106 23 45 2 107 23 45 2 108 23 45 2 109 23 45 2 110 23 45 2 111 23 45 2 112 23 45 2 113 23 45 2 114 23 45 2 115 23 45 2 116 4 149 2 117 23 45 2 118 23 45 2 119 23 45 2 120 23 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 23 45 2 158 23 45 2 159] 
#[0 12 126 0 6 0 11 0 215] 
#[0 12 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 142 0 6 2 229 0 11 12 142 0 215 27 65 0 234 27 69 2 75] 
#[1 27 73 0 6 3 137 0 215 27 73 0 237] 
#[0 27 77 0 88] 
#[0 12 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 154 0 1 12 154 0 3 12 154 0 4 12 154 0 5 12 154 0 6 12 154 0 7 12 154 0 8 12 154 0 9 12 154 0 10 12 154 0 11 12 154 0 12 12 154 0 13 12 154 0 14 12 154 0 15 12 154 0 16 7 95 0 17 12 154 0 19 12 154 0 20 12 154 0 21 12 154 0 22 12 154 0 23 12 154 0 24 12 154 0 25 12 154 0 26 12 154 0 27 12 154 0 28 12 154 0 32 12 154 0 34 12 154 0 35 12 154 0 38 12 154 0 45 12 154 0 80 12 154 0 83 12 154 0 87 12 154 0 90 12 154 0 99 12 154 0 105 12 154 0 108 12 154 0 110 12 154 0 115 12 154 0 116 12 154 0 118 12 154 0 121 12 154 0 123 12 154 0 125 12 154 0 130 12 154 0 146 12 154 0 150 12 154 0 151 12 154 0 152 12 154 0 171 12 154 0 177 12 154 0 179 12 154 0 186 12 154 0 188 12 154 0 190 12 154 0 201 12 154 0 207 12 154 0 209 12 154 0 210 12 154 0 211 12 154 0 212 12 154 0 214 12 154 0 215 22 253 1 224] 
#[0 12 158 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[0 12 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 27 81 0 215] 
#[0 27 85 0 88] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 27 89 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 89 1 93] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 27 93 1 218 13 221 1 220] 
#[1 7 99 0 1 6 41 0 3 12 166 0 4 7 103 0 5 12 166 0 6 6 45 0 7 12 166 0 8 6 49 0 9 12 166 0 10 12 166 0 11 6 53 0 12 12 166 0 13 7 107 0 14 6 57 0 15 12 166 0 16 12 166 0 17 6 61 0 19 6 65 0 20 12 166 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 166 0 28 12 166 0 32 6 93 0 34 6 97 0 35 12 166 0 38 12 166 0 45 12 166 0 80 12 166 0 83 12 166 0 87 12 166 0 90 12 166 0 99 12 166 0 105 12 166 0 108 12 166 0 110 12 166 0 115 6 101 0 116 6 105 0 118 12 166 0 121 12 166 0 123 6 109 0 125 6 113 0 130 12 166 0 146 6 117 0 150 6 121 0 151 12 166 0 152 12 166 0 171 12 166 0 177 12 166 0 179 12 166 0 186 12 166 0 188 12 166 0 190 12 166 0 201 6 125 0 207 6 129 0 209 12 166 0 210 6 133 0 211 12 166 0 212 12 166 0 214 12 166 0 215 6 137 0 236] 
#[1 7 111 0 1 6 41 0 3 12 170 0 4 7 115 0 5 12 170 0 6 6 45 0 7 12 170 0 8 6 49 0 9 12 170 0 10 12 170 0 11 6 53 0 12 12 170 0 13 7 119 0 14 6 57 0 15 12 170 0 16 12 170 0 17 6 61 0 19 6 65 0 20 12 170 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 170 0 28 12 170 0 32 6 93 0 34 6 97 0 35 12 170 0 38 12 170 0 45 12 170 0 80 12 170 0 83 12 170 0 87 12 170 0 90 12 170 0 99 12 170 0 105 12 170 0 108 12 170 0 110 12 170 0 115 6 101 0 116 6 105 0 118 12 170 0 121 12 170 0 123 6 109 0 125 6 113 0 130 12 170 0 146 6 117 0 150 6 121 0 151 12 170 0 152 12 170 0 171 12 170 0 177 12 170 0 179 12 170 0 186 12 170 0 188 12 170 0 190 12 170 0 201 6 125 0 207 6 129 0 209 12 170 0 210 6 133 0 211 12 170 0 212 12 170 0 214 12 170 0 215 6 137 0 236] 
#[1 12 174 0 1 12 174 0 3 12 174 0 4 12 174 0 5 12 174 0 6 12 174 0 7 12 174 0 8 12 174 0 9 12 174 0 10 12 174 0 11 12 174 0 12 12 174 0 13 12 174 0 14 12 174 0 15 12 174 0 16 12 174 0 17 12 174 0 19 12 174 0 20 12 174 0 21 12 174 0 22 12 174 0 23 12 174 0 24 12 174 0 25 12 174 0 26 12 174 0 27 12 174 0 28 12 174 0 32 12 174 0 34 12 174 0 35 12 174 0 38 12 174 0 45 12 174 0 80 12 174 0 83 12 174 0 87 12 174 0 90 12 174 0 99 12 174 0 105 12 174 0 108 12 174 0 110 12 174 0 115 12 174 0 116 12 174 0 118 12 174 0 121 12 174 0 123 12 174 0 125 12 174 0 130 12 174 0 146 12 174 0 150 12 174 0 151 12 174 0 152 12 174 0 171 12 174 0 177 12 174 0 179 12 174 0 186 12 174 0 188 12 174 0 190 27 97 0 198 12 174 0 201 27 97 0 202 12 174 0 207 12 174 0 209 12 174 0 210 12 174 0 211 12 174 0 212 12 174 0 214 12 174 0 215 27 97 2 6] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 127 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 27 101 1 218 13 221 1 220] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 27 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 105 2 48 27 105 2 50 27 105 2 51 27 105 2 52 27 105 2 53 27 105 2 54 27 105 2 55 27 105 2 56 27 105 2 57 27 105 2 64 27 105 2 65 27 105 2 66 4 21 2 67 27 105 2 68 27 105 2 69 27 105 2 77 27 105 2 78 27 105 2 86 27 105 2 91 27 105 2 92 27 105 2 93 27 105 2 94 27 105 2 95 4 65 2 96 27 105 2 97 27 105 2 98 27 105 2 99 27 105 2 100 27 105 2 101 27 105 2 102 27 105 2 103 27 105 2 104 27 105 2 105 27 105 2 106 27 105 2 107 27 105 2 108 27 105 2 109 27 105 2 110 27 105 2 111 27 105 2 112 27 105 2 113 27 105 2 114 27 105 2 115 27 105 2 116 4 149 2 117 27 105 2 118 27 105 2 119 27 105 2 120 27 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 27 105 2 158 27 105 2 159] 
#[0 12 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 27 109 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 27 113 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 113 2 48 27 113 2 50 27 113 2 51 27 113 2 52 27 113 2 53 27 113 2 54 27 113 2 55 27 113 2 56 27 113 2 57 27 113 2 64 27 113 2 65 27 113 2 66 4 21 2 67 27 113 2 68 27 113 2 69 27 113 2 77 27 113 2 78 27 113 2 86 27 113 2 91 27 113 2 92 27 113 2 93 27 113 2 94 27 113 2 95 4 65 2 96 27 113 2 97 27 113 2 98 27 113 2 99 27 113 2 100 27 113 2 101 27 113 2 102 27 113 2 103 27 113 2 104 27 113 2 105 27 113 2 106 27 113 2 107 27 113 2 108 27 113 2 109 27 113 2 110 27 113 2 111 27 113 2 112 27 113 2 113 27 113 2 114 27 113 2 115 27 113 2 116 4 149 2 117 27 113 2 118 27 113 2 119 27 113 2 120 27 113 2 122 4 169 2 125 4 173 2 136 4 177 2 155 27 113 2 158 27 113 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 7 206 0 6 6 45 0 7 6 49 0 9 7 206 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 7 206 0 215 6 137 0 236] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 27 117 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 117 1 93] 
#[0 12 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 27 121 0 190 6 125 0 207 6 129 0 209 6 133 0 211 6 137 0 236] 
#[1 12 186 0 87 12 186 0 88 12 186 0 226 27 125 1 243] 
#[1 7 123 0 1 10 194 0 3 10 194 0 4 7 127 0 5 10 194 0 6 10 194 0 7 10 194 0 8 7 131 0 9 10 194 0 10 10 194 0 11 7 135 0 12 10 194 0 13 7 139 0 14 10 194 0 15 10 194 0 16 7 143 0 17 10 194 0 19 10 194 0 20 10 194 0 21 10 194 0 22 10 194 0 23 10 194 0 24 10 194 0 25 10 194 0 26 10 194 0 27 10 194 0 28 7 147 0 30 7 151 0 31 7 155 0 32 10 194 0 34 10 194 0 35 10 194 0 38 7 159 0 40 3 13 0 42 7 163 0 44 10 194 0 45 7 167 0 48 7 171 0 49 7 175 0 50 7 179 0 51 7 183 0 52 7 187 0 53 7 191 0 54 7 195 0 55 7 199 0 56 7 203 0 57 7 207 0 58 7 211 0 59 7 215 0 60 7 219 0 61 7 223 0 62 7 227 0 63 7 231 0 64 7 235 0 65 7 239 0 66 7 243 0 69 7 247 0 72 7 251 0 73 7 255 0 75 8 3 0 76 10 194 0 80 8 7 0 81 8 11 0 82 10 194 0 83 8 15 0 84 8 19 0 85 7 143 0 87 8 23 0 88 10 194 0 90 8 27 0 91 8 31 0 92 8 35 0 94 8 39 0 97 8 43 0 99 7 159 0 100 8 47 0 102 8 51 0 103 8 55 0 104 10 194 0 105 8 59 0 107 10 194 0 108 10 194 0 110 8 63 0 113 10 194 0 115 10 194 0 116 10 194 0 118 7 159 0 120 10 194 0 121 10 194 0 123 10 194 0 125 8 67 0 126 8 71 0 128 8 75 0 129 10 194 0 130 8 79 0 134 8 83 0 135 8 87 0 138 3 121 0 140 8 91 0 143 8 95 0 146 10 194 0 150 10 194 0 151 10 194 0 152 8 99 0 164 8 103 0 165 8 107 0 167 8 111 0 168 8 115 0 169 8 119 0 170 8 123 0 171 8 127 0 175 8 131 0 176 10 194 0 177 8 135 0 178 10 194 0 179 8 139 0 180 8 143 0 182 7 159 0 184 8 147 0 185 10 194 0 186 10 194 0 188 8 151 0 189 10 194 0 190 8 155 0 191 8 159 0 192 8 163 0 193 8 167 0 194 8 171 0 195 8 175 0 196 8 179 0 199 10 194 0 201 8 183 0 202 8 187 0 204 10 194 0 207 8 191 0 208 10 194 0 209 10 194 0 210 10 194 0 211 10 194 0 212 8 195 0 213 10 194 0 214 7 143 0 215 8 199 0 219 8 203 0 220 8 207 0 221 8 211 0 222 8 215 0 223 8 219 0 224 8 223 0 225 5 134 0 226 8 227 0 227 8 231 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 22 241 1 217 27 129 1 218 13 221 1 220 22 241 1 221 9 177 1 222 22 241 1 226 9 185 1 227 22 241 1 228 22 241 1 229 22 241 1 230 22 241 1 231 22 241 1 232 22 241 1 233 22 241 1 234 22 241 1 235 22 241 1 236 22 241 1 238 22 241 1 239 22 241 1 240 22 241 1 241 22 241 1 242 22 241 1 246 22 241 1 248 22 241 2 1 22 241 2 2 22 241 2 3 22 241 2 4 22 241 2 5 22 241 2 7 22 241 2 12 22 241 2 13 22 241 2 14 22 241 2 15 22 241 2 19 22 241 2 20 22 241 2 21 22 241 2 22 22 241 2 24 22 241 2 26 22 241 2 27 22 241 2 28 22 241 2 30 22 241 2 32 22 241 2 33 22 241 2 34 22 241 2 35 22 241 2 36 22 241 2 41 22 241 2 45 22 241 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 27 133 1 218 13 221 1 220] 
#[1 12 190 0 1 12 190 0 3 12 190 0 4 12 190 0 5 12 190 0 6 12 190 0 7 12 190 0 8 12 190 0 9 12 190 0 10 12 190 0 11 12 190 0 12 12 190 0 13 12 190 0 14 12 190 0 15 12 190 0 16 12 190 0 17 12 190 0 19 12 190 0 20 12 190 0 21 12 190 0 22 12 190 0 23 12 190 0 24 12 190 0 25 12 190 0 26 12 190 0 27 12 190 0 28 12 190 0 32 12 190 0 34 12 190 0 35 12 190 0 38 12 190 0 45 12 190 0 80 12 190 0 83 8 235 0 87 12 190 0 90 12 190 0 99 12 190 0 105 12 190 0 108 12 190 0 110 12 190 0 115 12 190 0 116 12 190 0 118 12 190 0 121 12 190 0 123 12 190 0 125 12 190 0 130 12 190 0 146 12 190 0 150 12 190 0 151 12 190 0 152 12 190 0 171 12 190 0 177 12 190 0 179 12 190 0 186 12 190 0 188 12 190 0 190 12 190 0 201 12 190 0 207 12 190 0 209 12 190 0 210 12 190 0 211 12 190 0 212 12 190 0 214 12 190 0 215 27 141 1 247] 
#[1 12 186 0 87 12 186 0 88 12 186 0 226 27 145 1 243] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 27 149 0 234 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 27 153 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 153 2 48 27 153 2 50 27 153 2 51 27 153 2 52 27 153 2 53 27 153 2 54 27 153 2 55 27 153 2 56 27 153 2 57 27 153 2 64 27 153 2 65 27 153 2 66 4 21 2 67 27 153 2 68 27 153 2 69 27 153 2 77 27 153 2 78 27 153 2 86 27 153 2 91 27 153 2 92 27 153 2 93 27 153 2 94 27 153 2 95 4 65 2 96 27 153 2 97 27 153 2 98 27 153 2 99 27 153 2 100 27 153 2 101 27 153 2 102 27 153 2 103 27 153 2 104 27 153 2 105 27 153 2 106 27 153 2 107 27 153 2 108 27 153 2 109 27 153 2 110 27 153 2 111 27 153 2 112 27 153 2 113 27 153 2 114 27 153 2 115 27 153 2 116 4 149 2 117 27 153 2 118 27 153 2 119 27 153 2 120 27 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 27 153 2 158 27 153 2 159] 
#[0 27 157 0 220] 
#[0 12 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 27 161 0 6 3 137 0 215 27 161 0 237] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 14 125 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 27 165 2 40 14 125 2 48 14 125 2 50 14 125 2 51 14 125 2 52 14 125 2 53 14 125 2 54 14 125 2 55 14 125 2 56 14 125 2 57 14 125 2 64 14 125 2 65 14 125 2 66 4 21 2 67 14 125 2 68 14 125 2 69 14 125 2 77 14 125 2 78 14 125 2 86 14 125 2 91 14 125 2 92 14 125 2 93 14 125 2 94 14 125 2 95 4 65 2 96 14 125 2 97 14 125 2 98 14 125 2 99 14 125 2 100 14 125 2 101 14 125 2 102 14 125 2 103 14 125 2 104 14 125 2 105 14 125 2 106 14 125 2 107 14 125 2 108 14 125 2 109 14 125 2 110 14 125 2 111 14 125 2 112 14 125 2 113 14 125 2 114 14 125 2 115 14 125 2 116 4 149 2 117 14 125 2 118 14 125 2 119 14 125 2 120 14 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 14 125 2 158 14 125 2 159] 
#[0 12 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 239 0 1 6 41 0 3 12 210 0 4 8 243 0 5 12 210 0 6 6 45 0 7 12 210 0 8 6 49 0 9 12 210 0 10 12 210 0 11 6 53 0 12 12 210 0 13 8 247 0 14 6 57 0 15 12 210 0 16 12 210 0 17 6 61 0 19 6 65 0 20 12 210 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 210 0 28 12 210 0 32 6 93 0 34 6 97 0 35 12 210 0 38 12 210 0 45 12 210 0 80 12 210 0 83 12 210 0 87 12 210 0 90 12 210 0 99 12 210 0 105 12 210 0 108 12 210 0 110 12 210 0 115 6 101 0 116 6 105 0 118 12 210 0 121 12 210 0 123 6 109 0 125 6 113 0 130 12 210 0 146 6 117 0 150 6 121 0 151 12 210 0 152 12 210 0 171 12 210 0 177 12 210 0 179 12 210 0 186 12 210 0 188 12 210 0 190 12 210 0 201 6 125 0 207 6 129 0 209 12 210 0 210 6 133 0 211 12 210 0 212 12 210 0 214 12 210 0 215 6 137 0 236] 
#[1 11 2 0 67 11 2 0 88 27 169 1 249] 
#[1 27 173 0 67 27 177 0 88 27 181 1 250 27 185 2 0] 
#[0 27 189 0 88] 
#[1 27 193 0 68 27 197 0 88 27 201 0 96 27 205 2 17 27 209 2 18] 
#[1 14 225 0 229 27 213 1 179 14 181 1 180 14 185 1 183] 
#[0 12 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 27 217 1 44 27 217 1 45 27 217 1 46 27 217 1 53 27 217 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 12 218 0 1 12 218 0 3 12 218 0 4 12 218 0 5 12 218 0 6 12 218 0 7 12 218 0 8 12 218 0 9 12 218 0 10 12 218 0 11 12 218 0 12 12 218 0 13 12 218 0 14 12 218 0 15 12 218 0 16 12 218 0 17 12 218 0 19 12 218 0 20 12 218 0 21 12 218 0 22 12 218 0 23 2 69 0 24 12 218 0 25 12 218 0 26 12 218 0 27 12 218 0 28 12 218 0 32 12 218 0 34 12 218 0 35 12 218 0 38 12 218 0 45 12 218 0 80 12 218 0 83 12 218 0 87 12 218 0 90 12 218 0 99 12 218 0 105 12 218 0 108 12 218 0 110 12 218 0 115 12 218 0 116 12 218 0 118 12 218 0 121 12 218 0 123 12 218 0 125 12 218 0 130 12 218 0 146 12 218 0 150 12 218 0 151 12 218 0 152 12 218 0 171 12 218 0 177 12 218 0 179 12 218 0 186 12 218 0 188 12 218 0 190 12 218 0 201 12 218 0 207 12 218 0 209 12 218 0 210 12 218 0 211 12 218 0 212 12 218 0 214 12 218 0 215 27 221 0 240] 
#[0 12 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 251 0 1 6 41 0 3 12 226 0 4 8 255 0 5 12 226 0 6 6 45 0 7 12 226 0 8 6 49 0 9 12 226 0 10 12 226 0 11 6 53 0 12 12 226 0 13 9 3 0 14 6 57 0 15 12 226 0 16 12 226 0 17 6 61 0 19 6 65 0 20 12 226 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 226 0 28 12 226 0 32 6 93 0 34 6 97 0 35 12 226 0 38 12 226 0 45 12 226 0 80 12 226 0 83 12 226 0 87 12 226 0 90 12 226 0 99 12 226 0 105 12 226 0 108 12 226 0 110 12 226 0 115 6 101 0 116 6 105 0 118 12 226 0 121 12 226 0 123 6 109 0 125 6 113 0 130 12 226 0 146 6 117 0 150 6 121 0 151 12 226 0 152 12 226 0 171 12 226 0 177 12 226 0 179 12 226 0 186 12 226 0 188 12 226 0 190 12 226 0 201 6 125 0 207 6 129 0 209 12 226 0 210 6 133 0 211 12 226 0 212 12 226 0 214 12 226 0 215 6 137 0 236] 
#[1 14 225 0 229 27 225 1 183] 
#[0 12 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 27 229 0 88] 
#[0 27 233 0 88] 
#[0 27 237 0 88] 
#[0 12 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 27 241 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 27 245 1 218 13 221 1 220] 
#[0 12 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 7 0 1 6 41 0 3 12 242 0 4 9 11 0 5 12 242 0 6 6 45 0 7 12 242 0 8 6 49 0 9 12 242 0 10 12 242 0 11 6 53 0 12 12 242 0 13 9 15 0 14 6 57 0 15 12 242 0 16 12 242 0 17 6 61 0 19 6 65 0 20 12 242 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 242 0 28 12 242 0 32 6 93 0 34 6 97 0 35 12 242 0 38 12 242 0 45 12 242 0 80 12 242 0 83 12 242 0 87 12 242 0 90 12 242 0 99 12 242 0 105 12 242 0 108 12 242 0 110 12 242 0 115 6 101 0 116 6 105 0 118 12 242 0 121 12 242 0 123 6 109 0 125 6 113 0 130 12 242 0 146 6 117 0 150 6 121 0 151 12 242 0 152 12 242 0 171 12 242 0 177 12 242 0 179 12 242 0 186 12 242 0 188 12 242 0 190 12 242 0 201 6 125 0 207 6 129 0 209 12 242 0 210 6 133 0 211 12 242 0 212 12 242 0 214 12 242 0 215 6 137 0 236] 
#[1 11 34 0 115 27 249 0 215 27 249 2 154] 
#[0 12 246 0 115 0 229] 
#[0 27 253 0 115] 
#[1 19 217 0 105 10 117 0 121 28 1 0 146 28 5 0 215 28 9 2 127 10 165 2 137 10 201 2 157] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 13 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 28 17 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 28 21 0 146] 
#[1 28 25 0 146 28 29 0 215] 
#[1 15 37 0 229 28 33 2 132 15 45 2 135] 
#[1 11 34 0 115 28 37 0 215 28 37 2 154] 
#[1 28 41 0 215 15 37 0 229 28 45 2 132 15 45 2 135] 
#[0 28 49 0 45] 
#[1 2 69 0 24 28 53 0 240] 
#[1 9 19 0 1 6 41 0 3 12 250 0 4 9 23 0 5 12 250 0 6 6 45 0 7 12 250 0 8 6 49 0 9 12 250 0 10 12 250 0 11 6 53 0 12 12 250 0 13 9 27 0 14 6 57 0 15 12 250 0 16 12 250 0 17 6 61 0 19 6 65 0 20 12 250 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 12 250 0 28 12 250 0 32 6 93 0 34 6 97 0 35 12 250 0 38 12 250 0 45 12 250 0 80 12 250 0 83 12 250 0 87 12 250 0 90 12 250 0 99 12 250 0 105 12 250 0 108 12 250 0 110 12 250 0 115 6 101 0 116 6 105 0 118 12 250 0 121 12 250 0 123 6 109 0 125 6 113 0 130 12 250 0 146 6 117 0 150 6 121 0 151 12 250 0 152 12 250 0 171 12 250 0 177 12 250 0 179 12 250 0 186 12 250 0 188 12 250 0 190 12 250 0 201 6 125 0 207 6 129 0 209 12 250 0 210 6 133 0 211 12 250 0 212 12 250 0 214 12 250 0 215 6 137 0 236] 
#[1 15 37 0 229 28 57 2 132 15 45 2 135] 
#[1 11 34 0 115 28 61 0 215 28 61 2 154] 
#[1 28 65 0 215 15 37 0 229 28 69 2 132 15 45 2 135] 
#[1 15 37 0 229 28 73 2 135] 
#[0 12 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 77 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 28 81 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 28 85 0 146] 
#[1 28 89 0 146 28 93 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 28 97 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 28 101 0 90 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 6 137 0 236] 
#[0 13 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 13 6 0 1 13 6 0 3 13 6 0 4 13 6 0 5 13 6 0 6 13 6 0 7 13 6 0 8 13 6 0 9 13 6 0 10 13 6 0 11 13 6 0 12 13 6 0 13 13 6 0 14 13 6 0 15 13 6 0 16 13 6 0 17 13 6 0 19 13 6 0 20 13 6 0 21 13 6 0 22 13 6 0 23 13 6 0 24 13 6 0 25 13 6 0 26 13 6 0 27 13 6 0 28 13 6 0 32 13 6 0 34 13 6 0 35 13 6 0 38 13 6 0 45 13 6 0 80 13 6 0 83 13 6 0 87 13 6 0 90 13 6 0 99 13 6 0 105 13 6 0 108 13 6 0 110 13 6 0 115 13 6 0 116 13 6 0 118 13 6 0 121 13 6 0 123 13 6 0 125 13 6 0 130 13 6 0 146 13 6 0 150 13 6 0 151 13 6 0 152 13 6 0 171 13 6 0 177 13 6 0 179 13 6 0 186 13 6 0 188 13 6 0 190 13 6 0 201 13 6 0 207 13 6 0 209 13 6 0 210 13 6 0 211 13 6 0 212 13 6 0 214 13 6 0 215 28 105 2 140] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 109 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 28 113 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 117 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 28 121 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 28 125 0 146] 
#[0 13 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 13 26 0 1 13 26 0 3 13 26 0 4 13 26 0 5 13 26 0 6 13 26 0 7 13 26 0 8 13 26 0 9 13 26 0 10 9 31 0 11 13 26 0 12 13 26 0 13 13 26 0 14 13 26 0 15 13 26 0 16 13 26 0 17 13 26 0 19 13 26 0 20 13 26 0 21 13 26 0 22 13 26 0 23 13 26 0 24 13 26 0 25 13 26 0 26 13 26 0 27 13 26 0 28 13 26 0 32 13 26 0 34 13 26 0 35 13 26 0 38 13 26 0 45 13 26 0 80 13 26 0 83 13 26 0 87 13 26 0 90 13 26 0 99 13 26 0 105 13 26 0 108 13 26 0 110 13 26 0 115 13 26 0 116 13 26 0 118 13 26 0 121 13 26 0 123 13 26 0 125 13 26 0 130 13 26 0 146 13 26 0 150 13 26 0 151 13 26 0 152 13 26 0 171 13 26 0 177 13 26 0 179 13 26 0 186 13 26 0 188 13 26 0 190 13 26 0 201 13 26 0 207 13 26 0 209 13 26 0 210 13 26 0 211 13 26 0 212 13 26 0 214 13 26 0 215 28 129 0 234 28 133 2 149] 
#[1 9 35 0 1 6 41 0 3 13 30 0 4 9 39 0 5 13 30 0 6 6 45 0 7 13 30 0 8 6 49 0 9 13 30 0 10 13 30 0 11 6 53 0 12 13 30 0 13 9 43 0 14 6 57 0 15 13 30 0 16 13 30 0 17 6 61 0 19 6 65 0 20 13 30 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 13 30 0 28 13 30 0 32 6 93 0 34 6 97 0 35 13 30 0 38 13 30 0 45 13 30 0 80 13 30 0 83 13 30 0 87 13 30 0 90 13 30 0 99 13 30 0 105 13 30 0 108 13 30 0 110 13 30 0 115 6 101 0 116 6 105 0 118 13 30 0 121 13 30 0 123 6 109 0 125 6 113 0 130 13 30 0 146 6 117 0 150 6 121 0 151 13 30 0 152 13 30 0 171 13 30 0 177 13 30 0 179 13 30 0 186 13 30 0 188 13 30 0 190 13 30 0 201 6 125 0 207 6 129 0 209 13 30 0 210 6 133 0 211 13 30 0 212 13 30 0 214 13 30 0 215 6 137 0 236] 
#[1 9 47 0 1 6 41 0 3 13 34 0 4 9 51 0 5 13 34 0 6 6 45 0 7 13 34 0 8 6 49 0 9 13 34 0 10 13 34 0 11 6 53 0 12 13 34 0 13 9 55 0 14 6 57 0 15 13 34 0 16 13 34 0 17 6 61 0 19 6 65 0 20 13 34 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 13 34 0 28 13 34 0 32 6 93 0 34 6 97 0 35 13 34 0 38 13 34 0 45 13 34 0 80 13 34 0 83 13 34 0 87 13 34 0 90 13 34 0 99 13 34 0 105 13 34 0 108 13 34 0 110 13 34 0 115 6 101 0 116 6 105 0 118 13 34 0 121 13 34 0 123 6 109 0 125 6 113 0 130 13 34 0 146 6 117 0 150 6 121 0 151 13 34 0 152 13 34 0 171 13 34 0 177 13 34 0 179 13 34 0 186 13 34 0 188 13 34 0 190 13 34 0 201 6 125 0 207 6 129 0 209 13 34 0 210 6 133 0 211 13 34 0 212 13 34 0 214 13 34 0 215 6 137 0 236] 
#[0 13 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 28 137 0 89] 
#[0 28 141 0 89] 
#[0 13 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 28 145 0 17 28 149 0 215] 
#[1 28 153 0 17 28 157 0 215] 
#[0 28 161 0 114] 
#[0 28 165 0 114] 
#[0 13 54 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 13 58 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 13 62 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 13 66 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 28 169 0 17 28 173 0 215] 
#[0 28 177 0 70] 
#[1 28 181 0 17 28 185 0 215] 
#[0 28 189 0 70] 
#[0 28 193 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 28 197 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[0 28 201 0 70] 
#[1 0 73 0 19 4 138 0 40 0 26 0 70 4 142 0 72 4 146 0 74 4 150 0 77 0 215 0 78 0 30 0 79 12 65 0 81 28 205 0 88 0 30 0 89 4 146 0 93 0 219 0 98 4 138 0 100 0 30 0 114 0 223 0 120 0 26 0 132 0 227 0 133 7 154 0 137 0 26 0 141 0 231 0 142 7 154 0 147 2 223 0 154 0 239 0 155 0 243 0 156 0 247 0 158 0 251 0 160 0 255 0 161 1 3 0 162 2 227 0 163 1 11 0 166 2 231 0 173 2 235 0 174 0 34 0 183 1 23 0 184 7 154 0 203 12 65 0 205 1 27 0 206 11 217 0 243 17 169 0 254 0 89 0 255 0 93 1 0 17 177 1 42 17 177 1 66 11 229 1 67 17 177 1 70 0 137 1 71 17 177 1 76 17 177 1 77 0 145 1 78 17 177 1 85 17 177 1 100 17 177 1 107 17 177 1 109 17 177 1 114 11 249 1 115 17 177 1 116 17 177 1 119 17 177 1 120 17 177 1 126 17 177 1 127 12 17 1 128 17 177 1 130 17 177 1 149 12 29 1 150 17 177 1 152 17 177 1 153 12 41 1 154 17 177 1 160 17 177 1 166 12 53 1 167 17 177 1 173 12 61 1 174 12 65 1 175 17 177 1 189 17 177 1 191 12 77 1 192 17 177 1 194 12 85 1 195 17 177 1 196 12 93 1 197 12 105 1 206 12 105 1 207 12 105 1 208 17 177 1 213 17 209 1 214] 
#[1 28 209 0 17 28 213 0 215] 
#[1 28 217 0 17 28 221 0 215] 
#[0 28 225 0 183] 
#[0 28 229 0 183] 
#[0 13 70 0 17 0 106 0 108 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 28 233 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 28 233 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 28 237 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 28 241 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 28 241 1 93] 
#[0 13 74 0 6 0 11 0 215] 
#[1 13 78 0 6 13 78 0 11 2 69 0 24 13 78 0 215 28 245 0 240] 
#[0 13 82 0 6 0 11 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 28 249 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 28 249 1 93] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 11 33 0 254 0 89 0 255 0 93 1 0 28 253 1 113] 
#[0 13 86 0 19 0 88 0 229] 
#[0 13 90 0 19 0 88 0 229] 
#[1 29 1 0 17 29 5 0 215] 
#[1 29 9 0 17 29 13 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 29 17 1 44 29 17 1 45 29 17 1 46 29 17 1 53 29 17 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[0 13 94 0 11 0 17 0 215] 
#[0 13 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 29 21 0 17 29 25 0 215] 
#[1 29 29 0 17 29 33 0 215] 
#[0 29 37 0 229] 
#[1 29 41 0 17 29 45 0 215] 
#[0 13 106 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 110 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 114 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 118 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 2 33 0 5 11 246 0 17 25 241 0 37 11 246 0 215 25 245 0 236 29 49 1 157] 
#[0 13 122 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 126 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 29 53 0 214 5 245 0 215 29 53 0 239] 
#[1 13 138 0 11 13 138 0 214 13 138 0 215 29 57 0 252] 
#[0 13 142 0 6 0 11 0 215] 
#[1 29 61 0 17 29 65 0 215] 
#[1 29 69 0 17 29 73 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 29 77 1 218 13 221 1 220] 
#[0 29 81 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 29 85 1 218 13 221 1 220] 
#[0 29 89 0 215] 
#[1 16 249 0 40 16 249 0 98 2 149 0 100 16 249 0 120 16 249 0 142 16 249 0 154 16 249 0 155 16 249 0 156 16 249 0 158 16 249 0 160 16 249 0 162 16 249 0 163 16 249 0 173 16 249 0 174 2 153 0 184 16 249 0 243 29 93 1 111 29 97 1 112 16 249 1 122] 
#[0 29 101 0 229] 
#[0 29 105 0 229] 
#[1 29 109 0 100 29 113 0 184] 
#[1 2 33 0 5 29 117 0 215 29 121 0 236] 
#[0 29 125 0 229] 
#[1 2 33 0 5 11 246 0 17 25 241 0 37 11 246 0 108 11 246 0 215 25 245 0 236 29 129 1 157] 
#[1 29 133 0 17 29 137 0 215] 
#[0 13 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 29 141 1 193 26 45 1 210 26 45 1 211 26 45 1 212] 
#[0 29 145 0 215] 
#[0 13 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 29 149 0 17 29 153 0 215] 
#[1 2 33 0 5 2 69 0 24 29 157 0 37 12 18 0 108 12 18 0 215 29 161 0 236 26 77 0 240 26 81 1 198 29 165 1 199] 
#[1 2 25 0 14 29 169 0 235] 
#[1 2 25 0 14 29 173 0 235] 
#[1 2 25 0 14 29 177 0 235] 
#[1 2 25 0 14 29 181 0 235] 
#[0 13 162 0 17 0 215] 
#[1 13 166 0 11 13 166 0 17 13 166 0 215 29 185 1 147] 
#[1 2 25 0 14 2 89 0 29 29 189 0 235] 
#[0 13 170 0 17 0 215] 
#[1 13 174 0 11 13 174 0 17 13 174 0 215 29 193 1 105] 
#[0 29 197 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 29 201 1 218 13 221 1 220] 
#[0 29 205 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 29 209 1 218 13 221 1 220] 
#[1 29 213 0 17 21 141 0 106 21 145 0 108 29 217 0 215 21 153 1 102 29 221 1 125 21 161 1 144] 
#[1 29 225 0 17 21 141 0 106 21 145 0 108 29 229 0 215 21 153 1 102 29 233 1 125 21 161 1 144] 
#[1 29 237 0 124 29 241 1 135] 
#[1 29 237 0 124 29 245 1 135] 
#[0 29 249 0 229] 
#[0 29 253 0 229] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 30 1 1 218 13 221 1 220] 
#[1 30 5 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 30 5 0 237 11 45 0 254 0 89 0 255 0 93 1 0 30 9 1 137 11 53 1 140 11 57 1 141] 
#[0 30 13 0 37] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 17 1 44 30 17 1 45 30 17 1 46 30 17 1 53 30 17 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 30 21 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 30 21 0 237 11 45 0 254 0 89 0 255 0 93 1 0 30 25 1 137 11 53 1 140 11 57 1 141] 
#[1 30 29 0 17 21 145 0 108 30 33 0 215 30 37 1 102] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 41 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 30 41 1 93] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 30 45 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 13 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 229 0 11 13 186 0 17 13 186 0 215 30 49 0 234 30 53 1 170] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 57 0 254 0 89 0 255 0 93 1 0 30 61 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 30 61 1 93] 
#[1 30 65 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 30 65 0 237 11 45 0 254 0 89 0 255 0 93 1 0 30 69 1 137 11 53 1 140 11 57 1 141] 
#[0 30 73 0 215] 
#[1 2 33 0 5 30 77 0 215 30 81 0 236] 
#[1 30 85 0 101 30 89 0 172] 
#[1 30 101 0 98 30 93 0 101 30 101 0 160 30 101 0 162 30 101 0 163 30 97 0 172 30 101 0 243] 
#[1 0 73 0 19 30 105 0 88 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 30 109 1 210 30 109 1 211 30 109 1 212] 
#[0 13 190 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 13 194 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 13 198 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 0 73 0 19 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 30 113 1 193 26 45 1 210 26 45 1 211 26 45 1 212] 
#[0 13 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 30 117 0 138 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 30 121 0 254 0 89 0 255 0 93 1 0 30 125 1 113] 
#[1 30 129 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 30 129 0 237 11 45 0 254 0 89 0 255 0 93 1 0 30 133 1 137 11 53 1 140 11 57 1 141] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 30 137 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 30 137 2 48 30 137 2 50 30 137 2 51 30 137 2 52 30 137 2 53 30 137 2 54 30 137 2 55 30 137 2 56 30 137 2 57 30 137 2 64 30 137 2 65 30 137 2 66 4 21 2 67 30 137 2 68 30 137 2 69 30 137 2 77 30 137 2 78 30 137 2 86 30 137 2 91 30 137 2 92 30 137 2 93 30 137 2 94 30 137 2 95 4 65 2 96 30 137 2 97 30 137 2 98 30 137 2 99 30 137 2 100 30 137 2 101 30 137 2 102 30 137 2 103 30 137 2 104 30 137 2 105 30 137 2 106 30 137 2 107 30 137 2 108 30 137 2 109 30 137 2 110 30 137 2 111 30 137 2 112 30 137 2 113 30 137 2 114 30 137 2 115 30 137 2 116 4 149 2 117 30 137 2 118 30 137 2 119 30 137 2 120 30 137 2 122 4 169 2 125 4 173 2 136 4 177 2 155 30 137 2 158 30 137 2 159] 
#[0 13 210 0 108 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 30 145 1 200] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 149 1 44 30 149 1 45 30 149 1 46 30 149 1 53 30 149 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[0 13 218 0 11 0 17 0 215] 
#[0 13 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 30 153 0 3 0 7 0 9 0 12 0 15 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 34 0 62 0 117 0 119 0 125 0 130 0 140 0 150 0 207 0 209 0 211 1 216] 
#[0 13 230 0 5] 
#[0 13 234 0 5] 
#[0 13 238 0 5] 
#[0 13 242 0 5] 
#[0 13 246 0 5] 
#[0 13 250 0 5] 
#[0 13 254 0 5] 
#[0 14 2 0 5] 
#[0 14 6 0 5] 
#[0 14 10 0 5] 
#[0 14 14 0 5] 
#[0 14 18 0 5] 
#[0 14 22 0 5] 
#[0 14 26 0 5] 
#[0 14 30 0 5] 
#[0 14 34 0 5] 
#[0 14 38 0 5] 
#[0 14 42 0 5] 
#[0 14 46 0 5] 
#[0 14 50 0 5] 
#[0 14 54 0 5] 
#[0 14 58 0 5] 
#[0 14 62 0 5] 
#[0 14 66 0 5] 
#[1 2 33 0 5 30 157 0 236] 
#[1 30 161 0 17 30 165 0 215] 
#[0 14 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 30 169 0 17 30 173 0 215] 
#[1 30 177 0 17 30 181 0 215] 
#[0 30 185 0 70] 
#[1 30 189 0 17 30 193 0 215] 
#[0 30 197 0 70] 
#[0 14 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 30 201 0 17 30 205 0 215] 
#[1 30 209 0 17 30 213 0 215] 
#[0 14 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 30 217 2 132 15 45 2 135] 
#[0 14 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 59 0 1 6 41 0 3 14 102 0 4 9 63 0 5 14 102 0 6 6 45 0 7 14 102 0 8 6 49 0 9 14 102 0 10 14 102 0 11 6 53 0 12 14 102 0 13 9 67 0 14 6 57 0 15 14 102 0 16 14 102 0 17 6 61 0 19 6 65 0 20 14 102 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 14 102 0 28 14 102 0 32 6 93 0 34 6 97 0 35 14 102 0 38 14 102 0 45 14 102 0 80 14 102 0 83 14 102 0 87 14 102 0 90 14 102 0 99 14 102 0 105 14 102 0 108 14 102 0 110 14 102 0 115 6 101 0 116 6 105 0 118 14 102 0 121 14 102 0 123 6 109 0 125 6 113 0 130 14 102 0 146 6 117 0 150 6 121 0 151 14 102 0 152 14 102 0 171 14 102 0 177 14 102 0 179 14 102 0 186 14 102 0 188 14 102 0 190 14 102 0 201 6 125 0 207 6 129 0 209 14 102 0 210 6 133 0 211 14 102 0 212 14 102 0 214 14 102 0 215 6 137 0 236] 
#[0 14 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 14 110 0 6 2 25 0 14 14 110 0 215 18 89 0 235 18 93 2 60] 
#[0 14 114 0 6 0 14 0 215] 
#[0 30 221 0 144] 
#[0 14 118 0 6 0 14 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 30 225 0 6 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 6 137 0 236 30 225 0 237] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 30 229 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 30 229 2 48 30 229 2 50 30 229 2 51 30 229 2 52 30 229 2 53 30 229 2 54 30 229 2 55 30 229 2 56 30 229 2 57 30 229 2 64 30 229 2 65 30 229 2 66 4 21 2 67 30 229 2 68 30 229 2 69 30 229 2 77 30 229 2 78 30 229 2 86 30 229 2 91 30 229 2 92 30 229 2 93 30 229 2 94 30 229 2 95 4 65 2 96 30 229 2 97 30 229 2 98 30 229 2 99 30 229 2 100 30 229 2 101 30 229 2 102 30 229 2 103 30 229 2 104 30 229 2 105 30 229 2 106 30 229 2 107 30 229 2 108 30 229 2 109 30 229 2 110 30 229 2 111 30 229 2 112 30 229 2 113 30 229 2 114 30 229 2 115 30 229 2 116 4 149 2 117 30 229 2 118 30 229 2 119 30 229 2 120 30 229 2 122 4 169 2 125 4 173 2 136 4 177 2 155 30 229 2 158 30 229 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 14 122 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 14 122 0 214 14 122 0 215 6 137 0 236] 
#[0 14 126 0 11 0 214 0 215] 
#[0 14 130 0 6 0 11 0 215] 
#[0 30 233 0 228] 
#[0 14 134 0 6 0 11 0 215] 
#[0 14 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 30 237 0 100] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 30 241 1 218 13 221 1 220] 
#[0 30 245 0 100] 
#[0 30 249 0 215] 
#[0 30 253 0 88] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 1 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 31 1 2 48 31 1 2 50 31 1 2 51 31 1 2 52 31 1 2 53 31 1 2 54 31 1 2 55 31 1 2 56 31 1 2 57 31 1 2 64 31 1 2 65 31 1 2 66 4 21 2 67 31 1 2 68 31 1 2 69 31 1 2 77 31 1 2 78 31 1 2 86 31 1 2 91 31 1 2 92 31 1 2 93 31 1 2 94 31 1 2 95 4 65 2 96 31 1 2 97 31 1 2 98 31 1 2 99 31 1 2 100 31 1 2 101 31 1 2 102 31 1 2 103 31 1 2 104 31 1 2 105 31 1 2 106 31 1 2 107 31 1 2 108 31 1 2 109 31 1 2 110 31 1 2 111 31 1 2 112 31 1 2 113 31 1 2 114 31 1 2 115 31 1 2 116 4 149 2 117 31 1 2 118 31 1 2 119 31 1 2 120 31 1 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 1 2 158 31 1 2 159] 
#[0 31 5 0 127] 
#[1 9 71 0 1 6 41 0 3 14 142 0 4 9 75 0 5 14 142 0 6 6 45 0 7 14 142 0 8 6 49 0 9 14 142 0 10 14 142 0 11 6 53 0 12 14 142 0 13 9 79 0 14 6 57 0 15 14 142 0 16 14 142 0 17 6 61 0 19 6 65 0 20 14 142 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 14 142 0 28 14 142 0 32 6 93 0 34 6 97 0 35 14 142 0 38 14 142 0 45 14 142 0 80 14 142 0 83 14 142 0 87 14 142 0 90 14 142 0 99 14 142 0 105 14 142 0 108 14 142 0 110 14 142 0 115 6 101 0 116 6 105 0 118 14 142 0 121 14 142 0 123 6 109 0 125 6 113 0 130 14 142 0 146 6 117 0 150 6 121 0 151 14 142 0 152 14 142 0 171 14 142 0 177 14 142 0 179 14 142 0 186 14 142 0 188 14 142 0 190 14 142 0 201 6 125 0 207 6 129 0 209 14 142 0 210 6 133 0 211 14 142 0 212 14 142 0 214 14 142 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 9 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 31 9 2 48 31 9 2 50 31 9 2 51 31 9 2 52 31 9 2 53 31 9 2 54 31 9 2 55 31 9 2 56 31 9 2 57 31 9 2 64 31 9 2 65 31 9 2 66 4 21 2 67 31 9 2 68 31 9 2 69 31 9 2 77 31 9 2 78 31 9 2 86 31 9 2 91 31 9 2 92 31 9 2 93 31 9 2 94 31 9 2 95 4 65 2 96 31 9 2 97 31 9 2 98 31 9 2 99 31 9 2 100 31 9 2 101 31 9 2 102 31 9 2 103 31 9 2 104 31 9 2 105 31 9 2 106 31 9 2 107 31 9 2 108 31 9 2 109 31 9 2 110 31 9 2 111 31 9 2 112 31 9 2 113 31 9 2 114 31 9 2 115 31 9 2 116 4 149 2 117 31 9 2 118 31 9 2 119 31 9 2 120 31 9 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 9 2 158 31 9 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 31 13 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 31 17 0 215 6 137 0 236] 
#[0 14 146 0 24 0 110] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 31 21 2 48 31 21 2 50 31 21 2 51 31 21 2 52 31 21 2 53 31 21 2 54 31 21 2 55 31 21 2 56 31 21 2 57 31 21 2 64 31 21 2 65 31 21 2 66 4 21 2 67 31 21 2 68 31 21 2 69 31 21 2 77 31 21 2 78 31 21 2 86 31 21 2 91 31 21 2 92 31 21 2 93 31 21 2 94 31 21 2 95 4 65 2 96 31 21 2 97 31 21 2 98 31 21 2 99 31 21 2 100 31 21 2 101 31 21 2 102 31 21 2 103 31 21 2 104 31 21 2 105 31 21 2 106 31 21 2 107 31 21 2 108 31 21 2 109 31 21 2 110 31 21 2 111 31 21 2 112 31 21 2 113 31 21 2 114 31 21 2 115 31 21 2 116 4 149 2 117 31 21 2 118 31 21 2 119 31 21 2 120 31 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 21 2 158 31 21 2 159] 
#[1 31 25 0 87 31 29 0 88 31 33 0 226 31 37 1 244 31 41 1 245] 
#[1 12 186 0 87 12 186 0 88 12 186 0 226 31 45 1 243] 
#[1 12 186 0 87 12 186 0 88 12 186 0 226 31 49 1 243] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 18 189 0 17 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 18 197 1 217 18 197 1 221 9 177 1 222 31 53 1 223 18 209 1 224 18 213 1 225 18 197 1 226 9 185 1 227 18 197 1 228 18 197 1 229 18 197 1 230 18 197 1 231 18 197 1 232 18 197 1 233 18 197 1 234 18 197 1 235 18 197 1 236 18 197 1 238 18 197 1 239 18 197 1 240 18 197 1 241 18 197 1 242 18 197 1 246 18 197 1 248 18 197 2 1 18 197 2 2 18 197 2 3 18 197 2 4 18 197 2 5 18 197 2 7 18 197 2 12 18 197 2 13 18 197 2 14 18 197 2 15 18 197 2 19 18 197 2 20 18 197 2 21 18 197 2 22 18 197 2 24 18 197 2 26 18 197 2 27 18 197 2 28 18 197 2 30 18 197 2 32 18 197 2 33 18 197 2 34 18 197 2 35 18 197 2 36 18 197 2 41 18 197 2 45 18 197 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[0 14 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 31 25 0 87 31 57 0 88 31 33 0 226 31 37 1 244 31 61 1 245] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 65 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 31 65 2 48 31 65 2 50 31 65 2 51 31 65 2 52 31 65 2 53 31 65 2 54 31 65 2 55 31 65 2 56 31 65 2 57 31 65 2 64 31 65 2 65 31 65 2 66 4 21 2 67 31 65 2 68 31 65 2 69 31 65 2 77 31 65 2 78 31 65 2 86 31 65 2 91 31 65 2 92 31 65 2 93 31 65 2 94 31 65 2 95 4 65 2 96 31 65 2 97 31 65 2 98 31 65 2 99 31 65 2 100 31 65 2 101 31 65 2 102 31 65 2 103 31 65 2 104 31 65 2 105 31 65 2 106 31 65 2 107 31 65 2 108 31 65 2 109 31 65 2 110 31 65 2 111 31 65 2 112 31 65 2 113 31 65 2 114 31 65 2 115 31 65 2 116 4 149 2 117 31 65 2 118 31 65 2 119 31 65 2 120 31 65 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 65 2 158 31 65 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 31 73 0 6 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 31 69 0 234 6 137 0 236 31 73 0 237] 
#[0 14 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 27 173 0 67 31 77 0 88 27 181 1 250 31 81 2 0] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 31 125 0 19 31 125 0 22 31 125 0 23 31 125 0 24 31 125 0 25 31 105 0 26 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 31 109 0 87 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 31 113 0 116 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 129 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 31 117 1 251 31 121 1 254 31 125 1 255 31 129 2 48 31 129 2 50 31 129 2 51 31 129 2 52 31 129 2 53 31 129 2 54 31 129 2 55 31 129 2 56 31 129 2 57 31 129 2 64 31 129 2 65 31 129 2 66 4 21 2 67 31 129 2 68 31 129 2 69 31 129 2 77 31 129 2 78 31 129 2 86 31 129 2 91 31 129 2 92 31 129 2 93 31 129 2 94 31 129 2 95 4 65 2 96 31 129 2 97 31 129 2 98 31 129 2 99 31 129 2 100 31 129 2 101 31 129 2 102 31 129 2 103 31 129 2 104 31 129 2 105 31 129 2 106 31 129 2 107 31 129 2 108 31 129 2 109 31 129 2 110 31 129 2 111 31 129 2 112 31 129 2 113 31 129 2 114 31 129 2 115 31 129 2 116 4 149 2 117 31 129 2 118 31 129 2 119 31 129 2 120 31 129 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 129 2 158 31 129 2 159] 
#[0 31 133 0 171] 
#[0 14 166 0 67 0 88] 
#[0 31 137 0 88] 
#[0 31 141 0 185] 
#[1 31 145 0 200 31 149 0 215 31 153 0 229] 
#[0 31 157 0 191] 
#[0 31 161 0 215] 
#[0 31 165 0 88] 
#[0 14 170 0 68 0 88 0 96] 
#[0 14 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 254 0 1 3 254 0 3 3 254 0 4 0 127 0 5 3 254 0 6 3 254 0 7 3 254 0 8 3 254 0 9 3 254 0 10 3 254 0 11 3 254 0 12 3 254 0 13 3 254 0 14 3 254 0 15 3 254 0 16 3 254 0 17 3 254 0 19 3 254 0 20 3 254 0 21 3 254 0 22 3 254 0 23 3 254 0 24 3 254 0 25 3 254 0 26 3 254 0 27 3 254 0 28 2 89 0 29 3 254 0 32 3 254 0 34 3 254 0 35 3 254 0 38 3 254 0 45 3 254 0 80 3 254 0 83 3 254 0 87 3 254 0 90 0 131 0 99 3 254 0 105 3 254 0 108 3 254 0 110 3 254 0 115 3 254 0 116 3 254 0 118 3 254 0 121 3 254 0 123 3 254 0 125 3 254 0 130 3 254 0 146 3 254 0 150 3 254 0 151 3 254 0 152 3 254 0 171 3 254 0 177 3 254 0 179 3 254 0 186 3 254 0 188 3 254 0 190 3 254 0 201 5 189 0 204 3 254 0 207 3 254 0 209 3 254 0 210 3 254 0 211 3 254 0 212 3 254 0 214 3 254 0 215 31 169 0 236 7 229 2 79 7 229 2 80 7 229 2 85] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 173 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 31 173 2 48 31 173 2 50 31 173 2 51 31 173 2 52 31 173 2 53 31 173 2 54 31 173 2 55 31 173 2 56 31 173 2 57 31 173 2 64 31 173 2 65 31 173 2 66 4 21 2 67 31 173 2 68 31 173 2 69 31 173 2 77 31 173 2 78 31 173 2 86 31 173 2 91 31 173 2 92 31 173 2 93 31 173 2 94 31 173 2 95 4 65 2 96 31 173 2 97 31 173 2 98 31 173 2 99 31 173 2 100 31 173 2 101 31 173 2 102 31 173 2 103 31 173 2 104 31 173 2 105 31 173 2 106 31 173 2 107 31 173 2 108 31 173 2 109 31 173 2 110 31 173 2 111 31 173 2 112 31 173 2 113 31 173 2 114 31 173 2 115 31 173 2 116 4 149 2 117 31 173 2 118 31 173 2 119 31 173 2 120 31 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 173 2 158 31 173 2 159] 
#[0 14 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 31 177 0 199] 
#[0 31 181 0 202] 
#[0 31 185 0 204] 
#[0 31 189 0 184] 
#[0 31 193 0 88] 
#[0 31 197 0 115] 
#[1 31 201 0 215 11 34 0 229 31 201 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 31 205 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 31 209 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 31 213 0 146] 
#[1 31 217 0 146 31 221 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 31 225 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 31 229 0 215 31 229 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 31 233 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 31 237 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 31 241 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 31 245 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 31 249 0 146] 
#[1 11 34 0 115 31 253 0 215 31 253 2 154] 
#[0 32 1 0 115] 
#[1 15 37 0 229 32 5 2 132 15 45 2 135] 
#[1 11 34 0 115 32 9 0 215 32 9 2 154] 
#[1 32 13 0 215 15 37 0 229 32 17 2 132 15 45 2 135] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 32 21 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 32 21 2 48 32 21 2 50 32 21 2 51 32 21 2 52 32 21 2 53 32 21 2 54 32 21 2 55 32 21 2 56 32 21 2 57 32 21 2 64 32 21 2 65 32 21 2 66 4 21 2 67 32 21 2 68 32 21 2 69 32 21 2 77 32 21 2 78 32 21 2 86 32 21 2 91 32 21 2 92 32 21 2 93 32 21 2 94 32 21 2 95 4 65 2 96 32 21 2 97 32 21 2 98 32 21 2 99 32 21 2 100 32 21 2 101 32 21 2 102 32 21 2 103 32 21 2 104 32 21 2 105 32 21 2 106 32 21 2 107 32 21 2 108 32 21 2 109 32 21 2 110 32 21 2 111 32 21 2 112 32 21 2 113 32 21 2 114 32 21 2 115 32 21 2 116 4 149 2 117 32 21 2 118 32 21 2 119 32 21 2 120 32 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 32 21 2 158 32 21 2 159] 
#[1 11 34 0 115 32 25 0 215 32 25 2 154] 
#[0 32 29 0 115] 
#[1 15 37 0 229 32 33 2 132 15 45 2 135] 
#[1 11 34 0 115 32 37 0 215 32 37 2 154] 
#[0 14 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 32 41 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 14 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 45 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 32 49 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 53 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 32 57 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 32 61 0 146] 
#[0 14 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 65 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 32 69 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 32 69 2 48 32 69 2 50 32 69 2 51 32 69 2 52 32 69 2 53 32 69 2 54 32 69 2 55 32 69 2 56 32 69 2 57 32 69 2 64 32 69 2 65 32 69 2 66 4 21 2 67 32 69 2 68 32 69 2 69 32 69 2 77 32 69 2 78 32 69 2 86 32 69 2 91 32 69 2 92 32 69 2 93 32 69 2 94 32 69 2 95 4 65 2 96 32 69 2 97 32 69 2 98 32 69 2 99 32 69 2 100 32 69 2 101 32 69 2 102 32 69 2 103 32 69 2 104 32 69 2 105 32 69 2 106 32 69 2 107 32 69 2 108 32 69 2 109 32 69 2 110 32 69 2 111 32 69 2 112 32 69 2 113 32 69 2 114 32 69 2 115 32 69 2 116 4 149 2 117 32 69 2 118 32 69 2 119 32 69 2 120 32 69 2 122 4 169 2 125 4 173 2 136 4 177 2 155 32 69 2 158 32 69 2 159] 
#[1 14 194 0 1 14 194 0 3 14 194 0 4 14 194 0 5 14 194 0 6 14 194 0 7 14 194 0 8 14 194 0 9 14 194 0 10 14 194 0 11 14 194 0 12 14 194 0 13 14 194 0 14 14 194 0 15 14 194 0 16 14 194 0 17 14 194 0 19 14 194 0 20 14 194 0 21 14 194 0 22 14 194 0 23 14 194 0 24 14 194 0 25 14 194 0 26 14 194 0 27 14 194 0 28 14 194 0 32 32 73 0 34 14 194 0 35 14 194 0 38 14 194 0 45 14 194 0 80 14 194 0 83 14 194 0 87 14 194 0 90 14 194 0 99 14 194 0 105 14 194 0 108 14 194 0 110 14 194 0 115 14 194 0 116 14 194 0 118 14 194 0 121 14 194 0 123 14 194 0 125 14 194 0 130 14 194 0 146 14 194 0 150 14 194 0 151 14 194 0 152 14 194 0 171 14 194 0 177 14 194 0 179 14 194 0 186 14 194 0 188 14 194 0 190 14 194 0 201 14 194 0 207 14 194 0 209 14 194 0 210 14 194 0 211 14 194 0 212 14 194 0 214 14 194 0 215 32 77 2 139] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 32 81 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 14 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 32 85 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 14 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 89 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 32 93 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 19 241 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 19 241 2 48 19 241 2 50 19 241 2 51 19 241 2 52 19 241 2 53 19 241 2 54 19 241 2 55 19 241 2 56 19 241 2 57 19 241 2 64 19 241 2 65 19 241 2 66 4 21 2 67 19 241 2 68 19 241 2 69 19 241 2 77 19 241 2 78 19 241 2 86 19 241 2 91 19 241 2 92 19 241 2 93 19 241 2 94 19 241 2 95 4 65 2 96 19 241 2 97 19 241 2 98 19 241 2 99 19 241 2 100 19 241 2 101 19 241 2 102 19 241 2 103 19 241 2 104 19 241 2 105 19 241 2 106 19 241 2 107 19 241 2 108 19 241 2 109 19 241 2 110 19 241 2 111 19 241 2 112 19 241 2 113 19 241 2 114 19 241 2 115 19 241 2 116 4 149 2 117 19 241 2 118 19 241 2 119 19 241 2 120 19 241 2 122 4 169 2 125 4 173 2 136 32 97 2 151 4 177 2 155 19 241 2 158 19 241 2 159] 
#[0 14 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 32 101 0 17 32 105 0 215] 
#[1 32 109 0 17 32 113 0 215] 
#[0 14 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 32 117 0 17 32 121 0 215] 
#[1 32 125 0 17 32 129 0 215] 
#[0 14 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 32 133 0 17 32 137 0 215] 
#[0 14 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 32 141 0 17 32 145 0 215] 
#[1 32 149 0 17 32 153 0 215] 
#[0 32 157 0 70] 
#[1 32 161 0 17 32 165 0 215] 
#[0 32 169 0 70] 
#[0 14 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 32 173 0 17 32 177 0 215] 
#[1 32 181 0 17 32 185 0 215] 
#[1 15 2 0 6 15 2 0 11 2 69 0 24 15 2 0 215 32 189 0 240] 
#[0 15 6 0 6 0 11 0 215] 
#[0 15 10 0 17 0 106 0 108 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 32 193 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 15 14 0 17 0 106 0 108 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 32 197 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 32 197 1 93] 
#[0 15 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 15 34 0 11 15 34 0 17 2 89 0 29 15 34 0 215] 
#[0 15 38 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 42 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 46 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 50 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 2 33 0 5 11 246 0 17 25 241 0 37 11 246 0 215 25 245 0 236 32 201 1 157] 
#[0 15 54 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 58 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 32 205 0 17 32 209 0 215] 
#[0 15 62 0 6 0 11 0 215] 
#[1 2 229 0 11 15 66 0 214 15 66 0 215 32 213 0 234 32 217 0 251] 
#[0 15 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 32 221 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 32 225 1 218 13 221 1 220] 
#[0 32 229 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 32 233 1 218 13 221 1 220] 
#[1 32 237 0 17 21 141 0 106 21 145 0 108 32 241 0 215 21 153 1 102 32 245 1 125 21 161 1 144] 
#[1 32 249 0 17 21 141 0 106 21 145 0 108 32 253 0 215 21 153 1 102 33 1 1 125 21 161 1 144] 
#[1 29 237 0 124 33 5 1 135] 
#[1 29 237 0 124 33 9 1 135] 
#[0 33 13 0 229] 
#[0 33 17 0 229] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 33 21 1 218 13 221 1 220] 
#[1 33 25 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 33 25 0 237 11 45 0 254 0 89 0 255 0 93 1 0 33 29 1 137 11 53 1 140 11 57 1 141] 
#[0 33 33 0 37] 
#[1 33 37 0 17 21 145 0 108 33 41 0 215 33 45 1 102] 
#[0 15 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 33 49 0 88 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 30 109 1 210 30 109 1 211 30 109 1 212] 
#[1 0 73 0 19 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 33 53 1 193 26 45 1 210 26 45 1 211 26 45 1 212] 
#[0 15 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 33 57 0 138 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 33 61 0 254 0 89 0 255 0 93 1 0 33 65 1 113] 
#[1 33 69 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 33 69 0 237 11 45 0 254 0 89 0 255 0 93 1 0 33 73 1 137 11 53 1 140 11 57 1 141] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 33 77 1 200] 
#[0 33 81 0 228] 
#[0 33 85 0 228] 
#[0 33 89 0 228] 
#[0 33 93 0 228] 
#[1 2 229 0 11 15 102 0 17 15 102 0 215 33 97 0 234 33 101 1 146] 
#[0 33 105 0 228] 
#[1 2 229 0 11 15 106 0 17 15 106 0 215 33 109 0 234 33 113 1 104] 
#[0 33 117 0 184] 
#[0 33 121 0 88] 
#[0 33 125 0 100] 
#[0 33 129 0 88] 
#[0 15 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 133 0 17 33 137 0 215] 
#[0 15 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 141 0 17 33 145 0 215] 
#[0 33 149 0 223] 
#[1 2 33 0 5 15 126 0 17 33 153 0 33 33 157 0 37 15 126 0 215 33 161 0 236 33 165 1 131 33 169 1 132 33 173 1 136] 
#[1 2 33 0 5 33 177 0 17 33 153 0 33 33 181 0 215 33 185 0 236 33 189 1 136] 
#[1 29 237 0 124 33 193 1 135] 
#[1 29 237 0 124 33 197 1 135] 
#[0 33 201 0 88] 
#[0 33 205 0 215] 
#[1 33 209 0 6 3 137 0 215 33 209 0 237] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 33 213 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 33 213 1 93] 
#[1 15 130 0 17 2 89 0 29 15 130 0 108 15 130 0 215] 
#[0 15 134 0 17 0 108 0 215] 
#[1 33 217 0 6 3 137 0 215 33 217 0 237] 
#[0 15 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 33 221 0 17 33 225 0 215] 
#[1 2 69 0 24 33 229 0 240] 
#[0 15 146 0 11 0 17 0 215] 
#[1 21 213 0 229 33 233 1 172] 
#[0 15 150 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 33 237 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 33 237 1 93] 
#[0 15 154 0 17 0 108 0 215] 
#[1 15 158 0 17 33 241 0 37 15 158 0 108 15 158 0 215] 
#[1 33 245 0 6 3 137 0 215 33 245 0 237] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 33 249 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 33 253 1 218 13 221 1 220] 
#[1 34 1 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 34 1 0 237 11 45 0 254 0 89 0 255 0 93 1 0 34 5 1 137 11 53 1 140 11 57 1 141] 
#[0 34 9 0 215] 
#[1 2 33 0 5 34 13 0 215 34 17 0 236] 
#[0 34 21 0 215] 
#[1 2 33 0 5 34 25 0 215 34 29 0 236] 
#[1 34 33 0 101 34 37 0 172] 
#[0 34 41 0 161] 
#[0 15 162 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 0 73 0 19 34 45 0 88 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 30 109 1 210 30 109 1 211 30 109 1 212] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 34 57 1 202] 
#[1 6 174 0 44 6 174 0 48 6 174 0 69 6 174 0 75 6 174 0 76 6 174 0 85 6 174 0 103 6 174 0 113 6 174 0 126 34 61 0 138 6 174 0 143 6 174 0 170 6 174 0 175 6 174 0 176 6 174 0 182 6 174 0 194 6 174 0 195 6 174 0 196 6 174 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 34 65 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 65 1 93] 
#[1 2 69 0 24 34 69 0 37 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 34 73 1 199] 
#[1 34 77 0 6 3 137 0 215 34 77 0 237] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 15 170 0 108 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 15 170 0 215 6 137 0 236] 
#[0 15 174 0 215] 
#[0 34 81 0 215] 
#[1 15 178 0 11 15 178 0 17 2 89 0 29 15 178 0 215] 
#[1 2 33 0 5 34 85 0 236] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 34 89 1 137 11 53 1 140 11 57 1 141] 
#[0 15 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 34 93 0 17 34 97 0 215] 
#[0 15 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 34 101 0 17 34 105 0 215] 
#[0 15 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 22 157 0 6 2 229 0 11 3 137 0 215 4 205 0 234 22 157 0 237 22 161 1 98 22 165 2 63] 
#[0 15 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 15 238 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 15 238 0 214 15 238 0 215 6 137 0 236] 
#[1 5 221 0 18 34 109 0 241] 
#[0 15 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 34 113 0 88] 
#[0 15 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 34 117 1 218 13 221 1 220] 
#[0 34 121 0 100] 
#[1 9 83 0 1 6 41 0 3 15 250 0 4 9 87 0 5 15 250 0 6 6 45 0 7 15 250 0 8 6 49 0 9 15 250 0 10 15 250 0 11 6 53 0 12 15 250 0 13 9 91 0 14 6 57 0 15 15 250 0 16 15 250 0 17 6 61 0 19 6 65 0 20 15 250 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 15 250 0 28 15 250 0 32 6 93 0 34 6 97 0 35 15 250 0 38 15 250 0 45 15 250 0 80 15 250 0 83 15 250 0 87 15 250 0 90 15 250 0 99 15 250 0 105 15 250 0 108 15 250 0 110 15 250 0 115 6 101 0 116 6 105 0 118 15 250 0 121 15 250 0 123 6 109 0 125 6 113 0 130 15 250 0 146 6 117 0 150 6 121 0 151 15 250 0 152 15 250 0 171 15 250 0 177 15 250 0 179 15 250 0 186 15 250 0 188 15 250 0 190 15 250 0 201 6 125 0 207 6 129 0 209 15 250 0 210 6 133 0 211 15 250 0 212 15 250 0 214 15 250 0 215 6 137 0 236] 
#[0 15 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 34 125 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 34 129 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 133 1 217 34 133 1 221 9 177 1 222 34 133 1 226 9 185 1 227 34 133 1 228 34 133 1 229 34 133 1 230 34 133 1 231 34 133 1 232 34 133 1 233 34 133 1 234 34 133 1 235 34 133 1 236 34 133 1 238 34 133 1 239 34 133 1 240 34 133 1 241 34 133 1 242 34 133 1 246 34 133 1 248 34 133 2 1 34 133 2 2 34 133 2 3 34 133 2 4 34 133 2 5 34 133 2 7 34 133 2 12 34 133 2 13 34 133 2 14 34 133 2 15 34 133 2 19 34 133 2 20 34 133 2 21 34 133 2 22 34 133 2 24 34 133 2 26 34 133 2 27 34 133 2 28 34 133 2 30 34 133 2 32 34 133 2 33 34 133 2 34 34 133 2 35 34 133 2 36 34 133 2 41 34 133 2 45 34 133 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 9 95 0 1 9 99 0 5 2 253 0 9 3 1 0 12 9 103 0 14 5 134 0 17 7 147 0 30 7 151 0 31 9 107 0 32 7 159 0 40 3 13 0 42 7 163 0 44 7 167 0 48 7 171 0 49 7 175 0 50 7 179 0 51 7 183 0 52 7 187 0 53 7 191 0 54 7 195 0 55 7 199 0 56 7 203 0 57 7 207 0 58 7 211 0 59 7 215 0 60 7 219 0 61 7 223 0 62 7 227 0 63 7 231 0 64 7 235 0 65 7 239 0 66 7 243 0 69 7 247 0 72 7 251 0 73 7 255 0 75 8 3 0 76 8 7 0 81 8 11 0 82 8 15 0 84 8 19 0 85 8 23 0 88 8 27 0 91 8 31 0 92 8 35 0 94 8 39 0 97 9 111 0 99 7 159 0 100 8 47 0 102 8 51 0 103 8 55 0 104 8 59 0 107 8 63 0 113 7 159 0 120 8 67 0 126 8 71 0 128 8 75 0 129 8 79 0 134 8 83 0 135 8 87 0 138 5 134 0 139 3 121 0 140 8 91 0 143 9 115 0 146 8 99 0 164 8 103 0 165 8 107 0 167 8 111 0 168 8 115 0 169 8 119 0 170 9 119 0 171 8 127 0 175 8 131 0 176 8 135 0 178 8 139 0 180 8 143 0 182 7 159 0 184 8 147 0 185 8 151 0 189 8 155 0 191 8 159 0 192 8 163 0 193 8 167 0 194 8 171 0 195 8 175 0 196 8 179 0 199 8 183 0 202 8 187 0 204 8 191 0 208 8 195 0 213 5 134 0 215 8 199 0 219 8 203 0 220 8 207 0 221 8 211 0 222 8 215 0 223 8 219 0 224 8 223 0 225 8 227 0 227 8 231 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 137 1 217 34 141 1 218 13 221 1 220 34 137 1 221 9 177 1 222 34 137 1 226 9 185 1 227 34 137 1 228 34 137 1 229 34 137 1 230 34 137 1 231 34 137 1 232 34 137 1 233 34 137 1 234 34 137 1 235 34 137 1 236 34 137 1 238 34 137 1 239 34 137 1 240 34 137 1 241 34 137 1 242 34 137 1 246 34 137 1 248 34 137 2 1 34 137 2 2 34 137 2 3 34 137 2 4 34 137 2 5 34 137 2 7 34 137 2 12 34 137 2 13 34 137 2 14 34 137 2 15 34 137 2 19 34 137 2 20 34 137 2 21 34 137 2 22 34 137 2 24 34 137 2 26 34 137 2 27 34 137 2 28 34 137 2 30 34 137 2 32 34 137 2 33 34 137 2 34 34 137 2 35 34 137 2 36 34 137 2 41 34 137 2 45 34 137 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 34 145 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 34 149 0 179 6 125 0 207 6 129 0 209 6 133 0 211 34 153 0 215 6 137 0 236] 
#[1 34 157 0 17 34 161 0 215] 
#[0 34 165 0 107] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 34 169 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 169 2 48 34 169 2 50 34 169 2 51 34 169 2 52 34 169 2 53 34 169 2 54 34 169 2 55 34 169 2 56 34 169 2 57 34 169 2 64 34 169 2 65 34 169 2 66 4 21 2 67 34 169 2 68 34 169 2 69 34 169 2 77 34 169 2 78 34 169 2 86 34 169 2 91 34 169 2 92 34 169 2 93 34 169 2 94 34 169 2 95 4 65 2 96 34 169 2 97 34 169 2 98 34 169 2 99 34 169 2 100 34 169 2 101 34 169 2 102 34 169 2 103 34 169 2 104 34 169 2 105 34 169 2 106 34 169 2 107 34 169 2 108 34 169 2 109 34 169 2 110 34 169 2 111 34 169 2 112 34 169 2 113 34 169 2 114 34 169 2 115 34 169 2 116 4 149 2 117 34 169 2 118 34 169 2 119 34 169 2 120 34 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 34 169 2 158 34 169 2 159] 
#[0 16 2 0 87 0 88 0 226] 
#[0 34 173 0 88] 
#[1 31 25 0 87 34 177 0 88 31 33 0 226 31 37 1 244 34 181 1 245] 
#[1 31 25 0 87 34 185 0 88 31 33 0 226 31 37 1 244 34 189 1 245] 
#[0 16 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 34 193 0 107] 
#[0 34 197 0 88] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 34 205 0 6 6 45 0 7 6 49 0 9 2 229 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 34 201 0 234 6 137 0 236 34 205 0 237] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 34 209 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 209 2 48 34 209 2 50 34 209 2 51 34 209 2 52 34 209 2 53 34 209 2 54 34 209 2 55 34 209 2 56 34 209 2 57 34 209 2 64 34 209 2 65 34 209 2 66 4 21 2 67 34 209 2 68 34 209 2 69 34 209 2 77 34 209 2 78 34 209 2 86 34 209 2 91 34 209 2 92 34 209 2 93 34 209 2 94 34 209 2 95 4 65 2 96 34 209 2 97 34 209 2 98 34 209 2 99 34 209 2 100 34 209 2 101 34 209 2 102 34 209 2 103 34 209 2 104 34 209 2 105 34 209 2 106 34 209 2 107 34 209 2 108 34 209 2 109 34 209 2 110 34 209 2 111 34 209 2 112 34 209 2 113 34 209 2 114 34 209 2 115 34 209 2 116 4 149 2 117 34 209 2 118 34 209 2 119 34 209 2 120 34 209 2 122 4 169 2 125 4 173 2 136 4 177 2 155 34 209 2 158 34 209 2 159] 
#[1 2 69 0 24 34 213 0 240] 
#[0 34 217 0 171] 
#[0 34 221 0 88] 
#[0 16 10 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 14 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 18 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 22 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 26 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 30 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 34 225 0 17 34 229 0 215] 
#[1 34 237 0 19 34 237 0 22 34 237 0 23 34 237 0 24 34 237 0 25 31 105 0 26 34 233 0 215 34 237 1 255] 
#[1 34 241 0 17 34 245 0 215] 
#[1 16 34 0 11 16 34 0 17 16 34 0 215 34 249 1 253] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 34 253 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 35 1 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 35 1 2 48 35 1 2 50 35 1 2 51 35 1 2 52 35 1 2 53 35 1 2 54 35 1 2 55 35 1 2 56 35 1 2 57 35 1 2 64 35 1 2 65 35 1 2 66 4 21 2 67 35 1 2 68 35 1 2 69 35 1 2 77 35 1 2 78 35 1 2 86 35 1 2 91 35 1 2 92 35 1 2 93 35 1 2 94 35 1 2 95 4 65 2 96 35 1 2 97 35 1 2 98 35 1 2 99 35 1 2 100 35 1 2 101 35 1 2 102 35 1 2 103 35 1 2 104 35 1 2 105 35 1 2 106 35 1 2 107 35 1 2 108 35 1 2 109 35 1 2 110 35 1 2 111 35 1 2 112 35 1 2 113 35 1 2 114 35 1 2 115 35 1 2 116 4 149 2 117 35 1 2 118 35 1 2 119 35 1 2 120 35 1 2 122 4 169 2 125 4 173 2 136 4 177 2 155 35 1 2 158 35 1 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 16 38 0 11 6 53 0 12 2 178 0 14 6 57 0 15 16 38 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 35 5 0 190 6 125 0 207 6 129 0 209 6 133 0 211 16 38 0 215 6 137 0 236] 
#[0 16 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 35 9 0 171] 
#[0 16 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 35 13 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 35 13 2 48 35 13 2 50 35 13 2 51 35 13 2 52 35 13 2 53 35 13 2 54 35 13 2 55 35 13 2 56 35 13 2 57 35 13 2 64 35 13 2 65 35 13 2 66 4 21 2 67 35 13 2 68 35 13 2 69 35 13 2 77 35 13 2 78 35 13 2 86 35 13 2 91 35 13 2 92 35 13 2 93 35 13 2 94 35 13 2 95 4 65 2 96 35 13 2 97 35 13 2 98 35 13 2 99 35 13 2 100 35 13 2 101 35 13 2 102 35 13 2 103 35 13 2 104 35 13 2 105 35 13 2 106 35 13 2 107 35 13 2 108 35 13 2 109 35 13 2 110 35 13 2 111 35 13 2 112 35 13 2 113 35 13 2 114 35 13 2 115 35 13 2 116 4 149 2 117 35 13 2 118 35 13 2 119 35 13 2 120 35 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 35 13 2 158 35 13 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 35 17 1 218 13 221 1 220] 
#[1 35 21 0 37 35 25 0 200 35 29 0 215] 
#[0 16 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 35 33 1 218 13 221 1 220] 
#[0 35 37 0 191] 
#[1 2 245 0 1 2 33 0 5 0 159 0 6 2 253 0 9 4 66 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 163 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 8 237 0 228 3 173 0 229 3 177 0 235 3 181 0 236 35 41 0 237 3 189 0 238 8 245 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 245 2 48 8 245 2 50 8 245 2 51 8 245 2 52 8 245 2 53 8 245 2 54 8 245 2 55 8 245 2 56 8 245 2 57 8 245 2 64 8 245 2 65 8 245 2 66 4 21 2 67 8 245 2 68 8 245 2 69 13 41 2 70 8 253 2 71 9 1 2 73 9 5 2 74 8 245 2 77 8 245 2 78 8 245 2 86 8 245 2 91 8 245 2 92 8 245 2 93 8 245 2 94 8 245 2 95 4 65 2 96 8 245 2 97 8 245 2 98 8 245 2 99 8 245 2 100 8 245 2 101 8 245 2 102 8 245 2 103 8 245 2 104 8 245 2 105 8 245 2 106 8 245 2 107 8 245 2 108 8 245 2 109 8 245 2 110 8 245 2 111 8 245 2 112 8 245 2 113 8 245 2 114 8 245 2 115 8 245 2 116 4 149 2 117 8 245 2 118 8 245 2 119 8 245 2 120 8 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 245 2 158 8 245 2 159] 
#[1 9 123 0 1 6 41 0 3 16 54 0 4 9 127 0 5 16 54 0 6 6 45 0 7 16 54 0 8 6 49 0 9 16 54 0 10 16 54 0 11 6 53 0 12 16 54 0 13 9 131 0 14 6 57 0 15 16 54 0 16 16 54 0 17 6 61 0 19 6 65 0 20 16 54 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 16 54 0 28 16 54 0 32 6 93 0 34 6 97 0 35 16 54 0 38 16 54 0 45 16 54 0 80 16 54 0 83 16 54 0 87 16 54 0 90 16 54 0 99 16 54 0 105 16 54 0 108 16 54 0 110 16 54 0 115 6 101 0 116 6 105 0 118 16 54 0 121 16 54 0 123 6 109 0 125 6 113 0 130 16 54 0 146 6 117 0 150 6 121 0 151 16 54 0 152 16 54 0 171 16 54 0 177 16 54 0 179 16 54 0 186 16 54 0 188 16 54 0 190 16 54 0 201 6 125 0 207 6 129 0 209 16 54 0 210 6 133 0 211 16 54 0 212 16 54 0 214 16 54 0 215 6 137 0 236] 
#[0 16 58 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 62 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 35 45 0 184] 
#[1 35 49 0 215 11 34 0 229 35 49 2 154] 
#[1 15 37 0 229 35 53 2 132 15 45 2 135] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 57 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 35 61 0 215 35 61 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 65 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 69 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 73 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 77 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 35 81 0 146] 
#[1 11 34 0 115 35 85 0 215 35 85 2 154] 
#[0 35 89 0 115] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 93 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 35 97 0 215 35 97 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 101 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 35 105 0 215 35 105 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 109 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 113 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 35 117 0 115] 
#[1 35 121 0 215 11 34 0 229 35 121 2 154] 
#[1 11 34 0 115 35 125 0 215 35 125 2 154] 
#[0 35 129 0 115] 
#[1 15 37 0 229 35 133 2 132 15 45 2 135] 
#[1 11 34 0 115 35 137 0 215 35 137 2 154] 
#[1 9 135 0 1 6 41 0 3 16 74 0 4 9 139 0 5 16 74 0 6 6 45 0 7 16 74 0 8 6 49 0 9 16 74 0 10 16 74 0 11 6 53 0 12 16 74 0 13 9 143 0 14 6 57 0 15 16 74 0 16 16 74 0 17 6 61 0 19 6 65 0 20 16 74 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 16 74 0 28 16 74 0 32 6 93 0 34 6 97 0 35 16 74 0 38 16 74 0 45 16 74 0 80 16 74 0 83 16 74 0 87 16 74 0 90 16 74 0 99 16 74 0 105 16 74 0 108 16 74 0 110 16 74 0 115 6 101 0 116 6 105 0 118 16 74 0 121 16 74 0 123 6 109 0 125 6 113 0 130 16 74 0 146 6 117 0 150 6 121 0 151 16 74 0 152 16 74 0 171 16 74 0 177 16 74 0 179 16 74 0 186 16 74 0 188 16 74 0 190 16 74 0 201 6 125 0 207 6 129 0 209 16 74 0 210 6 133 0 211 16 74 0 212 16 74 0 214 16 74 0 215 6 137 0 236] 
#[0 35 141 0 115] 
#[1 35 145 0 215 11 34 0 229 35 145 2 154] 
#[1 11 34 0 115 35 149 0 215 35 149 2 154] 
#[0 35 153 0 115] 
#[0 16 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 157 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 16 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 161 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 16 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 165 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 169 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 35 173 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 35 173 2 48 35 173 2 50 35 173 2 51 35 173 2 52 35 173 2 53 35 173 2 54 35 173 2 55 35 173 2 56 35 173 2 57 35 173 2 64 35 173 2 65 35 173 2 66 4 21 2 67 35 173 2 68 35 173 2 69 35 173 2 77 35 173 2 78 35 173 2 86 35 173 2 91 35 173 2 92 35 173 2 93 35 173 2 94 35 173 2 95 4 65 2 96 35 173 2 97 35 173 2 98 35 173 2 99 35 173 2 100 35 173 2 101 35 173 2 102 35 173 2 103 35 173 2 104 35 173 2 105 35 173 2 106 35 173 2 107 35 173 2 108 35 173 2 109 35 173 2 110 35 173 2 111 35 173 2 112 35 173 2 113 35 173 2 114 35 173 2 115 35 173 2 116 4 149 2 117 35 173 2 118 35 173 2 119 35 173 2 120 35 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 35 173 2 158 35 173 2 159] 
#[1 9 147 0 1 6 41 0 3 16 90 0 4 9 151 0 5 16 90 0 6 6 45 0 7 16 90 0 8 6 49 0 9 16 90 0 10 16 90 0 11 6 53 0 12 16 90 0 13 9 155 0 14 6 57 0 15 16 90 0 16 16 90 0 17 6 61 0 19 6 65 0 20 16 90 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 16 90 0 28 16 90 0 32 6 93 0 34 6 97 0 35 16 90 0 38 16 90 0 45 16 90 0 80 16 90 0 83 16 90 0 87 16 90 0 90 16 90 0 99 16 90 0 105 16 90 0 108 16 90 0 110 16 90 0 115 6 101 0 116 6 105 0 118 16 90 0 121 16 90 0 123 6 109 0 125 6 113 0 130 16 90 0 146 6 117 0 150 6 121 0 151 16 90 0 152 16 90 0 171 16 90 0 177 16 90 0 179 16 90 0 186 16 90 0 188 16 90 0 190 16 90 0 201 6 125 0 207 6 129 0 209 16 90 0 210 6 133 0 211 16 90 0 212 16 90 0 214 16 90 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 177 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 181 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 16 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 35 185 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 16 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 35 189 0 17 35 193 0 215] 
#[0 16 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 35 197 0 17 35 201 0 215] 
#[0 16 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 35 205 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 16 194 0 6 0 11 0 215] 
#[0 16 198 0 17 0 106 0 108 0 215] 
#[1 35 209 0 17 35 213 0 215] 
#[0 16 202 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 16 206 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 21 37 0 70 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 21 41 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 21 45 0 183 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 35 217 0 253 21 57 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 21 57 1 93] 
#[0 16 210 0 11 0 214 0 215] 
#[0 35 221 0 184] 
#[0 35 225 0 88] 
#[0 35 229 0 100] 
#[0 35 233 0 88] 
#[0 16 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 35 237 0 17 35 241 0 215] 
#[0 16 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 35 245 0 17 35 249 0 215] 
#[1 2 33 0 5 15 126 0 17 33 153 0 33 33 157 0 37 15 126 0 215 35 253 0 236 33 165 1 131 36 1 1 132 36 5 1 136] 
#[1 2 33 0 5 36 9 0 17 33 153 0 33 36 13 0 215 36 17 0 236 36 21 1 136] 
#[1 29 237 0 124 36 25 1 135] 
#[1 29 237 0 124 36 29 1 135] 
#[0 36 33 0 88] 
#[0 36 37 0 215] 
#[1 36 41 0 6 3 137 0 215 36 41 0 237] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 45 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 36 45 1 93] 
#[0 16 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 16 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 36 49 0 17 36 53 0 215] 
#[0 36 57 0 161] 
#[1 0 73 0 19 36 61 0 88 26 33 0 98 26 25 0 101 26 33 0 160 26 33 0 162 26 33 0 163 26 29 0 172 26 33 0 243 26 37 0 254 0 89 0 255 0 93 1 0 30 109 1 210 30 109 1 211 30 109 1 212] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 36 65 1 202] 
#[1 6 174 0 44 6 174 0 48 6 174 0 69 6 174 0 75 6 174 0 76 6 174 0 85 6 174 0 103 6 174 0 113 6 174 0 126 36 69 0 138 6 174 0 143 6 174 0 170 6 174 0 175 6 174 0 176 6 174 0 182 6 174 0 194 6 174 0 195 6 174 0 196 6 174 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 73 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 36 73 1 93] 
#[1 2 69 0 24 36 77 0 37 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 36 81 1 199] 
#[1 36 85 0 6 3 137 0 215 36 85 0 237] 
#[0 36 89 0 215] 
#[0 16 238 0 11 0 17 0 215] 
#[0 16 242 0 11 0 17 0 215] 
#[0 16 246 0 11 0 17 0 215] 
#[0 16 250 0 11 0 17 0 215] 
#[1 25 153 0 128 25 157 0 134 25 161 0 135 25 165 0 229 36 93 1 148] 
#[0 16 254 0 11 0 17 0 215] 
#[0 17 2 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 25 177 1 44 25 177 1 45 25 177 1 46 25 177 1 53 25 177 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 36 97 1 106] 
#[0 17 6 0 11 0 17 0 215] 
#[1 36 101 0 17 36 105 0 215] 
#[0 36 109 0 184] 
#[1 36 113 0 17 36 117 0 215] 
#[0 36 121 0 100] 
#[0 17 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 26 0 5 0 17 0 33 0 37 0 215] 
#[0 36 125 0 223] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 129 0 254 0 89 0 255 0 93 1 0 36 133 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 36 133 1 93] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 36 137 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[0 17 34 0 17 0 215] 
#[1 36 145 0 17 36 149 0 215] 
#[1 2 33 0 5 15 126 0 17 33 157 0 37 15 126 0 215 36 153 0 236 33 165 1 131 36 157 1 132] 
#[0 17 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 36 161 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 36 165 0 17 36 169 0 215 36 173 0 236] 
#[1 2 33 0 5 15 126 0 17 33 153 0 33 33 157 0 37 15 126 0 215 36 177 0 236 33 165 1 131 36 181 1 132 36 185 1 136] 
#[1 2 33 0 5 36 189 0 17 33 153 0 33 36 193 0 215 36 197 0 236 36 201 1 136] 
#[0 36 205 0 184] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 36 209 1 218 13 221 1 220] 
#[0 36 213 0 215] 
#[1 36 217 0 17 21 145 0 108 36 221 0 215 36 225 1 102] 
#[0 17 46 0 17 0 108 0 215] 
#[0 17 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 3 225 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 3 225 2 48 36 229 2 49 3 225 2 50 3 225 2 51 3 225 2 52 3 225 2 53 3 225 2 54 3 225 2 55 3 225 2 56 3 225 2 57 3 225 2 64 3 225 2 65 3 225 2 66 4 21 2 67 3 225 2 68 3 225 2 69 3 225 2 77 3 225 2 78 3 225 2 86 3 225 2 91 3 225 2 92 3 225 2 93 3 225 2 94 3 225 2 95 4 65 2 96 3 225 2 97 3 225 2 98 3 225 2 99 3 225 2 100 3 225 2 101 3 225 2 102 3 225 2 103 3 225 2 104 3 225 2 105 3 225 2 106 3 225 2 107 3 225 2 108 3 225 2 109 3 225 2 110 3 225 2 111 3 225 2 112 3 225 2 113 3 225 2 114 3 225 2 115 3 225 2 116 4 149 2 117 3 225 2 118 3 225 2 119 3 225 2 120 3 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 3 225 2 158 3 225 2 159] 
#[0 17 58 0 11 0 17 0 215] 
#[0 17 62 0 17 0 108 0 215] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 233 0 254 0 89 0 255 0 93 1 0 36 237 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 36 237 1 93] 
#[1 17 66 0 17 36 241 0 37 17 66 0 108 17 66 0 215] 
#[0 36 245 0 88] 
#[0 36 249 0 88] 
#[0 36 253 0 215] 
#[1 37 1 0 6 3 137 0 215 37 1 0 237] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 5 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 9 1 218 13 221 1 220] 
#[1 37 13 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 37 13 0 237 11 45 0 254 0 89 0 255 0 93 1 0 37 17 1 137 11 53 1 140 11 57 1 141] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 21 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 25 1 218 13 221 1 220] 
#[1 37 29 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 37 29 0 237 11 45 0 254 0 89 0 255 0 93 1 0 37 33 1 137 11 53 1 140 11 57 1 141] 
#[0 37 37 0 215] 
#[1 2 33 0 5 37 41 0 215 37 45 0 236] 
#[1 37 49 0 17 37 53 0 215] 
#[0 37 57 0 161] 
#[1 2 33 0 5 2 89 0 29 17 70 0 99 17 70 0 108 17 70 0 204 17 70 0 215 37 61 0 236] 
#[0 17 74 0 99 0 108 0 204 0 215] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 37 65 1 203 37 65 2 79 37 65 2 80 37 65 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 37 73 1 202] 
#[1 2 69 0 24 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 37 77 1 199] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 37 81 0 138 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 37 85 0 254 0 89 0 255 0 93 1 0 37 89 1 113] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 37 93 1 200] 
#[1 2 69 0 24 37 97 0 37 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 37 101 1 199] 
#[0 17 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 37 105 1 137 11 53 1 140 11 57 1 141] 
#[1 37 109 0 6 3 137 0 215 37 109 0 237] 
#[0 17 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 37 113 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 113 2 48 37 113 2 50 37 113 2 51 37 113 2 52 37 113 2 53 37 113 2 54 37 113 2 55 37 113 2 56 37 113 2 57 37 113 2 64 37 113 2 65 37 113 2 66 4 21 2 67 37 113 2 68 37 113 2 69 37 113 2 77 37 113 2 78 37 113 2 86 37 113 2 91 37 113 2 92 37 113 2 93 37 113 2 94 37 113 2 95 4 65 2 96 37 113 2 97 37 113 2 98 37 113 2 99 37 113 2 100 37 113 2 101 37 113 2 102 37 113 2 103 37 113 2 104 37 113 2 105 37 113 2 106 37 113 2 107 37 113 2 108 37 113 2 109 37 113 2 110 37 113 2 111 37 113 2 112 37 113 2 113 37 113 2 114 37 113 2 115 37 113 2 116 4 149 2 117 37 113 2 118 37 113 2 119 37 113 2 120 37 113 2 122 4 169 2 125 4 173 2 136 4 177 2 155 37 113 2 158 37 113 2 159] 
#[0 37 117 0 100] 
#[0 37 121 0 88] 
#[0 17 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 125 1 217 37 125 1 221 9 177 1 222 37 125 1 226 9 185 1 227 37 125 1 228 37 125 1 229 37 125 1 230 37 125 1 231 37 125 1 232 37 125 1 233 37 125 1 234 37 125 1 235 37 125 1 236 37 125 1 238 37 125 1 239 37 125 1 240 37 125 1 241 37 125 1 242 37 125 1 246 37 125 1 248 37 125 2 1 37 125 2 2 37 125 2 3 37 125 2 4 37 125 2 5 37 125 2 7 37 125 2 12 37 125 2 13 37 125 2 14 37 125 2 15 37 125 2 19 37 125 2 20 37 125 2 21 37 125 2 22 37 125 2 24 37 125 2 26 37 125 2 27 37 125 2 28 37 125 2 30 37 125 2 32 37 125 2 33 37 125 2 34 37 125 2 35 37 125 2 36 37 125 2 41 37 125 2 45 37 125 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 9 95 0 1 9 99 0 5 2 253 0 9 3 1 0 12 9 103 0 14 5 134 0 17 7 147 0 30 7 151 0 31 9 107 0 32 7 159 0 40 3 13 0 42 7 163 0 44 7 167 0 48 7 171 0 49 7 175 0 50 7 179 0 51 7 183 0 52 7 187 0 53 7 191 0 54 7 195 0 55 7 199 0 56 7 203 0 57 7 207 0 58 7 211 0 59 7 215 0 60 7 219 0 61 7 223 0 62 7 227 0 63 7 231 0 64 7 235 0 65 7 239 0 66 7 243 0 69 7 247 0 72 7 251 0 73 7 255 0 75 8 3 0 76 8 7 0 81 8 11 0 82 8 15 0 84 8 19 0 85 8 23 0 88 8 27 0 91 8 31 0 92 8 35 0 94 8 39 0 97 9 111 0 99 7 159 0 100 8 47 0 102 8 51 0 103 8 55 0 104 8 59 0 107 8 63 0 113 7 159 0 120 8 67 0 126 8 71 0 128 8 75 0 129 8 79 0 134 8 83 0 135 8 87 0 138 5 134 0 139 3 121 0 140 8 91 0 143 9 115 0 146 8 99 0 164 8 103 0 165 8 107 0 167 8 111 0 168 8 115 0 169 8 119 0 170 9 119 0 171 8 127 0 175 8 131 0 176 8 135 0 178 8 139 0 180 8 143 0 182 7 159 0 184 8 147 0 185 8 151 0 189 8 155 0 191 8 159 0 192 8 163 0 193 8 167 0 194 8 171 0 195 8 175 0 196 8 179 0 199 8 183 0 202 8 187 0 204 8 191 0 208 8 195 0 213 5 134 0 215 8 199 0 219 8 203 0 220 8 207 0 221 8 211 0 222 8 215 0 223 8 219 0 224 8 223 0 225 8 227 0 227 8 231 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 129 1 217 37 133 1 218 13 221 1 220 37 129 1 221 9 177 1 222 37 129 1 226 9 185 1 227 37 129 1 228 37 129 1 229 37 129 1 230 37 129 1 231 37 129 1 232 37 129 1 233 37 129 1 234 37 129 1 235 37 129 1 236 37 129 1 238 37 129 1 239 37 129 1 240 37 129 1 241 37 129 1 242 37 129 1 246 37 129 1 248 37 129 2 1 37 129 2 2 37 129 2 3 37 129 2 4 37 129 2 5 37 129 2 7 37 129 2 12 37 129 2 13 37 129 2 14 37 129 2 15 37 129 2 19 37 129 2 20 37 129 2 21 37 129 2 22 37 129 2 24 37 129 2 26 37 129 2 27 37 129 2 28 37 129 2 30 37 129 2 32 37 129 2 33 37 129 2 34 37 129 2 35 37 129 2 36 37 129 2 41 37 129 2 45 37 129 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[0 17 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 37 137 0 139] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 141 1 217 37 141 1 221 9 177 1 222 37 141 1 226 9 185 1 227 37 141 1 228 37 141 1 229 37 141 1 230 37 141 1 231 37 141 1 232 37 141 1 233 37 141 1 234 37 141 1 235 37 141 1 236 37 141 1 238 37 141 1 239 37 141 1 240 37 141 1 241 37 141 1 242 37 141 1 246 37 141 1 248 37 141 2 1 37 141 2 2 37 141 2 3 37 141 2 4 37 141 2 5 37 141 2 7 37 141 2 12 37 141 2 13 37 141 2 14 37 141 2 15 37 141 2 19 37 141 2 20 37 141 2 21 37 141 2 22 37 141 2 24 37 141 2 26 37 141 2 27 37 141 2 28 37 141 2 30 37 141 2 32 37 141 2 33 37 141 2 34 37 141 2 35 37 141 2 36 37 141 2 41 37 141 2 45 37 141 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 37 145 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 145 2 48 37 145 2 50 37 145 2 51 37 145 2 52 37 145 2 53 37 145 2 54 37 145 2 55 37 145 2 56 37 145 2 57 37 145 2 64 37 145 2 65 37 145 2 66 4 21 2 67 37 145 2 68 37 145 2 69 37 145 2 77 37 145 2 78 37 145 2 86 37 145 2 91 37 145 2 92 37 145 2 93 37 145 2 94 37 145 2 95 4 65 2 96 37 145 2 97 37 145 2 98 37 145 2 99 37 145 2 100 37 145 2 101 37 145 2 102 37 145 2 103 37 145 2 104 37 145 2 105 37 145 2 106 37 145 2 107 37 145 2 108 37 145 2 109 37 145 2 110 37 145 2 111 37 145 2 112 37 145 2 113 37 145 2 114 37 145 2 115 37 145 2 116 4 149 2 117 37 145 2 118 37 145 2 119 37 145 2 120 37 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 37 145 2 158 37 145 2 159] 
#[1 9 95 0 1 9 99 0 5 2 253 0 9 3 1 0 12 9 103 0 14 5 134 0 17 7 147 0 30 7 151 0 31 9 107 0 32 7 159 0 40 3 13 0 42 7 163 0 44 7 167 0 48 7 171 0 49 7 175 0 50 7 179 0 51 7 183 0 52 7 187 0 53 7 191 0 54 7 195 0 55 7 199 0 56 7 203 0 57 7 207 0 58 7 211 0 59 7 215 0 60 7 219 0 61 7 223 0 62 7 227 0 63 7 231 0 64 7 235 0 65 7 239 0 66 7 243 0 69 7 247 0 72 7 251 0 73 7 255 0 75 8 3 0 76 8 7 0 81 8 11 0 82 8 15 0 84 8 19 0 85 8 23 0 88 8 27 0 91 8 31 0 92 8 35 0 94 8 39 0 97 9 111 0 99 7 159 0 100 8 47 0 102 8 51 0 103 8 55 0 104 8 59 0 107 8 63 0 113 7 159 0 120 8 67 0 126 8 71 0 128 8 75 0 129 8 79 0 134 8 83 0 135 8 87 0 138 5 134 0 139 3 121 0 140 8 91 0 143 9 115 0 146 8 99 0 164 8 103 0 165 8 107 0 167 8 111 0 168 8 115 0 169 8 119 0 170 9 119 0 171 8 127 0 175 8 131 0 176 8 135 0 178 8 139 0 180 8 143 0 182 7 159 0 184 8 147 0 185 8 151 0 189 8 155 0 191 8 159 0 192 8 163 0 193 8 167 0 194 8 171 0 195 8 175 0 196 8 179 0 199 8 183 0 202 8 187 0 204 8 191 0 208 8 195 0 213 5 134 0 215 8 199 0 219 8 203 0 220 8 207 0 221 8 211 0 222 8 215 0 223 8 219 0 224 8 223 0 225 8 227 0 227 8 231 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 149 1 217 37 153 1 218 13 221 1 220 37 149 1 221 9 177 1 222 37 149 1 226 9 185 1 227 37 149 1 228 37 149 1 229 37 149 1 230 37 149 1 231 37 149 1 232 37 149 1 233 37 149 1 234 37 149 1 235 37 149 1 236 37 149 1 238 37 149 1 239 37 149 1 240 37 149 1 241 37 149 1 242 37 149 1 246 37 149 1 248 37 149 2 1 37 149 2 2 37 149 2 3 37 149 2 4 37 149 2 5 37 149 2 7 37 149 2 12 37 149 2 13 37 149 2 14 37 149 2 15 37 149 2 19 37 149 2 20 37 149 2 21 37 149 2 22 37 149 2 24 37 149 2 26 37 149 2 27 37 149 2 28 37 149 2 30 37 149 2 32 37 149 2 33 37 149 2 34 37 149 2 35 37 149 2 36 37 149 2 41 37 149 2 45 37 149 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 157 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 161 1 218 13 221 1 220] 
#[0 17 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 37 165 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 37 169 0 188 6 125 0 207 6 129 0 209 6 133 0 211 37 173 0 215 6 137 0 236] 
#[0 37 177 0 107] 
#[0 37 181 0 107] 
#[0 37 185 0 88] 
#[0 37 189 0 107] 
#[0 37 193 0 88] 
#[0 17 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 37 197 0 107] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 37 201 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 201 2 48 37 201 2 50 37 201 2 51 37 201 2 52 37 201 2 53 37 201 2 54 37 201 2 55 37 201 2 56 37 201 2 57 37 201 2 64 37 201 2 65 37 201 2 66 4 21 2 67 37 201 2 68 37 201 2 69 37 201 2 77 37 201 2 78 37 201 2 86 37 201 2 91 37 201 2 92 37 201 2 93 37 201 2 94 37 201 2 95 4 65 2 96 37 201 2 97 37 201 2 98 37 201 2 99 37 201 2 100 37 201 2 101 37 201 2 102 37 201 2 103 37 201 2 104 37 201 2 105 37 201 2 106 37 201 2 107 37 201 2 108 37 201 2 109 37 201 2 110 37 201 2 111 37 201 2 112 37 201 2 113 37 201 2 114 37 201 2 115 37 201 2 116 4 149 2 117 37 201 2 118 37 201 2 119 37 201 2 120 37 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 37 201 2 158 37 201 2 159] 
#[1 2 69 0 24 37 205 0 240] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 37 209 0 6 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 6 137 0 236 37 209 0 237] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 37 213 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 213 2 48 37 213 2 50 37 213 2 51 37 213 2 52 37 213 2 53 37 213 2 54 37 213 2 55 37 213 2 56 37 213 2 57 37 213 2 64 37 213 2 65 37 213 2 66 4 21 2 67 37 213 2 68 37 213 2 69 37 213 2 77 37 213 2 78 37 213 2 86 37 213 2 91 37 213 2 92 37 213 2 93 37 213 2 94 37 213 2 95 4 65 2 96 37 213 2 97 37 213 2 98 37 213 2 99 37 213 2 100 37 213 2 101 37 213 2 102 37 213 2 103 37 213 2 104 37 213 2 105 37 213 2 106 37 213 2 107 37 213 2 108 37 213 2 109 37 213 2 110 37 213 2 111 37 213 2 112 37 213 2 113 37 213 2 114 37 213 2 115 37 213 2 116 4 149 2 117 37 213 2 118 37 213 2 119 37 213 2 120 37 213 2 122 4 169 2 125 4 173 2 136 4 177 2 155 37 213 2 158 37 213 2 159] 
#[0 17 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 37 217 0 171] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 221 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 225 1 218 13 221 1 220] 
#[1 37 229 0 19 37 229 0 22 37 229 0 23 37 229 0 24 37 229 0 25 31 105 0 26 37 229 1 255] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 37 233 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 37 237 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 37 237 2 48 37 237 2 50 37 237 2 51 37 237 2 52 37 237 2 53 37 237 2 54 37 237 2 55 37 237 2 56 37 237 2 57 37 237 2 64 37 237 2 65 37 237 2 66 4 21 2 67 37 237 2 68 37 237 2 69 37 237 2 77 37 237 2 78 37 237 2 86 37 237 2 91 37 237 2 92 37 237 2 93 37 237 2 94 37 237 2 95 4 65 2 96 37 237 2 97 37 237 2 98 37 237 2 99 37 237 2 100 37 237 2 101 37 237 2 102 37 237 2 103 37 237 2 104 37 237 2 105 37 237 2 106 37 237 2 107 37 237 2 108 37 237 2 109 37 237 2 110 37 237 2 111 37 237 2 112 37 237 2 113 37 237 2 114 37 237 2 115 37 237 2 116 4 149 2 117 37 237 2 118 37 237 2 119 37 237 2 120 37 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 37 237 2 158 37 237 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 67 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 241 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 67 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 37 245 1 218 13 221 1 220] 
#[1 2 229 0 11 17 126 0 17 17 126 0 215 37 249 0 234 37 253 1 252] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 38 1 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 38 1 2 48 38 1 2 50 38 1 2 51 38 1 2 52 38 1 2 53 38 1 2 54 38 1 2 55 38 1 2 56 38 1 2 57 38 1 2 64 38 1 2 65 38 1 2 66 4 21 2 67 38 1 2 68 38 1 2 69 38 1 2 77 38 1 2 78 38 1 2 86 38 1 2 91 38 1 2 92 38 1 2 93 38 1 2 94 38 1 2 95 4 65 2 96 38 1 2 97 38 1 2 98 38 1 2 99 38 1 2 100 38 1 2 101 38 1 2 102 38 1 2 103 38 1 2 104 38 1 2 105 38 1 2 106 38 1 2 107 38 1 2 108 38 1 2 109 38 1 2 110 38 1 2 111 38 1 2 112 38 1 2 113 38 1 2 114 38 1 2 115 38 1 2 116 4 149 2 117 38 1 2 118 38 1 2 119 38 1 2 120 38 1 2 122 4 169 2 125 4 173 2 136 4 177 2 155 38 1 2 158 38 1 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 17 130 0 11 6 53 0 12 2 178 0 14 6 57 0 15 17 130 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 17 130 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 38 5 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 38 5 2 48 38 5 2 50 38 5 2 51 38 5 2 52 38 5 2 53 38 5 2 54 38 5 2 55 38 5 2 56 38 5 2 57 38 5 2 64 38 5 2 65 38 5 2 66 4 21 2 67 38 5 2 68 38 5 2 69 38 5 2 77 38 5 2 78 38 5 2 86 38 5 2 91 38 5 2 92 38 5 2 93 38 5 2 94 38 5 2 95 4 65 2 96 38 5 2 97 38 5 2 98 38 5 2 99 38 5 2 100 38 5 2 101 38 5 2 102 38 5 2 103 38 5 2 104 38 5 2 105 38 5 2 106 38 5 2 107 38 5 2 108 38 5 2 109 38 5 2 110 38 5 2 111 38 5 2 112 38 5 2 113 38 5 2 114 38 5 2 115 38 5 2 116 4 149 2 117 38 5 2 118 38 5 2 119 38 5 2 120 38 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 38 5 2 158 38 5 2 159] 
#[0 17 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 38 9 0 215 6 137 0 236] 
#[0 17 138 0 68 0 88 0 96] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 38 13 1 44 38 13 1 45 38 13 1 46 38 13 1 53 38 13 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 38 17 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 38 17 2 48 38 17 2 50 38 17 2 51 38 17 2 52 38 17 2 53 38 17 2 54 38 17 2 55 38 17 2 56 38 17 2 57 38 17 2 64 38 17 2 65 38 17 2 66 4 21 2 67 38 17 2 68 38 17 2 69 38 17 2 77 38 17 2 78 38 17 2 86 38 17 2 91 38 17 2 92 38 17 2 93 38 17 2 94 38 17 2 95 4 65 2 96 38 17 2 97 38 17 2 98 38 17 2 99 38 17 2 100 38 17 2 101 38 17 2 102 38 17 2 103 38 17 2 104 38 17 2 105 38 17 2 106 38 17 2 107 38 17 2 108 38 17 2 109 38 17 2 110 38 17 2 111 38 17 2 112 38 17 2 113 38 17 2 114 38 17 2 115 38 17 2 116 4 149 2 117 38 17 2 118 38 17 2 119 38 17 2 120 38 17 2 122 4 169 2 125 4 173 2 136 4 177 2 155 38 17 2 158 38 17 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 38 21 1 218 13 221 1 220] 
#[0 17 142 0 88] 
#[0 17 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 7 198 0 1 7 198 0 3 7 198 0 4 7 198 0 5 7 198 0 6 7 198 0 7 7 198 0 8 7 198 0 9 7 198 0 10 7 198 0 11 7 198 0 12 7 198 0 13 7 198 0 14 7 198 0 15 7 198 0 16 7 198 0 17 7 198 0 19 7 198 0 20 7 198 0 21 7 198 0 22 7 198 0 23 7 198 0 24 7 198 0 25 7 198 0 26 7 198 0 27 7 198 0 28 7 198 0 32 7 198 0 34 7 198 0 35 7 198 0 38 7 198 0 45 7 198 0 80 7 198 0 83 7 198 0 87 7 198 0 90 2 255 0 99 7 198 0 105 7 198 0 108 7 198 0 110 7 198 0 115 7 198 0 116 7 198 0 118 7 198 0 121 7 198 0 123 7 198 0 125 7 198 0 130 7 198 0 146 7 198 0 150 7 198 0 151 7 198 0 152 7 198 0 171 7 198 0 177 7 198 0 179 7 198 0 186 7 198 0 188 7 198 0 190 7 198 0 201 5 189 0 204 7 198 0 207 7 198 0 209 7 198 0 210 7 198 0 211 7 198 0 212 7 198 0 214 7 198 0 215 18 129 2 79 18 129 2 80 18 129 2 85] 
#[0 17 150 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 38 25 2 132 15 45 2 135] 
#[0 17 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 34 0 115 38 29 0 215 38 29 2 154] 
#[0 38 33 0 115] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 38 37 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 38 41 0 215 38 41 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 38 45 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 38 49 0 215 38 49 2 154] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 38 53 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 38 57 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 38 61 0 115] 
#[1 38 65 0 215 11 34 0 229 38 65 2 154] 
#[1 11 34 0 115 38 69 0 215 38 69 2 154] 
#[0 38 73 0 115] 
#[1 11 34 0 115 38 77 0 215 38 77 2 154] 
#[0 38 81 0 115] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 38 85 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 38 89 0 215 38 89 2 154] 
#[1 38 93 0 215 11 34 0 229 38 93 2 154] 
#[1 15 37 0 229 38 97 2 132 15 45 2 135] 
#[0 38 101 0 115] 
#[1 38 105 0 215 11 34 0 229 38 105 2 154] 
#[1 11 34 0 115 38 109 0 215 38 109 2 154] 
#[0 38 113 0 115] 
#[1 38 117 0 215 11 34 0 229 38 117 2 154] 
#[1 15 37 0 229 38 121 2 132 15 45 2 135] 
#[0 38 125 0 115] 
#[1 38 129 0 215 11 34 0 229 38 129 2 154] 
#[0 17 158 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 38 133 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 17 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 159 0 1 6 41 0 3 17 170 0 4 9 163 0 5 17 170 0 6 6 45 0 7 17 170 0 8 6 49 0 9 17 170 0 10 17 170 0 11 6 53 0 12 17 170 0 13 9 167 0 14 6 57 0 15 17 170 0 16 17 170 0 17 6 61 0 19 6 65 0 20 17 170 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 17 170 0 28 17 170 0 32 6 93 0 34 6 97 0 35 17 170 0 38 17 170 0 45 17 170 0 80 17 170 0 83 17 170 0 87 17 170 0 90 17 170 0 99 17 170 0 105 17 170 0 108 17 170 0 110 17 170 0 115 6 101 0 116 6 105 0 118 17 170 0 121 17 170 0 123 6 109 0 125 6 113 0 130 17 170 0 146 6 117 0 150 6 121 0 151 17 170 0 152 17 170 0 171 17 170 0 177 17 170 0 179 17 170 0 186 17 170 0 188 17 170 0 190 17 170 0 201 6 125 0 207 6 129 0 209 17 170 0 210 6 133 0 211 17 170 0 212 17 170 0 214 17 170 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 38 137 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[0 17 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 17 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 198 0 6 0 11 0 215] 
#[0 17 202 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 17 206 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 17 210 0 11 0 214 0 215] 
#[1 38 141 0 17 38 145 0 215] 
#[0 38 149 0 184] 
#[1 38 153 0 17 38 157 0 215] 
#[0 38 161 0 100] 
#[0 17 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 38 165 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 38 169 0 17 38 173 0 215] 
#[1 2 33 0 5 15 126 0 17 33 157 0 37 15 126 0 215 38 177 0 236 33 165 1 131 38 181 1 132] 
#[0 17 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 38 185 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 38 189 0 17 38 193 0 215 38 197 0 236] 
#[1 2 33 0 5 15 126 0 17 33 153 0 33 33 157 0 37 15 126 0 215 38 201 0 236 33 165 1 131 38 205 1 132 38 209 1 136] 
#[1 2 33 0 5 38 213 0 17 33 153 0 33 38 217 0 215 38 221 0 236 38 225 1 136] 
#[0 38 229 0 184] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 38 233 1 218 13 221 1 220] 
#[0 38 237 0 215] 
#[1 38 241 0 17 21 145 0 108 38 245 0 215 38 249 1 102] 
#[0 17 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 38 253 0 17 39 1 0 215] 
#[0 39 5 0 161] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 39 9 1 203 39 9 2 79 39 9 2 80 39 9 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 39 13 1 202] 
#[1 2 69 0 24 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 39 17 1 199] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 39 21 0 138 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 39 25 0 254 0 89 0 255 0 93 1 0 39 29 1 113] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 39 33 1 200] 
#[1 2 69 0 24 39 37 0 37 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 39 41 1 199] 
#[0 17 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 250 0 11 0 17 0 215] 
#[0 17 254 0 11 0 17 0 215] 
#[0 18 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 45 0 17 39 49 0 215] 
#[0 18 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 53 0 17 39 57 0 215] 
#[0 18 18 0 5 0 17 0 37 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 39 61 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 39 61 1 93] 
#[0 18 22 0 17 0 215] 
#[1 39 65 0 6 3 137 0 215 39 65 0 237] 
#[0 18 26 0 6 0 215] 
#[0 18 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 39 69 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 39 73 0 17 39 77 0 215] 
#[1 39 81 0 6 3 137 0 215 39 81 0 237] 
#[0 18 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 39 85 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 39 89 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 39 93 0 17 39 97 0 215] 
#[1 2 33 0 5 15 126 0 17 33 157 0 37 15 126 0 215 39 101 0 236 33 165 1 131 39 105 1 132] 
#[0 18 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 39 109 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 39 113 0 17 39 117 0 215 39 121 0 236] 
#[1 39 125 0 17 39 129 0 215] 
#[0 39 133 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 39 137 1 218 13 221 1 220] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 39 157 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 39 177 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[1 39 181 0 17 39 185 0 215] 
#[0 18 54 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 39 189 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 39 189 1 93] 
#[0 18 58 0 17 0 108 0 215] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 39 193 0 254 0 89 0 255 0 93 1 0 39 197 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 39 197 1 93] 
#[0 39 201 0 101] 
#[0 39 205 0 172] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 39 209 1 218 13 221 1 220] 
#[0 39 213 0 215] 
#[0 39 217 0 88] 
#[0 39 221 0 88] 
#[0 39 225 0 215] 
#[1 39 229 0 6 3 137 0 215 39 229 0 237] 
#[0 39 233 0 88] 
#[0 39 237 0 88] 
#[0 39 241 0 215] 
#[1 39 245 0 6 3 137 0 215 39 245 0 237] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 39 249 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 39 253 1 218 13 221 1 220] 
#[1 40 1 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 3 137 0 215 4 118 0 229 40 1 0 237 11 45 0 254 0 89 0 255 0 93 1 0 40 5 1 137 11 53 1 140 11 57 1 141] 
#[0 18 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 40 9 0 17 40 13 0 215] 
#[1 2 245 0 1 2 33 0 5 0 159 0 6 2 253 0 9 4 66 0 11 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 163 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 8 237 0 228 3 173 0 229 3 177 0 235 3 181 0 236 40 17 0 237 3 189 0 238 8 245 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 8 245 2 48 8 245 2 50 8 245 2 51 8 245 2 52 8 245 2 53 8 245 2 54 8 245 2 55 8 245 2 56 8 245 2 57 8 245 2 64 8 245 2 65 8 245 2 66 4 21 2 67 8 245 2 68 8 245 2 69 40 21 2 70 8 253 2 71 9 1 2 73 9 5 2 74 8 245 2 77 8 245 2 78 8 245 2 86 8 245 2 91 8 245 2 92 8 245 2 93 8 245 2 94 8 245 2 95 4 65 2 96 8 245 2 97 8 245 2 98 8 245 2 99 8 245 2 100 8 245 2 101 8 245 2 102 8 245 2 103 8 245 2 104 8 245 2 105 8 245 2 106 8 245 2 107 8 245 2 108 8 245 2 109 8 245 2 110 8 245 2 111 8 245 2 112 8 245 2 113 8 245 2 114 8 245 2 115 8 245 2 116 4 149 2 117 8 245 2 118 8 245 2 119 8 245 2 120 8 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 8 245 2 158 8 245 2 159] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 40 25 1 200] 
#[0 18 70 0 108 0 215] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 40 29 1 203 40 29 2 79 40 29 2 80 40 29 2 85] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 40 33 1 200] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 40 37 1 202] 
#[1 6 174 0 44 6 174 0 48 6 174 0 69 6 174 0 75 6 174 0 76 6 174 0 85 6 174 0 103 6 174 0 113 6 174 0 126 40 41 0 138 6 174 0 143 6 174 0 170 6 174 0 175 6 174 0 176 6 174 0 182 6 174 0 194 6 174 0 195 6 174 0 196 6 174 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 40 45 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 40 45 1 93] 
#[0 40 49 0 215] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 40 53 0 138 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 40 57 0 254 0 89 0 255 0 93 1 0 40 61 1 113] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 40 65 1 200] 
#[1 40 69 0 6 3 137 0 215 40 69 0 237] 
#[1 40 73 0 37 40 77 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 18 74 0 6 6 45 0 7 6 49 0 9 18 74 0 11 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 18 74 0 215 6 137 0 236] 
#[0 18 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 81 0 100] 
#[0 18 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 85 0 139] 
#[1 9 171 0 1 18 90 0 3 18 90 0 4 9 175 0 5 18 90 0 6 18 90 0 7 18 90 0 8 2 253 0 9 18 90 0 10 18 90 0 11 3 1 0 12 18 90 0 13 9 179 0 14 18 90 0 15 18 90 0 16 18 90 0 17 18 90 0 19 18 90 0 20 18 90 0 21 18 90 0 22 18 90 0 23 18 90 0 24 18 90 0 25 18 90 0 26 18 90 0 27 18 90 0 28 3 5 0 31 9 183 0 32 18 90 0 34 18 90 0 35 18 90 0 38 1 190 0 40 3 13 0 42 1 65 0 44 18 90 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 18 90 0 80 3 85 0 82 18 90 0 83 1 65 0 85 18 90 0 87 18 90 0 90 9 187 0 99 1 190 0 100 3 93 0 102 3 97 0 103 18 90 0 105 3 101 0 107 18 90 0 108 18 90 0 110 1 65 0 113 18 90 0 115 18 90 0 116 18 90 0 118 1 190 0 120 18 90 0 121 18 90 0 123 18 90 0 125 1 65 0 126 3 105 0 128 18 90 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 18 90 0 146 18 90 0 150 18 90 0 151 18 90 0 152 1 65 0 170 18 90 0 171 1 65 0 175 1 65 0 176 18 90 0 177 18 90 0 179 1 65 0 182 1 190 0 184 18 90 0 186 18 90 0 188 18 90 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 18 90 0 201 18 90 0 207 18 90 0 209 18 90 0 210 18 90 0 211 18 90 0 212 3 133 0 213 18 90 0 214 18 90 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 93 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 40 89 2 9 40 93 2 48 40 93 2 50 40 93 2 51 40 93 2 52 40 93 2 53 40 93 2 54 40 93 2 55 40 93 2 56 40 93 2 57 40 93 2 64 40 93 2 65 40 93 2 66 4 21 2 67 40 93 2 68 40 93 2 69 40 93 2 77 40 93 2 78 40 93 2 86 40 93 2 91 40 93 2 92 40 93 2 93 40 93 2 94 40 93 2 95 4 65 2 96 40 93 2 97 40 93 2 98 40 93 2 99 40 93 2 100 40 93 2 101 40 93 2 102 40 93 2 103 40 93 2 104 40 93 2 105 40 93 2 106 40 93 2 107 40 93 2 108 40 93 2 109 40 93 2 110 40 93 2 111 40 93 2 112 40 93 2 113 40 93 2 114 40 93 2 115 40 93 2 116 4 149 2 117 40 93 2 118 40 93 2 119 40 93 2 120 40 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 93 2 158 40 93 2 159] 
#[0 18 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 40 97 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 40 101 0 215 6 137 0 236] 
#[0 18 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 105 0 139] 
#[0 18 102 0 88] 
#[0 18 106 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 40 109 1 218 13 221 1 220] 
#[1 40 113 0 17 40 117 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 40 121 1 218 13 221 1 220] 
#[0 18 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 125 0 107] 
#[0 18 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 129 0 107] 
#[0 18 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 40 133 0 6 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 3 137 0 215 6 137 0 236 40 133 0 237] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 137 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 40 137 2 48 40 137 2 50 40 137 2 51 40 137 2 52 40 137 2 53 40 137 2 54 40 137 2 55 40 137 2 56 40 137 2 57 40 137 2 64 40 137 2 65 40 137 2 66 4 21 2 67 40 137 2 68 40 137 2 69 40 137 2 77 40 137 2 78 40 137 2 86 40 137 2 91 40 137 2 92 40 137 2 93 40 137 2 94 40 137 2 95 4 65 2 96 40 137 2 97 40 137 2 98 40 137 2 99 40 137 2 100 40 137 2 101 40 137 2 102 40 137 2 103 40 137 2 104 40 137 2 105 40 137 2 106 40 137 2 107 40 137 2 108 40 137 2 109 40 137 2 110 40 137 2 111 40 137 2 112 40 137 2 113 40 137 2 114 40 137 2 115 40 137 2 116 4 149 2 117 40 137 2 118 40 137 2 119 40 137 2 120 40 137 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 137 2 158 40 137 2 159] 
#[1 2 69 0 24 40 141 0 240] 
#[1 9 191 0 1 6 41 0 3 18 126 0 4 9 195 0 5 18 126 0 6 6 45 0 7 18 126 0 8 6 49 0 9 18 126 0 10 18 126 0 11 6 53 0 12 18 126 0 13 9 199 0 14 6 57 0 15 18 126 0 16 18 126 0 17 6 61 0 19 6 65 0 20 18 126 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 18 126 0 28 18 126 0 32 6 93 0 34 6 97 0 35 18 126 0 38 18 126 0 45 18 126 0 80 18 126 0 83 18 126 0 87 18 126 0 90 18 126 0 99 18 126 0 105 18 126 0 108 18 126 0 110 18 126 0 115 6 101 0 116 6 105 0 118 18 126 0 121 18 126 0 123 6 109 0 125 6 113 0 130 18 126 0 146 6 117 0 150 6 121 0 151 18 126 0 152 18 126 0 171 18 126 0 177 18 126 0 179 18 126 0 186 18 126 0 188 18 126 0 190 18 126 0 201 6 125 0 207 6 129 0 209 18 126 0 210 6 133 0 211 18 126 0 212 18 126 0 214 18 126 0 215 6 137 0 236] 
#[0 18 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 134 0 88] 
#[0 18 138 0 88] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 40 145 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 149 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 40 149 2 48 40 149 2 50 40 149 2 51 40 149 2 52 40 149 2 53 40 149 2 54 40 149 2 55 40 149 2 56 40 149 2 57 40 149 2 64 40 149 2 65 40 149 2 66 4 21 2 67 40 149 2 68 40 149 2 69 40 149 2 77 40 149 2 78 40 149 2 86 40 149 2 91 40 149 2 92 40 149 2 93 40 149 2 94 40 149 2 95 4 65 2 96 40 149 2 97 40 149 2 98 40 149 2 99 40 149 2 100 40 149 2 101 40 149 2 102 40 149 2 103 40 149 2 104 40 149 2 105 40 149 2 106 40 149 2 107 40 149 2 108 40 149 2 109 40 149 2 110 40 149 2 111 40 149 2 112 40 149 2 113 40 149 2 114 40 149 2 115 40 149 2 116 4 149 2 117 40 149 2 118 40 149 2 119 40 149 2 120 40 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 149 2 158 40 149 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 153 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 40 153 2 48 40 153 2 50 40 153 2 51 40 153 2 52 40 153 2 53 40 153 2 54 40 153 2 55 40 153 2 56 40 153 2 57 40 153 2 64 40 153 2 65 40 153 2 66 4 21 2 67 40 153 2 68 40 153 2 69 40 153 2 77 40 153 2 78 40 153 2 86 40 153 2 91 40 153 2 92 40 153 2 93 40 153 2 94 40 153 2 95 4 65 2 96 40 153 2 97 40 153 2 98 40 153 2 99 40 153 2 100 40 153 2 101 40 153 2 102 40 153 2 103 40 153 2 104 40 153 2 105 40 153 2 106 40 153 2 107 40 153 2 108 40 153 2 109 40 153 2 110 40 153 2 111 40 153 2 112 40 153 2 113 40 153 2 114 40 153 2 115 40 153 2 116 4 149 2 117 40 153 2 118 40 153 2 119 40 153 2 120 40 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 153 2 158 40 153 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 18 142 0 11 6 53 0 12 2 178 0 14 6 57 0 15 18 142 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 18 142 0 215 6 137 0 236] 
#[0 18 146 0 67 0 88] 
#[0 18 150 0 67 0 88] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 31 125 0 19 31 125 0 22 31 125 0 23 31 125 0 24 31 125 0 25 31 105 0 26 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 31 113 0 116 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 31 129 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 40 157 1 254 31 125 1 255 31 129 2 48 31 129 2 50 31 129 2 51 31 129 2 52 31 129 2 53 31 129 2 54 31 129 2 55 31 129 2 56 31 129 2 57 31 129 2 64 31 129 2 65 31 129 2 66 4 21 2 67 31 129 2 68 31 129 2 69 31 129 2 77 31 129 2 78 31 129 2 86 31 129 2 91 31 129 2 92 31 129 2 93 31 129 2 94 31 129 2 95 4 65 2 96 31 129 2 97 31 129 2 98 31 129 2 99 31 129 2 100 31 129 2 101 31 129 2 102 31 129 2 103 31 129 2 104 31 129 2 105 31 129 2 106 31 129 2 107 31 129 2 108 31 129 2 109 31 129 2 110 31 129 2 111 31 129 2 112 31 129 2 113 31 129 2 114 31 129 2 115 31 129 2 116 4 149 2 117 31 129 2 118 31 129 2 119 31 129 2 120 31 129 2 122 4 169 2 125 4 173 2 136 4 177 2 155 31 129 2 158 31 129 2 159] 
#[0 18 154 0 11 0 17 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 18 158 0 11 6 53 0 12 2 178 0 14 6 57 0 15 18 158 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 18 158 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 18 162 0 11 6 53 0 12 2 178 0 14 6 57 0 15 18 162 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 18 162 0 215 6 137 0 236] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 40 161 1 218 13 221 1 220] 
#[1 2 89 0 29 40 165 0 200 40 169 0 215] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 40 173 0 215 6 137 0 236] 
#[0 18 166 0 68 0 88 0 96] 
#[0 18 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 177 0 115] 
#[1 40 181 0 215 11 34 0 229 40 181 2 154] 
#[1 11 34 0 115 40 185 0 215 40 185 2 154] 
#[0 40 189 0 115] 
#[1 11 34 0 115 40 193 0 215 40 193 2 154] 
#[0 40 197 0 115] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 24 33 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 24 33 2 48 24 33 2 50 24 33 2 51 24 33 2 52 24 33 2 53 24 33 2 54 24 33 2 55 24 33 2 56 24 33 2 57 24 33 2 64 24 33 2 65 24 33 2 66 4 21 2 67 24 33 2 68 24 33 2 69 24 33 2 77 24 33 2 78 24 33 2 86 24 33 2 91 24 33 2 92 24 33 2 93 24 33 2 94 24 33 2 95 4 65 2 96 24 33 2 97 24 33 2 98 24 33 2 99 24 33 2 100 24 33 2 101 24 33 2 102 24 33 2 103 24 33 2 104 24 33 2 105 24 33 2 106 24 33 2 107 24 33 2 108 24 33 2 109 24 33 2 110 24 33 2 111 24 33 2 112 24 33 2 113 24 33 2 114 24 33 2 115 24 33 2 116 4 149 2 117 24 33 2 118 24 33 2 119 24 33 2 120 24 33 2 122 4 169 2 125 4 173 2 136 40 201 2 138 24 41 2 141 4 177 2 155 24 33 2 158 24 33 2 159] 
#[1 11 34 0 115 40 205 0 215 40 205 2 154] 
#[1 40 209 0 215 11 34 0 229 40 209 2 154] 
#[1 15 37 0 229 40 213 2 132 15 45 2 135] 
#[0 40 217 0 115] 
#[1 40 221 0 215 11 34 0 229 40 221 2 154] 
#[0 40 225 0 115] 
#[1 40 229 0 215 11 34 0 229 40 229 2 154] 
#[1 11 34 0 115 40 233 0 215 40 233 2 154] 
#[0 40 237 0 115] 
#[1 15 37 0 229 40 241 2 132 15 45 2 135] 
#[0 18 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 40 245 0 215 11 34 0 229 40 245 2 154] 
#[1 15 37 0 229 40 249 2 132 15 45 2 135] 
#[0 40 253 0 115] 
#[1 41 1 0 215 11 34 0 229 41 1 2 154] 
#[1 15 37 0 229 41 5 2 132 15 45 2 135] 
#[0 18 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 41 9 0 215 11 34 0 229 41 9 2 154] 
#[1 15 37 0 229 41 13 2 132 15 45 2 135] 
#[0 18 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 17 0 17 41 21 0 215] 
#[0 18 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 25 0 17 41 29 0 215] 
#[1 41 33 0 6 3 137 0 215 41 33 0 237] 
#[0 18 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 41 37 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 41 41 0 17 41 45 0 215] 
#[1 41 49 0 6 3 137 0 215 41 49 0 237] 
#[0 18 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 41 53 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 41 57 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 41 61 0 17 41 65 0 215] 
#[1 2 33 0 5 15 126 0 17 33 157 0 37 15 126 0 215 41 69 0 236 33 165 1 131 41 73 1 132] 
#[0 18 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 41 77 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 41 81 0 17 41 85 0 215 41 89 0 236] 
#[1 41 93 0 17 41 97 0 215] 
#[0 41 101 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 41 105 1 218 13 221 1 220] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 41 109 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 41 113 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[1 41 117 0 17 41 121 0 215] 
#[0 18 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 125 0 17 41 129 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 41 133 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 41 137 1 203 41 137 2 79 41 137 2 80 41 137 2 85] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 41 141 1 200] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 41 145 1 202] 
#[1 6 174 0 44 6 174 0 48 6 174 0 69 6 174 0 75 6 174 0 76 6 174 0 85 6 174 0 103 6 174 0 113 6 174 0 126 41 149 0 138 6 174 0 143 6 174 0 170 6 174 0 175 6 174 0 176 6 174 0 182 6 174 0 194 6 174 0 195 6 174 0 196 6 174 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 41 153 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 41 153 1 93] 
#[0 41 157 0 215] 
#[1 0 73 0 19 4 114 0 44 4 114 0 48 4 114 0 69 4 114 0 75 4 114 0 76 4 114 0 85 4 114 0 103 4 114 0 113 4 114 0 126 41 161 0 138 4 114 0 143 4 114 0 170 4 114 0 175 4 114 0 176 4 114 0 182 4 114 0 194 4 114 0 195 4 114 0 196 4 114 0 229 41 165 0 254 0 89 0 255 0 93 1 0 41 169 1 113] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 41 173 1 200] 
#[0 18 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 254 0 17 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 41 177 1 132] 
#[1 41 181 0 6 3 137 0 215 41 181 0 237] 
#[0 19 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 185 0 17 41 189 0 215] 
#[1 41 193 0 6 3 137 0 215 41 193 0 237] 
#[1 41 197 0 6 3 137 0 215 41 197 0 237] 
#[0 19 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 41 201 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 41 205 0 17 41 209 0 215] 
#[1 41 213 0 6 3 137 0 215 41 213 0 237] 
#[0 19 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 41 217 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[0 19 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 41 221 0 184] 
#[0 41 225 0 88] 
#[1 2 33 0 5 41 229 0 236] 
#[1 2 33 0 5 41 233 0 236] 
#[1 2 33 0 5 41 237 0 236] 
#[1 41 241 0 30 41 245 0 164 41 249 0 167] 
#[1 0 73 0 19 39 141 0 30 41 253 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[0 19 34 0 19 0 30 0 88 0 164 0 167] 
#[0 19 38 0 19 0 30 0 88 0 164 0 167] 
#[0 19 42 0 19 0 30 0 88 0 164 0 167] 
#[0 19 46 0 19 0 30 0 88 0 164 0 167] 
#[1 0 73 0 19 39 141 0 30 42 5 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 9 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 13 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[0 19 50 0 17 0 108 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 42 17 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 17 1 93] 
#[0 19 54 0 17 0 108 0 215] 
#[1 42 21 0 17 42 25 0 215] 
#[1 42 29 0 17 42 33 0 215] 
#[0 42 37 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 42 41 1 218 13 221 1 220] 
#[0 42 45 0 101] 
#[0 42 49 0 172] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 42 53 1 218 13 221 1 220] 
#[0 42 57 0 215] 
#[0 42 61 0 101] 
#[0 42 65 0 172] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 42 69 1 218 13 221 1 220] 
#[0 42 73 0 215] 
#[0 42 77 0 88] 
#[0 42 81 0 88] 
#[0 42 85 0 215] 
#[1 42 89 0 6 3 137 0 215 42 89 0 237] 
#[0 19 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 66 0 99 0 108 0 204 0 215] 
#[1 42 93 0 6 3 137 0 215 42 93 0 237] 
#[0 42 97 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 42 101 1 200] 
#[0 42 105 0 215] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 42 109 1 203 42 109 2 79 42 109 2 80 42 109 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 42 113 1 202] 
#[1 2 69 0 24 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 42 117 1 199] 
#[0 19 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 42 121 1 202] 
#[1 6 174 0 44 6 174 0 48 6 174 0 69 6 174 0 75 6 174 0 76 6 174 0 85 6 174 0 103 6 174 0 113 6 174 0 126 42 125 0 138 6 174 0 143 6 174 0 170 6 174 0 175 6 174 0 176 6 174 0 182 6 174 0 194 6 174 0 195 6 174 0 196 6 174 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 42 129 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 129 1 93] 
#[0 42 133 0 215] 
#[1 42 137 0 37 42 141 0 215] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 42 145 0 254 0 89 0 255 0 93 1 0 42 149 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 149 1 93] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 42 153 1 218 13 221 1 220] 
#[0 19 74 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 203 0 1 19 78 0 3 19 78 0 4 9 207 0 5 19 78 0 6 19 78 0 7 19 78 0 8 2 253 0 9 19 78 0 10 19 78 0 11 3 1 0 12 19 78 0 13 9 211 0 14 19 78 0 15 19 78 0 16 19 78 0 17 19 78 0 19 19 78 0 20 19 78 0 21 19 78 0 22 19 78 0 23 19 78 0 24 19 78 0 25 19 78 0 26 19 78 0 27 19 78 0 28 3 5 0 31 9 215 0 32 19 78 0 34 19 78 0 35 19 78 0 38 1 190 0 40 3 13 0 42 1 65 0 44 19 78 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 19 78 0 80 3 85 0 82 19 78 0 83 1 65 0 85 19 78 0 87 19 78 0 90 9 219 0 99 1 190 0 100 3 93 0 102 3 97 0 103 19 78 0 105 3 101 0 107 19 78 0 108 19 78 0 110 1 65 0 113 19 78 0 115 19 78 0 116 19 78 0 118 1 190 0 120 19 78 0 121 19 78 0 123 19 78 0 125 1 65 0 126 3 105 0 128 19 78 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 19 78 0 146 19 78 0 150 19 78 0 151 19 78 0 152 1 65 0 170 19 78 0 171 1 65 0 175 1 65 0 176 19 78 0 177 19 78 0 179 1 65 0 182 1 190 0 184 19 78 0 186 19 78 0 188 19 78 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 19 78 0 201 19 78 0 207 19 78 0 209 19 78 0 210 19 78 0 211 19 78 0 212 3 133 0 213 19 78 0 214 19 78 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 93 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 157 2 9 40 93 2 48 40 93 2 50 40 93 2 51 40 93 2 52 40 93 2 53 40 93 2 54 40 93 2 55 40 93 2 56 40 93 2 57 40 93 2 64 40 93 2 65 40 93 2 66 4 21 2 67 40 93 2 68 40 93 2 69 40 93 2 77 40 93 2 78 40 93 2 86 40 93 2 91 40 93 2 92 40 93 2 93 40 93 2 94 40 93 2 95 4 65 2 96 40 93 2 97 40 93 2 98 40 93 2 99 40 93 2 100 40 93 2 101 40 93 2 102 40 93 2 103 40 93 2 104 40 93 2 105 40 93 2 106 40 93 2 107 40 93 2 108 40 93 2 109 40 93 2 110 40 93 2 111 40 93 2 112 40 93 2 113 40 93 2 114 40 93 2 115 40 93 2 116 4 149 2 117 40 93 2 118 40 93 2 119 40 93 2 120 40 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 93 2 158 40 93 2 159] 
#[0 19 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 223 0 1 6 41 0 3 19 86 0 4 9 227 0 5 19 86 0 6 6 45 0 7 19 86 0 8 6 49 0 9 19 86 0 10 19 86 0 11 6 53 0 12 19 86 0 13 9 231 0 14 6 57 0 15 19 86 0 16 19 86 0 17 6 61 0 19 6 65 0 20 19 86 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 19 86 0 28 19 86 0 32 6 93 0 34 6 97 0 35 19 86 0 38 19 86 0 45 19 86 0 80 19 86 0 83 19 86 0 87 19 86 0 90 19 86 0 99 19 86 0 105 19 86 0 108 19 86 0 110 19 86 0 115 6 101 0 116 6 105 0 118 19 86 0 121 19 86 0 123 6 109 0 125 6 113 0 130 19 86 0 146 6 117 0 150 6 121 0 151 19 86 0 152 19 86 0 171 19 86 0 177 19 86 0 179 19 86 0 186 19 86 0 188 19 86 0 190 19 86 0 201 6 125 0 207 6 129 0 209 19 86 0 210 6 133 0 211 19 86 0 212 19 86 0 214 19 86 0 215 6 137 0 236 42 161 2 11] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 9 33 0 30 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 37 0 66 1 65 0 69 9 185 0 72 9 45 0 73 1 65 0 75 1 65 0 76 9 185 0 81 3 85 0 82 9 53 0 84 1 65 0 85 9 57 0 88 9 61 0 91 9 65 0 92 9 69 0 94 9 73 0 97 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 9 77 0 104 9 81 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 9 85 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 89 0 146 9 93 0 164 9 97 0 165 9 101 0 167 9 105 0 168 9 109 0 169 1 65 0 170 9 113 0 171 1 65 0 175 1 65 0 176 9 185 0 178 9 121 0 180 1 65 0 182 1 190 0 184 9 125 0 185 9 129 0 189 9 133 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 137 0 199 9 141 0 202 9 145 0 204 9 149 0 208 3 133 0 213 3 141 0 219 3 145 0 220 9 177 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 161 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 165 1 217 42 165 1 221 9 177 1 222 42 165 1 226 9 185 1 227 42 165 1 228 42 165 1 229 42 165 1 230 42 165 1 231 42 165 1 232 42 165 1 233 42 165 1 234 42 165 1 235 42 165 1 236 42 165 1 238 42 165 1 239 42 165 1 240 42 165 1 241 42 165 1 242 42 165 1 246 42 165 1 248 42 165 2 1 42 165 2 2 42 165 2 3 42 165 2 4 42 165 2 5 42 165 2 7 42 165 2 12 42 165 2 13 42 165 2 14 42 165 2 15 42 165 2 19 42 165 2 20 42 165 2 21 42 165 2 22 42 165 2 24 42 165 2 26 42 165 2 27 42 165 2 28 42 165 2 30 42 165 2 32 42 165 2 33 42 165 2 34 42 165 2 35 42 165 2 36 42 165 2 41 42 165 2 45 42 165 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 9 95 0 1 9 99 0 5 2 253 0 9 3 1 0 12 9 103 0 14 5 134 0 17 7 147 0 30 7 151 0 31 9 107 0 32 7 159 0 40 3 13 0 42 7 163 0 44 7 167 0 48 7 171 0 49 7 175 0 50 7 179 0 51 7 183 0 52 7 187 0 53 7 191 0 54 7 195 0 55 7 199 0 56 7 203 0 57 7 207 0 58 7 211 0 59 7 215 0 60 7 219 0 61 7 223 0 62 7 227 0 63 7 231 0 64 7 235 0 65 7 239 0 66 7 243 0 69 7 247 0 72 7 251 0 73 7 255 0 75 8 3 0 76 8 7 0 81 8 11 0 82 8 15 0 84 8 19 0 85 8 23 0 88 8 27 0 91 8 31 0 92 8 35 0 94 8 39 0 97 9 111 0 99 7 159 0 100 8 47 0 102 8 51 0 103 8 55 0 104 8 59 0 107 8 63 0 113 7 159 0 120 8 67 0 126 8 71 0 128 8 75 0 129 8 79 0 134 8 83 0 135 8 87 0 138 5 134 0 139 3 121 0 140 8 91 0 143 9 115 0 146 8 99 0 164 8 103 0 165 8 107 0 167 8 111 0 168 8 115 0 169 8 119 0 170 9 119 0 171 8 127 0 175 8 131 0 176 8 135 0 178 8 139 0 180 8 143 0 182 7 159 0 184 8 147 0 185 8 151 0 189 8 155 0 191 8 159 0 192 8 163 0 193 8 167 0 194 8 171 0 195 8 175 0 196 8 179 0 199 8 183 0 202 8 187 0 204 8 191 0 208 8 195 0 213 5 134 0 215 8 199 0 219 8 203 0 220 8 207 0 221 8 211 0 222 8 215 0 223 8 219 0 224 8 223 0 225 8 227 0 227 8 231 0 229 3 177 0 235 3 181 0 236 3 189 0 238 10 105 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 169 1 217 42 173 1 218 13 221 1 220 42 169 1 221 9 177 1 222 42 169 1 226 9 185 1 227 42 169 1 228 42 169 1 229 42 169 1 230 42 169 1 231 42 169 1 232 42 169 1 233 42 169 1 234 42 169 1 235 42 169 1 236 42 169 1 238 42 169 1 239 42 169 1 240 42 169 1 241 42 169 1 242 42 169 1 246 42 169 1 248 42 169 2 1 42 169 2 2 42 169 2 3 42 169 2 4 42 169 2 5 42 169 2 7 42 169 2 12 42 169 2 13 42 169 2 14 42 169 2 15 42 169 2 19 42 169 2 20 42 169 2 21 42 169 2 22 42 169 2 24 42 169 2 26 42 169 2 27 42 169 2 28 42 169 2 30 42 169 2 32 42 169 2 33 42 169 2 34 42 169 2 35 42 169 2 36 42 169 2 41 42 169 2 45 42 169 2 47 10 105 2 48 10 105 2 50 10 105 2 51 10 105 2 52 10 105 2 53 10 105 2 54 10 105 2 55 10 105 2 56 10 105 2 57 10 105 2 64 10 105 2 65 10 105 2 66 4 21 2 67 10 105 2 68 10 105 2 69 10 105 2 77 10 105 2 78 10 105 2 86 10 105 2 91 10 105 2 92 10 105 2 93 10 105 2 94 10 105 2 95 4 65 2 96 10 105 2 97 10 105 2 98 10 105 2 99 10 105 2 100 10 105 2 101 10 105 2 102 10 105 2 103 10 105 2 104 10 105 2 105 10 105 2 106 10 105 2 107 10 105 2 108 10 105 2 109 10 105 2 110 10 105 2 111 10 105 2 112 10 105 2 113 10 105 2 114 10 105 2 115 10 105 2 116 4 149 2 117 10 105 2 118 10 105 2 119 10 105 2 120 10 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 10 105 2 158 10 105 2 159] 
#[1 9 235 0 1 19 90 0 3 19 90 0 4 9 239 0 5 19 90 0 6 19 90 0 7 19 90 0 8 2 253 0 9 19 90 0 10 19 90 0 11 3 1 0 12 19 90 0 13 9 243 0 14 19 90 0 15 19 90 0 16 19 90 0 17 19 90 0 19 19 90 0 20 19 90 0 21 19 90 0 22 19 90 0 23 19 90 0 24 19 90 0 25 19 90 0 26 19 90 0 27 19 90 0 28 3 5 0 31 9 247 0 32 19 90 0 34 19 90 0 35 19 90 0 38 1 190 0 40 3 13 0 42 1 65 0 44 19 90 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 19 90 0 80 3 85 0 82 19 90 0 83 1 65 0 85 19 90 0 87 19 90 0 90 9 251 0 99 1 190 0 100 3 93 0 102 3 97 0 103 19 90 0 105 3 101 0 107 19 90 0 108 19 90 0 110 1 65 0 113 19 90 0 115 19 90 0 116 19 90 0 118 1 190 0 120 19 90 0 121 19 90 0 123 19 90 0 125 1 65 0 126 3 105 0 128 19 90 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 19 90 0 146 19 90 0 150 19 90 0 151 19 90 0 152 1 65 0 170 19 90 0 171 1 65 0 175 1 65 0 176 19 90 0 177 19 90 0 179 1 65 0 182 1 190 0 184 19 90 0 186 19 90 0 188 19 90 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 19 90 0 201 19 90 0 207 19 90 0 209 19 90 0 210 19 90 0 211 19 90 0 212 3 133 0 213 19 90 0 214 19 90 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 93 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 177 2 9 40 93 2 48 40 93 2 50 40 93 2 51 40 93 2 52 40 93 2 53 40 93 2 54 40 93 2 55 40 93 2 56 40 93 2 57 40 93 2 64 40 93 2 65 40 93 2 66 4 21 2 67 40 93 2 68 40 93 2 69 40 93 2 77 40 93 2 78 40 93 2 86 40 93 2 91 40 93 2 92 40 93 2 93 40 93 2 94 40 93 2 95 4 65 2 96 40 93 2 97 40 93 2 98 40 93 2 99 40 93 2 100 40 93 2 101 40 93 2 102 40 93 2 103 40 93 2 104 40 93 2 105 40 93 2 106 40 93 2 107 40 93 2 108 40 93 2 109 40 93 2 110 40 93 2 111 40 93 2 112 40 93 2 113 40 93 2 114 40 93 2 115 40 93 2 116 4 149 2 117 40 93 2 118 40 93 2 119 40 93 2 120 40 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 93 2 158 40 93 2 159] 
#[0 19 94 0 87 0 88 0 226] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 42 181 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 87 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 226 5 134 0 227 5 134 0 229 42 185 1 218 13 221 1 220] 
#[0 19 98 0 87 0 88 0 226] 
#[0 19 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 69 0 24 42 189 0 240] 
#[1 9 255 0 1 6 41 0 3 19 110 0 4 10 3 0 5 19 110 0 6 6 45 0 7 19 110 0 8 6 49 0 9 19 110 0 10 19 110 0 11 6 53 0 12 19 110 0 13 10 7 0 14 6 57 0 15 19 110 0 16 19 110 0 17 6 61 0 19 6 65 0 20 19 110 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 19 110 0 28 19 110 0 32 6 93 0 34 6 97 0 35 19 110 0 38 19 110 0 45 19 110 0 80 19 110 0 83 19 110 0 87 19 110 0 90 19 110 0 99 19 110 0 105 19 110 0 108 19 110 0 110 19 110 0 115 6 101 0 116 6 105 0 118 19 110 0 121 19 110 0 123 6 109 0 125 6 113 0 130 19 110 0 146 6 117 0 150 6 121 0 151 19 110 0 152 19 110 0 171 19 110 0 177 19 110 0 179 19 110 0 186 19 110 0 188 19 110 0 190 19 110 0 201 6 125 0 207 6 129 0 209 19 110 0 210 6 133 0 211 19 110 0 212 19 110 0 214 19 110 0 215 6 137 0 236] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 42 193 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 193 2 48 42 193 2 50 42 193 2 51 42 193 2 52 42 193 2 53 42 193 2 54 42 193 2 55 42 193 2 56 42 193 2 57 42 193 2 64 42 193 2 65 42 193 2 66 4 21 2 67 42 193 2 68 42 193 2 69 42 193 2 77 42 193 2 78 42 193 2 86 42 193 2 91 42 193 2 92 42 193 2 93 42 193 2 94 42 193 2 95 4 65 2 96 42 193 2 97 42 193 2 98 42 193 2 99 42 193 2 100 42 193 2 101 42 193 2 102 42 193 2 103 42 193 2 104 42 193 2 105 42 193 2 106 42 193 2 107 42 193 2 108 42 193 2 109 42 193 2 110 42 193 2 111 42 193 2 112 42 193 2 113 42 193 2 114 42 193 2 115 42 193 2 116 4 149 2 117 42 193 2 118 42 193 2 119 42 193 2 120 42 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 42 193 2 158 42 193 2 159] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 42 197 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 197 2 48 42 197 2 50 42 197 2 51 42 197 2 52 42 197 2 53 42 197 2 54 42 197 2 55 42 197 2 56 42 197 2 57 42 197 2 64 42 197 2 65 42 197 2 66 4 21 2 67 42 197 2 68 42 197 2 69 42 197 2 77 42 197 2 78 42 197 2 86 42 197 2 91 42 197 2 92 42 197 2 93 42 197 2 94 42 197 2 95 4 65 2 96 42 197 2 97 42 197 2 98 42 197 2 99 42 197 2 100 42 197 2 101 42 197 2 102 42 197 2 103 42 197 2 104 42 197 2 105 42 197 2 106 42 197 2 107 42 197 2 108 42 197 2 109 42 197 2 110 42 197 2 111 42 197 2 112 42 197 2 113 42 197 2 114 42 197 2 115 42 197 2 116 4 149 2 117 42 197 2 118 42 197 2 119 42 197 2 120 42 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 42 197 2 158 42 197 2 159] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 19 114 0 11 6 53 0 12 2 178 0 14 6 57 0 15 19 114 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 114 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 19 118 0 11 6 53 0 12 2 178 0 14 6 57 0 15 19 118 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 19 118 0 215 6 137 0 236] 
#[0 19 122 0 11 0 17 0 215] 
#[0 19 126 0 68 0 88 0 96] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 42 201 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 42 201 2 48 42 201 2 50 42 201 2 51 42 201 2 52 42 201 2 53 42 201 2 54 42 201 2 55 42 201 2 56 42 201 2 57 42 201 2 64 42 201 2 65 42 201 2 66 4 21 2 67 42 201 2 68 42 201 2 69 42 201 2 77 42 201 2 78 42 201 2 86 42 201 2 91 42 201 2 92 42 201 2 93 42 201 2 94 42 201 2 95 4 65 2 96 42 201 2 97 42 201 2 98 42 201 2 99 42 201 2 100 42 201 2 101 42 201 2 102 42 201 2 103 42 201 2 104 42 201 2 105 42 201 2 106 42 201 2 107 42 201 2 108 42 201 2 109 42 201 2 110 42 201 2 111 42 201 2 112 42 201 2 113 42 201 2 114 42 201 2 115 42 201 2 116 4 149 2 117 42 201 2 118 42 201 2 119 42 201 2 120 42 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 42 201 2 158 42 201 2 159] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 42 205 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 42 209 1 218 13 221 1 220] 
#[1 42 213 0 215 11 34 0 229 42 213 2 154] 
#[1 15 37 0 229 42 217 2 132 15 45 2 135] 
#[0 42 221 0 115] 
#[1 42 225 0 215 11 34 0 229 42 225 2 154] 
#[0 42 229 0 115] 
#[1 42 233 0 215 11 34 0 229 42 233 2 154] 
#[1 11 34 0 115 42 237 0 215 42 237 2 154] 
#[0 42 241 0 115] 
#[1 15 37 0 229 42 245 2 132 15 45 2 135] 
#[0 19 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 42 249 0 215 11 34 0 229 42 249 2 154] 
#[1 15 37 0 229 42 253 2 132 15 45 2 135] 
#[1 43 1 0 215 11 34 0 229 43 1 2 154] 
#[1 15 37 0 229 43 5 2 132 15 45 2 135] 
#[0 43 9 0 115] 
#[1 43 13 0 215 11 34 0 229 43 13 2 154] 
#[0 19 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 43 17 2 132 15 45 2 135] 
#[0 19 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 43 21 0 215 11 34 0 229 43 21 2 154] 
#[1 15 37 0 229 43 25 2 132 15 45 2 135] 
#[0 19 142 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 43 29 2 132 15 45 2 135] 
#[0 19 146 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 43 33 1 132] 
#[1 43 37 0 6 3 137 0 215 43 37 0 237] 
#[0 19 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 41 0 17 43 45 0 215] 
#[1 43 49 0 6 3 137 0 215 43 49 0 237] 
#[1 43 53 0 6 3 137 0 215 43 53 0 237] 
#[0 19 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 43 57 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[1 43 61 0 17 43 65 0 215] 
#[1 43 69 0 6 3 137 0 215 43 69 0 237] 
#[0 19 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 30 0 6 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 17 30 0 215 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 43 73 1 129 36 141 1 137 11 53 1 140 11 57 1 141] 
#[0 19 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 43 77 0 184] 
#[0 43 81 0 88] 
#[1 0 73 0 19 39 141 0 30 43 85 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[1 0 73 0 19 39 141 0 30 43 89 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 43 93 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[1 0 73 0 19 39 141 0 30 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 43 97 1 161 39 161 1 162 39 161 1 163 39 161 1 164 39 161 1 165] 
#[0 19 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 43 101 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 43 105 1 200] 
#[0 43 109 0 215] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 43 113 1 203 43 113 2 79 43 113 2 80 43 113 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 43 117 1 202] 
#[1 2 69 0 24 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 43 121 1 199] 
#[0 19 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 43 125 1 202] 
#[1 6 174 0 44 6 174 0 48 6 174 0 69 6 174 0 75 6 174 0 76 6 174 0 85 6 174 0 103 6 174 0 113 6 174 0 126 43 129 0 138 6 174 0 143 6 174 0 170 6 174 0 175 6 174 0 176 6 174 0 182 6 174 0 194 6 174 0 195 6 174 0 196 6 174 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 43 133 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 43 133 1 93] 
#[0 43 137 0 215] 
#[1 43 141 0 17 43 145 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 43 149 1 132] 
#[0 19 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 153 0 17 43 157 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 43 161 1 132] 
#[1 43 165 0 6 3 137 0 215 43 165 0 237] 
#[0 19 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 169 0 17 43 173 0 215] 
#[1 43 177 0 6 3 137 0 215 43 177 0 237] 
#[1 43 181 0 17 43 185 0 215] 
#[0 43 189 0 184] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 43 193 1 137 11 53 1 140 11 57 1 141] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 43 197 1 137 11 53 1 140 11 57 1 141] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 43 201 1 137 11 53 1 140 11 57 1 141] 
#[1 2 33 0 5 43 205 0 236] 
#[1 2 33 0 5 43 209 0 236] 
#[1 2 33 0 5 43 213 0 236] 
#[0 43 217 0 93] 
#[0 19 226 0 19 0 30 0 88 0 164 0 167] 
#[0 43 221 0 93] 
#[1 0 73 0 19 39 141 0 30 43 225 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[1 0 73 0 19 39 141 0 30 43 229 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[0 19 230 0 17 0 108 0 215] 
#[0 19 234 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 19 238 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 19 242 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 19 246 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 43 233 0 172] 
#[0 43 237 0 88] 
#[1 43 241 0 17 43 245 0 215] 
#[1 43 249 0 17 43 253 0 215] 
#[0 44 1 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 44 5 1 218 13 221 1 220] 
#[1 44 9 0 17 44 13 0 215] 
#[1 44 17 0 17 44 21 0 215] 
#[0 44 25 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 44 29 1 218 13 221 1 220] 
#[0 44 33 0 101] 
#[0 44 37 0 172] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 44 41 1 218 13 221 1 220] 
#[0 44 45 0 215] 
#[0 19 250 0 99 0 108 0 204 0 215] 
#[0 19 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 44 49 0 215] 
#[0 20 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 44 53 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 44 57 1 203 44 57 2 79 44 57 2 80 44 57 2 85] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 44 61 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 44 65 1 203 44 65 2 79 44 65 2 80 44 65 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 44 69 1 202] 
#[1 2 69 0 24 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 44 73 1 199] 
#[0 20 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 44 77 0 254 0 89 0 255 0 93 1 0 44 81 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 44 81 1 93] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 44 85 1 218 13 221 1 220] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 44 89 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 44 89 1 93] 
#[0 44 93 0 215] 
#[0 44 97 0 88] 
#[0 20 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 20 14 0 1 20 14 0 3 20 14 0 4 20 14 0 5 20 14 0 6 20 14 0 7 20 14 0 8 20 14 0 9 20 14 0 10 10 11 0 11 20 14 0 12 20 14 0 13 20 14 0 14 20 14 0 15 20 14 0 16 20 14 0 17 20 14 0 19 20 14 0 20 20 14 0 21 20 14 0 22 20 14 0 23 20 14 0 24 20 14 0 25 20 14 0 26 20 14 0 27 20 14 0 28 20 14 0 32 20 14 0 34 20 14 0 35 20 14 0 38 20 14 0 45 20 14 0 80 20 14 0 83 20 14 0 87 20 14 0 90 20 14 0 99 20 14 0 105 20 14 0 108 20 14 0 110 20 14 0 115 20 14 0 116 20 14 0 118 20 14 0 121 20 14 0 123 20 14 0 125 20 14 0 130 20 14 0 146 20 14 0 150 20 14 0 151 20 14 0 152 20 14 0 171 20 14 0 177 20 14 0 179 20 14 0 186 20 14 0 188 20 14 0 190 20 14 0 201 20 14 0 207 20 14 0 209 20 14 0 210 20 14 0 211 20 14 0 212 20 14 0 214 20 14 0 215 44 101 0 234 44 105 2 10] 
#[0 20 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 44 109 0 139] 
#[0 20 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 30 0 87 0 88 0 226] 
#[0 20 34 0 87 0 88 0 226] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 44 113 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 44 113 2 48 44 113 2 50 44 113 2 51 44 113 2 52 44 113 2 53 44 113 2 54 44 113 2 55 44 113 2 56 44 113 2 57 44 113 2 64 44 113 2 65 44 113 2 66 4 21 2 67 44 113 2 68 44 113 2 69 44 113 2 77 44 113 2 78 44 113 2 86 44 113 2 91 44 113 2 92 44 113 2 93 44 113 2 94 44 113 2 95 4 65 2 96 44 113 2 97 44 113 2 98 44 113 2 99 44 113 2 100 44 113 2 101 44 113 2 102 44 113 2 103 44 113 2 104 44 113 2 105 44 113 2 106 44 113 2 107 44 113 2 108 44 113 2 109 44 113 2 110 44 113 2 111 44 113 2 112 44 113 2 113 44 113 2 114 44 113 2 115 44 113 2 116 4 149 2 117 44 113 2 118 44 113 2 119 44 113 2 120 44 113 2 122 4 169 2 125 4 173 2 136 4 177 2 155 44 113 2 158 44 113 2 159] 
#[1 10 15 0 1 6 41 0 3 20 38 0 4 10 19 0 5 20 38 0 6 6 45 0 7 20 38 0 8 6 49 0 9 20 38 0 10 20 38 0 11 6 53 0 12 20 38 0 13 10 23 0 14 6 57 0 15 20 38 0 16 20 38 0 17 6 61 0 19 6 65 0 20 20 38 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 20 38 0 28 20 38 0 32 6 93 0 34 6 97 0 35 20 38 0 38 20 38 0 45 20 38 0 80 20 38 0 83 20 38 0 87 20 38 0 90 20 38 0 99 20 38 0 105 20 38 0 108 20 38 0 110 20 38 0 115 6 101 0 116 6 105 0 118 20 38 0 121 20 38 0 123 6 109 0 125 6 113 0 130 20 38 0 146 6 117 0 150 6 121 0 151 20 38 0 152 20 38 0 171 20 38 0 177 20 38 0 179 20 38 0 186 20 38 0 188 20 38 0 190 20 38 0 201 6 125 0 207 6 129 0 209 20 38 0 210 6 133 0 211 20 38 0 212 20 38 0 214 20 38 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 20 42 0 11 6 53 0 12 2 178 0 14 6 57 0 15 20 42 0 17 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 20 42 0 215 6 137 0 236] 
#[1 6 37 0 1 6 41 0 3 2 33 0 5 6 45 0 7 6 49 0 9 6 53 0 12 2 178 0 14 6 57 0 15 6 61 0 19 6 65 0 20 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 6 93 0 34 6 97 0 35 6 101 0 116 6 105 0 118 6 109 0 125 6 113 0 130 6 117 0 150 6 121 0 151 6 125 0 207 6 129 0 209 6 133 0 211 44 117 0 215 6 137 0 236] 
#[0 20 46 0 68 0 88 0 96] 
#[0 20 50 0 68 0 88 0 96] 
#[1 15 37 0 229 44 121 2 132 15 45 2 135] 
#[0 20 54 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 44 125 0 215 11 34 0 229 44 125 2 154] 
#[1 15 37 0 229 44 129 2 132 15 45 2 135] 
#[1 44 133 0 215 11 34 0 229 44 133 2 154] 
#[1 15 37 0 229 44 137 2 132 15 45 2 135] 
#[0 44 141 0 115] 
#[1 44 145 0 215 11 34 0 229 44 145 2 154] 
#[0 20 58 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 44 149 2 132 15 45 2 135] 
#[0 20 62 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 44 153 2 132 15 45 2 135] 
#[0 20 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 44 157 0 215 11 34 0 229 44 157 2 154] 
#[1 15 37 0 229 44 161 2 132 15 45 2 135] 
#[0 20 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 44 165 2 132 15 45 2 135] 
#[0 20 74 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 78 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 44 169 0 17 44 173 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 44 177 1 132] 
#[0 20 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 181 0 17 44 185 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 44 189 1 132] 
#[1 44 193 0 6 3 137 0 215 44 193 0 237] 
#[0 20 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 197 0 17 44 201 0 215] 
#[1 44 205 0 6 3 137 0 215 44 205 0 237] 
#[1 44 209 0 17 44 213 0 215] 
#[0 44 217 0 184] 
#[0 44 221 0 93] 
#[0 44 225 0 93] 
#[1 0 73 0 19 39 141 0 30 44 229 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[1 0 73 0 19 39 141 0 30 44 233 0 88 39 145 0 164 39 149 0 167 39 153 0 254 0 89 0 255 0 93 1 0 42 1 1 162 42 1 1 163 42 1 1 164 42 1 1 165] 
#[0 20 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 44 237 0 215] 
#[0 20 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 44 241 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 44 245 1 203 44 245 2 79 44 245 2 80 44 245 2 85] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 44 249 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 44 253 1 203 44 253 2 79 44 253 2 80 44 253 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 166 0 99 0 245 0 103 15 166 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 166 0 204 15 166 0 215 1 37 0 229 34 49 1 44 34 49 1 45 34 49 1 46 34 49 1 53 34 49 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 34 53 1 201 45 1 1 202] 
#[1 2 69 0 24 12 18 0 108 12 18 0 215 26 77 0 240 26 81 1 198 45 5 1 199] 
#[0 20 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 9 0 17 45 13 0 215] 
#[0 20 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 17 0 17 45 21 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 45 25 1 132] 
#[0 20 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 29 0 17 45 33 0 215] 
#[0 20 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 37 0 17 45 41 0 215] 
#[1 45 45 0 6 3 137 0 215 45 45 0 237] 
#[1 45 49 0 6 3 137 0 215 45 49 0 237] 
#[1 45 53 0 6 3 137 0 215 45 53 0 237] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 45 57 1 137 11 53 1 140 11 57 1 141] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 45 61 1 137 11 53 1 140 11 57 1 141] 
#[1 0 73 0 19 4 118 0 46 4 118 0 47 4 118 0 149 4 118 0 157 4 118 0 229 11 45 0 254 0 89 0 255 0 93 1 0 45 65 1 137 11 53 1 140 11 57 1 141] 
#[1 45 69 0 17 45 73 0 215] 
#[1 45 77 0 17 45 81 0 215] 
#[0 45 85 0 93] 
#[0 45 89 0 93] 
#[1 45 93 0 17 45 97 0 215] 
#[0 45 101 0 172] 
#[0 20 142 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 146 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 150 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 154 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 45 105 0 172] 
#[0 45 109 0 88] 
#[0 20 158 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 162 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 166 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 170 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 45 113 0 172] 
#[0 45 117 0 88] 
#[1 45 121 0 17 45 125 0 215] 
#[1 45 129 0 17 45 133 0 215] 
#[0 45 137 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 45 141 1 218 13 221 1 220] 
#[0 20 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 45 145 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 45 149 1 200] 
#[0 45 153 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 45 157 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 45 161 1 203 45 161 2 79 45 161 2 80 45 161 2 85] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 45 165 1 200] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 45 169 1 43 1 105 1 44 1 105 1 45 1 105 1 46 1 105 1 53 1 105 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 45 169 1 93] 
#[0 45 173 0 215] 
#[0 45 177 0 88] 
#[0 45 181 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 45 185 1 218 13 221 1 220] 
#[0 45 189 0 147] 
#[1 2 245 0 1 2 33 0 5 2 253 0 9 3 1 0 12 2 25 0 14 3 5 0 31 3 9 0 32 1 190 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 190 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 190 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 190 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 45 193 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 45 193 2 48 45 193 2 50 45 193 2 51 45 193 2 52 45 193 2 53 45 193 2 54 45 193 2 55 45 193 2 56 45 193 2 57 45 193 2 64 45 193 2 65 45 193 2 66 4 21 2 67 45 193 2 68 45 193 2 69 45 193 2 77 45 193 2 78 45 193 2 86 45 193 2 91 45 193 2 92 45 193 2 93 45 193 2 94 45 193 2 95 4 65 2 96 45 193 2 97 45 193 2 98 45 193 2 99 45 193 2 100 45 193 2 101 45 193 2 102 45 193 2 103 45 193 2 104 45 193 2 105 45 193 2 106 45 193 2 107 45 193 2 108 45 193 2 109 45 193 2 110 45 193 2 111 45 193 2 112 45 193 2 113 45 193 2 114 45 193 2 115 45 193 2 116 4 149 2 117 45 193 2 118 45 193 2 119 45 193 2 120 45 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 45 193 2 158 45 193 2 159] 
#[0 20 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 27 0 1 20 182 0 3 20 182 0 4 10 31 0 5 20 182 0 6 20 182 0 7 20 182 0 8 2 253 0 9 20 182 0 10 20 182 0 11 3 1 0 12 20 182 0 13 10 35 0 14 20 182 0 15 20 182 0 16 20 182 0 17 20 182 0 19 20 182 0 20 20 182 0 21 20 182 0 22 20 182 0 23 20 182 0 24 20 182 0 25 20 182 0 26 20 182 0 27 20 182 0 28 3 5 0 31 10 39 0 32 20 182 0 34 20 182 0 35 20 182 0 38 1 190 0 40 3 13 0 42 1 65 0 44 20 182 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 20 182 0 80 3 85 0 82 20 182 0 83 1 65 0 85 20 182 0 87 20 182 0 90 10 43 0 99 1 190 0 100 3 93 0 102 3 97 0 103 20 182 0 105 3 101 0 107 20 182 0 108 20 182 0 110 1 65 0 113 20 182 0 115 20 182 0 116 20 182 0 118 1 190 0 120 20 182 0 121 20 182 0 123 20 182 0 125 1 65 0 126 3 105 0 128 20 182 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 20 182 0 146 20 182 0 150 20 182 0 151 20 182 0 152 1 65 0 170 20 182 0 171 1 65 0 175 1 65 0 176 20 182 0 177 20 182 0 179 1 65 0 182 1 190 0 184 20 182 0 186 20 182 0 188 20 182 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 20 182 0 201 20 182 0 207 20 182 0 209 20 182 0 210 20 182 0 211 20 182 0 212 3 133 0 213 20 182 0 214 20 182 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 181 0 236 3 189 0 238 40 93 0 242 3 221 1 44 3 221 1 45 3 221 1 46 3 221 1 53 3 221 1 56 1 65 1 62 1 65 1 63 1 65 1 64 1 65 1 65 45 197 2 9 40 93 2 48 40 93 2 50 40 93 2 51 40 93 2 52 40 93 2 53 40 93 2 54 40 93 2 55 40 93 2 56 40 93 2 57 40 93 2 64 40 93 2 65 40 93 2 66 4 21 2 67 40 93 2 68 40 93 2 69 40 93 2 77 40 93 2 78 40 93 2 86 40 93 2 91 40 93 2 92 40 93 2 93 40 93 2 94 40 93 2 95 4 65 2 96 40 93 2 97 40 93 2 98 40 93 2 99 40 93 2 100 40 93 2 101 40 93 2 102 40 93 2 103 40 93 2 104 40 93 2 105 40 93 2 106 40 93 2 107 40 93 2 108 40 93 2 109 40 93 2 110 40 93 2 111 40 93 2 112 40 93 2 113 40 93 2 114 40 93 2 115 40 93 2 116 4 149 2 117 40 93 2 118 40 93 2 119 40 93 2 120 40 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 40 93 2 158 40 93 2 159] 
#[1 10 47 0 1 6 41 0 3 20 186 0 4 10 51 0 5 20 186 0 6 6 45 0 7 20 186 0 8 6 49 0 9 20 186 0 10 20 186 0 11 6 53 0 12 20 186 0 13 10 55 0 14 6 57 0 15 20 186 0 16 20 186 0 17 6 61 0 19 6 65 0 20 20 186 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 20 186 0 28 20 186 0 32 6 93 0 34 6 97 0 35 20 186 0 38 20 186 0 45 20 186 0 80 20 186 0 83 20 186 0 87 20 186 0 90 20 186 0 99 20 186 0 105 20 186 0 108 20 186 0 110 20 186 0 115 6 101 0 116 6 105 0 118 20 186 0 121 20 186 0 123 6 109 0 125 6 113 0 130 20 186 0 146 6 117 0 150 6 121 0 151 20 186 0 152 20 186 0 171 20 186 0 177 20 186 0 179 20 186 0 186 20 186 0 188 20 186 0 190 20 186 0 201 6 125 0 207 6 129 0 209 20 186 0 210 6 133 0 211 20 186 0 212 20 186 0 214 20 186 0 215 6 137 0 236] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 68 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 96 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 45 201 1 218 13 221 1 220] 
#[0 20 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 45 205 2 132 15 45 2 135] 
#[0 20 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 45 209 2 132 15 45 2 135] 
#[0 20 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 45 213 0 215 11 34 0 229 45 213 2 154] 
#[1 15 37 0 229 45 217 2 132 15 45 2 135] 
#[0 20 202 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 45 221 2 132 15 45 2 135] 
#[0 20 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 225 0 17 45 229 0 215] 
#[0 20 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 233 0 17 45 237 0 215] 
#[1 15 126 0 17 33 157 0 37 15 126 0 215 33 165 1 131 45 241 1 132] 
#[0 20 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 245 0 17 45 249 0 215] 
#[0 20 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 253 0 17 46 1 0 215] 
#[1 46 5 0 17 46 9 0 215] 
#[1 46 13 0 17 46 17 0 215] 
#[0 46 21 0 93] 
#[0 46 25 0 93] 
#[0 20 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 29 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 46 33 1 200] 
#[0 46 37 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 46 41 1 200] 
#[1 7 209 0 99 17 78 0 108 5 189 0 204 17 78 0 215 46 45 1 203 46 45 2 79 46 45 2 80 46 45 2 85] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 46 49 1 200] 
#[0 20 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 53 0 17 46 57 0 215] 
#[0 21 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 61 0 215] 
#[0 46 65 0 215] 
#[0 46 69 0 215] 
#[1 46 73 0 6 3 137 0 215 46 73 0 237] 
#[1 46 77 0 6 3 137 0 215 46 77 0 237] 
#[1 46 81 0 6 3 137 0 215 46 81 0 237] 
#[0 21 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 85 0 17 46 89 0 215] 
#[1 46 93 0 17 46 97 0 215] 
#[0 21 46 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 50 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 46 101 0 17 46 105 0 215] 
#[1 46 109 0 17 46 113 0 215] 
#[0 46 117 0 172] 
#[1 46 121 0 17 46 125 0 215] 
#[0 46 129 0 172] 
#[0 21 54 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 58 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 62 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 66 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 46 133 0 172] 
#[0 46 137 0 88] 
#[0 21 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 141 0 215] 
#[0 21 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 145 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 46 149 1 200] 
#[0 46 153 0 215] 
#[0 46 157 0 215] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 46 161 1 218 13 221 1 220] 
#[0 46 165 0 147] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 46 169 1 218 13 221 1 220] 
#[0 46 173 0 88] 
#[1 46 177 0 17 46 181 0 215] 
#[1 10 59 0 1 6 41 0 3 21 78 0 4 10 63 0 5 21 78 0 6 6 45 0 7 21 78 0 8 6 49 0 9 21 78 0 10 21 78 0 11 6 53 0 12 21 78 0 13 10 67 0 14 6 57 0 15 21 78 0 16 21 78 0 17 6 61 0 19 6 65 0 20 21 78 0 21 6 69 0 22 6 73 0 23 6 77 0 24 6 81 0 25 6 85 0 26 6 89 0 27 21 78 0 28 21 78 0 32 6 93 0 34 6 97 0 35 21 78 0 38 21 78 0 45 21 78 0 80 21 78 0 83 21 78 0 87 21 78 0 90 21 78 0 99 21 78 0 105 21 78 0 108 21 78 0 110 21 78 0 115 6 101 0 116 6 105 0 118 21 78 0 121 21 78 0 123 6 109 0 125 6 113 0 130 21 78 0 146 6 117 0 150 6 121 0 151 21 78 0 152 21 78 0 171 21 78 0 177 21 78 0 179 21 78 0 186 21 78 0 188 21 78 0 190 21 78 0 201 6 125 0 207 6 129 0 209 21 78 0 210 6 133 0 211 21 78 0 212 21 78 0 214 21 78 0 215 6 137 0 236] 
#[0 21 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 86 0 68 0 88 0 96] 
#[0 21 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 94 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 37 0 229 46 185 2 132 15 45 2 135] 
#[0 21 98 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 102 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 189 0 17 46 193 0 215] 
#[0 21 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 197 0 17 46 201 0 215] 
#[1 46 205 0 17 46 209 0 215] 
#[0 21 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 213 0 215] 
#[0 21 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 217 0 215] 
#[1 21 145 0 108 13 214 0 215 30 141 1 102 46 221 1 200] 
#[0 46 225 0 215] 
#[0 21 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 46 229 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 46 233 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 46 237 1 218 13 221 1 220] 
#[0 46 241 0 215] 
#[0 46 245 0 215] 
#[0 46 249 0 215] 
#[0 21 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 186 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 190 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 194 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 198 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 46 253 0 17 47 1 0 215] 
#[0 21 202 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 206 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 47 5 0 17 47 9 0 215] 
#[1 47 13 0 17 47 17 0 215] 
#[0 47 21 0 172] 
#[0 21 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 25 0 215] 
#[0 21 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 47 29 1 218 13 221 1 220] 
#[0 47 33 0 88] 
#[1 47 37 0 17 47 41 0 215] 
#[0 47 45 0 88] 
#[0 47 49 0 147] 
#[0 21 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 53 0 215] 
#[0 22 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 57 0 88] 
#[0 47 61 0 88] 
#[0 47 65 0 88] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 47 69 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 47 73 1 218 13 221 1 220] 
#[1 5 134 0 1 5 134 0 5 5 134 0 9 5 134 0 12 5 134 0 14 5 134 0 17 5 134 0 30 5 134 0 31 5 134 0 32 5 134 0 40 5 134 0 42 5 134 0 44 5 134 0 48 5 134 0 49 5 134 0 50 5 134 0 51 5 134 0 52 5 134 0 53 5 134 0 54 5 134 0 55 5 134 0 56 5 134 0 57 5 134 0 58 5 134 0 59 5 134 0 60 5 134 0 61 5 134 0 62 5 134 0 63 5 134 0 64 5 134 0 65 5 134 0 66 5 134 0 69 5 134 0 72 5 134 0 73 5 134 0 75 5 134 0 76 5 134 0 81 5 134 0 82 5 134 0 84 5 134 0 85 5 134 0 88 5 134 0 91 5 134 0 92 5 134 0 94 5 134 0 97 5 134 0 99 5 134 0 100 5 134 0 102 5 134 0 103 5 134 0 104 5 134 0 107 5 134 0 113 5 134 0 120 5 134 0 126 5 134 0 128 5 134 0 129 5 134 0 134 5 134 0 135 5 134 0 138 5 134 0 140 5 134 0 143 5 134 0 146 5 134 0 164 5 134 0 165 5 134 0 167 5 134 0 168 5 134 0 169 5 134 0 170 5 134 0 171 5 134 0 175 5 134 0 176 5 134 0 178 5 134 0 180 5 134 0 182 5 134 0 184 5 134 0 185 5 134 0 189 5 134 0 191 5 134 0 192 5 134 0 193 5 134 0 194 5 134 0 195 5 134 0 196 5 134 0 199 5 134 0 202 5 134 0 204 5 134 0 208 5 134 0 213 5 134 0 215 5 134 0 219 5 134 0 220 5 134 0 221 5 134 0 222 5 134 0 223 5 134 0 224 5 134 0 225 5 134 0 227 5 134 0 229 47 77 1 218 13 221 1 220] 
#[0 22 14 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 18 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 22 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 26 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 30 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 34 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 47 81 0 17 47 85 0 215] 
#[0 22 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 89 0 88] 
#[0 47 93 0 147] 
#[0 22 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 97 0 147] 
#[1 47 101 0 17 47 105 0 215] 
#[0 22 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 109 0 30] 
#[0 47 113 0 164] 
#[0 47 117 0 167] 
#[0 47 121 0 88] 
#[0 47 125 0 88] 
#[0 47 129 0 88] 
#[0 22 54 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 58 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 47 133 0 147] 
#[1 47 137 0 17 47 141 0 215] 
#[1 47 145 0 17 47 149 0 215] 
#[0 22 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 47 153 0 17 47 157 0 215] 
#[1 47 161 0 17 47 165 0 215] 
#[1 47 169 0 17 47 173 0 215] 
#[0 47 177 0 30] 
#[0 47 181 0 164] 
#[0 47 185 0 167] 
#[1 47 189 0 17 47 193 0 215] 
#[0 22 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 86 0 19 0 30 0 88 0 164 0 167] 
#[0 22 90 0 19 0 30 0 88 0 164 0 167] 
#[0 22 94 0 19 0 30 0 88 0 164 0 167] 
#[0 22 98 0 19 0 30 0 88 0 164 0 167] 
#[0 22 102 0 19 0 30 0 88 0 164 0 167] 
#[0 22 106 0 19 0 30 0 88 0 164 0 167] 
#[1 47 197 0 17 47 201 0 215] 
#[1 47 205 0 17 47 209 0 215] 
#[1 47 213 0 17 47 217 0 215] 
#[0 22 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 118 0 19 0 30 0 88 0 164 0 167] 
#[0 22 122 0 19 0 30 0 88 0 164 0 167] 
#[0 22 126 0 19 0 30 0 88 0 164 0 167] 
#[0 22 130 0 19 0 30 0 88 0 164 0 167] 
#[0 22 134 0 19 0 30 0 88 0 164 0 167] 
#[0 22 138 0 19 0 30 0 88 0 164 0 167]
	).
]

{ #category : #accessing }
VBNetParser >> actionsForCurrentToken [
	| actions |
	actions := super actionsForCurrentToken.
	(actions isEmpty
		and: [ currentToken ids includes: scanner LineTerminatorId ])
		ifTrue: [ currentToken := nil.
			self getNextToken.
			^ self actionsForCurrentToken ].
	((currentToken ids includes: scanner IdentifierOrKeywordId)
		and:
			[ (self class keywords includes: currentToken source asUppercase) not ])
		ifTrue: [ self addActionsFor: scanner IdentifierId to: actions ].
	(actions isEmpty and: [ self isEOFToken ])
		ifTrue: [ self addActionsFor: scanner LineTerminatorId to: actions ].
	^ actions
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration1: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result addHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result addHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration2: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result addHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result addHandlerTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration3: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result addHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result addHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration4: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result addHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result addHandlerTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerStatement1: nodes [
	| result |
	result := VBNetAddHandlerStatementNode new.
	result addHandlerToken: (nodes at: 1).
	result event: (nodes at: 2).
	result comma: (nodes at: 3).
	result handler: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddressOfExpression1: nodes [
	| result |
	result := VBNetAddressOfExpressionNode new.
	result addressOfToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator2: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator3: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator4: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator5: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator6: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator7: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator8: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAliasImportsClause1: nodes [
	| result |
	result := VBNetAliasImportsClauseNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAnonymousObjectCreationExpression1: nodes [
	| result |
	result := VBNetAnonymousCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList3: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayCreationExpression1: nodes [
	| result |
	result := VBNetArrayCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result arrayTypeModifiers.
	result addToken: ((nodes at: 3) at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 3) to: result bounds.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	result addToken: ((nodes at: 3) at: 5) to: result rightParens.
	result initializer: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayNameModifier1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayNameModifier2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 2 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArraySizeInitializationModifier1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArraySizeInitializationModifier2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeModifier1: nodes [
	| result |
	result := VBNetArrayTypeModifierNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeModifier2: nodes [
	| result |
	result := VBNetArrayTypeModifierNode new.
	result leftParen: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result commas.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeName1: nodes [
	| result |
	result := VBNetArrayTypeNameNode new.
	result type: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result arrayTypeModifiers.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute2: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute3: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute4: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute5: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute6: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result commas.
	result addNodes: ((nodes at: 5) at: 2) to: result arguments.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeArguments2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeArguments3: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock1: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock3: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock4: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock6: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock__attributeBlock__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeList1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributePositionalArgumentList2: nodes [
	| result |
	result := nodes at: 2.
	self addFirst: (nodes at: 1) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributes1: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributesNamespaceDeclaration1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributesNamespaceDeclaration2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration10: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result equals: ((nodes at: 10) at: 1).
	result value: ((nodes at: 10) at: 2).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration11: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result equals: ((nodes at: 8) at: 1).
	result value: ((nodes at: 8) at: 2).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration12: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result equals: ((nodes at: 11) at: 1).
	result value: ((nodes at: 11) at: 2).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration13: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result newToken: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result addToken: ((nodes at: 6) at: 2) to: result leftParens.
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: ((nodes at: 6) at: 5) to: result arguments.
	result addTokens: ((nodes at: 6) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 6) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 6) at: 8) to: result namedArguments.
	result initializer: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration14: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result newToken: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result addToken: ((nodes at: 7) at: 2) to: result leftParens.
	result addToken: ((nodes at: 7) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: ((nodes at: 7) at: 5) to: result arguments.
	result addTokens: ((nodes at: 7) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 7) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 7) at: 8) to: result namedArguments.
	result initializer: (nodes at: 8).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration15: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result newToken: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result addToken: ((nodes at: 8) at: 2) to: result leftParens.
	result addToken: ((nodes at: 8) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: ((nodes at: 8) at: 5) to: result arguments.
	result addTokens: ((nodes at: 8) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 8) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 8) at: 8) to: result namedArguments.
	result initializer: (nodes at: 9).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration16: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 9) at: 4) to: result commas.
	result addNodes: ((nodes at: 9) at: 5) to: result arguments.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration17: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 9) at: 4) to: result commas.
	result addNodes: ((nodes at: 9) at: 5) to: result arguments.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration18: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 10) at: 4) to: result commas.
	result addNodes: ((nodes at: 10) at: 5) to: result arguments.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration19: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result newToken: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result addToken: ((nodes at: 7) at: 2) to: result leftParens.
	result addToken: ((nodes at: 7) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: ((nodes at: 7) at: 5) to: result arguments.
	result addTokens: ((nodes at: 7) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 7) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 7) at: 8) to: result namedArguments.
	result initializer: (nodes at: 8).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equals: ((nodes at: 4) at: 1).
	result value: ((nodes at: 4) at: 2).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration20: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result newToken: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result addToken: ((nodes at: 8) at: 2) to: result leftParens.
	result addToken: ((nodes at: 8) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: ((nodes at: 8) at: 5) to: result arguments.
	result addTokens: ((nodes at: 8) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 8) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 8) at: 8) to: result namedArguments.
	result initializer: (nodes at: 9).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration21: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 9) at: 4) to: result commas.
	result addNodes: ((nodes at: 9) at: 5) to: result arguments.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration22: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 10) at: 4) to: result commas.
	result addNodes: ((nodes at: 10) at: 5) to: result arguments.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration23: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 10) at: 4) to: result commas.
	result addNodes: ((nodes at: 10) at: 5) to: result arguments.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration24: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result newToken: (nodes at: 10).
	result type: ((nodes at: 11) at: 1).
	result addToken: ((nodes at: 11) at: 2) to: result leftParens.
	result addToken: ((nodes at: 11) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 11) at: 4) to: result commas.
	result addNodes: ((nodes at: 11) at: 5) to: result arguments.
	result addTokens: ((nodes at: 11) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 11) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 11) at: 8) to: result namedArguments.
	result initializer: (nodes at: 12).
	result implementsToken: ((nodes at: 13) at: 1).
	result addNodes: ((nodes at: 13) at: 2) to: result implements.
	result addTokens: ((nodes at: 13) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result type: (nodes at: 6).
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result equals: ((nodes at: 6) at: 1).
	result value: ((nodes at: 6) at: 2).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	result equals: ((nodes at: 9) at: 1).
	result value: ((nodes at: 9) at: 2).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result equals: ((nodes at: 10) at: 1).
	result value: ((nodes at: 10) at: 2).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equals: ((nodes at: 5) at: 1).
	result value: ((nodes at: 5) at: 2).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result type: (nodes at: 7).
	result equals: ((nodes at: 8) at: 1).
	result value: ((nodes at: 8) at: 2).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration9: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAwaitOperatorExpression1: nodes [
	| result |
	result := VBNetAwaitExpressionNode new.
	result awaitToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement1: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement2: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement3: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement4: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement5: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement6: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result else: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement7: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement8: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result else: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBound2: nodes [
	| result |
	result := VBNetBoundExpressionNode new.
	result from: (nodes at: 1).
	result toToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBuiltInTypeName1: nodes [
	| result |
	result := VBNetBuiltInTypeNameNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause1: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause2: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause3: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 2) to: result operators.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause4: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 2) to: result operators.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause5: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 3) to: result operators.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause6: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 3) to: result operators.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause7: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause8: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result value: (nodes at: 1).
	result toToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseElseStatement1: nodes [
	| result |
	result := VBNetCaseElseStatementNode new.
	result caseToken: (nodes at: 1).
	result elseToken: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseElseStatement2: nodes [
	| result |
	result := VBNetCaseElseStatementNode new.
	result caseToken: (nodes at: 1).
	result elseToken: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseStatement1: nodes [
	| result |
	result := VBNetCaseStatementNode new.
	result caseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseStatement2: nodes [
	| result |
	result := VBNetCaseStatementNode new.
	result caseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCastExpression3: nodes [
	| result |
	result := VBNetCastExpressionNode new.
	result castType: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result comma: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCastExpression4: nodes [
	| result |
	result := VBNetPrimitiveCastExpressionNode new.
	result type: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement1: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement2: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result whenToken: (nodes at: 2).
	result when: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement3: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement4: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result whenToken: (nodes at: 3).
	result when: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement5: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement6: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result whenToken: (nodes at: 5).
	result when: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassBase1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassBase2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration10: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration11: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration12: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration13: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration14: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration15: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration16: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration17: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration18: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration19: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration1: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration20: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration21: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration22: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration23: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration24: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration25: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration26: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration27: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration28: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration29: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration2: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration30: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration31: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration32: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration3: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration4: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration5: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration6: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration7: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration8: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration9: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionInitializer1: nodes [
	| result |
	result := VBNetCollectionInitializerNode new.
	result leftBrace: (nodes at: 1).
	result rightBrace: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionInitializer2: nodes [
	| result |
	result := VBNetCollectionInitializerNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration3: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration4: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclarationList1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self add: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCompoundAssignmentStatement2: nodes [
	| result |
	result := VBNetAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConcatenationOperatorExpression1: nodes [
	| result |
	result := VBNetBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConcatenationOperatorExpression2: nodes [
	| result |
	result := VBNetBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConditionalExpression1: nodes [
	| result |
	result := VBNetConditionalExpressionNode new.
	result ifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result booleanValue: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result trueValue: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result falseValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConditionalExpression2: nodes [
	| result |
	result := VBNetConditionalExpressionNode new.
	result ifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result booleanValue: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result trueValue: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantDeclarator1: nodes [
	| result |
	result := VBNetConstantDeclaratorNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantDeclarator2: nodes [
	| result |
	result := VBNetConstantDeclaratorNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration1: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result constToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result constants.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration2: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result constToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result constants.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration3: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result constToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result constants.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration4: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result constToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result constants.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint1: nodes [
	| result |
	result := VBNetTypeConstraintNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint2: nodes [
	| result |
	result := VBNetNewConstraintNode new.
	result newToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint3: nodes [
	| result |
	result := VBNetStructureConstraintNode new.
	result structureToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint4: nodes [
	| result |
	result := VBNetClassConstraintNode new.
	result classToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration10: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration11: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration12: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result subTokens.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration1: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration2: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration3: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration4: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration5: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration6: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration7: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration8: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration9: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForContinueStatement1: nodes [
	| result |
	result := VBNetContinueStatementNode new.
	result continueToken: (nodes at: 1).
	result continue: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration10: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration11: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration12: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration13: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration14: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	result addToken: (nodes at: 13) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration15: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addToken: (nodes at: 9) to: result statementSeparators.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration16: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addToken: (nodes at: 9) to: result statementSeparators.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	result addToken: (nodes at: 13) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration1: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration2: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration3: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration4: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration5: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration6: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration7: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration8: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration9: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration1: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result delegateToken: (nodes at: 2).
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration2: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result delegateToken: (nodes at: 2).
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration3: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result delegateToken: (nodes at: 3).
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration4: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result delegateToken: (nodes at: 3).
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDictionaryAccessExpression1: nodes [
	| result |
	result := VBNetDictionaryAccessExpressionNode new.
	result bangToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDictionaryAccessExpression2: nodes [
	| result |
	result := VBNetDictionaryAccessExpressionNode new.
	result value: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoBottomLoopStatement1: nodes [
	| result |
	result := VBNetDoBottomLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	result addToken: (nodes at: 4) to: result loopTokens.
	result addToken: (nodes at: 5) to: result loopTokens.
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoTopLoopStatement1: nodes [
	| result |
	result := VBNetDoTopLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	result addToken: (nodes at: 4) to: result loopTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoTopLoopStatement2: nodes [
	| result |
	result := VBNetDoTopLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result loopTokens.
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addToken: (nodes at: 6) to: result loopTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement1: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement2: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement3: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement4: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseStatement1: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseStatement2: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result statementSeparator: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEndStatement1: nodes [
	| result |
	result := VBNetEndStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration10: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration11: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration12: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration13: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration14: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration15: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration16: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration1: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration2: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration3: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration4: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration5: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration6: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration7: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration8: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration9: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration1: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration2: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result statementSeparator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration3: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration4: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration5: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration6: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration7: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration8: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEraseStatement1: nodes [
	| result |
	result := VBNetEraseStatementNode new.
	result eraseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arraies.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause1: nodes [
	| result |
	result := VBNetGotoClauseNode new.
	result gotoToken: (nodes at: 1).
	result minus: (nodes at: 2).
	result location: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause2: nodes [
	| result |
	result := VBNetGotoClauseNode new.
	result gotoToken: (nodes at: 1).
	result location: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause4: nodes [
	| result |
	result := VBNetResumeClauseNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorStatement1: nodes [
	| result |
	result := VBNetErrorStatementNode new.
	result errorToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEventMemberSpecifier4: nodes [
	| result |
	result := VBNetEventMemberSpecifierNode new.
	result addToken: (nodes at: 1) to: result names.
	result period: (nodes at: 2).
	result addToken: (nodes at: 3) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExitStatement1: nodes [
	| result |
	result := VBNetExitStatementNode new.
	result exitToken: (nodes at: 1).
	result exit: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExpressionRangeVariableDeclaration1: nodes [
	| result |
	result := VBNetExpressionRangeVariableDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExpressionRangeVariableDeclaration2: nodes [
	| result |
	result := VBNetExpressionRangeVariableDeclarationNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration10: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration11: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration12: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration13: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration14: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration15: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration16: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration17: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration18: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration19: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration1: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 6) at: 1).
	result type: ((nodes at: 6) at: 2).
	result addNodes: ((nodes at: 6) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration20: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration21: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration22: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration23: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration24: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration25: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration26: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration27: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration28: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration29: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration2: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 6) at: 1).
	result type: ((nodes at: 6) at: 2).
	result addNodes: ((nodes at: 6) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration30: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration31: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result asToken: ((nodes at: 12) at: 1).
	result type: ((nodes at: 12) at: 2).
	result addNodes: ((nodes at: 12) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration32: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result asToken: ((nodes at: 12) at: 1).
	result type: ((nodes at: 12) at: 2).
	result addNodes: ((nodes at: 12) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration3: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration4: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration5: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration6: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration7: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration8: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration9: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration10: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration11: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration12: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration13: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration14: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration15: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration16: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration17: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration18: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration19: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration1: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration20: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration21: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration22: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration23: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration24: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration25: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration26: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration27: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration28: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration29: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration2: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration30: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration31: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration32: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration3: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration4: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration5: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration6: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration7: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration8: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration9: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer1: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer2: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer3: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer4: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFile1: nodes [
	| result |
	result := VBNetFileNode new.
	result addNodes: ((nodes at: 2) at: 1) to: result options.
	result addNodes: ((nodes at: 2) at: 2) to: result imports.
	result addNodes: ((nodes at: 2) at: 3) to: result declarations.
	result addNodes: ((nodes at: 2) at: 4) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFinallyStatement1: nodes [
	| result |
	result := VBNetFinallyStatementNode new.
	result finallyToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement1: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement2: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result nextToken: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result nexts.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement3: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement4: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result nexts.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement5: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNode: (nodes at: 7) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement6: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	result addNode: (nodes at: 7) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement7: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNode: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement8: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	result addNode: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement1: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement2: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result nexts.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement3: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement4: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result nextToken: (nodes at: 11).
	result addNodes: ((nodes at: 12) at: 1) to: result nexts.
	result addTokens: ((nodes at: 12) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement5: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNode: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement6: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	result addNode: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement7: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNode: (nodes at: 10) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement8: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	result addNode: (nodes at: 10) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromOrAggregateQueryOperator1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromOrAggregateQueryOperator2: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 20) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromQueryOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromQueryOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result functionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result functionToken: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration5: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration6: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration7: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result functionToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration8: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result functionToken: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature10: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature11: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature12: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature1: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature2: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attributeBlocks.
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature3: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature4: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature5: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature6: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature7: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature8: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature9: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGetTypeExpression1: nodes [
	| result |
	result := VBNetGetTypeExpressionNode new.
	result getTypeToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBNetGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result goto: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator10: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator11: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator12: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 9).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 5).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator2: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator3: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator4: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator5: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator6: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator7: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator8: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator9: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator10: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator11: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator12: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator13: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator14: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator15: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 7) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator16: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 7) to: (result at: 8).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 9) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 9) at: 4) to: (result at: 12).
	self add: (nodes at: 11) to: (result at: 13).
	self addAll: ((nodes at: 13) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 13) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator1: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	self add: (nodes at: 7) to: (result at: 13).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator3: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator4: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator5: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator6: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator7: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator8: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator9: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForHandlesOrImplements1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForHandlesOrImplements2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 4 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers3: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers4: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImplementsClause_1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImportsStatement1: nodes [
	| result |
	result := VBNetImportsStatementNode new.
	result importsToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result imports.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImportsStatement2: nodes [
	| result |
	result := VBNetImportsStatementNode new.
	result importsToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result imports.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInstanceExpression1: nodes [
	| result |
	result := VBNetInstanceExpressionNode new.
	result meToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase_1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration10: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration11: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration12: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration13: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration14: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration15: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration16: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration1: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration2: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration3: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration4: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration5: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration6: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration7: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration8: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration9: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceMemberSpecifier1: nodes [
	| result |
	result := VBNetInterfaceMemberSpecifierNode new.
	result type: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationExpression1: nodes [
	| result |
	result := VBNetInvocationExpressionNode new.
	result receiver: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationExpression2: nodes [
	| result |
	result := VBNetInvocationExpressionNode new.
	result receiver: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 3) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 3) at: 5) to: result namedArguments.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationStatement1: nodes [
	| result |
	result := VBNetInvocationStatementNode new.
	result expression: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationStatement2: nodes [
	| result |
	result := VBNetInvocationStatementNode new.
	result callToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinCondition2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinConditionList1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinOrGroupJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator10: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator11: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator12: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator13: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator14: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator15: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 6) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator16: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 6) to: (result at: 7).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator1: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 3) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 3) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator3: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator4: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator5: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator6: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator7: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator8: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator9: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLabelDeclarationStatement1: nodes [
	| result |
	result := VBNetLabelDeclarationStatementNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLetQueryOperator1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLetQueryOperator2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineElseStatement1: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineIfThenStatement1: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineIfThenStatement2: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result statements.
	result else: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral1: nodes [
	| result |
	result := VBNetBooleanLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral2: nodes [
	| result |
	result := VBNetIntegerLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral3: nodes [
	| result |
	result := VBNetFloatingPointLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral4: nodes [
	| result |
	result := VBNetStringLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral5: nodes [
	| result |
	result := VBNetCharacterLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral6: nodes [
	| result |
	result := VBNetDateLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral7: nodes [
	| result |
	result := VBNetNothingLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLocalDeclarationStatement1: nodes [
	| result |
	result := VBNetLocalDeclarationStatementNode new.
	result modifier: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLoopControlVariable1: nodes [
	| result |
	result := VBNetLoopControlVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLoopControlVariable2: nodes [
	| result |
	result := VBNetLoopControlVariableNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase3: nodes [
	| result |
	result := VBNetGlobalNode new.
	result globalToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase4: nodes [
	| result |
	result := VBNetMyClassNode new.
	result myClassToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase5: nodes [
	| result |
	result := VBNetMyBaseNode new.
	result myBaseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression1: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression2: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result ofToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result types.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression3: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression4: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result ofToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result types.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMembersImportsClause1: nodes [
	| result |
	result := VBNetMembersImportsClauseNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement1: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result string: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result start: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result equals: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement2: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result string: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result start: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result length: (nodes at: 7).
	result rightParen: (nodes at: 8).
	result equals: (nodes at: 9).
	result value: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement3: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result typeCharToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result string: (nodes at: 4).
	result addToken: (nodes at: 5) to: result commas.
	result start: (nodes at: 6).
	result rightParen: (nodes at: 7).
	result equals: (nodes at: 8).
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement4: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result typeCharToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result string: (nodes at: 4).
	result addToken: (nodes at: 5) to: result commas.
	result start: (nodes at: 6).
	result addToken: (nodes at: 7) to: result commas.
	result length: (nodes at: 8).
	result rightParen: (nodes at: 9).
	result equals: (nodes at: 10).
	result value: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration1: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration2: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration3: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration4: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration5: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration6: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration7: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration8: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda1: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda2: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda3: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda4: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda5: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda6: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda1: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda2: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda3: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration5: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration6: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration7: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration8: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration5: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration6: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration7: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration8: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamedArgumentList1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration1: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration2: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	result addToken: (nodes at: 7) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration3: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addToken: (nodes at: 3) to: result statementSeparators.
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration4: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addToken: (nodes at: 3) to: result statementSeparators.
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	result addToken: (nodes at: 7) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceMemberDeclaration_1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceMemberDeclaration_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNullableTypeName1: nodes [
	| result |
	result := VBNetNullableTypeNameNode new.
	result type: (nodes at: 1).
	result nullableToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCollectionInitializer1: nodes [
	| result |
	result := VBNetObjectCollectionInitializerNode new.
	result fromToken: (nodes at: 1).
	result initializer: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression1: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression2: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result initializer: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression3: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression4: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result initializer: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression5: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result arguments.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression6: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result arguments.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result addToken: (nodes at: 5) to: result rightParens.
	result initializer: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectMemberInitializer1: nodes [
	| result |
	result := VBNetObjectMemberInitializerNode new.
	result withToken: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result initializers.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOnErrorStatement1: nodes [
	| result |
	result := VBNetOnErrorStatementNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result clause: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration10: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	result statementSeparator: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration11: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result addNodes: (nodes at: 12) to: result statements.
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration12: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result addNodes: (nodes at: 12) to: result statements.
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result operatorTokens.
	result statementSeparator: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration1: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration2: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result operatorTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration3: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result type: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration4: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result type: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result operatorTokens.
	result statementSeparator: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration5: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration6: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	result statementSeparator: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration7: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration8: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result operatorTokens.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration9: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionCompareStatement1: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionCompareStatement2: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result value: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionExplicitStatement1: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionExplicitStatement2: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionStatement__option__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionStatement__option__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderByQueryOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderByQueryOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderExpression1: nodes [
	| result |
	result := VBNetOrderExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderExpression2: nodes [
	| result |
	result := VBNetOrderExpressionNode new.
	result value: (nodes at: 1).
	result order: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result equals: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result equals: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameterIdentifier1: nodes [
	| result |
	result := VBNetParameterIdentifierNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType1: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType2: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType4: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParenthesizedExpression1: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator5: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator6: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator7: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator8: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration1: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addToken: (nodes at: 1) to: result getTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration2: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addToken: (nodes at: 1) to: result getTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result getTokens.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration3: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration4: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration5: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration6: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration7: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result getTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration8: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result getTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result getTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration10: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration11: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration12: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration13: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration14: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration15: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration16: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration17: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration18: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration19: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration1: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration20: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration21: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration22: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration23: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration24: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result setTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration2: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result setTokens.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration3: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration4: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration5: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration6: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration7: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration8: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration9: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature1: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature2: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature3: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature4: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature5: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature6: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature7: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature8: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature9: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	result at: 4 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName1: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName2: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 1) to: result leftParens.
	result addToken: ((nodes at: 2) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 2) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result addTokens: ((nodes at: 3) at: 1) to: result periods.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName3: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result periods.
	result addTokens: ((nodes at: 4) at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 4) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName4: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addToken: ((nodes at: 4) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName1: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName2: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 1) to: result leftParens.
	result addToken: ((nodes at: 2) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 2) at: 3) to: result types.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result addToken: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 1) to: result periods.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 3) at: 6) to: result types.
	result addTokens: ((nodes at: 3) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName3: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result periods.
	result addTokens: ((nodes at: 4) at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 4) at: 6) to: result types.
	result addTokens: ((nodes at: 4) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName4: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addToken: ((nodes at: 4) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result types.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result addToken: ((nodes at: 4) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 5) at: 6) to: result types.
	result addTokens: ((nodes at: 5) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := VBNetQueryExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result fromTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result names.
	result addTokens: ((nodes at: 1) at: 3) to: result inTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result values.
	result addTokens: ((nodes at: 1) at: 5) to: result asTokens.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addTokens: ((nodes at: 1) at: 8) to: result aggregateTokens.
	result addTokens: ((nodes at: 1) at: 9) to: result intoTokens.
	result addNodes: ((nodes at: 1) at: 10) to: result declarations.
	result addTokens: ((nodes at: 1) at: 11) to: result selectTokens.
	result addTokens: ((nodes at: 1) at: 12) to: result distinctTokens.
	result addNodes: ((nodes at: 1) at: 13) to: result expressions.
	result addTokens: ((nodes at: 1) at: 14) to: result orderTokens.
	result addTokens: ((nodes at: 1) at: 15) to: result byTokens.
	result addTokens: ((nodes at: 1) at: 16) to: result takeTokens.
	result addTokens: ((nodes at: 1) at: 17) to: result whileTokens.
	result addTokens: ((nodes at: 1) at: 18) to: result skipTokens.
	result addTokens: ((nodes at: 1) at: 19) to: result letTokens.
	result addTokens: ((nodes at: 1) at: 20) to: result groupTokens.
	result addTokens: ((nodes at: 1) at: 21) to: result joinTokens.
	result addTokens: ((nodes at: 1) at: 22) to: result onTokens.
	result addNodes: ((nodes at: 1) at: 23) to: result lhses.
	result addTokens: ((nodes at: 1) at: 24) to: result equalsTokens.
	result addNodes: ((nodes at: 1) at: 25) to: result rhses.
	result addTokens: ((nodes at: 1) at: 26) to: result andTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result fromTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result aggregateTokens.
	result addTokens: ((nodes at: 2) at: 3) to: result names.
	result addTokens: ((nodes at: 2) at: 4) to: result inTokens.
	result addNodes: ((nodes at: 2) at: 5) to: result values.
	result addTokens: ((nodes at: 2) at: 6) to: result asTokens.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result intoTokens.
	result addNodes: ((nodes at: 2) at: 9) to: result declarations.
	result addTokens: ((nodes at: 2) at: 10) to: result selectTokens.
	result addTokens: ((nodes at: 2) at: 11) to: result distinctTokens.
	result addNodes: ((nodes at: 2) at: 12) to: result expressions.
	result addTokens: ((nodes at: 2) at: 13) to: result orderTokens.
	result addTokens: ((nodes at: 2) at: 14) to: result byTokens.
	result addTokens: ((nodes at: 2) at: 15) to: result takeTokens.
	result addTokens: ((nodes at: 2) at: 16) to: result whileTokens.
	result addTokens: ((nodes at: 2) at: 17) to: result skipTokens.
	result addTokens: ((nodes at: 2) at: 18) to: result letTokens.
	result addTokens: ((nodes at: 2) at: 19) to: result groupTokens.
	result addTokens: ((nodes at: 2) at: 20) to: result commas.
	result addTokens: ((nodes at: 2) at: 21) to: result joinTokens.
	result addTokens: ((nodes at: 2) at: 22) to: result onTokens.
	result addNodes: ((nodes at: 2) at: 23) to: result lhses.
	result addTokens: ((nodes at: 2) at: 24) to: result equalsTokens.
	result addNodes: ((nodes at: 2) at: 25) to: result rhses.
	result addTokens: ((nodes at: 2) at: 26) to: result andTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator10: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 21).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 22).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 23).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 24).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 25).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 26).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator3: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator4: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator5: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator6: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 14).
	self add: ((nodes at: 1) at: 2) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator7: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 16).
	self add: ((nodes at: 1) at: 2) to: (result at: 13).
	self add: ((nodes at: 1) at: 3) to: (result at: 17).
	self add: ((nodes at: 1) at: 4) to: (result at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator8: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator9: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 20).
	self add: ((nodes at: 1) at: 2) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	self add: ((nodes at: 1) at: 5) to: (result at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration1: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addToken: (nodes at: 1) to: result raiseEventTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result raiseEventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration2: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addToken: (nodes at: 1) to: result raiseEventTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result raiseEventTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration3: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result raiseEventTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result raiseEventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration4: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result raiseEventTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result raiseEventTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement1: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement2: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement3: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result arguments.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimClause1: nodes [
	| result |
	result := VBNetRedimClauseNode new.
	result array: (nodes at: 1).
	result leftParen: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result bounds.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result rightParen: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result arrayTypeModifiers.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimStatement1: nodes [
	| result |
	result := VBNetRedimStatementNode new.
	result redimToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result redims.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimStatement2: nodes [
	| result |
	result := VBNetRedimStatementNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result redims.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularAssignmentStatement1: nodes [
	| result |
	result := VBNetAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration1: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration2: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration3: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration4: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration5: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration6: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration7: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration8: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result addNodes: (nodes at: 4) to: result declarations.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result addNodes: (nodes at: 4) to: result declarations.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result propertyTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration1: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result removeHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result removeHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration2: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result removeHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result removeHandlerTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration3: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result removeHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result removeHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration4: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result removeHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result removeHandlerTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerStatement1: nodes [
	| result |
	result := VBNetRemoveHandlerStatementNode new.
	result removeHandlerToken: (nodes at: 1).
	result event: (nodes at: 2).
	result comma: (nodes at: 3).
	result handler: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForResumeStatement1: nodes [
	| result |
	result := VBNetResumeStatementNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForResumeStatement2: nodes [
	| result |
	result := VBNetResumeStatementNode new.
	result resumeToken: (nodes at: 1).
	result resume: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForReturnStatement1: nodes [
	| result |
	result := VBNetReturnStatementNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForReturnStatement2: nodes [
	| result |
	result := VBNetReturnStatementNode new.
	result returnToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement1: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result cases.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement2: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result cases.
	result else: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement3: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result caseToken: (nodes at: 2).
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result cases.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement4: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result caseToken: (nodes at: 2).
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result cases.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSimpleNameExpression1: nodes [
	| result |
	result := VBNetSimpleNameExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSimpleNameExpression2: nodes [
	| result |
	result := VBNetSimpleNameExpressionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result ofToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result types.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda1: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addNode: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda2: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNode: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda3: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNode: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda4: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addNode: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda5: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNode: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda6: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNode: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	self addAll: (nodes at: 3) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStatements2: nodes [
	| result |
	result := VBNetLineStatementNode new.
	result
		addTokens: ((nodes at: 1) at: 1)
		to: result statementSeparators.
	result addNodes: ((nodes at: 1) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStatements3: nodes [
	| result |
	result := VBNetLineStatementNode new.
	result addNode: (nodes at: 1) to: result statements.
	result
		addTokens: ((nodes at: 2) at: 1)
		to: result statementSeparators.
	result addNodes: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStopStatement1: nodes [
	| result |
	result := VBNetStopStatementNode new.
	result stopToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration10: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration11: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration12: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration13: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration14: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration15: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration16: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration1: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration2: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration3: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration4: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration5: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration6: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration7: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration8: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration9: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result subToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result subToken: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration5: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration6: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration7: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result subToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration8: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result subToken: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature1: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature2: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature3: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature4: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature5: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature6: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSyncLockStatement1: nodes [
	| result |
	result := VBNetSyncLockStatementNode new.
	result addToken: (nodes at: 1) to: result syncLockTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result syncLockTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForThrowStatement1: nodes [
	| result |
	result := VBNetThrowStatementNode new.
	result throwToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForThrowStatement2: nodes [
	| result |
	result := VBNetThrowStatementNode new.
	result throwToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTryStatement1: nodes [
	| result |
	result := VBNetTryStatementNode new.
	result addToken: (nodes at: 1) to: result tryTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: (nodes at: 4) to: result catches.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result tryTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTryStatement2: nodes [
	| result |
	result := VBNetTryStatementNode new.
	result addToken: (nodes at: 1) to: result tryTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: (nodes at: 4) to: result catches.
	result finally: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result tryTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArguments1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArityList1: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArityList2: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 4).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeOfIsExpression1: nodes [
	| result |
	result := VBNetTypeOfIsExpressionNode new.
	result typeOfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result _isToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeOfIsExpression2: nodes [
	| result |
	result := VBNetTypeOfIsExpressionNode new.
	result typeOfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result _isToken: (nodes at: 3).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter1: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter2: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result name: (nodes at: 1).
	result asToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result constraints.
	result leftBrace: ((nodes at: 2) at: 3).
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightBrace: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter3: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result modifier: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter4: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result modifier: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result constraints.
	result leftBrace: ((nodes at: 3) at: 3).
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	result rightBrace: ((nodes at: 3) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterConstraints1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterConstraints2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterList1: nodes [
	| result |
	result := VBNetTypeParameterListNode new.
	result leftParen: (nodes at: 1).
	result ofToken: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result typeParameters.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUnaryPlusExpression1: nodes [
	| result |
	result := VBNetUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUsingResources2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := VBNetUsingStatementNode new.
	result addToken: (nodes at: 1) to: result usingTokens.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result usingTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator1: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator2: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator3: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator4: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator5: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableIdentifier1: nodes [
	| result |
	result := VBNetVariableIdentifierNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration1: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration2: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration3: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addNodes: ((nodes at: 3) at: 1) to: result variables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration4: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addNodes: ((nodes at: 3) at: 1) to: result variables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariablePropertyInitializer1: nodes [
	| result |
	result := VBNetVariablePropertyInitializerNode new.
	result name: (nodes at: 1).
	result colonEquals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWhereQueryOperator2: nodes [
	^ nodes at: 3
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWhileStatement1: nodes [
	| result |
	result := VBNetWhileStatementNode new.
	result addToken: (nodes at: 1) to: result whileTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whileTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWithStatement1: nodes [
	| result |
	result := VBNetWithStatementNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForYieldStatement1: nodes [
	| result |
	result := VBNetYieldStatementNode new.
	result yieldToken: (nodes at: 1).
	result yield: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments__1: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments__2: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: ((nodes at: 3) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments___1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArguments___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self add: ((nodes at: 2) at: 7) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArityList__1: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArityList__2: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	result at: 5 put: ((nodes at: 3) at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_Period__IdentifierOrKeyword___name__TypeArityList___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_AttributeArgumentExpression__argument____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration__1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Equals_Expression__value___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator_2: nodes [
	| result |
	result := nodes at: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator__1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 20).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 20) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____1: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____2: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____3: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis______1: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___And___andToken___LineTerminator___JoinCondition__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___And___andToken___LineTerminator___JoinCondition__2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 3) at: 1).
	result at: 3 put: ((nodes at: 3) at: 2).
	result at: 4 put: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type__1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type__2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_______statementSeparator__Statement__statement_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #testing }
VBNetParser >> tryAllTokens [
	^ true
]
