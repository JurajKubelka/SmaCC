Class {
	#name : #TeradataParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Teradata_Parser'
}

{ #category : #generated }
TeradataParser class >> ambiguousTransitions [
^#(
#[ 0 10 1 57] 
#[ 0 222 2 225] 
#[ 0 222 3 29] 
#[ 0 222 3 37] 
#[ 0 222 3 61] 
#[ 0 226 2 225] 
#[ 0 226 3 29] 
#[ 0 226 3 37] 
#[ 0 226 3 61] 
#[ 0 238 2 225] 
#[ 0 238 3 29] 
#[ 0 238 3 37] 
#[ 0 238 3 61] 
#[ 1 74 1 78] 
#[ 1 166 7 81] 
#[ 1 234 2 225] 
#[ 1 234 3 29] 
#[ 1 234 3 37] 
#[ 1 234 3 61] 
#[ 1 238 2 225] 
#[ 1 238 3 29] 
#[ 1 238 3 37] 
#[ 1 238 3 61] 
#[ 1 242 2 225] 
#[ 1 242 3 29] 
#[ 1 242 3 37] 
#[ 1 242 3 61] 
#[ 1 246 2 225] 
#[ 1 246 3 29] 
#[ 1 246 3 37] 
#[ 1 246 3 61] 
#[ 1 250 2 225] 
#[ 1 250 3 29] 
#[ 1 250 3 37] 
#[ 1 250 3 61] 
#[ 1 254 2 225] 
#[ 1 254 3 29] 
#[ 1 254 3 37] 
#[ 1 254 3 61] 
#[ 2 2 2 225] 
#[ 2 2 3 29] 
#[ 2 2 3 37] 
#[ 2 2 3 61] 
#[ 2 6 2 225] 
#[ 2 6 3 29] 
#[ 2 6 3 37] 
#[ 2 6 3 61] 
#[ 2 10 2 225] 
#[ 2 10 3 29] 
#[ 2 10 3 37] 
#[ 2 10 3 61] 
#[ 2 14 2 225] 
#[ 2 14 3 29] 
#[ 2 14 3 37] 
#[ 2 14 3 61] 
#[ 2 18 2 225] 
#[ 2 18 3 29] 
#[ 2 18 3 37] 
#[ 2 18 3 61] 
#[ 2 22 2 225] 
#[ 2 22 3 29] 
#[ 2 22 3 37] 
#[ 2 22 3 61] 
#[ 2 26 2 225] 
#[ 2 26 3 29] 
#[ 2 26 3 37] 
#[ 2 26 3 61] 
#[ 2 34 2 225] 
#[ 2 34 3 29] 
#[ 2 34 3 37] 
#[ 2 34 3 61] 
#[ 2 42 2 225] 
#[ 2 42 8 37] 
#[ 2 42 3 29] 
#[ 2 42 3 37] 
#[ 2 42 3 61] 
#[ 2 46 2 225] 
#[ 2 46 3 29] 
#[ 2 46 3 37] 
#[ 2 46 3 61] 
#[ 2 50 2 225] 
#[ 2 50 3 29] 
#[ 2 50 3 37] 
#[ 2 50 3 61] 
#[ 2 54 2 225] 
#[ 2 54 3 29] 
#[ 2 54 3 37] 
#[ 2 54 3 61] 
#[ 2 58 2 225] 
#[ 2 58 3 29] 
#[ 2 58 3 37] 
#[ 2 58 3 61] 
#[ 2 102 3 153] 
#[ 2 102 3 157] 
#[ 2 102 3 161] 
#[ 2 102 3 165] 
#[ 2 102 3 169] 
#[ 2 102 8 193] 
#[ 2 102 3 173] 
#[ 2 170 9 201] 
#[ 2 225 2 234] 
#[ 2 234 3 29] 
#[ 2 234 3 37] 
#[ 2 234 3 61] 
#[ 2 225 2 242] 
#[ 2 242 3 29] 
#[ 2 242 3 37] 
#[ 2 242 3 61] 
#[ 2 225 2 246] 
#[ 2 246 10 121] 
#[ 2 246 3 29] 
#[ 2 246 3 37] 
#[ 2 246 3 61] 
#[ 2 210 3 166] 
#[ 2 22 2 225 3 186] 
#[ 2 22 2 229 3 186] 
#[ 2 22 2 233 3 186] 
#[ 2 22 2 237 3 186] 
#[ 2 22 2 241 3 186] 
#[ 2 22 2 245 3 186] 
#[ 2 22 2 249 3 186] 
#[ 2 22 2 253 3 186] 
#[ 2 22 3 1 3 186] 
#[ 2 22 3 5 3 186] 
#[ 2 22 3 9 3 186] 
#[ 2 22 3 13 3 186] 
#[ 2 22 3 17 3 186] 
#[ 2 22 3 21 3 186] 
#[ 2 22 3 25 3 186] 
#[ 2 22 3 29 3 186] 
#[ 2 22 3 33 3 186] 
#[ 2 22 3 37 3 186] 
#[ 2 22 3 41 3 186] 
#[ 2 22 3 45 3 186] 
#[ 2 22 3 49 3 186] 
#[ 2 22 3 53 3 186] 
#[ 2 22 3 57 3 186] 
#[ 2 22 3 61 3 186] 
#[ 2 22 3 65 3 186] 
#[ 1 202 3 190] 
#[ 2 225 3 194] 
#[ 3 29 3 194] 
#[ 3 37 3 194] 
#[ 3 61 3 194] 
#[ 2 225 3 198] 
#[ 3 29 3 198] 
#[ 3 37 3 198] 
#[ 3 61 3 198] 
#[ 2 22 2 225 4 138] 
#[ 2 22 2 229 4 138] 
#[ 2 22 2 233 4 138] 
#[ 2 22 2 237 4 138] 
#[ 2 22 2 241 4 138] 
#[ 2 22 2 245 4 138] 
#[ 2 22 2 249 4 138] 
#[ 2 22 2 253 4 138] 
#[ 2 22 3 1 4 138] 
#[ 2 22 3 5 4 138] 
#[ 2 22 3 9 4 138] 
#[ 2 22 3 13 4 138] 
#[ 2 22 3 17 4 138] 
#[ 2 22 3 21 4 138] 
#[ 2 22 3 25 4 138] 
#[ 2 22 3 29 4 138] 
#[ 2 22 3 33 4 138] 
#[ 2 22 3 37 4 138] 
#[ 2 22 3 41 4 138] 
#[ 2 22 3 45 4 138] 
#[ 2 22 3 49 4 138] 
#[ 2 22 3 53 4 138] 
#[ 2 22 3 57 4 138] 
#[ 2 22 3 61 4 138] 
#[ 2 22 3 65 4 138] 
#[ 1 202 4 142] 
#[ 2 225 4 146] 
#[ 3 29 4 146] 
#[ 3 37 4 146] 
#[ 3 61 4 146] 
#[ 3 73 4 150]
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> cacheId [
	^'2022-02-09T14:43:42.556654-06:00'
]

{ #category : #generated }
TeradataParser class >> definitionComment [
"%glr;
%ignorecase;
%left ""UNION"" ""MINUS"" ""INTERSECT"" ""EXCEPT"";
%left ""OR"";
%left ""AND"";
%nonassoc ""="" ""EQ"" ""<>"" ""NE"" ""<"" ""<="" "">"" "">="" ""BETWEEN"";
%left ""||"";
%nonassoc ""LIKE"" ""IN"" ""NOT"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""MOD"";
%right ""**"";

%prefix Teradata;
%suffix Node;
%root Program;
%hierarchy Expression (
    AliasedExpression
    BetweenExpression
    BinaryExpression
    CaseExpression
    CaseSpecificExpression
    CastExpression
    ConversionExpression
    CountExpression
    DistinctExpression
    EmptyGroupByExpression
    ExistsExpression
    ExtractExpression
    FunctionExpression
    IdentifierExpression
    IgnoreNullsExpression
    InQueryExpression
    IntervalExpression
    InValueExpression
    IsNullExpression
    LikeExpression
    LiteralExpression
    NullExpression
    OverExpression
    QueryExpression
    StarExpression
    SubstringExpression
    TimestampExpression
    TitleExpression
    TranslateExpression
    TrimExpression
    UnicodeEscapeExpression
    UnaryExpression
    VariableExpression
    XmlAggExpression
);
%start File Expression ExpressionListNode ExpressionWithDistinct;

<identifier>
	: [a-z_\$\#][a-z0-9_\$\#\@\{\}]* 
	| (\"" [^\""\r\n]* \"")+
	;
<variable>
	: \: <identifier>
	| \?
	;
<ustring>
	: U \& (\' [^\']* \')+
	;
<string>
	: (\' [^\']* \')+
	| \' [0-9A-F]* \' \s* XC[VF]?
	;
<number>
	: [0-9][0-9X]* (\. [0-9X]*)?	# XXXX -- patterns?
	;
<whitespace>
	: \s+
	;
<comment>
	: \-\- [^\r\n]*
	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;
File
	: Statements "";"" 'semicolon'* {{}}
	| "";"" 'semicolon'* {{}}
	;
Statements
	: Statement 'statement'
	| Statements "";"" 'semicolon'* "";"" 'semicolon' Statement 'statement'
	;
Statement
	: SelectQuery
	| DeleteQuery
	| ExecuteStatement
	| DatabaseStatement
	| TransactionStatement
	| HelpSessionStatement
	| SetStatement
	| CheckWorkloadStatement
	| LoadingStatement
	| UsingStatement
	| InsertQuery
	| UpdateQuery
	| DropTableQuery
	| CheckpointStatement
	| CreateMacroStatement
	| LockTableStatement
	| RollbackStatement
	| MergeQuery
	| CreateTable
	| CreateView
	| Comment
	;
Comment
	: ""COMMENT"" 'commentToken' ""ON"" 'onToken' ""VIEW"" 'viewToken' TableName 'table' <string> 'comment' {{}}
	;
CreateView
	: ""CREATE"" 'createToken' ""VIEW"" 'viewToken' TableName 'view' ""("" 'leftParen' <identifier> 'column' ("","" 'comma' <identifier> 'column' )* "")"" 'rightParen' ""AS"" 'asToken' (""LOCKING"" 'lockingToken' ""ROW"" 'rowToken' ""FOR"" 'forToken' ""ACCESS"" 'accessToken' ""MODE"" 'modeToken')? SelectQuery 'query' {{}}
	;
CreateTable
	: ""CREATE"" 'createToken' ""MULTISET"" 'multisetToken'? ""TABLE"" 'tableToken' TableName 'table' CreateTableOption* ""("" 'leftParen' CreateTableColumns "")"" 'rightParen' CreateTableIndexes {{}}
	;
CreateTableOption
	: "","" 'comma' ""NO"" 'noToken' ""FALLBACK"" 'fallbackToken' {{}}
	| "","" 'comma' ""NO"" 'noToken' ""BEFORE"" 'beforeToken' ""JOURNAL"" 'journalToken' {{}}
	| "","" 'comma' ""NO"" 'noToken' ""AFTER"" 'afterToken' ""JOURNAL"" 'journalToken' {{}}
	| "","" 'comma' ""CHECKSUM"" 'checksumToken' ""="" 'equals' <identifier> 'value' {{}}
	| "","" 'comma' ""DEFAULT"" 'defaultToken' ""MERGEBLOCKRATIO"" 'mergeBlockRatioToken' {{}}
	;
CreateTableIndexes
	: Index 'index' ("","" 'comma' Index 'index')*
	|
	;
Index
	: ""UNIQUE"" 'uniqueToken'? ""PRIMARY"" 'primaryToken'? ""INDEX"" 'indexToken' <identifier> 'name' ""("" 'leftParen' <identifier> 'column' ("","" 'comma' <identifier> 'column')* "")"" 'rightParen' PartitionByExpression 'partition'?{{}}
	;
CreateTableColumns
	: CreateTableColumn 'column' ("","" 'comma' CreateTableColumn 'column')*
	;
CreateTableColumn
	: <identifier> 'name' Type 'type'  {{}}
	;
MergeQuery
	: ""MERGE"" 'mergeToken' ""INTO"" 'intoToken'? Table 'mergeTable' ""USING"" 'usingToken' Table 'usingTable' ""ON"" 'onToken' Expression 'condition' WhenMergeCondition 'whenMerge'+ {{}}
	;
WhenMergeCondition
	: ""WHEN"" 'whenToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""UPDATE"" 'updateToken' ""SET"" 'setToken' SetExpressionList {{}}
	| ""WHEN"" 'whenToken' ""NOT"" 'notToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""INSERT"" 'insertToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' (""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen')? {{}}
	;
RollbackStatement
	: ""ROLLBACK"" 'rollbackToken' ""WORK"" 'workToken' <string> 'work' ""FROM"" 'fromToken' TableList WhereExpression 'where' {{}}
	;
LockTableStatement
	: (""LOCKING"" 'lockToken' | ""LOCK"" 'lockToken') ""TABLE"" 'tableToken'? TableName 'table' ""FOR"" 'forToken' <identifier> 'lock' Statement 'statement'? {{}}
	;
CreateMacroStatement
	: ""CREATE"" 'createToken' ""MACRO"" 'macroToken' IdentifierName 'name' MacroArgs ""AS"" 'asToken' ""("" 'leftParen' Statements "";"" 'semicolon'* "")"" 'rightParen' {{}}
	;
MacroArgs
	:
	| ""("" 'leftParen' ParameterList "")"" 'rightParen'
	;
ParameterList
	: Parameter 'parameter'
	| ParameterList "","" 'comma' Parameter 'parameter'
	;
Parameter
	: IdentifierName 'name' Type 'type' {{}}
	;
Type
	: TypeName (""("" 'leftParen' <number> 'precision' ("","" 'comma' <number> 'scale')? "")"" 'rightParen')? TypeOptions {{}}
	;
TypeOptions
	: TypeOption  'option' *
	;
TypeOption 
	: ""CHARACTER"" 'characterToken' ""SET"" 'setToken' <identifier> 'encoding'{{CharacterSetOption}} 
	| ""NOT"" 'notToken' ""NULL"" 'nullToken' {{NotNullOption}}
	| ""FORMAT"" 'formatToken' <string> 'format' {{FormatOption}}
	| ""COMPRESS"" 'compressToken' <string> 'compress' {{CompressOption}}
	|  ""CASESPECIFIC"" 'caseSpecificToken' {{CaseSpecificOption}}
	;
TypeName
	: SingleTypeName 'name'
	| ""DOUBLE"" 'name' ""PRECISION"" 'name'
	;
SingleTypeName
	: ""CHAR""
	| ""VARCHAR""
	| ""CLOB""
	| ""DATE""
	| ""TIME""
	| ""TIMESTAMP""
	| ""BYTEINT""
	| ""SMALLINT""
	| ""INT""
	| ""INTEGER""
	| ""BIGINT""
	| ""DEC""
	| ""DECIMAL""
	| ""NUMERIC""
	| ""FLOAT""
	| ""REAL""
	| ""NUMBER""
	| ""VARBYTE""
	| ""BYTE""
	;
CheckpointStatement
	: ""CHECKPOINT"" 'checkpointToken' ""LOADING"" 'loadingToken' ""INTERVAL"" 'intervalToken' <number> 'interal' ""END"" 'endToken'? {{}}
	;
DropTableQuery
	: ""DROP"" 'dropToken' ""TABLE"" 'tableToken' TableName 'table' {{}}
	;
UpdateQuery
	: ""UPDATE"" 'updateToken' TableName 'table' (""AS"" 'asToken'? <identifier> 'alias')? ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? (""ELSE"" 'elseToken' (InsertQuery 'else' | UpdateQuery 'else'))? {{}}
	| ""UPDATE"" 'updateToken' TableName 'table' ""FROM"" 'fromToken' TableList ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? {{}}
	;
SetExpressionList
	: SetExpression 'setExpression'
	| SetExpressionList "","" 'comma' SetExpression 'setExpression'
	;
SetExpression
	: Identifier 'name' ""="" 'equals' Expression 'value' {{}}
	;
InsertQuery
	: (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken'? TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	| (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken' TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? SelectQuery 'query' {{}}
	;
UsingStatement
	: ""USING"" 'usingToken' UsingColumns Statement 'statement' {{}}
	| ""USING"" 'usingToken' ""("" 'leftParen' UsingColumns "")"" 'rightParen' Statement 'statement' {{}}
	;
UsingColumns
	: UsingColumn 'column'
	| UsingColumns "","" 'comma' UsingColumn 'column'
	;
UsingColumn
	: <identifier> 'name' Type 'type' {{}}
	| <identifier> 'name' ""("" 'leftParen' Type 'type' "")"" 'rightParen' {{}}
	;
LoadingStatement
	: ""BEGIN"" 'beginToken' ""LOADING"" 'loadingToken' TableName 'table' ""ERRORFILES"" 'errorfilesToken' ExpressionList ""WITH"" 'withToken' ""INTERVAL"" 'intervalToken' {{BeginLoadingStatement}}
	| ""END"" 'endToken' ""LOADING"" 'loadingToken' {{EndLoadingStatement}}
	;
CheckWorkloadStatement
	: ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""FOR"" 'forToken' Statement 'statement'  {{}}
	| ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""END"" 'endToken'  {{}}
	;
SetStatement
	: ""SET"" 'setToken' IdentifierName 'name' ""="" 'equals' Expression 'value' ""UPDATE"" 'updateToken'? ""FOR"" 'forToken' ""SESSION"" 'sessionToken' {{}}
	;
HelpSessionStatement
	: ""HELP"" 'helpToken' ""SESSION"" 'sessionToken' {{}}
	;
TransactionStatement
	: ""BT"" 'beginToken' {{BeginTransactionStatement}}
	| ""ET"" 'endToken' {{EndTransactionStatement}}
	;
DatabaseStatement
	: ""DATABASE"" 'databaseToken' IdentifierName 'database' {{}}
	;
ExecuteStatement
	: (""EXECUTE"" 'executeToken' | ""EXEC"" 'executeToken') IdentifierName 'name' ( ""("" 'leftParen' ExpressionList "")"" 'rightParen' )? {{}}
	;
DeleteQuery
	: (""DELETE"" 'deleteToken' | ""DEL"" 'deleteToken') ""FROM"" 'fromToken'? Table 'table' (WhereExpression 'where' | ""ALL"" 'allToken')? {{}}
	;
SelectQuery
	: (""SELECT"" 'selectToken' | ""SEL"" 'selectToken') (""DISTINCT"" 'distinctToken' | ""DISTINCTROW"" 'distinctToken')? (""TOP"" 'topToken' <number> 'top')? ExpressionList IntoExpression 'into'? (FromTables? QueryExpressions)? (""FOR"" 'forToken' ""CURSOR"" 'cursorToken')? (<number> 'count')? {{}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""UNION"" 'unionToken' ""ALL"" 'allToken'? UnionSelectQuery {{UnionQuery}}
	| ""WITH"" 'withToken' ""RECURSIVE"" 'recursiveToken'? WithTables Statement 'statement' {{WithQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""MINUS"" 'minusToken' UnionSelectQuery {{MinusQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""INTERSECT"" 'intersectToken' UnionSelectQuery {{IntersectQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""EXCEPT"" 'intersectToken' UnionSelectQuery {{ExceptQuery}}
	;
QueryExpressions
	:
	| QueryExpressions QueryExpression
	;
QueryExpression
	: WhereExpression 'where'
	| GroupByExpression 'group'
	| HavingExpression 'having'
	| PartitionByExpression 'partition'
	| QualifyExpression 'qualify'
	| OrderByExpression 'orderBy'
	;
WithTables
	: WithTable 'withTable'
	| WithTables "","" 'comma' WithTable 'withTable'
	;
WithTable
	: IdentifierName 'name' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""AS"" 'asToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{WithTableDefinition}}
	;
HavingExpression
	: ""HAVING"" 'havingToken' Expression 'condition' {{Having}}
	;
UnionSelectQuery
	: ""("" 'leftParen' SelectQuery 'right' "")"" 'rightParen' OrderByExpression 'orderBy'
	| SelectQuery 'right'
	;
QualifyExpression
	: ""QUALIFY"" 'qualifyToken' Expression 'condition' {{}}
	;
PartitionByExpression
	: ""PARTITION"" 'partitionToken' ""BY"" 'byToken' ExpressionList {{}}
	;
IntoExpression
	: ""INTO"" 'intoToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	;
FromTables
	: ""FROM"" 'fromToken' TableList
	;
TableList
	: Table 'table'
	| TableList "","" 'comma' Table 'table'
	;
 Table
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' (""AS"" 'asToken'? <identifier> 'alias')? {{Table}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' (""AS"" 'asToken'? <identifier> 'alias')? {{SelectTable}}
	| Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction' | ""FULL"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? {{JoinTable}}
	| ""("" 'leftParen' Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? "")"" 'rightParen' {{JoinTable}}
	;
TableName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{Table}}
	;
WhereExpression
	: ""WHERE"" 'whereToken' Expression 'where' {{}}
	;
GroupByExpression
	: ""GROUP"" 'groupToken' ""BY"" 'byToken' ExpressionList {{GroupBy}}
	| ""GROUP"" 'groupToken' ""BY"" 'byToken' EmptyGroupByExpression 'value' {{GroupBy}}
	;
EmptyGroupByExpression
	: ""("" 'leftParen' "")"" 'rightParen' {{EmptyGroupByExpression}}
	;
OrderByExpression
	: ""ORDER"" 'orderToken' ""BY"" 'byToken' ExpressionList {{}}
	;
ExpressionList
	: NamedExpression 'value'
	| ExpressionList "","" 'comma'+ NamedExpression 'value'
	;
NamedExpression
	: Expression 
	| Expression 'expression' ""AS"" 'asToken'? <identifier> 'alias' {{AliasedExpression}}
	;
Expression
	: Identifier
	| <variable> 'name' {{VariableExpression}}
	| <string> 'value' {{LiteralExpression}}
	| <number> 'value' {{LiteralExpression}}
	| ""NULL"" 'nullToken' {{NullExpression}}
	| (<identifier> 'name' ""."" 'period')* ""*"" 'star' {{StarExpression}}
	| CaseExpression
	| FunctionExpression
	| Expression 'left' (""+"" 'operator' | ""-"" 'operator' | ""*"" 'operator' | ""/"" 'operator' | ""MOD"" 'operator' | ""||"" 'operator' | ""**"" 'operator' | ""EQ"" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'left' (""AND"" 'operator' | ""OR"" 'operator' | ""="" 'operator' | ""<>"" 'operator' | ""NE"" 'operator' |  ""<"" 'operator' | ""<="" 'operator' | "">"" 'operator' | "">="" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""LIKE"" 'likeToken' Expression 'like' (""ESCAPE"" 'escapeToken' Expression 'escape')? {{LikeExpression}}
	| ""SUBSTRING"" 'substringToken' ""("" 'leftParen' Expression 'value' ""FROM"" 'fromToken' Expression 'from' (""FOR"" 'forToken' Expression 'for')? "")"" 'rightParen' {{SubstringExpression}}
	| ""SUBSTRING"" 'substringToken' ""("" 'leftParen' Expression 'value' "","" 'comma' Expression 'from' ("","" 'comma' Expression 'to')? "")"" 'rightParen' {{SubstringExpression}}
	| Expression 'value' ""IS"" 'isToken' ""NOT"" 'notToken'? ""NULL"" 'nullToken' {{IsNullExpression}}
	| ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}
	| Expression 'testValue' ""IS"" 'isToken'? ""NOT"" 'notToken'? ""IN"" 'inToken' (Expression 'value' | ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen') {{InValueExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| Expression 'value' ""("" 'leftParen' ""FORMAT"" 'formatToken' <string> 'format' "")"" 'rightParen' {{ConversionExpression}}
	| Expression 'value' ""("" 'leftParen' Type 'type' ("","" 'comma' ""FORMAT"" 'formatToken' <string> 'format' )? "")"" 'rightParen' {{ConversionExpression}}
	| (""TRYCAST"" 'castToken' | ""CAST"" 'castToken') ""("" 'leftParen' Expression 'value' ""AS"" 'asToken' Type 'type'? (""FORMAT"" 'formatToken' <string> 'format')? "")"" 'rightParen' {{CastExpression}}
	| (""-"" 'operator' | ""+"" 'operator') Expression 'value' {{UnaryExpression}}
	| Expression 'value' (""NOT"" 'notToken')? ""BETWEEN"" 'betweenToken' Expression 'first' ""AND"" 'andToken' Expression 'last' {{BetweenExpression}}
	| ""TRIM"" 'trimToken' ""("" 'leftParen' ((""BOTH"" 'positionToken' | ""TRAILING"" 'positionToken' | ""LEADING"" 'positionToken') <string> 'character'? ""FROM"" 'fromToken')? Expression 'value' "")"" 'rightParen' {{TrimExpression}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{QueryExpression}}
	| ""NOT"" 'operator' Expression 'value' {{UnaryExpression}}
	| ""EXTRACT"" 'extractToken' ""("" 'leftParen'  <identifier> 'name' ""FROM"" 'fromToken' Expression 'value' "")"" 'rightParen' {{ExtractExpression}}
	| Expression 'value' ""OVER"" 'overToken' ""("" 'leftParen' PartitionByExpression 'partition'? OrderByExpression 'orderBy'? (""ROWS"" 'rows' ""BETWEEN"" 'betweenToken' ((<number> 'from' | ""UNBOUNDED"" 'from') (""PRECEDING"" 'precedingToken' | ""FOLLOWING"" 'followingToken') | ""CURRENT"" 'currentFromToken' ""ROW"" 'rowFromToken') ""AND"" 'andToken' ((<number> 'to' | ""UNBOUNDED"" 'to') (""PRECEDING"" 'precedingToken' | ""FOLLOWING"" 'followingToken') | ""CURRENT"" 'currentToToken' ""ROW"" 'rowToToken'))? "")"" 'rightParen' {{OverExpression}}
	| ""INTERVAL"" 'intervalToken' <string> 'interval' <identifier> 'name' {{IntervalExpression}}
	| Expression 'value' ""("" 'leftParen' ""CASESPECIFIC"" 'caseSpecificToken' "")"" 'rightParen' {{CaseSpecificExpression}}
	| Expression 'value' ""("" 'leftParen' ""TITLE"" 'titleToken' <string> 'title' "")"" 'rightParen' {{TitleExpression}}
	| ""COUNT"" 'countToken' ""("" 'leftParen' (""DISTINCT"" 'countType' | ""ALL"" 'countType')? Expression 'value' "")"" 'rightParen' {{CountExpression}}
	| (""TIMESTAMP"" 'typeToken' | ""DATE"" 'typeToken' | ""TIME"" 'typeToken') (<string> 'value')? {{TimestampExpression}}
	| (""NOT"" 'notToken')? ""EXISTS"" 'existsToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{ExistsExpression}}
	| (""TRANSLATE"" 'translateToken' | ""TRANSLATE_CHK"" 'translateToken') ""("" 'leftParen' Expression 'value' ""USING"" 'usingToken' <identifier> 'operation' (""WITH"" 'withToken' ""ERROR"" 'errorToken')? "")"" 'rightParen' {{TranslateExpression}}
	| ""XMLAGG"" 'xmlaggToken' ""("" 'leftParen' Expression 'value' OrderByExpression 'orderBy' "")"" 'rightParen' {{XmlAggExpression}}
	| <ustring> 'value' ""UESCAPE"" 'uescapeToken' <string> 'escape' {{UnicodeEscapeExpression}}
	| Expression 'value' ""IGNORE"" 'ignoreToken' ""NULLS"" 'nullsToken' {{IgnoreNullsExpression}}
	;
CaseExpression
	: ""CASE"" 'caseToken' Expression 'expression'? WhenExpressions ElseExpression 'else'? ""END"" 'endToken' {{}}
	;
ElseExpression
	: ""ELSE"" 'elseToken' Expression 'value' {{}}
	;
WhenExpressions
	: WhenExpression 'when'
	| WhenExpressions WhenExpression 'when'
	;
WhenExpression
	: ""WHEN"" 'whenToken' Expression 'condition' ""THEN"" 'thenToken' Expression 'value' {{}}
	;
FunctionExpression
	: IdentifierName 'function' ""("" 'leftParen' ExpressionList? "")"" 'rightParen' {{}}
	;
Identifier
	: <identifier> 'name' (""."" 'period' (<identifier> 'name' | <string> 'name'))* {{IdentifierExpression}}
	;
IdentifierName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{}}
	;
ExpressionListNode
	: ExpressionList {{ExpressionList}}
	;
ExpressionWithDistinct
	: ""DISTINCT"" 'distinctToken' Expression 'value' {{DistinctExpression}}
	| Expression {'1'}
	;"
]

{ #category : #generated }
TeradataParser class >> reduceTable [
^#(
	#(174 0 #reduceActionFor_____semicolon__1: 1558529 false) 
	#(247 0 #reduceActionFor__identifier___name_______period___1: 10865665 false) 
	#(222 1 #reduceActionForTransactionStatement1: 8204289 false) 
	#(222 1 #reduceActionForTransactionStatement2: 8204290 false) 
	#(173 1 #reduceActionForFile2: 1539074 false) 
	#(175 1 #reduceActionForStatements1: 1609729 false) 
	#(176 1 #liftFirstValue: 1720341 false) 
	#(176 1 #liftFirstValue: 1720340 false) 
	#(176 1 #liftFirstValue: 1720339 false) 
	#(176 1 #liftFirstValue: 1720338 false) 
	#(176 1 #liftFirstValue: 1720337 false) 
	#(176 1 #liftFirstValue: 1720336 false) 
	#(176 1 #liftFirstValue: 1720335 false) 
	#(176 1 #liftFirstValue: 1720334 false) 
	#(176 1 #liftFirstValue: 1720333 false) 
	#(176 1 #liftFirstValue: 1720332 false) 
	#(176 1 #liftFirstValue: 1720331 false) 
	#(176 1 #liftFirstValue: 1720330 false) 
	#(176 1 #liftFirstValue: 1720329 false) 
	#(176 1 #liftFirstValue: 1720328 false) 
	#(176 1 #liftFirstValue: 1720327 false) 
	#(176 1 #liftFirstValue: 1720326 false) 
	#(176 1 #liftFirstValue: 1720325 false) 
	#(176 1 #liftFirstValue: 1720324 false) 
	#(176 1 #liftFirstValue: 1720323 false) 
	#(176 1 #liftFirstValue: 1720322 false) 
	#(176 1 #liftFirstValue: 1720321 false) 
	#(259 1 #reduceActionForExpression186: 12266682 false) 
	#(259 1 #reduceActionForExpression5: 12266501 false) 
	#(259 1 #reduceActionForExpression186: 12266684 false) 
	#(259 1 #reduceActionForExpression186: 12266680 false) 
	#(267 0 #reduceActionFor__identifier___name_______period___1: 17753089 false) 
	#(259 1 #reduceActionForExpression2: 12266498 false) 
	#(259 1 #reduceActionForExpression3: 12266499 false) 
	#(259 1 #reduceActionForExpression3: 12266500 false) 
	#(259 1 #liftFirstValue: 12266503 false) 
	#(259 1 #liftFirstValue: 12266504 false) 
	#(259 1 #liftFirstValue: 12266497 false) 
	#(269 1 #reduceActionForExpressionListNode1: 17923073 false) 
	#(256 1 #reduceActionForStatements1: 12041217 false) 
	#(258 1 #liftFirstValue: 12143617 false) 
	#(270 1 #liftFirstValue: 17983490 false) 
	#(223 2 #reduceActionForDatabaseStatement1: 8329217 false) 
	#(225 2 #reduceActionForDeleteQuery7: 8570887 false) 
	#(225 2 #reduceActionForDeleteQuery7: 8570881 false) 
	#(218 2 #reduceActionForLoadingStatement2: 7480322 false) 
	#(224 2 #reduceActionForExecuteStatement3: 8413187 false) 
	#(224 2 #reduceActionForExecuteStatement3: 8413185 false) 
	#(221 2 #reduceActionForHelpSessionStatement1: 8126465 false) 
	#(227 0 #nil 8902657 false) 
	#(216 1 #reduceActionForStatements1: 7258113 false) 
	#(236 1 #reduceActionForStatements1: 9982977 false) 
	#(174 2 #reduceActionFor_____semicolon__2: 1558530 false) 
	#(173 2 #reduceActionForFile1: 1539073 false) 
	#(259 2 #reduceActionForExpression61: 12266557 false) 
	#(259 2 #reduceActionForExpression61: 12266556 false) 
	#(262 1 #reduceActionForWhenExpressions1: 17415169 false) 
	#(259 2 #reduceActionForExpression187: 12266683 false) 
	#(259 2 #reduceActionForExpression61: 12266568 false) 
	#(259 2 #reduceActionForExpression187: 12266685 false) 
	#(259 2 #reduceActionForExpression187: 12266681 false) 
	#(265 2 #reduceActionForIdentifier1: 17718273 false) 
	#(259 2 #reduceActionForExpression6: 12266502 false) 
	#(268 2 #reduceActionForIdentifierName1: 17839105 false) 
	#(247 2 #reduceActionFor__identifier___name_______period___2: 10865666 false) 
	#(257 1 #reduceActionForWhenExpressions1: 12102657 false) 
	#(258 2 #reduceActionForNamedExpression2: 12143618 false) 
	#(270 2 #reduceActionForExpressionWithDistinct1: 17983489 false) 
	#(219 3 #reduceActionForCheckWorkloadStatement2: 7760898 false) 
	#(200 0 #reduceActionForMacroArgs1: 4781057 false) 
	#(182 0 #nil 2679809 false) 
	#(225 3 #reduceActionForDeleteQuery10: 8570890 false) 
	#(225 3 #reduceActionForDeleteQuery9: 8570889 false) 
	#(248 0 #nil 11171841 false) 
	#(225 3 #reduceActionForDeleteQuery8: 8570888 false) 
	#(245 2 #reduceActionForTable1: 10856449 false) 
	#(225 3 #reduceActionForDeleteQuery10: 8570884 false) 
	#(225 3 #reduceActionForDeleteQuery9: 8570883 false) 
	#(225 3 #reduceActionForDeleteQuery8: 8570882 false) 
	#(210 3 #reduceActionForDropTableQuery1: 6014977 false) 
	#(251 2 #reduceActionForTable1: 11542529 false) 
	#(234 0 #reduceActionForQueryExpressions1: 9714689 false) 
	#(229 0 #reduceActionFor_FromTables__QueryExpressions__1: 8926209 false) 
	#(227 1 #liftFirstValue: 8902658 false) 
	#(208 1 #liftFirstValue: 5616651 false) 
	#(208 1 #liftFirstValue: 5616659 false) 
	#(208 1 #liftFirstValue: 5616647 false) 
	#(208 1 #liftFirstValue: 5616641 false) 
	#(208 1 #liftFirstValue: 5616643 false) 
	#(208 1 #liftFirstValue: 5616644 false) 
	#(208 1 #liftFirstValue: 5616652 false) 
	#(208 1 #liftFirstValue: 5616653 false) 
	#(208 1 #liftFirstValue: 5616655 false) 
	#(208 1 #liftFirstValue: 5616649 false) 
	#(208 1 #liftFirstValue: 5616650 false) 
	#(208 1 #liftFirstValue: 5616657 false) 
	#(208 1 #liftFirstValue: 5616654 false) 
	#(208 1 #liftFirstValue: 5616656 false) 
	#(208 1 #liftFirstValue: 5616648 false) 
	#(208 1 #liftFirstValue: 5616645 false) 
	#(208 1 #liftFirstValue: 5616646 false) 
	#(208 1 #liftFirstValue: 5616658 false) 
	#(208 1 #liftFirstValue: 5616642 false) 
	#(217 2 #reduceActionForUsingColumn1: 7349249 false) 
	#(205 0 #reduceActionFor_____semicolon__1: 5144577 false) 
	#(207 1 #reduceActionForWhenExpressions1: 5539841 false) 
	#(215 3 #reduceActionForUsingStatement1: 7074817 false) 
	#(226 3 #reduceActionForSelectQuery17: 8724497 false) 
	#(239 1 #reduceActionForUnionSelectQuery2: 10339330 false) 
	#(226 3 #reduceActionForSelectQuery23: 8724503 false) 
	#(226 3 #reduceActionForSelectQuery21: 8724501 false) 
	#(226 3 #reduceActionForSelectQuery19: 8724499 false) 
	#(226 3 #reduceActionForSelectQuery13: 8724493 false) 
	#(259 3 #reduceActionForExpression71: 12266567 false) 
	#(259 3 #reduceActionForExpression36: 12266532 false) 
	#(260 3 #reduceActionForCaseExpression1: 17220609 false) 
	#(262 2 #reduceActionFor_____semicolon__2: 17415170 false) 
	#(259 3 #reduceActionForExpression178: 12266674 false) 
	#(267 2 #reduceActionFor__identifier___name_______period___2: 17753090 false) 
	#(259 3 #reduceActionForExpression197: 12266693 false) 
	#(246 2 #reduceActionFor__identifier___name_______period__1: 10865665 false) 
	#(259 3 #reduceActionForExpression11: 12266507 false) 
	#(259 3 #reduceActionForExpression11: 12266511 false) 
	#(259 3 #reduceActionForExpression11: 12266505 false) 
	#(259 3 #reduceActionForExpression11: 12266506 false) 
	#(259 3 #reduceActionForExpression11: 12266508 false) 
	#(259 3 #reduceActionForExpression11: 12266518 false) 
	#(259 3 #reduceActionForExpression11: 12266519 false) 
	#(259 3 #reduceActionForExpression11: 12266516 false) 
	#(259 3 #reduceActionForExpression11: 12266515 false) 
	#(259 3 #reduceActionForExpression11: 12266520 false) 
	#(259 3 #reduceActionForExpression11: 12266521 false) 
	#(259 3 #reduceActionForExpression11: 12266513 false) 
	#(259 3 #reduceActionForExpression11: 12266512 false) 
	#(259 3 #reduceActionForExpression198: 12266694 false) 
	#(259 3 #reduceActionForExpression37: 12266533 false) 
	#(259 3 #reduceActionForExpression34: 12266530 false) 
	#(259 3 #reduceActionForExpression26: 12266522 false) 
	#(259 3 #reduceActionForExpression11: 12266509 false) 
	#(259 3 #reduceActionForExpression11: 12266517 false) 
	#(259 3 #reduceActionForExpression11: 12266514 false) 
	#(259 3 #reduceActionForExpression11: 12266510 false) 
	#(264 3 #reduceActionForFunctionExpression1: 17610753 false) 
	#(257 2 #reduceActionFor_____semicolon__2: 12102658 false) 
	#(256 3 #reduceActionForExpressionList2: 12041218 false) 
	#(258 3 #reduceActionForNamedExpression3: 12143619 false) 
	#(219 4 #reduceActionForCheckWorkloadStatement1: 7760897 false) 
	#(209 4 #reduceActionForCheckpointStatement1: 5860353 false) 
	#(245 3 #reduceActionForTable4: 10856452 false) 
	#(225 4 #reduceActionForDeleteQuery12: 8570892 false) 
	#(225 4 #reduceActionForDeleteQuery11: 8570891 false) 
	#(248 1 #liftFirstValue: 11171842 false) 
	#(250 0 #reduceActionFor__ON___onToken__Expression__on___1: 11258881 false) 
	#(252 2 #reduceActionForWhereExpression1: 11626497 false) 
	#(245 3 #reduceActionForTable2: 10856450 false) 
	#(225 4 #reduceActionForDeleteQuery12: 8570886 false) 
	#(225 4 #reduceActionForDeleteQuery11: 8570885 false) 
	#(214 4 #reduceActionForInsertQuery11: 6672395 false) 
	#(214 4 #reduceActionForInsertQuery11: 6672393 false) 
	#(198 4 #reduceActionForLockTableStatement5: 4413445 false) 
	#(198 4 #reduceActionForLockTableStatement5: 4413441 false) 
	#(229 1 #reduceActionFor_FromTables__QueryExpressions__2: 8926210 false) 
	#(231 0 #reduceActionFor__ON___onToken__Expression__on___1: 8958977 false) 
	#(228 1 #reduceActionFor_FromTables__QueryExpressions_1: 8926209 false) 
	#(244 1 #reduceActionForStatements1: 10784769 false) 
	#(211 4 #reduceActionForUpdateQuery1: 6100993 false) 
	#(212 1 #reduceActionForStatements1: 6475777 false) 
	#(207 2 #reduceActionForTypeName2: 5539842 false) 
	#(203 2 #reduceActionForType1: 5000193 false) 
	#(204 1 #reduceActionFor_FromTables__QueryExpressions__2: 5129217 false) 
	#(216 3 #reduceActionForUsingColumns2: 7258114 false) 
	#(226 4 #reduceActionForSelectQuery18: 8724498 false) 
	#(236 3 #reduceActionForUsingColumns2: 9982978 false) 
	#(175 4 #reduceActionForStatements2: 1609730 false) 
	#(226 4 #reduceActionForSelectQuery14: 8724494 false) 
	#(260 4 #reduceActionForCaseExpression3: 17220611 false) 
	#(261 2 #reduceActionForElseExpression1: 17349633 false) 
	#(260 4 #reduceActionForCaseExpression2: 17220610 false) 
	#(259 4 #reduceActionForExpression181: 12266677 false) 
	#(259 4 #reduceActionForExpression190: 12266686 false) 
	#(259 4 #reduceActionForExpression64: 12266560 false) 
	#(266 2 #reduceActionFor__identifier___name_______period__1: 17753089 false) 
	#(266 2 #reduceActionFor__identifier___name_______period__1: 17753090 false) 
	#(259 4 #reduceActionForExpression179: 12266675 false) 
	#(259 4 #reduceActionForExpression50: 12266546 false) 
	#(259 4 #reduceActionForExpression41: 12266537 false) 
	#(259 4 #reduceActionForExpression35: 12266531 false) 
	#(259 4 #reduceActionForExpression39: 12266535 false) 
	#(259 4 #reduceActionForExpression28: 12266524 false) 
	#(259 4 #reduceActionForExpression74: 12266570 false) 
	#(264 4 #reduceActionForFunctionExpression2: 17610754 false) 
	#(226 5 #reduceActionForSelectQuery24: 8724504 false) 
	#(226 5 #reduceActionForSelectQuery22: 8724502 false) 
	#(226 5 #reduceActionForSelectQuery20: 8724500 false) 
	#(226 5 #reduceActionForSelectQuery15: 8724495 false) 
	#(209 5 #reduceActionForCheckpointStatement2: 5860354 false) 
	#(177 5 #reduceActionForComment1: 2134017 false) 
	#(201 1 #reduceActionForStatements1: 4848641 false) 
	#(182 2 #liftFirstValue: 2679810 false) 
	#(180 0 #reduceActionFor__identifier___name_______period___1: 2365441 false) 
	#(245 4 #reduceActionForTable5: 10856453 false) 
	#(250 1 #reduceActionFor_FromTables__QueryExpressions__2: 11258882 false) 
	#(245 4 #reduceActionForTable7: 10856455 false) 
	#(245 4 #reduceActionForTable3: 10856451 false) 
	#(224 5 #reduceActionForExecuteStatement4: 8413188 false) 
	#(224 5 #reduceActionForExecuteStatement4: 8413186 false) 
	#(198 5 #reduceActionForLockTableStatement7: 4413447 false) 
	#(198 5 #reduceActionForLockTableStatement6: 4413446 false) 
	#(198 5 #reduceActionForLockTableStatement7: 4413443 false) 
	#(198 5 #reduceActionForLockTableStatement6: 4413442 false) 
	#(243 2 #reduceActionForFromTables1: 10737665 false) 
	#(231 1 #reduceActionFor_FromTables__QueryExpressions__2: 8958978 false) 
	#(233 0 #nil 9003009 false) 
	#(234 2 #reduceActionForQueryExpressions2: 9714690 false) 
	#(235 1 #reduceActionForQueryExpression3: 9775107 false) 
	#(235 1 #reduceActionForQueryExpression5: 9775109 false) 
	#(235 1 #reduceActionForQueryExpression4: 9775108 false) 
	#(235 1 #reduceActionForQueryExpression1: 9775105 false) 
	#(235 1 #reduceActionForQueryExpression2: 9775106 false) 
	#(235 1 #reduceActionForQueryExpression6: 9775110 false) 
	#(228 2 #reduceActionFor_FromTables__QueryExpressions_2: 8926210 false) 
	#(211 5 #reduceActionForUpdateQuery4: 6100996 false) 
	#(211 5 #reduceActionForUpdateQuery7: 6100999 false) 
	#(215 5 #reduceActionForUsingStatement2: 7074818 false) 
	#(217 4 #reduceActionForUsingColumn2: 7349250 false) 
	#(206 1 #reduceActionForTypeOption5: 5171205 false) 
	#(205 2 #reduceActionFor_____semicolon__2: 5144578 false) 
	#(263 4 #reduceActionForWhenExpression1: 17502209 false) 
	#(260 5 #reduceActionForCaseExpression4: 17220612 false) 
	#(259 5 #reduceActionForExpression56: 12266552 false) 
	#(259 5 #reduceActionForExpression183: 12266679 false) 
	#(259 5 #reduceActionForExpression183: 12266678 false) 
	#(259 5 #reduceActionForExpression191: 12266687 false) 
	#(259 5 #reduceActionForExpression56: 12266548 false) 
	#(259 5 #reduceActionForExpression196: 12266692 false) 
	#(259 5 #reduceActionForExpression49: 12266545 false) 
	#(259 5 #reduceActionForExpression180: 12266676 false) 
	#(259 5 #reduceActionForExpression62: 12266558 false) 
	#(259 5 #reduceActionForExpression45: 12266541 false) 
	#(259 5 #reduceActionForExpression43: 12266539 false) 
	#(259 5 #reduceActionForExpression27: 12266523 false) 
	#(259 5 #reduceActionForExpression126: 12266622 false) 
	#(259 5 #reduceActionForExpression100: 12266596 false) 
	#(226 6 #reduceActionForSelectQuery16: 8724496 false) 
	#(200 3 #reduceActionForMacroArgs2: 4781058 false) 
	#(202 2 #reduceActionForParameter1: 4943873 false) 
	#(192 0 #reduceActionFor__identifier___name_______period___1: 3566593 false) 
	#(245 5 #reduceActionForTable6: 10856454 false) 
	#(245 5 #reduceActionForTable12: 10856460 false) 
	#(245 5 #reduceActionForTable12: 10856459 false) 
	#(249 2 #reduceActionFor__identifier___name_______period__1: 11258881 false) 
	#(214 6 #reduceActionForInsertQuery5: 6672389 false) 
	#(214 6 #reduceActionForInsertQuery5: 6672385 false) 
	#(198 6 #reduceActionForLockTableStatement8: 4413448 false) 
	#(198 6 #reduceActionForLockTableStatement8: 4413444 false) 
	#(197 6 #reduceActionForRollbackStatement1: 4265985 false) 
	#(242 4 #reduceActionForIntoExpression1: 10642433 false) 
	#(230 2 #reduceActionFor__identifier___name_______period__1: 8958977 false) 
	#(232 1 #liftFirstValue: 9003009 false) 
	#(233 1 #liftFirstValue: 9003010 false) 
	#(226 6 #reduceActionForSelectQuery7: 8724487 false) 
	#(238 2 #reduceActionForHavingExpression1: 10257409 false) 
	#(240 2 #reduceActionForQualifyExpression1: 10469377 false) 
	#(226 6 #reduceActionForSelectQuery7: 8724481 false) 
	#(220 6 #reduceActionForSetStatement1: 7961601 false) 
	#(211 6 #reduceActionForUpdateQuery13: 6101005 false) 
	#(244 3 #reduceActionForUsingColumns2: 10784770 false) 
	#(211 6 #reduceActionForUpdateQuery19: 6101011 false) 
	#(212 3 #reduceActionForUsingColumns2: 6475778 false) 
	#(211 6 #reduceActionForUpdateQuery3: 6100995 false) 
	#(211 6 #reduceActionForUpdateQuery3: 6100994 false) 
	#(213 3 #reduceActionForSetExpression1: 6595585 false) 
	#(211 6 #reduceActionForUpdateQuery10: 6101002 false) 
	#(206 2 #reduceActionForTypeOption4: 5171204 false) 
	#(206 2 #reduceActionForTypeOption3: 5171203 false) 
	#(206 2 #reduceActionForTypeOption2: 5171202 false) 
	#(237 5 #reduceActionForWithTable1: 10072065 false) 
	#(239 4 #reduceActionForUnionSelectQuery1: 10339329 false) 
	#(259 6 #reduceActionForExpression58: 12266554 false) 
	#(259 6 #reduceActionForExpression73: 12266569 false) 
	#(259 6 #reduceActionForExpression32: 12266528 false) 
	#(259 6 #reduceActionForExpression30: 12266526 false) 
	#(259 6 #reduceActionForExpression192: 12266688 false) 
	#(259 6 #reduceActionForExpression192: 12266690 false) 
	#(259 6 #reduceActionForExpression65: 12266561 false) 
	#(259 6 #reduceActionForExpression65: 12266565 false) 
	#(259 6 #reduceActionForExpression65: 12266563 false) 
	#(259 6 #reduceActionForExpression58: 12266550 false) 
	#(255 3 #reduceActionForOrderByExpression1: 11959297 false) 
	#(259 6 #reduceActionForExpression63: 12266559 false) 
	#(259 6 #reduceActionForExpression46: 12266542 false) 
	#(259 6 #reduceActionForExpression29: 12266525 false) 
	#(241 3 #reduceActionForPartitionByExpression1: 10548225 false) 
	#(259 6 #reduceActionForExpression152: 12266648 false) 
	#(218 7 #reduceActionForLoadingStatement1: 7480321 false) 
	#(201 3 #reduceActionForUsingColumns2: 4848642 false) 
	#(193 2 #reduceActionForCreateTableColumn1: 3612673 false) 
	#(184 0 #reduceActionFor__identifier___name_______period___1: 3204098 false) 
	#(190 2 #reduceActionForCreateTableColumns1: 3516417 false) 
	#(183 3 #reduceActionForCreateTableOption5: 2780165 false) 
	#(183 3 #reduceActionForCreateTableOption1: 2780161 false) 
	#(180 2 #reduceActionFor__identifier___name_______period___2: 2365442 false) 
	#(245 6 #reduceActionForTable13: 10856461 false) 
	#(245 6 #reduceActionForTable10: 10856458 false) 
	#(245 6 #reduceActionForTable10: 10856456 false) 
	#(245 6 #reduceActionForTable10: 10856457 false) 
	#(214 7 #reduceActionForInsertQuery12: 6672396 false) 
	#(214 7 #reduceActionForInsertQuery7: 6672391 false) 
	#(214 7 #reduceActionForInsertQuery12: 6672394 false) 
	#(214 7 #reduceActionForInsertQuery7: 6672387 false) 
	#(194 7 #reduceActionForMergeQuery1: 3676161 false) 
	#(195 1 #reduceActionForWhenExpressions1: 3831809 false) 
	#(226 7 #reduceActionForSelectQuery9: 8724489 false) 
	#(226 7 #reduceActionForSelectQuery9: 8724491 false) 
	#(253 3 #reduceActionForGroupByExpression2: 11695106 false) 
	#(253 3 #reduceActionForGroupByExpression1: 11695105 false) 
	#(226 7 #reduceActionForSelectQuery9: 8724483 false) 
	#(226 7 #reduceActionForSelectQuery9: 8724485 false) 
	#(220 7 #reduceActionForSetStatement2: 7961602 false) 
	#(211 7 #reduceActionForUpdateQuery16: 6101008 false) 
	#(211 7 #reduceActionForUpdateQuery20: 6101012 false) 
	#(211 7 #reduceActionForUpdateQuery6: 6100998 false) 
	#(211 7 #reduceActionForUpdateQuery6: 6100997 false) 
	#(211 7 #reduceActionForUpdateQuery9: 6101001 false) 
	#(211 7 #reduceActionForUpdateQuery9: 6101000 false) 
	#(203 5 #reduceActionForType2: 5000194 false) 
	#(206 3 #reduceActionForTypeOption1: 5171201 false) 
	#(259 7 #reduceActionForExpression57: 12266553 false) 
	#(259 7 #reduceActionForExpression66: 12266562 false) 
	#(259 7 #reduceActionForExpression66: 12266566 false) 
	#(259 7 #reduceActionForExpression66: 12266564 false) 
	#(259 7 #reduceActionForExpression57: 12266549 false) 
	#(259 7 #reduceActionForExpression51: 12266547 false) 
	#(259 7 #reduceActionForExpression38: 12266534 false) 
	#(181 8 #reduceActionForCreateTable1: 2572289 false) 
	#(186 0 #reduceActionFor__identifier___name_______period___1: 3240961 false) 
	#(192 2 #reduceActionFor__identifier___name_______period___2: 3566594 false) 
	#(183 4 #reduceActionForCreateTableOption4: 2780164 false) 
	#(183 4 #reduceActionForCreateTableOption3: 2780163 false) 
	#(183 4 #reduceActionForCreateTableOption2: 2780162 false) 
	#(179 2 #reduceActionFor__identifier___name_______period__1: 2365441 false) 
	#(245 7 #reduceActionForTable17: 10856465 false) 
	#(245 7 #reduceActionForTable17: 10856464 false) 
	#(194 8 #reduceActionForMergeQuery2: 3676162 false) 
	#(195 2 #reduceActionFor_____semicolon__2: 3831810 false) 
	#(226 8 #reduceActionForSelectQuery8: 8724488 false) 
	#(254 2 #reduceActionForEmptyGroupByExpression1: 11868161 false) 
	#(226 8 #reduceActionForSelectQuery8: 8724482 false) 
	#(211 8 #reduceActionForUpdateQuery15: 6101007 false) 
	#(211 8 #reduceActionForUpdateQuery15: 6101006 false) 
	#(211 8 #reduceActionForUpdateQuery12: 6101004 false) 
	#(211 8 #reduceActionForUpdateQuery12: 6101003 false) 
	#(259 8 #reduceActionForExpression59: 12266555 false) 
	#(259 8 #reduceActionForExpression33: 12266529 false) 
	#(259 8 #reduceActionForExpression31: 12266527 false) 
	#(259 8 #reduceActionForExpression193: 12266689 false) 
	#(259 8 #reduceActionForExpression193: 12266691 false) 
	#(259 8 #reduceActionForExpression59: 12266551 false) 
	#(259 8 #reduceActionForExpression42: 12266538 false) 
	#(259 8 #reduceActionForExpression40: 12266536 false) 
	#(199 9 #reduceActionForCreateMacroStatement1: 4592641 false) 
	#(181 9 #reduceActionForCreateTable2: 2572290 false) 
	#(184 2 #reduceActionForCreateTableColumns1: 3204097 false) 
	#(191 2 #reduceActionFor__identifier___name_______period__1: 3566593 false) 
	#(178 9 #reduceActionForCreateView1: 2251777 false) 
	#(245 8 #reduceActionForTable14: 10856462 false) 
	#(245 8 #reduceActionForTable14: 10856463 false) 
	#(214 9 #reduceActionForInsertQuery6: 6672390 false) 
	#(214 9 #reduceActionForInsertQuery6: 6672386 false) 
	#(226 9 #reduceActionForSelectQuery10: 8724490 false) 
	#(226 9 #reduceActionForSelectQuery10: 8724492 false) 
	#(226 9 #reduceActionForSelectQuery10: 8724484 false) 
	#(226 9 #reduceActionForSelectQuery10: 8724486 false) 
	#(211 9 #reduceActionForUpdateQuery18: 6101010 false) 
	#(211 9 #reduceActionForUpdateQuery18: 6101009 false) 
	#(203 7 #reduceActionForType3: 5000195 false) 
	#(237 8 #reduceActionForWithTable2: 10072066 false) 
	#(259 9 #reduceActionForExpression47: 12266543 false) 
	#(259 9 #reduceActionForExpression44: 12266540 false) 
	#(186 2 #reduceActionFor__identifier___name_______period___2: 3240962 false) 
	#(214 10 #reduceActionForInsertQuery8: 6672392 false) 
	#(214 10 #reduceActionForInsertQuery8: 6672388 false) 
	#(259 10 #reduceActionForExpression48: 12266544 false) 
	#(189 0 #reduceActionFor__identifier___name_______period___1: 3418113 false) 
	#(185 2 #reduceActionFor__identifier___name_______period__1: 3240961 false) 
	#(259 11 #reduceActionForExpression99: 12266595 false) 
	#(259 11 #reduceActionForExpression98: 12266594 false) 
	#(259 11 #reduceActionForExpression97: 12266593 false) 
	#(259 11 #reduceActionForExpression98: 12266592 false) 
	#(259 11 #reduceActionForExpression97: 12266591 false) 
	#(259 11 #reduceActionForExpression94: 12266590 false) 
	#(259 11 #reduceActionForExpression93: 12266589 false) 
	#(259 11 #reduceActionForExpression92: 12266588 false) 
	#(259 11 #reduceActionForExpression93: 12266587 false) 
	#(259 11 #reduceActionForExpression92: 12266586 false) 
	#(259 11 #reduceActionForExpression89: 12266585 false) 
	#(259 11 #reduceActionForExpression88: 12266584 false) 
	#(259 11 #reduceActionForExpression87: 12266583 false) 
	#(259 11 #reduceActionForExpression88: 12266582 false) 
	#(259 11 #reduceActionForExpression87: 12266581 false) 
	#(259 11 #reduceActionForExpression94: 12266580 false) 
	#(259 11 #reduceActionForExpression93: 12266579 false) 
	#(259 11 #reduceActionForExpression92: 12266578 false) 
	#(259 11 #reduceActionForExpression93: 12266577 false) 
	#(259 11 #reduceActionForExpression92: 12266576 false) 
	#(259 11 #reduceActionForExpression89: 12266575 false) 
	#(259 11 #reduceActionForExpression88: 12266574 false) 
	#(259 11 #reduceActionForExpression87: 12266573 false) 
	#(259 11 #reduceActionForExpression88: 12266572 false) 
	#(259 11 #reduceActionForExpression87: 12266571 false) 
	#(196 6 #reduceActionForWhenMergeCondition1: 3872769 false) 
	#(259 12 #reduceActionForExpression151: 12266647 false) 
	#(259 12 #reduceActionForExpression150: 12266646 false) 
	#(259 12 #reduceActionForExpression149: 12266645 false) 
	#(259 12 #reduceActionForExpression150: 12266644 false) 
	#(259 12 #reduceActionForExpression149: 12266643 false) 
	#(259 12 #reduceActionForExpression146: 12266642 false) 
	#(259 12 #reduceActionForExpression145: 12266641 false) 
	#(259 12 #reduceActionForExpression144: 12266640 false) 
	#(259 12 #reduceActionForExpression145: 12266639 false) 
	#(259 12 #reduceActionForExpression144: 12266638 false) 
	#(259 12 #reduceActionForExpression141: 12266637 false) 
	#(259 12 #reduceActionForExpression140: 12266636 false) 
	#(259 12 #reduceActionForExpression139: 12266635 false) 
	#(259 12 #reduceActionForExpression140: 12266634 false) 
	#(259 12 #reduceActionForExpression139: 12266633 false) 
	#(259 12 #reduceActionForExpression146: 12266632 false) 
	#(259 12 #reduceActionForExpression145: 12266631 false) 
	#(259 12 #reduceActionForExpression144: 12266630 false) 
	#(259 12 #reduceActionForExpression145: 12266629 false) 
	#(259 12 #reduceActionForExpression144: 12266628 false) 
	#(259 12 #reduceActionForExpression141: 12266627 false) 
	#(259 12 #reduceActionForExpression140: 12266626 false) 
	#(259 12 #reduceActionForExpression139: 12266625 false) 
	#(259 12 #reduceActionForExpression140: 12266624 false) 
	#(259 12 #reduceActionForExpression139: 12266623 false) 
	#(259 12 #reduceActionForExpression125: 12266621 false) 
	#(259 12 #reduceActionForExpression124: 12266620 false) 
	#(259 12 #reduceActionForExpression123: 12266619 false) 
	#(259 12 #reduceActionForExpression124: 12266618 false) 
	#(259 12 #reduceActionForExpression123: 12266617 false) 
	#(259 12 #reduceActionForExpression120: 12266616 false) 
	#(259 12 #reduceActionForExpression119: 12266615 false) 
	#(259 12 #reduceActionForExpression118: 12266614 false) 
	#(259 12 #reduceActionForExpression119: 12266613 false) 
	#(259 12 #reduceActionForExpression118: 12266612 false) 
	#(259 12 #reduceActionForExpression115: 12266611 false) 
	#(259 12 #reduceActionForExpression114: 12266610 false) 
	#(259 12 #reduceActionForExpression113: 12266609 false) 
	#(259 12 #reduceActionForExpression114: 12266608 false) 
	#(259 12 #reduceActionForExpression113: 12266607 false) 
	#(259 12 #reduceActionForExpression120: 12266606 false) 
	#(259 12 #reduceActionForExpression119: 12266605 false) 
	#(259 12 #reduceActionForExpression118: 12266604 false) 
	#(259 12 #reduceActionForExpression119: 12266603 false) 
	#(259 12 #reduceActionForExpression118: 12266602 false) 
	#(259 12 #reduceActionForExpression115: 12266601 false) 
	#(259 12 #reduceActionForExpression114: 12266600 false) 
	#(259 12 #reduceActionForExpression113: 12266599 false) 
	#(259 12 #reduceActionForExpression114: 12266598 false) 
	#(259 12 #reduceActionForExpression113: 12266597 false) 
	#(187 6 #reduceActionForIndex1: 3276801 false) 
	#(189 2 #reduceActionFor__identifier___name_______period___2: 3418114 false) 
	#(259 13 #reduceActionForExpression177: 12266673 false) 
	#(259 13 #reduceActionForExpression176: 12266672 false) 
	#(259 13 #reduceActionForExpression175: 12266671 false) 
	#(259 13 #reduceActionForExpression176: 12266670 false) 
	#(259 13 #reduceActionForExpression175: 12266669 false) 
	#(259 13 #reduceActionForExpression172: 12266668 false) 
	#(259 13 #reduceActionForExpression171: 12266667 false) 
	#(259 13 #reduceActionForExpression170: 12266666 false) 
	#(259 13 #reduceActionForExpression171: 12266665 false) 
	#(259 13 #reduceActionForExpression170: 12266664 false) 
	#(259 13 #reduceActionForExpression167: 12266663 false) 
	#(259 13 #reduceActionForExpression166: 12266662 false) 
	#(259 13 #reduceActionForExpression165: 12266661 false) 
	#(259 13 #reduceActionForExpression166: 12266660 false) 
	#(259 13 #reduceActionForExpression165: 12266659 false) 
	#(259 13 #reduceActionForExpression172: 12266658 false) 
	#(259 13 #reduceActionForExpression171: 12266657 false) 
	#(259 13 #reduceActionForExpression170: 12266656 false) 
	#(259 13 #reduceActionForExpression171: 12266655 false) 
	#(259 13 #reduceActionForExpression170: 12266654 false) 
	#(259 13 #reduceActionForExpression167: 12266653 false) 
	#(259 13 #reduceActionForExpression166: 12266652 false) 
	#(259 13 #reduceActionForExpression165: 12266651 false) 
	#(259 13 #reduceActionForExpression166: 12266650 false) 
	#(259 13 #reduceActionForExpression165: 12266649 false) 
	#(187 7 #reduceActionForIndex2: 3276802 false) 
	#(188 2 #reduceActionFor__identifier___name_______period__1: 3418113 false) 
	#(187 7 #reduceActionForIndex3: 3276803 false) 
	#(187 7 #reduceActionForIndex5: 3276805 false) 
	#(178 14 #reduceActionForCreateView2: 2251778 false) 
	#(196 8 #reduceActionForWhenMergeCondition2: 3872770 false) 
	#(187 8 #reduceActionForIndex4: 3276804 false) 
	#(187 8 #reduceActionForIndex6: 3276806 false) 
	#(187 8 #reduceActionForIndex7: 3276807 false) 
	#(187 9 #reduceActionForIndex8: 3276808 false) 
	#(196 12 #reduceActionForWhenMergeCondition3: 3872771 false)
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> scannerClass [
	^TeradataScanner
]

{ #category : #generated }
TeradataParser class >> startingStateForExpression [
	^ 2
]

{ #category : #generated }
TeradataParser class >> startingStateForExpressionListNode [
	^ 3
]

{ #category : #generated }
TeradataParser class >> startingStateForExpressionWithDistinct [
	^ 4
]

{ #category : #generated }
TeradataParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
TeradataParser class >> symbolNames [
	^ #('"("' '")"' '"*"' '"**"' '"+"' '","' '"-"' '"."' '"/"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"ACCESS"' '"AFTER"' '"ALL"' '"AND"' '"AS"' '"BEFORE"' '"BEGIN"' '"BETWEEN"' '"BIGINT"' '"BOTH"' '"BT"' '"BY"' '"BYTE"' '"BYTEINT"' '"CASE"' '"CASESPECIFIC"' '"CAST"' '"CHAR"' '"CHARACTER"' '"CHECK"' '"CHECKPOINT"' '"CHECKSUM"' '"CLOB"' '"COMMENT"' '"COMPRESS"' '"COUNT"' '"CREATE"' '"CROSS"' '"CURRENT"' '"CURSOR"' '"DATABASE"' '"DATE"' '"DEC"' '"DECIMAL"' '"DEFAULT"' '"DEL"' '"DELETE"' '"DISTINCT"' '"DISTINCTROW"' '"DOUBLE"' '"DROP"' '"ELSE"' '"END"' '"EQ"' '"ERROR"' '"ERRORFILES"' '"ESCAPE"' '"ET"' '"EXCEPT"' '"EXEC"' '"EXECUTE"' '"EXISTS"' '"EXTRACT"' '"FALLBACK"' '"FLOAT"' '"FOLLOWING"' '"FOR"' '"FORMAT"' '"FROM"' '"FULL"' '"GROUP"' '"HAVING"' '"HELP"' '"IGNORE"' '"IN"' '"INDEX"' '"INNER"' '"INS"' '"INSERT"' '"INT"' '"INTEGER"' '"INTERSECT"' '"INTERVAL"' '"INTO"' '"IS"' '"JOIN"' '"JOURNAL"' '"LEADING"' '"LEFT"' '"LIKE"' '"LOADING"' '"LOCK"' '"LOCKING"' '"MACRO"' '"MATCHED"' '"MERGE"' '"MERGEBLOCKRATIO"' '"MINUS"' '"MOD"' '"MODE"' '"MULTISET"' '"NE"' '"NO"' '"NOT"' '"NULL"' '"NULLS"' '"NUMBER"' '"NUMERIC"' '"ON"' '"OR"' '"ORDER"' '"OUTER"' '"OVER"' '"PARTITION"' '"PRECEDING"' '"PRECISION"' '"PRIMARY"' '"QUALIFY"' '"REAL"' '"RECURSIVE"' '"RIGHT"' '"ROLLBACK"' '"ROW"' '"ROWS"' '"SEL"' '"SELECT"' '"SESSION"' '"SET"' '"SMALLINT"' '"SUBSTRING"' '"TABLE"' '"THEN"' '"TIME"' '"TIMESTAMP"' '"TITLE"' '"TOP"' '"TRAILING"' '"TRANSLATE"' '"TRANSLATE_CHK"' '"TRIM"' '"TRYCAST"' '"UESCAPE"' '"UNBOUNDED"' '"UNION"' '"UNIQUE"' '"UPDATE"' '"USING"' '"VALUES"' '"VARBYTE"' '"VARCHAR"' '"VIEW"' '"WHEN"' '"WHERE"' '"WITH"' '"WORK"' '"WORKLOAD"' '"XMLAGG"' '"||"' '<identifier>' '<variable>' '<ustring>' '<string>' '<number>' '<whitespace>' '<comment>' 'B e g i n' 'File' '";" ''semicolon''*' 'Statements' 'Statement' 'Comment' 'CreateView' '("," ''comma'' <identifier> ''column'' )' '("," ''comma'' <identifier> ''column'' )*' 'CreateTable' 'CreateTableOption*' 'CreateTableOption' 'CreateTableIndexes' '("," ''comma'' Index ''index'')' '("," ''comma'' Index ''index'')*' 'Index' '("," ''comma'' <identifier> ''column'')' '("," ''comma'' <identifier> ''column'')*' 'CreateTableColumns' '("," ''comma'' CreateTableColumn ''column'')' '("," ''comma'' CreateTableColumn ''column'')*' 'CreateTableColumn' 'MergeQuery' 'WhenMergeCondition ''whenMerge''+' 'WhenMergeCondition' 'RollbackStatement' 'LockTableStatement' 'CreateMacroStatement' 'MacroArgs' 'ParameterList' 'Parameter' 'Type' 'TypeOptions' 'TypeOption  ''option'' *' 'TypeOption' 'TypeName' 'SingleTypeName' 'CheckpointStatement' 'DropTableQuery' 'UpdateQuery' 'SetExpressionList' 'SetExpression' 'InsertQuery' 'UsingStatement' 'UsingColumns' 'UsingColumn' 'LoadingStatement' 'CheckWorkloadStatement' 'SetStatement' 'HelpSessionStatement' 'TransactionStatement' 'DatabaseStatement' 'ExecuteStatement' 'DeleteQuery' 'SelectQuery' 'IntoExpression ''into''?' '(FromTables? QueryExpressions)' '(FromTables? QueryExpressions)?' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')?' '(<number> ''count'')' '(<number> ''count'')?' 'QueryExpressions' 'QueryExpression' 'WithTables' 'WithTable' 'HavingExpression' 'UnionSelectQuery' 'QualifyExpression' 'PartitionByExpression' 'IntoExpression' 'FromTables' 'TableList' 'Table' '(<identifier> ''name'' "." ''period'')' '(<identifier> ''name'' "." ''period'')*' '"OUTER" ''type''?' '("ON" ''onToken'' Expression ''on'')' '("ON" ''onToken'' Expression ''on'')?' 'TableName' 'WhereExpression' 'GroupByExpression' 'EmptyGroupByExpression' 'OrderByExpression' 'ExpressionList' '"," ''comma''+' 'NamedExpression' 'Expression' 'CaseExpression' 'ElseExpression' 'WhenExpressions' 'WhenExpression' 'FunctionExpression' 'Identifier' '("." ''period'' (<identifier> ''name'' | <string> ''name''))' '("." ''period'' (<identifier> ''name'' | <string> ''name''))*' 'IdentifierName' 'ExpressionListNode' 'ExpressionWithDistinct' 'E O F' 'error')
]

{ #category : #generated }
TeradataParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #TeradataFileNode #TeradataFileNode #OrderedCollection #OrderedCollection #TeradataProgramNode #TeradataCommentNode #TeradataCreateViewNode #OrderedCollection #OrderedCollection #TeradataCreateTableNode nil #TeradataCreateTableOptionNode #OrderedCollection #OrderedCollection #OrderedCollection #TeradataIndexNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #TeradataCreateTableColumnNode #TeradataMergeQueryNode #OrderedCollection #TeradataWhenMergeConditionNode #TeradataRollbackStatementNode #TeradataLockTableStatementNode #TeradataCreateMacroStatementNode #OrderedCollection #OrderedCollection #TeradataParameterNode #TeradataTypeNode #OrderedCollection #OrderedCollection #TeradataProgramNode #OrderedCollection #SmaCCToken #TeradataCheckpointStatementNode #TeradataDropTableQueryNode #TeradataUpdateQueryNode #OrderedCollection #TeradataSetExpressionNode #TeradataInsertQueryNode #TeradataUsingStatementNode #OrderedCollection #TeradataUsingColumnNode #TeradataProgramNode #TeradataCheckWorkloadStatementNode #TeradataSetStatementNode #TeradataHelpSessionStatementNode #TeradataProgramNode #TeradataDatabaseStatementNode #TeradataExecuteStatementNode #TeradataDeleteQueryNode #TeradataProgramNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #TeradataWithTableDefinitionNode #TeradataHavingNode #OrderedCollection #TeradataQualifyExpressionNode #TeradataPartitionByExpressionNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #TeradataProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #TeradataTableNode #TeradataWhereExpressionNode #TeradataGroupByNode #TeradataEmptyGroupByExpressionNode #TeradataOrderByExpressionNode #OrderedCollection #OrderedCollection #TeradataExpressionNode #TeradataExpressionNode #TeradataCaseExpressionNode #TeradataElseExpressionNode #OrderedCollection #TeradataWhenExpressionNode #TeradataFunctionExpressionNode #TeradataIdentifierExpressionNode #OrderedCollection #OrderedCollection #TeradataIdentifierNameNode #TeradataExpressionListNode #TeradataExpressionNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
TeradataParser class >> transitionTable [
^#(
#[1 0 21 0 1 0 6 0 10 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 0 133 0 173 0 137 0 174 0 141 0 175 0 145 0 176 0 145 0 177 0 145 0 178 0 145 0 181 0 145 0 194 0 145 0 197 0 145 0 198 0 145 0 199 0 145 0 209 0 145 0 210 0 145 0 211 0 145 0 214 0 145 0 215 0 145 0 218 0 145 0 219 0 145 0 220 0 145 0 221 0 145 0 222 0 145 0 223 0 145 0 224 0 145 0 225 0 229 0 226 0 6 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 1 81 1 3 1 81 1 4 1 81 1 8 1 81 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 1 101 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12 1 113 1 13] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 117 0 54 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 1 121 1 3 1 121 1 4 1 121 1 8 1 121 1 9 1 97 1 12 1 125 1 14] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 1 129 0 226] 
#[0 1 133 0 97] 
#[0 0 14 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 1 137 0 162] 
#[0 1 141 0 97] 
#[0 1 145 0 115] 
#[1 1 149 0 100 1 153 0 107 1 157 0 137 1 161 0 157] 
#[1 0 10 0 165 1 165 0 247 1 169 1 12] 
#[1 1 173 0 1 1 177 0 75 0 10 0 165 1 181 0 245 1 185 0 247] 
#[1 1 173 0 1 1 189 0 75 0 10 0 165 1 193 0 245 1 185 0 247] 
#[0 1 197 0 137] 
#[0 1 201 0 97] 
#[0 0 18 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 10 0 165 1 165 0 247 1 205 1 12] 
#[1 0 10 0 165 1 165 0 247 1 209 1 12] 
#[0 1 213 0 133] 
#[1 1 217 0 90 0 10 0 165 1 221 0 247 1 225 0 251] 
#[1 1 229 0 90 0 10 0 165 1 221 0 247 1 233 0 251] 
#[1 1 237 0 137 0 10 0 165 1 221 0 247 1 241 0 251] 
#[1 1 245 0 137 0 10 0 165 1 221 0 247 1 249 0 251] 
#[1 1 173 0 1 1 253 0 90 0 10 0 165 2 1 0 245 1 185 0 247] 
#[0 2 5 0 161] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 2 9 0 54 2 13 0 55 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 2 17 0 142 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 2 21 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 2 25 0 54 2 29 0 55 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 2 33 0 142 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 2 37 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 10 0 165 1 165 0 247 2 41 1 12] 
#[1 0 10 0 165 1 221 0 247 2 45 0 251] 
#[1 2 49 0 1 2 53 0 165 2 57 0 216 2 61 0 217] 
#[1 2 65 0 126 0 10 0 165 2 69 0 236 2 73 0 237 1 165 0 247 2 77 1 12] 
#[0 0 0 1 15] 
#[1 2 81 0 10 0 22 1 15] 
#[1 0 6 0 10 2 85 0 174 0 6 1 15] 
#[0 0 26 0 2 0 10 1 15] 
#[0 0 30 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 34 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 38 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 42 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 46 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 50 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 54 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 58 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 62 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 66 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 70 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 74 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 78 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 82 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 86 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 90 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 94 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 98 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 102 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 0 106 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 110 0 2 0 110 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 0 110 1 15] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 2 109 0 226 1 77 0 247 2 113 1 3 2 113 1 4 2 113 1 8 2 113 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 2 117 1 3 2 117 1 4 2 117 1 8 2 117 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 2 121 1 3 2 121 1 4 2 121 1 8 2 121 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 2 125 0 158 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 2 129 1 3 2 129 1 4 2 133 1 6 2 137 1 7 2 129 1 8 2 129 1 9 1 97 1 12] 
#[0 2 141 0 1] 
#[0 2 145 0 1] 
#[1 0 114 0 1 0 114 0 2 0 114 0 3 0 114 0 4 0 114 0 5 0 114 0 6 0 114 0 7 0 114 0 9 0 114 0 10 0 114 0 11 0 114 0 12 0 114 0 13 0 114 0 14 0 114 0 15 0 114 0 16 0 114 0 19 0 114 0 20 0 114 0 21 0 114 0 24 0 114 0 44 0 114 0 58 0 114 0 59 0 114 0 60 0 114 0 63 0 114 0 65 0 114 0 73 0 114 0 75 0 114 0 76 0 114 0 77 0 114 0 78 0 114 0 80 0 114 0 81 0 114 0 83 0 114 0 88 0 114 0 90 0 114 0 91 0 114 0 92 0 114 0 95 0 114 0 96 0 114 0 104 0 114 0 105 0 114 0 108 0 114 0 110 0 114 0 115 0 114 0 116 0 114 0 117 0 114 0 119 0 114 0 120 0 114 0 124 0 114 0 127 0 114 0 130 0 114 0 134 0 114 0 138 0 114 0 150 0 114 0 152 0 114 0 153 0 114 0 158 0 114 0 159 0 114 0 160 0 114 0 164 0 114 0 165 2 149 0 168 0 114 0 169 0 114 1 15] 
#[0 2 153 0 1] 
#[0 2 157 0 1] 
#[0 2 161 0 168] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 2 165 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 2 169 1 3 2 169 1 4 2 169 1 8 2 169 1 9 1 97 1 12] 
#[0 0 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 2 173 0 1] 
#[1 0 122 0 1 0 122 0 2 0 122 0 3 0 122 0 4 0 122 0 5 0 122 0 6 0 122 0 7 0 122 0 9 0 122 0 10 0 122 0 11 0 122 0 12 0 122 0 13 0 122 0 14 0 122 0 15 0 122 0 16 0 122 0 19 0 122 0 20 0 122 0 21 0 122 0 24 0 122 0 44 0 122 0 58 0 122 0 59 0 122 0 60 0 122 0 63 0 122 0 65 0 122 0 73 0 122 0 75 0 122 0 76 0 122 0 77 0 122 0 78 0 122 0 80 0 122 0 81 0 122 0 83 0 122 0 88 0 122 0 90 0 122 0 91 0 122 0 92 0 122 0 95 0 122 0 96 0 122 0 104 0 122 0 105 0 122 0 108 0 122 0 110 0 122 0 115 0 122 0 116 0 122 0 117 0 122 0 119 0 122 0 120 0 122 0 124 0 122 0 127 0 122 0 130 0 122 0 134 0 122 0 138 0 122 0 150 0 122 0 152 0 122 0 153 0 122 0 158 0 122 0 159 0 122 0 160 0 122 0 164 0 122 0 165 2 177 0 168 0 122 0 169 0 122 1 15] 
#[1 0 126 0 1 0 126 0 2 0 126 0 3 0 126 0 4 0 126 0 5 0 126 0 6 0 126 0 7 0 126 0 9 0 126 0 10 0 126 0 11 0 126 0 12 0 126 0 13 0 126 0 14 0 126 0 15 0 126 0 16 0 126 0 19 0 126 0 20 0 126 0 21 0 126 0 24 0 126 0 44 0 126 0 58 0 126 0 59 0 126 0 60 0 126 0 63 0 126 0 65 0 126 0 73 0 126 0 75 0 126 0 76 0 126 0 77 0 126 0 78 0 126 0 80 0 126 0 81 0 126 0 83 0 126 0 88 0 126 0 90 0 126 0 91 0 126 0 92 0 126 0 95 0 126 0 96 0 126 0 104 0 126 0 105 0 126 0 108 0 126 0 110 0 126 0 115 0 126 0 116 0 126 0 117 0 126 0 119 0 126 0 120 0 126 0 124 0 126 0 127 0 126 0 130 0 126 0 134 0 126 0 138 0 126 0 150 0 126 0 152 0 126 0 153 0 126 0 158 0 126 0 159 0 126 0 160 0 126 0 164 0 126 0 165 2 181 0 168 0 126 0 169 0 126 1 15] 
#[0 2 185 0 1] 
#[0 2 189 0 1] 
#[0 2 193 0 1] 
#[0 2 197 0 1] 
#[0 2 201 0 1] 
#[1 0 130 0 1 0 130 0 2 0 130 0 3 0 130 0 4 0 130 0 5 0 130 0 6 0 130 0 7 0 130 0 8 0 130 0 9 0 130 0 10 0 130 0 11 0 130 0 12 0 130 0 13 0 130 0 14 0 130 0 15 0 130 0 16 0 130 0 19 0 130 0 20 0 130 0 21 0 130 0 24 0 130 0 44 0 130 0 58 0 130 0 59 0 130 0 60 0 130 0 63 0 130 0 65 0 130 0 73 0 130 0 75 0 130 0 76 0 130 0 77 0 130 0 78 0 130 0 80 0 130 0 81 0 130 0 83 0 130 0 88 0 130 0 90 0 130 0 91 0 130 0 92 0 130 0 95 0 130 0 96 0 130 0 104 0 130 0 105 0 130 0 108 0 130 0 110 0 130 0 115 0 130 0 116 0 130 0 117 0 130 0 119 0 130 0 120 0 130 0 124 0 130 0 127 0 130 0 130 0 130 0 134 0 130 0 138 0 130 0 150 0 130 0 152 0 130 0 153 0 130 0 158 0 130 0 159 0 130 0 160 0 130 0 164 0 130 0 165 0 130 0 169 2 205 1 11 0 130 1 15] 
#[0 0 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 2 209 0 148] 
#[0 0 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 0 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 213 0 3 2 217 0 165 2 221 0 246] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164 0 0 1 15] 
#[0 0 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 0 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 0 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 3 69 0 1] 
#[1 3 73 0 6 3 77 1 1 0 158 1 15] 
#[0 0 162 0 2 0 6 0 10 0 65 0 73 0 75 0 77 0 78 0 88 0 90 0 104 0 117 0 120 0 124 0 130 0 150 0 159 0 160 0 169 1 15] 
#[1 2 225 0 1 0 166 0 2 2 229 0 3 2 233 0 4 2 237 0 5 0 166 0 6 2 241 0 7 2 245 0 9 0 166 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 81 0 21 3 21 0 24 3 25 0 60 0 166 0 65 0 166 0 73 0 166 0 75 0 166 0 77 0 166 0 78 3 29 0 80 3 33 0 81 0 166 0 88 0 166 0 90 3 37 0 91 3 41 0 96 0 166 0 104 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 0 166 0 117 3 61 0 119 0 166 0 120 0 166 0 124 0 166 0 130 0 166 0 150 0 166 0 159 0 166 0 160 3 65 0 164 3 85 0 165 0 166 0 169 0 166 1 15] 
#[0 0 0 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 3 89 1 3 3 89 1 4 3 89 1 8 3 89 1 9 1 97 1 12] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164 0 170 1 15] 
#[0 0 0 1 15] 
#[1 3 93 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 0 10 0 165 1 221 0 247 3 97 0 251] 
#[1 3 101 0 59 3 105 0 73] 
#[0 3 109 0 89] 
#[0 3 113 0 157] 
#[1 0 10 0 165 1 165 0 247 3 117 1 12] 
#[0 3 121 0 137] 
#[1 0 10 0 165 1 221 0 247 3 125 0 251] 
#[1 0 10 0 165 1 221 0 247 3 129 0 251] 
#[1 2 217 0 165 2 221 0 246] 
#[0 0 174 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 3 133 0 1 0 109 0 131 0 113 0 132 0 129 0 160 0 10 0 165 3 137 0 226 3 141 0 245 1 185 0 247] 
#[1 1 173 0 1 0 10 0 165 3 145 0 245 1 185 0 247] 
#[1 0 178 0 2 0 178 0 10 3 149 0 19 3 153 0 44 0 178 0 65 3 157 0 76 3 161 0 83 0 178 0 88 3 165 0 92 3 169 0 95 0 178 0 104 3 173 0 127 0 178 0 150 3 177 0 159 3 181 0 252 0 178 1 15] 
#[1 3 185 0 165 2 221 0 246] 
#[1 1 173 0 1 0 10 0 165 3 189 0 245 1 185 0 247] 
#[1 0 182 0 2 0 182 0 10 3 193 0 19 3 153 0 44 0 182 0 65 3 157 0 76 3 161 0 83 0 182 0 88 3 165 0 92 3 169 0 95 0 182 0 104 3 173 0 127 0 182 0 150 3 177 0 159 3 197 0 252 0 182 1 15] 
#[1 0 10 0 165 1 221 0 247 3 201 0 251] 
#[0 0 186 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 3 205 0 1 0 190 0 2 0 190 0 10 0 190 0 65 0 190 0 88 0 190 0 104 0 190 0 150 0 190 1 15] 
#[1 3 209 0 1 0 194 0 2 0 194 0 10 0 194 0 65 0 194 0 88 0 194 0 104 0 194 0 150 0 194 1 15] 
#[0 0 198 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 10 0 165 1 221 0 247 3 213 0 251] 
#[1 3 217 0 165 2 221 0 246] 
#[1 3 221 0 1 3 225 0 154] 
#[1 0 10 0 165 1 221 0 247 3 229 0 251] 
#[1 3 233 0 1 3 237 0 154] 
#[1 0 10 0 165 1 221 0 247 3 241 0 251] 
#[0 3 245 0 73] 
#[1 0 10 0 165 1 221 0 247 3 249 0 251] 
#[0 3 253 0 73] 
#[1 1 173 0 1 0 10 0 165 4 1 0 245 1 185 0 247] 
#[1 3 153 0 44 3 157 0 76 3 161 0 83 3 165 0 92 3 169 0 95 3 173 0 127 4 5 0 153] 
#[0 4 9 0 168] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 4 13 0 142 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 4 17 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 4 21 0 142 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 4 25 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 4 29 0 169] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 4 37 0 227 4 37 0 242 3 77 1 1 0 202 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 4 45 0 142 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 4 49 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 4 53 0 142 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 4 57 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 4 61 0 169] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 4 65 0 227 4 65 0 242 3 77 1 1 0 202 1 15] 
#[0 4 69 0 14] 
#[1 4 73 0 21 4 77 0 75 4 81 0 134 4 85 0 165] 
#[1 2 53 0 165 4 89 0 216 2 61 0 217] 
#[1 4 93 0 1 4 185 0 25 4 185 0 29 4 185 0 30 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 4 185 0 155 4 185 0 156 4 177 0 203 4 181 0 207 4 185 0 208] 
#[1 0 21 0 1 4 189 0 6 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 4 193 0 176 4 193 0 177 4 193 0 178 4 193 0 181 4 193 0 194 4 193 0 197 4 193 0 198 4 193 0 199 4 193 0 209 4 193 0 210 4 193 0 211 4 193 0 214 4 193 0 215 4 193 0 218 4 193 0 219 4 193 0 220 4 193 0 221 4 193 0 222 4 193 0 223 4 193 0 224 4 193 0 225 0 229 0 226] 
#[0 0 206 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 0 10 0 165 4 197 0 236 2 73 0 237 1 165 0 247 2 77 1 12] 
#[1 0 21 0 1 4 201 0 6 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 4 205 0 176 4 205 0 177 4 205 0 178 4 205 0 181 4 205 0 194 4 205 0 197 4 205 0 198 4 205 0 199 4 205 0 209 4 205 0 210 4 205 0 211 4 205 0 214 4 205 0 215 4 205 0 218 4 205 0 219 4 205 0 220 4 205 0 221 4 205 0 222 4 205 0 223 4 205 0 224 4 205 0 225 0 229 0 226] 
#[0 0 210 0 1 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 4 209 0 1 4 213 0 21] 
#[0 0 214 0 10 1 15] 
#[1 4 217 0 10 0 218 1 15] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 4 229 0 239] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 4 233 0 239] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 4 237 0 239] 
#[1 4 221 0 1 4 241 0 19 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 4 245 0 239] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 4 249 0 226 1 77 0 247 2 113 1 3 2 113 1 4 2 113 1 8 2 113 1 9 1 97 1 12] 
#[1 4 253 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 2 225 0 1 5 1 0 2 2 229 0 3 2 233 0 4 2 237 0 5 5 5 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 0 11 0 1 0 222 0 2 2 229 0 3 2 233 0 4 0 222 0 5 0 222 0 6 0 222 0 7 2 245 0 9 0 222 0 10 0 222 0 11 0 222 0 12 0 222 0 13 0 222 0 14 0 222 0 15 0 222 0 16 0 222 0 19 0 222 0 20 0 222 0 21 0 222 0 24 0 222 0 44 0 222 0 58 0 222 0 59 0 222 0 60 0 222 0 63 0 222 0 65 0 222 0 73 0 222 0 75 0 222 0 76 0 222 0 77 0 222 0 78 0 15 0 80 0 222 0 81 0 222 0 83 0 222 0 88 0 222 0 90 0 19 0 91 0 222 0 92 0 222 0 95 0 222 0 96 0 222 0 104 3 45 0 105 0 222 0 108 0 222 0 110 0 222 0 115 0 222 0 116 0 222 0 117 0 23 0 119 0 222 0 120 0 222 0 124 0 222 0 127 0 222 0 130 0 222 0 134 0 222 0 138 0 222 0 150 0 222 0 152 0 222 0 153 0 222 0 158 0 222 0 159 0 222 0 160 0 222 0 164 0 222 0 165 0 222 0 169 0 222 1 15] 
#[1 0 27 0 1 0 226 0 2 2 229 0 3 2 233 0 4 0 226 0 5 0 226 0 6 0 226 0 7 2 245 0 9 0 226 0 10 0 226 0 11 0 226 0 12 0 226 0 13 0 226 0 14 0 226 0 15 0 226 0 16 0 226 0 19 0 226 0 20 0 226 0 21 0 226 0 24 0 226 0 44 0 226 0 58 0 226 0 59 0 226 0 60 0 226 0 63 0 226 0 65 0 226 0 73 0 226 0 75 0 226 0 76 0 226 0 77 0 226 0 78 0 31 0 80 0 226 0 81 0 226 0 83 0 226 0 88 0 226 0 90 0 35 0 91 0 226 0 92 0 226 0 95 0 226 0 96 0 226 0 104 3 45 0 105 0 226 0 108 0 226 0 110 0 226 0 115 0 226 0 116 0 226 0 117 0 39 0 119 0 226 0 120 0 226 0 124 0 226 0 127 0 226 0 130 0 226 0 134 0 226 0 138 0 226 0 150 0 226 0 152 0 226 0 153 0 226 0 158 0 226 0 159 0 226 0 160 0 226 0 164 0 226 0 165 0 226 0 169 0 226 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 9 1 3 5 9 1 4 5 9 1 8 5 9 1 9 1 97 1 12] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 2 125 0 158 3 65 0 164 5 13 1 6 2 137 1 7] 
#[1 5 17 0 58 5 21 0 59 2 125 0 158 5 25 1 5 5 29 1 7] 
#[0 0 230 0 58 0 59 0 158] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 33 1 3 5 33 1 4 5 33 1 8 5 33 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 5 37 0 19 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 5 41 0 54 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 45 1 3 5 45 1 4 5 45 1 8 5 45 1 9 1 97 1 12] 
#[0 0 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 5 49 0 226] 
#[0 5 53 0 165] 
#[0 5 57 0 165] 
#[0 5 61 0 1] 
#[1 0 43 0 1 0 238 0 2 2 229 0 3 2 233 0 4 2 237 0 5 0 238 0 6 2 241 0 7 2 245 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 24 0 238 0 44 0 238 0 58 0 238 0 59 0 238 0 60 0 238 0 63 0 238 0 65 0 238 0 73 0 238 0 75 0 238 0 76 0 238 0 77 0 238 0 78 0 47 0 80 0 238 0 83 0 238 0 88 0 238 0 90 0 51 0 91 0 238 0 92 0 238 0 95 0 238 0 104 3 45 0 105 0 238 0 108 0 238 0 115 0 238 0 116 0 238 0 117 0 55 0 119 0 238 0 120 0 238 0 124 0 238 0 127 0 238 0 130 0 238 0 134 0 238 0 138 0 238 0 150 0 238 0 152 0 238 0 153 0 238 0 158 0 238 0 159 0 238 0 160 0 238 0 164 0 238 0 165 0 238 0 169 0 238 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 65 1 3 5 65 1 4 5 65 1 8 5 65 1 9 1 97 1 12] 
#[0 0 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 0 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 69 1 3 5 69 1 4 5 69 1 8 5 69 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 73 1 3 5 73 1 4 5 73 1 8 5 73 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 5 77 0 26 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 5 81 0 94 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 5 85 0 143 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 89 1 3 5 89 1 4 5 89 1 8 5 89 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 93 1 3 5 93 1 4 5 93 1 8 5 93 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 97 1 3 5 97 1 4 5 97 1 8 5 97 1 9 1 97 1 12] 
#[1 0 250 0 1 0 250 0 2 0 250 0 3 0 250 0 4 0 250 0 5 0 250 0 6 0 250 0 7 5 101 0 8 0 250 0 9 0 250 0 10 0 250 0 11 0 250 0 12 0 250 0 13 0 250 0 14 0 250 0 15 0 250 0 16 0 250 0 19 0 250 0 20 0 250 0 21 0 250 0 24 0 250 0 44 0 250 0 58 0 250 0 59 0 250 0 60 0 250 0 63 0 250 0 65 0 250 0 73 0 250 0 75 0 250 0 76 0 250 0 77 0 250 0 78 0 250 0 80 0 250 0 81 0 250 0 83 0 250 0 88 0 250 0 90 0 250 0 91 0 250 0 92 0 250 0 95 0 250 0 96 0 250 0 104 0 250 0 105 0 250 0 108 0 250 0 110 0 250 0 115 0 250 0 116 0 250 0 117 0 250 0 119 0 250 0 120 0 250 0 124 0 250 0 127 0 250 0 130 0 250 0 134 0 250 0 138 0 250 0 150 0 250 0 152 0 250 0 153 0 250 0 158 0 250 0 159 0 250 0 160 0 250 0 164 0 250 0 165 0 250 0 169 5 105 1 10 0 250 1 15] 
#[0 5 109 0 168] 
#[0 0 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 1 2 0 1 1 2 0 2 5 113 0 8 1 2 0 10 1 2 0 14 1 2 0 21 1 2 0 25 1 2 0 29 1 2 0 30 1 2 0 34 1 2 0 39 1 2 0 48 1 2 0 49 1 2 0 50 1 2 0 56 1 2 0 65 1 2 0 71 1 2 0 86 1 2 0 87 1 2 0 88 1 2 0 104 1 2 0 113 1 2 0 114 1 2 0 125 1 2 0 135 1 2 0 139 1 2 0 140 1 2 0 150 1 2 0 155 1 2 0 156 1 2 1 15] 
#[0 1 6 0 3 0 165] 
#[1 4 185 0 25 4 185 0 29 4 185 0 30 5 117 0 32 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 5 121 0 74 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 5 125 0 141 4 185 0 155 4 185 0 156 5 129 0 203 4 181 0 207 4 185 0 208] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 133 1 3 5 133 1 4 5 133 1 8 5 133 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 137 1 3 5 137 1 4 5 137 1 8 5 137 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 141 1 3 5 141 1 4 5 141 1 8 5 141 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 145 1 3 5 145 1 4 5 145 1 8 5 145 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 149 1 3 5 149 1 4 5 149 1 8 5 149 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 153 1 3 5 153 1 4 5 153 1 8 5 153 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 157 1 3 5 157 1 4 5 157 1 8 5 157 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 161 1 3 5 161 1 4 5 161 1 8 5 161 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 165 1 3 5 165 1 4 5 165 1 8 5 165 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 169 1 3 5 169 1 4 5 169 1 8 5 169 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 173 1 3 5 173 1 4 5 173 1 8 5 173 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 177 1 3 5 177 1 4 5 177 1 8 5 177 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 181 1 3 5 181 1 4 5 181 1 8 5 181 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 185 1 3 5 185 1 4 5 185 1 8 5 185 1 9 1 97 1 12] 
#[0 5 189 0 112] 
#[1 5 193 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 197 1 3 5 197 1 4 5 197 1 8 5 197 1 9 1 97 1 12] 
#[1 5 201 0 81 5 205 0 110 5 209 0 111] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 213 1 3 5 213 1 4 5 213 1 8 5 213 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 217 1 3 5 217 1 4 5 217 1 8 5 217 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 221 1 3 5 221 1 4 5 221 1 8 5 221 1 9 1 97 1 12] 
#[1 5 225 0 24 5 229 0 81 5 233 0 96] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 237 1 3 5 237 1 4 5 237 1 8 5 237 1 9 1 97 1 12] 
#[0 5 241 0 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 245 1 3 5 245 1 4 5 245 1 8 5 245 1 9 1 97 1 12] 
#[1 0 233 0 1 5 249 0 2 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 5 253 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 1 10 0 1 0 3 0 5 0 6 0 7 0 31 0 33 0 42 0 48 0 68 0 69 0 89 0 110 0 111 0 136 0 139 0 140 0 144 0 145 0 146 0 147 0 163 0 165 0 166 0 167 0 168 0 169] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 6 1 0 6 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 5 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 6 9 0 165] 
#[0 1 14 0 2 0 6 0 10 0 65 0 73 0 75 0 77 0 78 0 88 0 90 0 104 0 117 0 120 0 124 0 130 0 150 0 159 0 160 0 169 1 15] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164 1 18 1 15] 
#[1 6 13 0 65 6 17 0 88 6 21 0 104 6 25 0 150] 
#[0 6 29 0 62] 
#[0 1 22 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 21 0 1 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 6 33 0 176 6 33 0 177 6 33 0 178 6 33 0 181 6 33 0 194 6 33 0 197 6 33 0 198 6 33 0 199 6 33 0 209 6 33 0 210 6 33 0 211 6 33 0 214 6 33 0 215 6 33 0 218 6 33 0 219 6 33 0 220 6 33 0 221 6 33 0 222 6 33 0 223 6 33 0 224 6 33 0 225 0 229 0 226] 
#[0 6 37 0 169] 
#[1 0 10 0 165 1 221 0 247 6 41 0 251] 
#[1 6 45 0 1 1 26 0 21 6 49 0 200] 
#[1 0 10 0 165 1 221 0 247 6 53 0 251] 
#[1 1 30 0 1 1 30 0 6 6 57 0 182] 
#[0 6 61 0 1] 
#[1 3 133 0 1 0 109 0 131 0 113 0 132 0 129 0 160 0 10 0 165 6 65 0 226 3 141 0 245 1 185 0 247] 
#[1 6 69 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 6 73 0 44 3 157 0 76 6 77 0 83 6 81 0 92 6 85 0 95 6 89 0 127] 
#[1 1 34 0 2 1 34 0 10 6 93 0 19 3 153 0 44 1 34 0 65 3 157 0 76 3 161 0 83 1 34 0 88 3 165 0 92 3 169 0 95 1 34 0 104 3 173 0 127 1 34 0 150 3 177 0 159 6 97 0 252 1 34 1 15] 
#[0 1 38 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 6 101 0 92] 
#[1 1 42 0 92 6 109 0 118 6 109 0 248] 
#[0 6 113 0 92] 
#[1 1 173 0 1 0 10 0 165 6 117 0 245 1 185 0 247] 
#[1 1 42 0 92 6 121 0 118 6 121 0 248] 
#[1 1 42 0 92 6 125 0 118 6 125 0 248] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 129 1 3 6 129 1 4 6 129 1 8 6 129 1 9 1 97 1 12] 
#[0 1 46 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 1 50 0 2 1 50 0 6 5 113 0 8 1 50 0 10 1 50 0 19 6 133 0 21 1 50 0 44 1 50 0 65 1 50 0 73 1 50 0 76 1 50 0 77 1 50 0 78 1 50 0 83 1 50 0 88 1 50 0 92 1 50 0 95 1 50 0 104 1 50 0 115 1 50 0 117 1 50 0 120 1 50 0 124 1 50 0 127 1 50 0 134 1 50 0 150 1 50 0 153 1 50 0 159 6 137 0 165 1 50 0 169 1 50 1 15] 
#[1 1 54 0 2 1 54 0 10 6 141 0 19 3 153 0 44 1 54 0 65 3 157 0 76 3 161 0 83 1 54 0 88 3 165 0 92 3 169 0 95 1 54 0 104 3 173 0 127 1 54 0 150 3 177 0 159 6 145 0 252 1 54 1 15] 
#[0 1 58 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 1 62 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 1 66 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 149 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 153 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 6 157 0 1 0 109 0 131 0 113 0 132 6 161 0 154 0 129 0 160 6 165 0 226] 
#[1 1 70 0 1 1 70 0 2 1 70 0 6 5 113 0 8 1 70 0 10 1 70 0 21 1 70 0 62 1 70 0 65 1 70 0 73 1 70 0 75 1 70 0 88 1 70 0 104 1 70 0 131 1 70 0 132 1 70 0 134 1 70 0 150 1 70 0 154 1 70 0 160 1 70 0 165 1 70 0 168 1 70 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 169 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 6 173 0 1] 
#[1 6 177 0 1 0 109 0 131 0 113 0 132 6 181 0 154 0 129 0 160 6 185 0 226] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 189 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 6 193 0 1] 
#[0 6 197 0 73] 
#[0 6 201 0 165] 
#[0 6 205 0 73] 
#[0 6 209 0 165] 
#[1 3 153 0 44 3 157 0 76 3 161 0 83 3 165 0 92 3 169 0 95 3 173 0 127 6 213 0 153] 
#[1 1 173 0 1 0 10 0 165 6 217 0 245 1 185 0 247] 
#[0 6 221 0 75] 
#[0 6 225 0 169] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 6 229 0 227 6 229 0 242 3 77 1 1 0 202 1 15] 
#[0 6 233 0 169] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 6 237 0 227 6 237 0 242 3 77 1 1 0 202 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 6 241 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 6 245 0 1] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 7 1 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[0 1 82 0 2 0 10 0 65 0 73 0 75 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 7 13 0 169] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 7 17 0 227 7 17 0 242 3 77 1 1 0 202 1 15] 
#[0 7 21 0 169] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 7 25 0 227 7 25 0 242 3 77 1 1 0 202 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 29 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 7 33 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 37 1 3 7 37 1 4 7 37 1 8 7 37 1 9 1 97 1 12] 
#[0 7 41 0 165] 
#[1 1 173 0 1 0 10 0 165 7 45 0 244 7 49 0 245 1 185 0 247] 
#[1 1 57 0 165 7 53 0 212 7 57 0 213 7 61 1 9] 
#[0 7 65 0 134] 
#[1 7 69 0 2 4 189 0 6] 
#[1 4 185 0 25 4 185 0 29 4 185 0 30 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 4 185 0 155 4 185 0 156 7 73 0 203 4 181 0 207 4 185 0 208] 
#[0 1 86 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 90 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 94 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 98 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 102 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 106 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 110 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 114 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 7 77 0 122] 
#[0 1 118 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 122 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 126 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 130 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 134 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 138 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 142 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 146 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 150 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 154 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 158 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 1 162 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 0 63 0 1 1 166 0 2 1 166 0 6 1 166 0 23 1 166 0 27 1 166 0 32 1 166 0 35 1 166 0 36 1 166 0 37 1 166 0 40 1 166 0 41 1 166 0 43 1 166 0 47 1 166 0 52 1 166 0 53 1 166 0 57 1 166 0 59 1 166 0 64 1 166 0 66 1 166 0 67 1 166 0 74 1 166 0 79 1 166 0 84 1 166 0 85 1 166 0 98 1 166 0 99 1 166 0 102 1 166 0 110 1 166 0 128 1 166 0 131 1 166 0 132 1 166 0 134 1 166 0 152 1 166 0 153 1 166 0 160 7 85 0 204 7 89 0 205] 
#[0 1 170 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 2 53 0 165 7 93 0 217] 
#[0 1 174 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 21 0 1 4 201 0 6 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 7 97 0 176 7 97 0 177 7 97 0 178 7 97 0 181 7 97 0 194 7 97 0 197 7 97 0 198 7 97 0 199 7 97 0 209 7 97 0 210 7 97 0 211 7 97 0 214 7 97 0 215 7 97 0 218 7 97 0 219 7 97 0 220 7 97 0 221 7 97 0 222 7 97 0 223 7 97 0 224 7 97 0 225 0 229 0 226] 
#[1 0 10 0 165 7 101 0 237 1 165 0 247 2 77 1 12] 
#[0 1 178 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 105 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 7 109 0 1] 
#[1 0 21 0 1 0 214 0 2 0 214 0 10 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 7 113 0 176 7 113 0 177 7 113 0 178 7 113 0 181 7 113 0 194 7 113 0 197 7 113 0 198 7 113 0 199 7 113 0 209 7 113 0 210 7 113 0 211 7 113 0 214 7 113 0 215 7 113 0 218 7 113 0 219 7 113 0 220 7 113 0 221 7 113 0 222 7 113 0 223 7 113 0 224 7 113 0 225 0 229 0 226 0 214 1 15] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 7 117 0 226] 
#[1 1 182 0 2 1 182 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 1 182 1 15] 
#[0 1 186 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 1 190 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 1 194 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 7 121 0 239] 
#[0 1 198 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 7 125 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[0 1 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 1 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 129 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 7 133 0 138 3 65 0 164] 
#[1 5 17 0 58 7 137 0 59 2 125 0 158 7 141 1 5 5 29 1 7] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 145 1 3 7 145 1 4 7 145 1 8 7 145 1 9 1 97 1 12] 
#[0 1 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 149 0 59] 
#[0 1 214 0 58 0 59 0 158] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 7 153 0 21 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 157 1 3 7 157 1 4 7 157 1 8 7 157 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 7 161 1 3 7 161 1 4 7 161 1 8 7 161 1 9 1 97 1 12] 
#[1 2 225 0 1 7 165 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 7 169 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[0 7 173 0 75] 
#[0 1 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 7 177 0 226] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 7 181 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 7 185 0 75 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 7 189 0 153 3 65 0 164] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 7 193 0 153 3 65 0 164] 
#[1 7 197 0 75 7 201 0 168] 
#[1 7 205 0 75 7 209 0 168] 
#[1 7 213 0 75 7 217 0 168] 
#[1 2 225 0 1 7 221 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 7 225 0 21 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 7 229 0 117 3 61 0 119 3 65 0 164 7 233 0 255] 
#[1 7 237 0 165 7 241 0 168] 
#[0 1 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 1 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 1 230 0 3 0 165] 
#[0 7 245 0 2] 
#[0 7 249 0 168] 
#[0 7 253 0 168] 
#[1 8 1 0 2 8 5 0 6] 
#[1 0 67 0 1 1 234 0 2 1 234 0 3 2 233 0 4 1 234 0 5 1 234 0 6 1 234 0 7 1 234 0 9 1 234 0 10 1 234 0 11 1 234 0 12 1 234 0 13 1 234 0 14 1 234 0 15 1 234 0 16 1 234 0 19 1 234 0 20 1 234 0 21 1 234 0 24 1 234 0 44 1 234 0 58 1 234 0 59 1 234 0 60 1 234 0 63 1 234 0 65 1 234 0 73 1 234 0 75 1 234 0 76 1 234 0 77 1 234 0 78 0 71 0 80 1 234 0 81 1 234 0 83 1 234 0 88 1 234 0 90 0 75 0 91 1 234 0 92 1 234 0 95 1 234 0 96 1 234 0 104 1 234 0 105 1 234 0 108 1 234 0 110 1 234 0 115 1 234 0 116 1 234 0 117 0 79 0 119 1 234 0 120 1 234 0 124 1 234 0 127 1 234 0 130 1 234 0 134 1 234 0 138 1 234 0 150 1 234 0 152 1 234 0 153 1 234 0 158 1 234 0 159 1 234 0 160 1 234 0 164 1 234 0 165 1 234 0 169 1 234 1 15] 
#[1 0 83 0 1 1 238 0 2 1 238 0 3 2 233 0 4 1 238 0 5 1 238 0 6 1 238 0 7 1 238 0 9 1 238 0 10 1 238 0 11 1 238 0 12 1 238 0 13 1 238 0 14 1 238 0 15 1 238 0 16 1 238 0 19 1 238 0 20 1 238 0 21 1 238 0 24 1 238 0 44 1 238 0 58 1 238 0 59 1 238 0 60 1 238 0 63 1 238 0 65 1 238 0 73 1 238 0 75 1 238 0 76 1 238 0 77 1 238 0 78 0 87 0 80 1 238 0 81 1 238 0 83 1 238 0 88 1 238 0 90 0 91 0 91 1 238 0 92 1 238 0 95 1 238 0 96 1 238 0 104 1 238 0 105 1 238 0 108 1 238 0 110 1 238 0 115 1 238 0 116 1 238 0 117 0 95 0 119 1 238 0 120 1 238 0 124 1 238 0 127 1 238 0 130 1 238 0 134 1 238 0 138 1 238 0 150 1 238 0 152 1 238 0 153 1 238 0 158 1 238 0 159 1 238 0 160 1 238 0 164 1 238 0 165 1 238 0 169 1 238 1 15] 
#[1 0 99 0 1 1 242 0 2 2 229 0 3 2 233 0 4 1 242 0 5 1 242 0 6 1 242 0 7 2 245 0 9 1 242 0 10 1 242 0 11 1 242 0 12 1 242 0 13 1 242 0 14 1 242 0 15 1 242 0 16 1 242 0 19 1 242 0 20 1 242 0 21 1 242 0 24 1 242 0 44 1 242 0 58 1 242 0 59 1 242 0 60 1 242 0 63 1 242 0 65 1 242 0 73 1 242 0 75 1 242 0 76 1 242 0 77 1 242 0 78 0 103 0 80 1 242 0 81 1 242 0 83 1 242 0 88 1 242 0 90 0 107 0 91 1 242 0 92 1 242 0 95 1 242 0 96 1 242 0 104 3 45 0 105 1 242 0 108 1 242 0 110 1 242 0 115 1 242 0 116 1 242 0 117 0 111 0 119 1 242 0 120 1 242 0 124 1 242 0 127 1 242 0 130 1 242 0 134 1 242 0 138 1 242 0 150 1 242 0 152 1 242 0 153 1 242 0 158 1 242 0 159 1 242 0 160 1 242 0 164 1 242 0 165 1 242 0 169 1 242 1 15] 
#[1 0 115 0 1 1 246 0 2 2 229 0 3 2 233 0 4 1 246 0 5 1 246 0 6 1 246 0 7 2 245 0 9 1 246 0 10 1 246 0 11 1 246 0 12 1 246 0 13 1 246 0 14 1 246 0 15 1 246 0 16 1 246 0 19 1 246 0 20 1 246 0 21 1 246 0 24 1 246 0 44 1 246 0 58 1 246 0 59 1 246 0 60 1 246 0 63 1 246 0 65 1 246 0 73 1 246 0 75 1 246 0 76 1 246 0 77 1 246 0 78 0 119 0 80 1 246 0 81 1 246 0 83 1 246 0 88 1 246 0 90 0 123 0 91 1 246 0 92 1 246 0 95 1 246 0 96 1 246 0 104 3 45 0 105 1 246 0 108 1 246 0 110 1 246 0 115 1 246 0 116 1 246 0 117 0 127 0 119 1 246 0 120 1 246 0 124 1 246 0 127 1 246 0 130 1 246 0 134 1 246 0 138 1 246 0 150 1 246 0 152 1 246 0 153 1 246 0 158 1 246 0 159 1 246 0 160 1 246 0 164 1 246 0 165 1 246 0 169 1 246 1 15] 
#[1 0 131 0 1 1 250 0 2 1 250 0 3 2 233 0 4 1 250 0 5 1 250 0 6 1 250 0 7 1 250 0 9 1 250 0 10 1 250 0 11 1 250 0 12 1 250 0 13 1 250 0 14 1 250 0 15 1 250 0 16 1 250 0 19 1 250 0 20 1 250 0 21 1 250 0 24 1 250 0 44 1 250 0 58 1 250 0 59 1 250 0 60 1 250 0 63 1 250 0 65 1 250 0 73 1 250 0 75 1 250 0 76 1 250 0 77 1 250 0 78 0 135 0 80 1 250 0 81 1 250 0 83 1 250 0 88 1 250 0 90 0 139 0 91 1 250 0 92 1 250 0 95 1 250 0 96 1 250 0 104 1 250 0 105 1 250 0 108 1 250 0 110 1 250 0 115 1 250 0 116 1 250 0 117 0 143 0 119 1 250 0 120 1 250 0 124 1 250 0 127 1 250 0 130 1 250 0 134 1 250 0 138 1 250 0 150 1 250 0 152 1 250 0 153 1 250 0 158 1 250 0 159 1 250 0 160 1 250 0 164 1 250 0 165 1 250 0 169 1 250 1 15] 
#[1 0 147 0 1 1 254 0 2 2 229 0 3 2 233 0 4 2 237 0 5 1 254 0 6 2 241 0 7 2 245 0 9 1 254 0 10 1 254 0 19 1 254 0 20 1 254 0 21 1 254 0 44 1 254 0 58 1 254 0 59 1 254 0 63 1 254 0 65 1 254 0 73 1 254 0 75 1 254 0 76 1 254 0 77 1 254 0 78 0 151 0 80 3 33 0 81 1 254 0 83 1 254 0 88 1 254 0 90 0 155 0 91 1 254 0 92 1 254 0 95 3 41 0 96 1 254 0 104 3 45 0 105 3 53 0 110 1 254 0 115 1 254 0 116 1 254 0 117 0 159 0 119 1 254 0 120 1 254 0 124 1 254 0 127 1 254 0 130 1 254 0 134 1 254 0 138 1 254 0 150 1 254 0 152 1 254 0 153 1 254 0 158 1 254 0 159 1 254 0 160 3 65 0 164 1 254 0 165 1 254 0 169 1 254 1 15] 
#[1 0 163 0 1 2 2 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 2 0 6 2 241 0 7 2 245 0 9 2 2 0 10 2 2 0 19 2 2 0 20 2 2 0 21 2 2 0 44 2 2 0 58 2 2 0 59 2 2 0 63 2 2 0 65 2 2 0 73 2 2 0 75 2 2 0 76 2 2 0 77 2 2 0 78 0 167 0 80 3 33 0 81 2 2 0 83 2 2 0 88 2 2 0 90 0 171 0 91 2 2 0 92 2 2 0 95 3 41 0 96 2 2 0 104 3 45 0 105 3 53 0 110 2 2 0 115 2 2 0 116 2 2 0 117 0 175 0 119 2 2 0 120 2 2 0 124 2 2 0 127 2 2 0 130 2 2 0 134 2 2 0 138 2 2 0 150 2 2 0 152 2 2 0 153 2 2 0 158 2 2 0 159 2 2 0 160 3 65 0 164 2 2 0 165 2 2 0 169 2 2 1 15] 
#[1 0 179 0 1 2 6 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 6 0 6 2 241 0 7 2 245 0 9 2 6 0 10 2 6 0 19 2 6 0 20 2 6 0 21 2 6 0 44 2 6 0 58 2 6 0 59 2 6 0 63 2 6 0 65 2 6 0 73 2 6 0 75 2 6 0 76 2 6 0 77 2 6 0 78 0 183 0 80 3 33 0 81 2 6 0 83 2 6 0 88 2 6 0 90 0 187 0 91 2 6 0 92 2 6 0 95 3 41 0 96 2 6 0 104 3 45 0 105 3 53 0 110 2 6 0 115 2 6 0 116 2 6 0 117 0 191 0 119 2 6 0 120 2 6 0 124 2 6 0 127 2 6 0 130 2 6 0 134 2 6 0 138 2 6 0 150 2 6 0 152 2 6 0 153 2 6 0 158 2 6 0 159 2 6 0 160 3 65 0 164 2 6 0 165 2 6 0 169 2 6 1 15] 
#[1 0 195 0 1 2 10 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 10 0 6 2 241 0 7 2 245 0 9 2 10 0 10 2 10 0 19 2 10 0 20 2 10 0 21 2 10 0 44 2 10 0 58 2 10 0 59 2 10 0 63 2 10 0 65 2 10 0 73 2 10 0 75 2 10 0 76 2 10 0 77 2 10 0 78 0 199 0 80 3 33 0 81 2 10 0 83 2 10 0 88 2 10 0 90 0 203 0 91 2 10 0 92 2 10 0 95 3 41 0 96 2 10 0 104 3 45 0 105 3 53 0 110 2 10 0 115 2 10 0 116 2 10 0 117 0 207 0 119 2 10 0 120 2 10 0 124 2 10 0 127 2 10 0 130 2 10 0 134 2 10 0 138 2 10 0 150 2 10 0 152 2 10 0 153 2 10 0 158 2 10 0 159 2 10 0 160 3 65 0 164 2 10 0 165 2 10 0 169 2 10 1 15] 
#[1 0 211 0 1 2 14 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 14 0 6 2 241 0 7 2 245 0 9 2 14 0 10 2 14 0 19 2 14 0 20 2 14 0 21 2 14 0 44 2 14 0 58 2 14 0 59 2 14 0 63 2 14 0 65 2 14 0 73 2 14 0 75 2 14 0 76 2 14 0 77 2 14 0 78 0 215 0 80 3 33 0 81 2 14 0 83 2 14 0 88 2 14 0 90 0 219 0 91 2 14 0 92 2 14 0 95 3 41 0 96 2 14 0 104 3 45 0 105 3 53 0 110 2 14 0 115 2 14 0 116 2 14 0 117 0 223 0 119 2 14 0 120 2 14 0 124 2 14 0 127 2 14 0 130 2 14 0 134 2 14 0 138 2 14 0 150 2 14 0 152 2 14 0 153 2 14 0 158 2 14 0 159 2 14 0 160 3 65 0 164 2 14 0 165 2 14 0 169 2 14 1 15] 
#[1 0 227 0 1 2 18 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 18 0 6 2 241 0 7 2 245 0 9 2 18 0 10 2 18 0 19 2 18 0 20 2 18 0 21 2 18 0 44 2 18 0 58 2 18 0 59 2 18 0 63 2 18 0 65 2 18 0 73 2 18 0 75 2 18 0 76 2 18 0 77 2 18 0 78 0 231 0 80 3 33 0 81 2 18 0 83 2 18 0 88 2 18 0 90 0 235 0 91 2 18 0 92 2 18 0 95 3 41 0 96 2 18 0 104 3 45 0 105 3 53 0 110 2 18 0 115 2 18 0 116 2 18 0 117 0 239 0 119 2 18 0 120 2 18 0 124 2 18 0 127 2 18 0 130 2 18 0 134 2 18 0 138 2 18 0 150 2 18 0 152 2 18 0 153 2 18 0 158 2 18 0 159 2 18 0 160 3 65 0 164 2 18 0 165 2 18 0 169 2 18 1 15] 
#[1 0 243 0 1 2 22 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 22 0 6 2 241 0 7 2 245 0 9 2 22 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 2 22 0 19 2 22 0 20 2 22 0 21 3 21 0 24 2 22 0 44 2 22 0 58 2 22 0 59 3 25 0 60 2 22 0 63 2 22 0 65 2 22 0 73 2 22 0 75 2 22 0 76 2 22 0 77 2 22 0 78 0 247 0 80 3 33 0 81 2 22 0 83 2 22 0 88 2 22 0 90 0 251 0 91 2 22 0 92 2 22 0 95 3 41 0 96 2 22 0 104 3 45 0 105 3 49 0 108 3 53 0 110 2 22 0 115 2 22 0 116 2 22 0 117 0 255 0 119 2 22 0 120 2 22 0 124 2 22 0 127 2 22 0 130 2 22 0 134 2 22 0 138 2 22 0 150 2 22 0 152 2 22 0 153 2 22 0 158 2 22 0 159 2 22 0 160 3 65 0 164 2 22 0 165 2 22 0 169 2 22 1 15] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 8 9 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 1 3 0 1 2 26 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 26 0 6 2 241 0 7 2 245 0 9 2 26 0 10 2 26 0 19 2 26 0 20 2 26 0 21 2 26 0 44 2 26 0 58 2 26 0 59 2 26 0 63 2 26 0 65 2 26 0 73 2 26 0 75 2 26 0 76 2 26 0 77 2 26 0 78 1 7 0 80 3 33 0 81 2 26 0 83 2 26 0 88 2 26 0 90 1 11 0 91 2 26 0 92 2 26 0 95 3 41 0 96 2 26 0 104 3 45 0 105 3 53 0 110 2 26 0 115 2 26 0 116 2 26 0 117 1 15 0 119 2 26 0 120 2 26 0 124 2 26 0 127 2 26 0 130 2 26 0 134 2 26 0 138 2 26 0 150 2 26 0 152 2 26 0 153 2 26 0 158 2 26 0 159 2 26 0 160 3 65 0 164 2 26 0 165 2 26 0 169 2 26 1 15] 
#[0 2 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 8 13 0 226 1 77 0 247 8 17 1 3 8 17 1 4 8 17 1 8 8 17 1 9 1 97 1 12] 
#[1 1 19 0 1 2 34 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 34 0 6 2 241 0 7 2 245 0 9 2 34 0 10 2 34 0 11 2 34 0 12 2 34 0 13 2 34 0 14 2 34 0 15 2 34 0 16 2 34 0 19 2 34 0 20 2 34 0 21 2 34 0 24 2 34 0 44 2 34 0 58 2 34 0 59 2 34 0 60 2 34 0 63 2 34 0 65 2 34 0 73 2 34 0 75 2 34 0 76 2 34 0 77 2 34 0 78 1 23 0 80 2 34 0 83 2 34 0 88 2 34 0 90 1 27 0 91 2 34 0 92 2 34 0 95 2 34 0 104 3 45 0 105 2 34 0 108 2 34 0 115 2 34 0 116 2 34 0 117 1 31 0 119 2 34 0 120 2 34 0 124 2 34 0 127 2 34 0 130 2 34 0 134 2 34 0 138 2 34 0 150 2 34 0 152 2 34 0 153 2 34 0 158 2 34 0 159 2 34 0 160 2 34 0 164 2 34 0 165 2 34 0 169 2 34 1 15] 
#[1 8 21 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 25 1 3 8 25 1 4 8 25 1 8 8 25 1 9 1 97 1 12] 
#[1 8 29 0 81 8 33 0 111] 
#[0 2 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 1 35 0 1 2 42 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 42 0 6 2 241 0 7 2 245 0 9 2 42 0 10 2 42 0 11 2 42 0 12 2 42 0 13 2 42 0 14 2 42 0 15 2 42 0 16 2 42 0 19 2 42 0 20 2 42 0 21 2 42 0 24 2 42 0 44 2 42 0 58 2 42 0 59 2 42 0 60 1 39 0 63 2 42 0 65 2 42 0 73 2 42 0 75 2 42 0 76 2 42 0 77 2 42 0 78 1 43 0 80 2 42 0 83 2 42 0 88 2 42 0 90 1 47 0 91 2 42 0 92 2 42 0 95 2 42 0 104 3 45 0 105 2 42 0 108 2 42 0 115 2 42 0 116 2 42 0 117 1 51 0 119 2 42 0 120 2 42 0 124 2 42 0 127 2 42 0 130 2 42 0 134 2 42 0 138 2 42 0 150 2 42 0 152 2 42 0 153 2 42 0 158 2 42 0 159 2 42 0 160 2 42 0 164 2 42 0 165 2 42 0 169 2 42 1 15] 
#[1 1 55 0 1 2 46 0 2 2 46 0 3 2 233 0 4 2 46 0 5 2 46 0 6 2 46 0 7 2 46 0 9 2 46 0 10 2 46 0 11 2 46 0 12 2 46 0 13 2 46 0 14 2 46 0 15 2 46 0 16 2 46 0 19 2 46 0 20 2 46 0 21 2 46 0 24 2 46 0 44 2 46 0 58 2 46 0 59 2 46 0 60 2 46 0 63 2 46 0 65 2 46 0 73 2 46 0 75 2 46 0 76 2 46 0 77 2 46 0 78 1 59 0 80 2 46 0 81 2 46 0 83 2 46 0 88 2 46 0 90 1 63 0 91 2 46 0 92 2 46 0 95 2 46 0 96 2 46 0 104 2 46 0 105 2 46 0 108 2 46 0 110 2 46 0 115 2 46 0 116 2 46 0 117 1 67 0 119 2 46 0 120 2 46 0 124 2 46 0 127 2 46 0 130 2 46 0 134 2 46 0 138 2 46 0 150 2 46 0 152 2 46 0 153 2 46 0 158 2 46 0 159 2 46 0 160 2 46 0 164 2 46 0 165 2 46 0 169 2 46 1 15] 
#[1 1 71 0 1 2 50 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 50 0 6 2 241 0 7 2 245 0 9 2 50 0 10 2 50 0 19 2 50 0 20 2 50 0 21 2 50 0 44 2 50 0 58 2 50 0 59 2 50 0 63 2 50 0 65 2 50 0 73 2 50 0 75 2 50 0 76 2 50 0 77 2 50 0 78 1 75 0 80 3 33 0 81 2 50 0 83 2 50 0 88 2 50 0 90 1 79 0 91 2 50 0 92 2 50 0 95 3 41 0 96 2 50 0 104 3 45 0 105 3 53 0 110 2 50 0 115 2 50 0 116 2 50 0 117 1 83 0 119 2 50 0 120 2 50 0 124 2 50 0 127 2 50 0 130 2 50 0 134 2 50 0 138 2 50 0 150 2 50 0 152 2 50 0 153 2 50 0 158 2 50 0 159 2 50 0 160 3 65 0 164 2 50 0 165 2 50 0 169 2 50 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 41 1 3 8 41 1 4 8 41 1 8 8 41 1 9 1 97 1 12] 
#[1 8 45 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 49 1 3 8 49 1 4 8 49 1 8 8 49 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 53 1 3 8 53 1 4 8 53 1 8 8 53 1 9 1 97 1 12] 
#[1 1 87 0 1 2 54 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 54 0 6 2 241 0 7 2 245 0 9 2 54 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 2 54 0 19 3 17 0 20 2 54 0 21 3 21 0 24 2 54 0 44 2 54 0 58 2 54 0 59 3 25 0 60 2 54 0 63 2 54 0 65 2 54 0 73 2 54 0 75 2 54 0 76 2 54 0 77 2 54 0 78 1 91 0 80 3 33 0 81 2 54 0 83 2 54 0 88 2 54 0 90 1 95 0 91 2 54 0 92 2 54 0 95 3 41 0 96 2 54 0 104 3 45 0 105 3 49 0 108 3 53 0 110 2 54 0 115 2 54 0 116 2 54 0 117 1 99 0 119 2 54 0 120 2 54 0 124 2 54 0 127 2 54 0 130 2 54 0 134 2 54 0 138 2 54 0 150 2 54 0 152 2 54 0 153 2 54 0 158 2 54 0 159 2 54 0 160 3 65 0 164 2 54 0 165 2 54 0 169 2 54 1 15] 
#[1 8 57 0 2 7 229 0 117 8 61 0 120 8 65 0 130 8 69 0 241 8 73 0 255] 
#[1 1 103 0 1 2 58 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 58 0 6 2 241 0 7 2 245 0 9 2 58 0 10 2 58 0 11 2 58 0 12 2 58 0 13 2 58 0 14 2 58 0 15 2 58 0 16 2 58 0 19 2 58 0 20 2 58 0 21 2 58 0 24 2 58 0 44 2 58 0 58 2 58 0 59 2 58 0 60 2 58 0 63 2 58 0 65 2 58 0 73 2 58 0 75 2 58 0 76 2 58 0 77 2 58 0 78 1 107 0 80 3 33 0 81 2 58 0 83 2 58 0 88 2 58 0 90 1 111 0 91 2 58 0 92 2 58 0 95 3 41 0 96 2 58 0 104 3 45 0 105 2 58 0 108 3 53 0 110 2 58 0 115 2 58 0 116 2 58 0 117 1 115 0 119 2 58 0 120 2 58 0 124 2 58 0 127 2 58 0 130 2 58 0 134 2 58 0 138 2 58 0 150 2 58 0 152 2 58 0 153 2 58 0 158 2 58 0 159 2 58 0 160 2 58 0 164 2 58 0 165 2 58 0 169 2 58 1 15] 
#[0 2 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 8 77 0 2 3 73 0 6 3 77 1 1] 
#[0 2 66 0 1 0 3 0 5 0 6 0 7 0 31 0 33 0 42 0 48 0 68 0 69 0 89 0 110 0 111 0 136 0 139 0 140 0 144 0 145 0 146 0 147 0 163 0 165 0 166 0 167 0 168 0 169] 
#[0 2 70 0 2 0 6 0 10 0 65 0 73 0 75 0 77 0 78 0 88 0 90 0 104 0 117 0 120 0 124 0 130 0 150 0 159 0 160 0 169 1 15] 
#[0 2 74 0 2 0 6 0 10 0 65 0 73 0 75 0 77 0 78 0 88 0 90 0 104 0 117 0 120 0 124 0 130 0 150 0 159 0 160 0 169 1 15] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 8 81 0 239] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 8 85 0 239] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 8 89 0 239] 
#[1 4 221 0 1 8 93 0 19 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 8 97 0 239] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 101 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 2 78 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 2 82 0 2 2 82 0 10 8 105 0 59 2 82 0 65 2 82 0 88 2 82 0 104 2 82 0 150 2 82 1 15] 
#[0 8 109 0 168] 
#[1 0 10 0 165 8 113 0 201 8 117 0 202 1 165 0 247 8 121 1 12] 
#[0 8 125 0 21] 
#[1 1 30 0 1 1 30 0 6 8 129 0 182] 
#[1 8 133 0 1 8 137 0 6 8 141 0 183] 
#[0 8 145 0 165] 
#[1 8 149 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 2 86 0 2 2 86 0 6 2 86 0 10 2 86 0 19 8 153 0 21 2 86 0 44 2 86 0 65 2 86 0 73 2 86 0 76 2 86 0 77 2 86 0 78 2 86 0 83 2 86 0 88 2 86 0 92 2 86 0 95 2 86 0 104 2 86 0 115 2 86 0 117 2 86 0 120 2 86 0 124 2 86 0 127 2 86 0 134 2 86 0 150 2 86 0 153 2 86 0 159 8 157 0 165 2 86 0 169 2 86 1 15] 
#[0 8 161 0 92] 
#[0 8 165 0 92] 
#[1 1 173 0 1 0 10 0 165 8 169 0 245 1 185 0 247] 
#[1 1 42 0 92 8 173 0 118 8 173 0 248] 
#[1 1 42 0 92 8 177 0 118 8 177 0 248] 
#[0 2 90 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 2 94 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 1 173 0 1 0 10 0 165 8 181 0 245 1 185 0 247] 
#[0 2 98 0 92] 
#[0 8 185 0 92] 
#[1 1 173 0 1 0 10 0 165 8 189 0 245 1 185 0 247] 
#[1 2 102 0 2 2 102 0 6 2 102 0 10 2 102 0 19 1 119 0 44 2 102 0 65 2 102 0 73 1 123 0 76 2 102 0 77 2 102 0 78 1 127 0 83 2 102 0 88 1 131 0 92 1 135 0 95 2 102 0 104 1 139 0 115 2 102 0 117 2 102 0 120 2 102 0 124 1 143 0 127 2 102 0 134 2 102 0 150 2 102 0 153 2 102 0 159 2 102 0 169 8 197 0 249 8 201 0 250 2 102 1 15] 
#[0 8 205 0 92] 
#[0 8 209 0 92] 
#[1 2 225 0 1 2 106 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 106 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 2 106 0 58 3 25 0 60 2 106 0 65 2 106 0 73 2 106 0 77 2 106 0 78 3 29 0 80 3 33 0 81 2 106 0 88 3 37 0 91 3 41 0 96 2 106 0 104 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 2 106 0 117 3 61 0 119 2 106 0 120 2 106 0 124 2 106 0 150 2 106 0 159 3 65 0 164 2 106 0 169 2 106 1 15] 
#[0 8 213 0 165] 
#[0 2 110 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 2 114 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 2 118 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 8 217 0 2 3 73 0 6 3 77 1 1] 
#[1 8 221 0 2 3 73 0 6 3 77 1 1] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 129 0 226 1 77 0 247 8 225 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 8 229 0 1] 
#[1 2 122 0 2 2 122 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 2 122 1 15] 
#[1 8 233 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 237 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 129 0 226 1 77 0 247 8 241 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 8 245 0 1] 
#[1 2 126 0 2 2 126 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 2 126 1 15] 
#[1 8 249 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 8 253 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 9 1 0 165] 
#[1 0 21 0 1 2 130 0 2 2 130 0 10 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 2 130 0 65 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 2 130 0 88 0 93 0 98 0 97 0 99 0 101 0 102 2 130 0 104 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 2 130 0 150 0 121 0 152 0 125 0 153 0 129 0 160 9 5 0 176 9 5 0 177 9 5 0 178 9 5 0 181 9 5 0 194 9 5 0 197 9 5 0 198 9 5 0 199 9 5 0 209 9 5 0 210 9 5 0 211 9 5 0 214 9 5 0 215 9 5 0 218 9 5 0 219 9 5 0 220 9 5 0 221 9 5 0 222 9 5 0 223 9 5 0 224 9 5 0 225 0 229 0 226 2 130 1 15] 
#[0 9 9 0 165] 
#[1 0 21 0 1 2 134 0 2 2 134 0 10 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 2 134 0 65 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 2 134 0 88 0 93 0 98 0 97 0 99 0 101 0 102 2 134 0 104 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 2 134 0 150 0 121 0 152 0 125 0 153 0 129 0 160 9 13 0 176 9 13 0 177 9 13 0 178 9 13 0 181 9 13 0 194 9 13 0 197 9 13 0 198 9 13 0 199 9 13 0 209 9 13 0 210 9 13 0 211 9 13 0 214 9 13 0 215 9 13 0 218 9 13 0 219 9 13 0 220 9 13 0 221 9 13 0 222 9 13 0 223 9 13 0 224 9 13 0 225 0 229 0 226 2 134 1 15] 
#[1 1 173 0 1 0 10 0 165 9 17 0 245 1 185 0 247] 
#[1 3 153 0 44 3 157 0 76 3 161 0 83 3 165 0 92 3 169 0 95 9 21 0 115 3 173 0 127] 
#[1 1 173 0 1 0 10 0 165 9 25 0 244 7 49 0 245 1 185 0 247] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 9 29 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 9 33 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 9 37 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 9 41 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 9 45 0 227 9 45 0 242 3 77 1 1 0 202 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 9 49 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 1 173 0 1 0 10 0 165 9 53 0 244 7 49 0 245 1 185 0 247] 
#[0 2 138 0 2 0 10 0 65 0 73 0 88 0 104 0 150 0 169 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 9 65 0 231 2 142 1 15] 
#[1 2 146 0 2 2 146 0 10 2 146 0 65 2 146 0 73 9 69 0 77 9 73 0 78 2 146 0 88 2 146 0 104 7 229 0 117 8 61 0 120 9 77 0 124 2 146 0 150 3 177 0 159 2 146 0 169 9 81 0 235 9 85 0 238 9 89 0 240 9 93 0 241 9 97 0 252 9 101 0 253 9 105 0 255 2 146 1 15] 
#[1 1 74 0 2 1 74 0 10 1 74 0 65 1 74 0 73 1 74 0 77 1 74 0 78 1 74 0 88 1 74 0 104 1 74 0 117 1 74 0 120 1 74 0 124 1 74 0 150 1 74 0 159 1 74 0 169 9 109 0 234 1 74 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 9 113 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 9 117 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 9 121 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 9 125 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 9 129 0 227 9 129 0 242 3 77 1 1 0 202 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 9 133 0 231 2 142 1 15] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 9 137 0 73 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 9 141 0 152 3 65 0 164] 
#[0 9 145 0 134] 
#[1 9 149 0 6 9 153 0 134] 
#[1 2 150 0 2 2 150 0 6 2 150 0 10 3 153 0 44 2 150 0 65 2 150 0 73 3 157 0 76 2 150 0 77 2 150 0 78 3 161 0 83 2 150 0 88 3 165 0 92 3 169 0 95 2 150 0 104 2 150 0 117 2 150 0 120 2 150 0 124 3 173 0 127 2 150 0 134 2 150 0 150 2 150 0 159 2 150 0 169 2 150 1 15] 
#[1 2 154 0 2 9 157 0 6 2 154 0 10 9 161 0 58 2 154 0 65 2 154 0 88 2 154 0 104 2 154 0 150 3 177 0 159 9 165 0 252 2 154 1 15] 
#[0 2 158 0 2 0 6 0 10 0 58 0 65 0 88 0 104 0 150 0 158 0 159 1 15] 
#[0 9 169 0 14] 
#[1 1 57 0 165 9 173 0 212 7 57 0 213 7 61 1 9] 
#[1 0 21 0 1 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 9 177 0 176 9 177 0 177 9 177 0 178 9 177 0 181 9 177 0 194 9 177 0 197 9 177 0 198 9 177 0 199 9 177 0 209 9 177 0 210 9 177 0 211 9 177 0 214 9 177 0 215 9 177 0 218 9 177 0 219 9 177 0 220 9 177 0 221 9 177 0 222 9 177 0 223 9 177 0 224 9 177 0 225 0 229 0 226] 
#[0 9 181 0 2] 
#[0 2 162 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 9 185 0 169] 
#[0 2 166 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 2 170 0 1 2 170 0 2 2 170 0 6 2 170 0 23 2 170 0 27 9 189 0 32 9 193 0 35 2 170 0 36 2 170 0 37 2 170 0 40 9 197 0 41 2 170 0 43 2 170 0 47 2 170 0 52 2 170 0 53 2 170 0 57 2 170 0 59 2 170 0 64 2 170 0 66 2 170 0 67 1 147 0 74 2 170 0 79 2 170 0 84 2 170 0 85 2 170 0 98 2 170 0 99 2 170 0 102 9 205 0 110 2 170 0 128 2 170 0 131 2 170 0 132 2 170 0 134 2 170 0 152 2 170 0 153 2 170 0 160 9 209 0 206] 
#[0 2 174 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 2 178 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 2 182 0 1 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 9 213 0 2 3 73 0 6 3 77 1 1] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 9 217 0 226] 
#[0 2 186 0 2 0 10 1 15] 
#[1 9 221 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[0 2 190 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 1 202 0 1 1 202 0 2 1 202 0 3 1 202 0 4 1 202 0 5 1 202 0 6 1 202 0 7 1 202 0 9 1 202 0 11 1 202 0 12 1 202 0 13 1 202 0 14 1 202 0 15 1 202 0 16 1 202 0 20 1 202 0 21 1 202 0 24 1 202 0 60 6 13 0 65 1 202 0 80 1 202 0 81 6 17 0 88 1 202 0 91 1 202 0 96 6 21 0 104 1 202 0 105 1 202 0 108 1 202 0 110 1 202 0 116 1 202 0 119 6 25 0 150 1 202 0 164 1 202 0 165] 
#[1 9 225 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 9 229 1 3 9 229 1 4 9 229 1 8 9 229 1 9 1 97 1 12] 
#[0 2 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 9 233 0 59] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 2 198 0 59 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 2 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 9 237 0 2 4 185 0 25 4 185 0 29 4 185 0 30 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 9 241 0 74 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 4 185 0 155 4 185 0 156 9 245 0 203 4 181 0 207 4 185 0 208] 
#[1 2 225 0 1 9 249 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 225 0 1 9 253 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 2 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 2 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 1 1 3 10 1 1 4 10 1 1 8 10 1 1 9 1 97 1 12] 
#[1 10 5 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 9 1 3 10 9 1 4 10 9 1 8 10 9 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 13 1 3 10 13 1 4 10 13 1 8 10 13 1 9 1 97 1 12] 
#[0 10 17 0 165] 
#[0 10 21 0 165] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 25 1 3 10 25 1 4 10 25 1 8 10 25 1 9 1 97 1 12] 
#[0 10 29 0 75] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 33 1 3 10 33 1 4 10 33 1 8 10 33 1 9 1 97 1 12] 
#[0 10 37 0 75] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 41 1 3 10 41 1 4 10 41 1 8 10 41 1 9 1 97 1 12] 
#[0 10 45 0 75] 
#[0 2 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 10 49 0 2 4 185 0 25 4 185 0 29 4 185 0 30 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 10 53 0 74 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 4 185 0 155 4 185 0 156 10 57 0 203 4 181 0 207 4 185 0 208] 
#[0 10 61 0 28] 
#[0 10 65 0 2] 
#[0 2 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 2 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 2 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 10 69 0 2] 
#[0 10 73 0 2] 
#[0 2 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 10 77 0 74] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 81 1 3 10 81 1 4 10 81 1 8 10 81 1 9 1 97 1 12] 
#[1 10 85 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 2 225 0 1 5 1 0 2 2 229 0 3 2 233 0 4 2 237 0 5 10 89 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 2 109 0 226 1 77 0 247 10 93 1 3 10 93 1 4 10 93 1 8 10 93 1 9 1 97 1 12] 
#[1 1 151 0 1 2 234 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 234 0 6 2 241 0 7 2 245 0 9 2 234 0 10 2 234 0 11 2 234 0 12 2 234 0 13 2 234 0 14 2 234 0 15 2 234 0 16 2 234 0 19 2 234 0 20 2 234 0 21 2 234 0 24 2 234 0 44 2 234 0 58 2 234 0 59 2 234 0 60 2 234 0 63 2 234 0 65 2 234 0 73 2 234 0 75 2 234 0 76 2 234 0 77 2 234 0 78 1 155 0 80 2 234 0 83 2 234 0 88 2 234 0 90 1 159 0 91 2 234 0 92 2 234 0 95 2 234 0 104 3 45 0 105 2 234 0 108 2 234 0 115 2 234 0 116 2 234 0 117 1 163 0 119 2 234 0 120 2 234 0 124 2 234 0 127 2 234 0 130 2 234 0 134 2 234 0 138 2 234 0 150 2 234 0 152 2 234 0 153 2 234 0 158 2 234 0 159 2 234 0 160 2 234 0 164 2 234 0 165 2 234 0 169 2 234 1 15] 
#[1 10 97 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 101 1 3 10 101 1 4 10 101 1 8 10 101 1 9 1 97 1 12] 
#[0 2 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 105 1 3 10 105 1 4 10 105 1 8 10 105 1 9 1 97 1 12] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 10 109 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 10 113 0 226 1 77 0 247 10 117 1 3 10 117 1 4 10 117 1 8 10 117 1 9 1 97 1 12] 
#[1 1 167 0 1 2 242 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 242 0 6 2 241 0 7 2 245 0 9 2 242 0 10 2 242 0 11 2 242 0 12 2 242 0 13 2 242 0 14 2 242 0 15 2 242 0 16 2 242 0 19 2 242 0 20 2 242 0 21 2 242 0 24 2 242 0 44 2 242 0 58 2 242 0 59 2 242 0 60 2 242 0 63 2 242 0 65 2 242 0 73 2 242 0 75 2 242 0 76 2 242 0 77 2 242 0 78 1 171 0 80 2 242 0 83 2 242 0 88 2 242 0 90 1 175 0 91 2 242 0 92 2 242 0 95 2 242 0 104 3 45 0 105 2 242 0 108 2 242 0 115 2 242 0 116 2 242 0 117 1 179 0 119 2 242 0 120 2 242 0 124 2 242 0 127 2 242 0 130 2 242 0 134 2 242 0 138 2 242 0 150 2 242 0 152 2 242 0 153 2 242 0 158 2 242 0 159 2 242 0 160 2 242 0 164 2 242 0 165 2 242 0 169 2 242 1 15] 
#[1 1 183 0 1 2 246 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 246 0 6 2 241 0 7 2 245 0 9 2 246 0 10 2 246 0 11 2 246 0 12 2 246 0 13 2 246 0 14 2 246 0 15 2 246 0 16 2 246 0 19 2 246 0 20 2 246 0 21 2 246 0 24 2 246 0 44 2 246 0 58 2 246 0 59 2 246 0 60 1 187 0 63 2 246 0 65 2 246 0 73 2 246 0 75 2 246 0 76 2 246 0 77 2 246 0 78 1 191 0 80 2 246 0 83 2 246 0 88 2 246 0 90 1 195 0 91 2 246 0 92 2 246 0 95 2 246 0 104 3 45 0 105 2 246 0 108 2 246 0 115 2 246 0 116 2 246 0 117 1 199 0 119 2 246 0 120 2 246 0 124 2 246 0 127 2 246 0 130 2 246 0 134 2 246 0 138 2 246 0 150 2 246 0 152 2 246 0 153 2 246 0 158 2 246 0 159 2 246 0 160 2 246 0 164 2 246 0 165 2 246 0 169 2 246 1 15] 
#[0 2 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 10 125 0 28] 
#[0 10 129 0 24] 
#[1 10 133 0 2 7 229 0 117 10 137 0 130 10 141 0 255] 
#[1 10 145 0 2 10 149 0 130] 
#[0 2 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 3 2 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 6 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 10 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 4 221 0 1 0 109 0 131 0 113 0 132 0 129 0 160 4 225 0 226 10 153 0 239] 
#[0 3 14 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 3 73 0 6 10 157 0 160 3 77 1 1] 
#[0 3 18 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 22 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 10 161 0 2 10 165 0 6] 
#[0 3 26 0 2 0 6] 
#[1 4 185 0 25 4 185 0 29 4 185 0 30 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 4 185 0 155 4 185 0 156 10 169 0 203 4 181 0 207 4 185 0 208] 
#[0 10 173 0 1] 
#[1 10 177 0 1 8 137 0 6 8 141 0 183] 
#[1 10 181 0 165 10 185 0 190 10 189 0 193] 
#[1 10 193 0 38 10 197 0 51 10 201 0 109] 
#[0 3 30 0 1 0 6] 
#[1 3 34 0 2 3 34 0 6 10 205 0 180] 
#[1 8 153 0 21 2 86 0 44 6 13 0 65 2 86 0 76 2 86 0 83 6 17 0 88 2 86 0 92 2 86 0 95 6 21 0 104 2 86 0 127 6 25 0 150 8 157 0 165] 
#[0 10 209 0 165] 
#[0 3 38 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 1 173 0 1 0 10 0 165 10 213 0 245 1 185 0 247] 
#[1 1 173 0 1 0 10 0 165 10 217 0 245 1 185 0 247] 
#[1 2 102 0 2 1 119 0 44 1 123 0 76 1 127 0 83 1 131 0 92 1 135 0 95 8 193 0 115 1 143 0 127 8 197 0 249 10 221 0 250] 
#[0 10 225 0 92] 
#[0 10 229 0 92] 
#[1 2 102 0 2 2 102 0 6 2 102 0 10 2 102 0 19 1 119 0 44 2 102 0 65 2 102 0 73 1 123 0 76 2 102 0 77 2 102 0 78 1 127 0 83 2 102 0 88 1 131 0 92 1 135 0 95 2 102 0 104 1 139 0 115 2 102 0 117 2 102 0 120 2 102 0 124 1 143 0 127 2 102 0 134 2 102 0 150 2 102 0 153 2 102 0 159 2 102 0 169 8 197 0 249 10 233 0 250 2 102 1 15] 
#[1 1 173 0 1 0 10 0 165 10 237 0 245 1 185 0 247] 
#[1 2 102 0 2 2 102 0 6 2 102 0 10 2 102 0 19 1 119 0 44 2 102 0 65 2 102 0 73 1 123 0 76 2 102 0 77 2 102 0 78 1 127 0 83 2 102 0 88 1 131 0 92 1 135 0 95 2 102 0 104 1 139 0 115 2 102 0 117 2 102 0 120 2 102 0 124 1 143 0 127 2 102 0 134 2 102 0 150 2 102 0 153 2 102 0 159 2 102 0 169 8 197 0 249 10 241 0 250 2 102 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 10 245 1 3 10 245 1 4 10 245 1 8 10 245 1 9 1 97 1 12] 
#[0 3 42 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 3 46 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 1 173 0 1 0 10 0 165 10 249 0 245 1 185 0 247] 
#[1 1 173 0 1 0 10 0 165 10 253 0 245 1 185 0 247] 
#[0 3 50 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 3 54 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 58 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 11 1 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 11 5 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 11 9 0 154] 
#[1 11 13 0 2 3 73 0 6 3 77 1 1] 
#[1 11 17 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 11 21 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 11 25 0 154] 
#[1 11 29 0 2 3 73 0 6 3 77 1 1] 
#[1 0 21 0 1 3 62 0 2 3 62 0 10 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 3 62 0 65 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 3 62 0 88 0 93 0 98 0 97 0 99 0 101 0 102 3 62 0 104 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 3 62 0 150 0 121 0 152 0 125 0 153 0 129 0 160 11 33 0 176 11 33 0 177 11 33 0 178 11 33 0 181 11 33 0 194 11 33 0 197 11 33 0 198 11 33 0 199 11 33 0 209 11 33 0 210 11 33 0 211 11 33 0 214 11 33 0 215 11 33 0 218 11 33 0 219 11 33 0 220 11 33 0 221 11 33 0 222 11 33 0 223 11 33 0 224 11 33 0 225 0 229 0 226 3 62 1 15] 
#[0 3 66 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 21 0 1 3 70 0 2 3 70 0 10 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 3 70 0 65 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 3 70 0 88 0 93 0 98 0 97 0 99 0 101 0 102 3 70 0 104 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 3 70 0 150 0 121 0 152 0 125 0 153 0 129 0 160 11 37 0 176 11 37 0 177 11 37 0 178 11 37 0 181 11 37 0 194 11 37 0 197 11 37 0 198 11 37 0 199 11 37 0 209 11 37 0 210 11 37 0 211 11 37 0 214 11 37 0 215 11 37 0 218 11 37 0 219 11 37 0 220 11 37 0 221 11 37 0 222 11 37 0 223 11 37 0 224 11 37 0 225 0 229 0 226 3 70 1 15] 
#[0 3 74 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 3 153 0 44 3 157 0 76 3 161 0 83 3 165 0 92 3 169 0 95 11 41 0 115 3 173 0 127] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 11 45 1 3 11 45 1 4 11 45 1 8 11 45 1 9 1 97 1 12] 
#[1 9 149 0 6 3 177 0 159 11 49 0 252] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 11 53 0 227 11 53 0 242 3 77 1 1 0 202 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 11 57 0 231 2 142 1 15] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 11 61 0 227 11 61 0 242 3 77 1 1 0 202 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 11 65 0 231 2 142 1 15] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 11 69 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 11 73 0 2 3 73 0 6 3 77 1 1] 
#[1 3 78 0 2 9 149 0 6 3 78 0 10 3 78 0 65 3 78 0 73 3 78 0 77 3 78 0 78 3 78 0 88 3 78 0 104 3 78 0 117 3 78 0 120 3 78 0 124 3 78 0 150 3 78 0 159 3 78 0 169 3 78 1 15] 
#[0 11 77 0 46] 
#[0 3 82 0 2 0 10 0 65 0 88 0 104 0 150 0 169 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 11 89 0 169 11 89 0 232 11 89 0 233 3 86 1 15] 
#[0 11 93 0 28] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 11 97 1 3 11 97 1 4 11 97 1 8 11 97 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 11 101 1 3 11 101 1 4 11 101 1 8 11 101 1 9 1 97 1 12] 
#[0 3 90 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 3 94 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 3 98 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 3 102 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 3 106 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 3 110 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 3 114 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[1 3 118 0 2 3 118 0 10 3 118 0 65 3 118 0 73 9 69 0 77 9 73 0 78 3 118 0 88 3 118 0 104 7 229 0 117 8 61 0 120 9 77 0 124 3 118 0 150 3 177 0 159 3 118 0 169 9 81 0 235 9 85 0 238 9 89 0 240 9 93 0 241 9 97 0 252 9 101 0 253 9 105 0 255 3 118 1 15] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 11 105 0 227 11 105 0 242 3 77 1 1 0 202 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 11 109 0 231 2 142 1 15] 
#[1 0 202 0 2 3 73 0 6 0 202 0 10 0 202 0 65 0 202 0 73 0 202 0 75 0 202 0 77 0 202 0 78 0 202 0 88 4 33 0 90 0 202 0 104 0 202 0 117 0 202 0 120 0 202 0 124 0 202 0 150 0 202 0 159 0 202 0 169 11 113 0 227 11 113 0 242 3 77 1 1 0 202 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 11 117 0 231 2 142 1 15] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 11 121 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 11 125 0 169 11 125 0 232 11 125 0 233 3 86 1 15] 
#[0 11 129 0 133] 
#[0 11 133 0 73] 
#[1 1 57 0 165 11 137 0 212 7 57 0 213 7 61 1 9] 
#[1 1 173 0 1 0 10 0 165 11 141 0 245 1 185 0 247] 
#[1 1 57 0 165 11 145 0 212 7 57 0 213 7 61 1 9] 
#[1 1 57 0 165 11 149 0 213 7 61 1 9] 
#[1 0 85 0 84 0 89 0 85 0 121 0 152 11 153 0 211 11 157 0 214] 
#[1 3 122 0 2 3 122 0 10 11 161 0 58 3 122 0 65 3 122 0 88 3 122 0 104 3 122 0 150 3 122 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 11 165 1 3 11 165 1 4 11 165 1 8 11 165 1 9 1 97 1 12] 
#[1 3 126 0 2 9 157 0 6 3 126 0 10 11 169 0 58 3 126 0 65 3 126 0 88 3 126 0 104 3 126 0 150 3 177 0 159 11 173 0 252 3 126 1 15] 
#[0 3 130 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 134 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 11 177 0 2 11 181 0 6] 
#[0 3 138 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 11 185 0 134] 
#[0 11 189 0 168] 
#[0 11 193 0 168] 
#[0 11 197 0 111] 
#[0 3 142 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 11 201 0 21] 
#[1 11 205 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 6 13 0 65 6 17 0 88 6 21 0 104 7 229 0 117 6 25 0 150 11 209 0 255] 
#[1 11 213 0 81 11 217 0 110] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 146 0 58 3 146 0 59 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 146 0 158 3 65 0 164] 
#[0 3 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 3 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 11 221 0 168] 
#[1 11 225 0 2 11 229 0 74] 
#[0 3 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 3 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 225 0 1 11 233 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 1 203 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 225 0 1 11 237 0 2 2 229 0 3 2 233 0 4 2 237 0 5 11 241 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 225 0 1 11 245 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 11 249 0 73 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 11 253 0 2 12 1 0 160] 
#[1 12 5 0 2 12 9 0 160] 
#[1 2 225 0 1 12 13 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 17 1 3 12 17 1 4 12 17 1 8 12 17 1 9 1 97 1 12] 
#[1 2 225 0 1 12 21 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 25 1 3 12 25 1 4 12 25 1 8 12 25 1 9 1 97 1 12] 
#[1 2 225 0 1 12 29 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 33 1 3 12 33 1 4 12 33 1 8 12 33 1 9 1 97 1 12] 
#[0 3 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 12 37 0 168] 
#[1 12 41 0 2 12 45 0 74] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 49 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 3 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 3 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 3 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 12 53 0 168] 
#[1 1 207 0 1 3 186 0 2 1 211 0 3 1 215 0 4 1 219 0 5 3 186 0 6 1 223 0 7 1 227 0 9 3 186 0 10 1 231 0 11 1 235 0 12 1 239 0 13 1 243 0 14 1 247 0 15 1 251 0 16 3 186 0 19 1 255 0 20 3 186 0 21 2 3 0 24 3 186 0 44 3 186 0 58 3 186 0 59 2 7 0 60 3 186 0 63 3 186 0 65 3 186 0 73 3 186 0 75 3 186 0 76 3 186 0 77 3 186 0 78 2 11 0 80 2 15 0 81 3 186 0 83 3 186 0 88 3 186 0 90 2 19 0 91 3 186 0 92 3 186 0 95 2 23 0 96 3 186 0 104 2 27 0 105 2 31 0 108 2 35 0 110 3 186 0 115 2 39 0 116 3 186 0 117 2 43 0 119 3 186 0 120 3 186 0 124 3 186 0 127 3 186 0 130 3 186 0 134 3 186 0 138 3 186 0 150 3 186 0 152 3 186 0 153 3 186 0 158 3 186 0 159 3 186 0 160 2 47 0 164 3 186 0 165 3 186 0 169 3 186 1 15] 
#[0 2 51 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 57 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 225 0 1 5 1 0 2 2 229 0 3 2 233 0 4 2 237 0 5 12 61 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 105 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 2 109 0 226 1 77 0 247 12 65 1 3 12 65 1 4 12 65 1 8 12 65 1 9 1 97 1 12] 
#[1 2 55 0 1 3 194 0 2 2 229 0 3 2 233 0 4 2 237 0 5 3 194 0 6 2 241 0 7 2 245 0 9 3 194 0 10 3 194 0 11 3 194 0 12 3 194 0 13 3 194 0 14 3 194 0 15 3 194 0 16 3 194 0 19 3 194 0 20 3 194 0 21 3 194 0 24 3 194 0 44 3 194 0 58 3 194 0 59 3 194 0 60 3 194 0 63 3 194 0 65 3 194 0 73 3 194 0 75 3 194 0 76 3 194 0 77 3 194 0 78 2 59 0 80 3 194 0 83 3 194 0 88 3 194 0 90 2 63 0 91 3 194 0 92 3 194 0 95 3 194 0 104 3 45 0 105 3 194 0 108 3 194 0 115 3 194 0 116 3 194 0 117 2 67 0 119 3 194 0 120 3 194 0 124 3 194 0 127 3 194 0 130 3 194 0 134 3 194 0 138 3 194 0 150 3 194 0 152 3 194 0 153 3 194 0 158 3 194 0 159 3 194 0 160 3 194 0 164 3 194 0 165 3 194 0 169 3 194 1 15] 
#[1 2 71 0 1 3 198 0 2 2 229 0 3 2 233 0 4 2 237 0 5 3 198 0 6 2 241 0 7 2 245 0 9 3 198 0 10 3 198 0 11 3 198 0 12 3 198 0 13 3 198 0 14 3 198 0 15 3 198 0 16 3 198 0 19 3 198 0 20 3 198 0 21 3 198 0 24 3 198 0 44 3 198 0 58 3 198 0 59 3 198 0 60 3 198 0 63 3 198 0 65 3 198 0 73 3 198 0 75 3 198 0 76 3 198 0 77 3 198 0 78 2 75 0 80 3 198 0 83 3 198 0 88 3 198 0 90 2 79 0 91 3 198 0 92 3 198 0 95 3 198 0 104 3 45 0 105 3 198 0 108 3 198 0 115 3 198 0 116 3 198 0 117 2 83 0 119 3 198 0 120 3 198 0 124 3 198 0 127 3 198 0 130 3 198 0 134 3 198 0 138 3 198 0 150 3 198 0 152 3 198 0 153 3 198 0 158 3 198 0 159 3 198 0 160 3 198 0 164 3 198 0 165 3 198 0 169 3 198 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 69 1 3 12 69 1 4 12 69 1 8 12 69 1 9 1 97 1 12] 
#[1 12 73 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 2 225 0 1 5 1 0 2 2 229 0 3 2 233 0 4 2 237 0 5 12 77 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 81 1 3 12 81 1 4 12 81 1 8 12 81 1 9 1 97 1 12] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 85 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 12 89 0 45 12 93 0 149 12 97 0 169] 
#[0 3 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 12 101 0 24] 
#[1 12 105 0 2 12 109 0 130] 
#[0 3 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 12 113 0 24] 
#[0 3 210 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 12 117 0 89] 
#[0 3 214 0 21] 
#[1 0 10 0 165 12 121 0 202 1 165 0 247 8 121 1 12] 
#[0 3 218 0 2 0 6] 
#[1 0 21 0 1 0 25 0 23 0 29 0 27 0 33 0 36 0 37 0 37 0 41 0 40 0 45 0 43 0 49 0 47 0 53 0 52 0 57 0 53 0 61 0 57 0 65 0 59 0 69 0 64 0 73 0 66 0 77 0 67 0 81 0 79 0 85 0 84 0 89 0 85 0 93 0 98 0 97 0 99 0 101 0 102 0 105 0 128 0 109 0 131 0 113 0 132 0 117 0 134 0 121 0 152 0 125 0 153 0 129 0 160 12 125 0 175 0 145 0 176 0 145 0 177 0 145 0 178 0 145 0 181 0 145 0 194 0 145 0 197 0 145 0 198 0 145 0 199 0 145 0 209 0 145 0 210 0 145 0 211 0 145 0 214 0 145 0 215 0 145 0 218 0 145 0 219 0 145 0 220 0 145 0 221 0 145 0 222 0 145 0 223 0 145 0 224 0 145 0 225 0 229 0 226] 
#[1 10 181 0 165 12 129 0 190 10 189 0 193] 
#[1 4 185 0 25 4 185 0 29 4 185 0 30 4 185 0 34 4 185 0 39 4 185 0 48 4 185 0 49 4 185 0 50 4 129 0 56 4 185 0 71 4 185 0 86 4 185 0 87 4 185 0 113 4 185 0 114 4 185 0 125 4 185 0 135 4 185 0 139 4 185 0 140 4 185 0 155 4 185 0 156 12 133 0 203 4 181 0 207 4 185 0 208] 
#[0 12 137 0 2] 
#[1 3 222 0 2 3 222 0 6 12 141 0 192] 
#[0 12 145 0 14] 
#[0 12 149 0 103] 
#[1 12 153 0 18 12 157 0 22 12 161 0 70] 
#[1 12 165 0 2 12 169 0 6 12 173 0 179] 
#[0 3 226 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 2 102 0 2 1 119 0 44 1 123 0 76 1 127 0 83 1 131 0 92 1 135 0 95 8 193 0 115 1 143 0 127 8 197 0 249 12 177 0 250] 
#[1 2 102 0 2 1 119 0 44 1 123 0 76 1 127 0 83 1 131 0 92 1 135 0 95 8 193 0 115 1 143 0 127 8 197 0 249 12 181 0 250] 
#[1 12 185 0 2 3 46 0 44 3 46 0 76 3 46 0 83 3 46 0 92 3 46 0 95 3 46 0 127] 
#[1 1 173 0 1 0 10 0 165 12 189 0 245 1 185 0 247] 
#[1 1 173 0 1 0 10 0 165 12 193 0 245 1 185 0 247] 
#[0 3 230 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 2 102 0 2 2 102 0 6 2 102 0 10 2 102 0 19 1 119 0 44 2 102 0 65 2 102 0 73 1 123 0 76 2 102 0 77 2 102 0 78 1 127 0 83 2 102 0 88 1 131 0 92 1 135 0 95 2 102 0 104 1 139 0 115 2 102 0 117 2 102 0 120 2 102 0 124 1 143 0 127 2 102 0 134 2 102 0 150 2 102 0 153 2 102 0 159 2 102 0 169 8 197 0 249 12 197 0 250 2 102 1 15] 
#[0 3 234 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 2 225 0 1 3 238 0 2 2 229 0 3 2 233 0 4 2 237 0 5 3 238 0 6 2 241 0 7 2 245 0 9 3 238 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 238 0 19 3 17 0 20 3 21 0 24 3 238 0 44 3 25 0 60 3 238 0 65 3 238 0 73 3 238 0 76 3 238 0 77 3 238 0 78 3 29 0 80 3 33 0 81 3 238 0 83 3 238 0 88 3 37 0 91 3 238 0 92 3 238 0 95 3 41 0 96 3 238 0 104 3 45 0 105 3 49 0 108 3 53 0 110 3 238 0 115 3 57 0 116 3 238 0 117 3 61 0 119 3 238 0 120 3 238 0 124 3 238 0 127 3 238 0 134 3 238 0 150 3 238 0 153 3 238 0 159 3 65 0 164 3 238 0 169 3 238 1 15] 
#[1 2 102 0 2 2 102 0 6 2 102 0 10 2 102 0 19 1 119 0 44 2 102 0 65 2 102 0 73 1 123 0 76 2 102 0 77 2 102 0 78 1 127 0 83 2 102 0 88 1 131 0 92 1 135 0 95 2 102 0 104 1 139 0 115 2 102 0 117 2 102 0 120 2 102 0 124 1 143 0 127 2 102 0 134 2 102 0 150 2 102 0 153 2 102 0 159 2 102 0 169 8 197 0 249 12 201 0 250 2 102 1 15] 
#[1 2 102 0 2 2 102 0 6 2 102 0 10 2 102 0 19 1 119 0 44 2 102 0 65 2 102 0 73 1 123 0 76 2 102 0 77 2 102 0 78 1 127 0 83 2 102 0 88 1 131 0 92 1 135 0 95 2 102 0 104 1 139 0 115 2 102 0 117 2 102 0 120 2 102 0 124 1 143 0 127 2 102 0 134 2 102 0 150 2 102 0 153 2 102 0 159 2 102 0 169 8 197 0 249 12 205 0 250 2 102 1 15] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 12 209 0 154 0 129 0 160 12 213 0 226] 
#[1 12 217 0 2 3 73 0 6 3 77 1 1] 
#[0 12 221 0 1] 
#[0 3 242 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 12 225 0 154 0 129 0 160 12 229 0 226] 
#[1 12 233 0 2 3 73 0 6 3 77 1 1] 
#[0 12 237 0 1] 
#[0 3 246 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 250 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 3 254 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 12 241 1 3 12 241 1 4 12 241 1 8 12 241 1 9 1 97 1 12] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 12 245 0 158 3 65 0 164 12 249 0 195 12 253 0 196] 
#[0 4 2 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 13 1 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 13 5 0 169 13 5 0 232 13 5 0 233 3 86 1 15] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 13 9 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 13 13 0 169 13 13 0 232 13 13 0 233 3 86 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 13 17 0 231 2 142 1 15] 
#[0 4 6 0 2 0 10 0 65 0 73 0 75 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[0 4 10 0 2 0 10 0 65 0 88 0 104 0 150 0 169 1 15] 
#[0 4 14 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 4 18 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 4 22 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 13 21 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 13 25 0 254 13 29 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 225 0 1 4 26 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 4 26 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 4 26 0 65 4 26 0 73 4 26 0 77 4 26 0 78 3 29 0 80 3 33 0 81 4 26 0 88 3 37 0 91 3 41 0 96 4 26 0 104 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 4 26 0 117 3 61 0 119 4 26 0 120 4 26 0 124 4 26 0 150 4 26 0 159 3 65 0 164 4 26 0 169 4 26 1 15] 
#[1 2 225 0 1 4 30 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 4 30 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 4 30 0 65 4 30 0 73 4 30 0 77 4 30 0 78 3 29 0 80 3 33 0 81 4 30 0 88 3 37 0 91 3 41 0 96 4 30 0 104 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 4 30 0 117 3 61 0 119 4 30 0 120 4 30 0 124 4 30 0 150 4 30 0 159 3 65 0 164 4 30 0 169 4 30 1 15] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 13 33 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 13 37 0 169 13 37 0 232 13 37 0 233 3 86 1 15] 
#[1 0 59 0 2 0 59 0 10 0 59 0 65 0 59 0 73 6 249 0 75 1 74 0 77 1 74 0 78 0 59 0 88 0 59 0 104 1 74 0 117 1 74 0 120 1 74 0 124 0 59 0 150 1 74 0 159 0 59 0 169 6 253 0 228 13 41 0 229 7 5 0 234 7 9 0 243 0 59 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 13 45 0 169 13 45 0 232 13 45 0 233 3 86 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 13 49 0 231 2 142 1 15] 
#[0 4 34 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 4 38 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 13 53 0 133] 
#[1 4 42 0 2 9 157 0 6 4 42 0 10 13 57 0 58 4 42 0 65 4 42 0 88 4 42 0 104 4 42 0 150 3 177 0 159 13 61 0 252 4 42 1 15] 
#[1 4 46 0 2 4 46 0 6 4 46 0 10 3 153 0 44 4 46 0 65 4 46 0 73 3 157 0 76 4 46 0 77 4 46 0 78 3 161 0 83 4 46 0 88 3 165 0 92 3 169 0 95 4 46 0 104 4 46 0 117 4 46 0 120 4 46 0 124 3 173 0 127 4 46 0 134 4 46 0 150 4 46 0 159 4 46 0 169 4 46 1 15] 
#[1 4 50 0 2 9 157 0 6 4 50 0 10 4 50 0 65 4 50 0 88 4 50 0 104 4 50 0 150 3 177 0 159 13 65 0 252 4 50 1 15] 
#[0 4 54 0 2 0 6 0 10 0 58 0 65 0 88 0 104 0 150 0 158 0 159 1 15] 
#[0 4 58 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 4 62 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 85 0 84 0 89 0 85 0 121 0 152 13 69 0 211 13 73 0 214] 
#[1 2 225 0 1 4 66 0 2 2 229 0 3 2 233 0 4 2 237 0 5 4 66 0 6 2 241 0 7 2 245 0 9 4 66 0 10 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 4 66 0 58 3 25 0 60 4 66 0 65 3 29 0 80 3 33 0 81 4 66 0 88 3 37 0 91 3 41 0 96 4 66 0 104 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 4 66 0 150 4 66 0 158 4 66 0 159 3 65 0 164 4 66 1 15] 
#[1 0 85 0 84 0 89 0 85 0 121 0 152 13 77 0 211 13 81 0 214] 
#[1 4 70 0 2 4 70 0 10 13 85 0 58 4 70 0 65 4 70 0 88 4 70 0 104 4 70 0 150 4 70 1 15] 
#[1 1 166 0 1 1 166 0 2 1 166 0 6 1 166 0 23 1 166 0 27 1 166 0 32 1 166 0 35 1 166 0 36 1 166 0 37 1 166 0 40 1 166 0 41 1 166 0 43 1 166 0 47 1 166 0 52 1 166 0 53 1 166 0 57 1 166 0 59 1 166 0 64 1 166 0 66 1 166 0 67 1 166 0 74 1 166 0 79 1 166 0 84 1 166 0 85 1 166 0 98 1 166 0 99 1 166 0 102 1 166 0 110 1 166 0 128 1 166 0 131 1 166 0 132 1 166 0 134 1 166 0 152 1 166 0 153 1 166 0 160 13 89 0 204 7 89 0 205] 
#[0 13 93 0 169] 
#[0 13 97 0 165] 
#[0 4 74 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 4 78 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 4 82 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 13 101 0 1] 
#[0 4 86 0 1 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 4 90 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 13 105 0 1] 
#[0 13 109 0 81] 
#[0 13 113 0 2] 
#[0 4 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 13 117 0 168] 
#[0 4 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 4 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 13 121 1 3 13 121 1 4 13 121 1 8 13 121 1 9 1 97 1 12] 
#[0 4 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 13 125 1 3 13 125 1 4 13 125 1 8 13 125 1 9 1 97 1 12] 
#[0 4 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 13 129 0 61] 
#[0 4 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 13 133 0 61] 
#[0 4 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 225 0 1 13 137 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 4 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 225 0 1 13 141 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 4 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 2 225 0 1 13 145 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 13 149 0 2] 
#[0 4 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 13 153 0 168] 
#[1 4 134 0 2 3 73 0 6 4 134 0 10 4 134 0 65 4 134 0 73 4 134 0 77 4 134 0 78 4 134 0 88 4 134 0 104 4 134 0 117 4 134 0 120 4 134 0 124 4 134 0 130 4 134 0 150 4 134 0 159 4 134 0 169 3 77 1 1 4 134 1 15] 
#[0 13 157 0 2] 
#[1 13 161 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 13 165 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 225 0 1 5 1 0 2 2 229 0 3 2 233 0 4 2 237 0 5 13 169 0 6 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 87 0 1 4 138 0 2 2 91 0 3 2 95 0 4 2 99 0 5 4 138 0 6 2 103 0 7 2 107 0 9 4 138 0 10 2 111 0 11 2 115 0 12 2 119 0 13 2 123 0 14 2 127 0 15 2 131 0 16 4 138 0 19 2 135 0 20 4 138 0 21 2 139 0 24 4 138 0 44 4 138 0 58 4 138 0 59 2 143 0 60 4 138 0 63 4 138 0 65 4 138 0 73 4 138 0 75 4 138 0 76 4 138 0 77 4 138 0 78 2 147 0 80 2 151 0 81 4 138 0 83 4 138 0 88 4 138 0 90 2 155 0 91 4 138 0 92 4 138 0 95 2 159 0 96 4 138 0 104 2 163 0 105 2 167 0 108 2 171 0 110 4 138 0 115 2 175 0 116 4 138 0 117 2 179 0 119 4 138 0 120 4 138 0 124 4 138 0 127 4 138 0 130 4 138 0 134 4 138 0 138 4 138 0 150 4 138 0 152 4 138 0 153 4 138 0 158 4 138 0 159 4 138 0 160 2 183 0 164 4 138 0 165 4 138 0 169 4 138 1 15] 
#[0 2 187 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 13 173 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 191 0 1 4 146 0 2 2 229 0 3 2 233 0 4 2 237 0 5 4 146 0 6 2 241 0 7 2 245 0 9 4 146 0 10 4 146 0 11 4 146 0 12 4 146 0 13 4 146 0 14 4 146 0 15 4 146 0 16 4 146 0 19 4 146 0 20 4 146 0 21 4 146 0 24 4 146 0 44 4 146 0 58 4 146 0 59 4 146 0 60 4 146 0 63 4 146 0 65 4 146 0 73 4 146 0 75 4 146 0 76 4 146 0 77 4 146 0 78 2 195 0 80 4 146 0 83 4 146 0 88 4 146 0 90 2 199 0 91 4 146 0 92 4 146 0 95 4 146 0 104 3 45 0 105 4 146 0 108 4 146 0 115 4 146 0 116 4 146 0 117 2 203 0 119 4 146 0 120 4 146 0 124 4 146 0 127 4 146 0 130 4 146 0 134 4 146 0 138 4 146 0 150 4 146 0 152 4 146 0 153 4 146 0 158 4 146 0 159 4 146 0 160 4 146 0 164 4 146 0 165 4 146 0 169 4 146 1 15] 
#[1 4 150 0 2 2 207 0 6 4 150 0 10 4 150 0 65 4 150 0 73 4 150 0 77 4 150 0 78 4 150 0 88 4 150 0 104 4 150 0 117 4 150 0 120 4 150 0 124 4 150 0 130 4 150 0 150 4 150 0 159 4 150 0 169 3 77 1 1 4 150 1 15] 
#[0 13 177 0 129] 
#[1 13 181 0 72 13 185 0 121] 
#[1 13 189 0 72 13 193 0 121] 
#[1 13 197 0 45 13 201 0 149 13 205 0 169] 
#[0 4 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 13 209 0 24] 
#[1 13 213 0 45 13 217 0 149 13 221 0 169] 
#[0 4 158 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 4 162 0 2 0 6] 
#[1 0 6 0 2 0 6 0 10 13 225 0 174] 
#[0 13 229 0 2] 
#[0 4 166 0 2 0 6] 
#[1 4 170 0 2 4 170 0 10 4 170 0 65 13 233 0 82 4 170 0 88 4 170 0 104 13 237 0 123 4 170 0 150 13 241 0 151 13 245 0 184 13 249 0 187 4 170 1 15] 
#[1 4 174 0 2 13 253 0 6 14 1 0 191] 
#[0 14 5 0 165] 
#[0 4 178 0 1 0 6] 
#[0 14 9 0 93] 
#[0 14 13 0 93] 
#[0 4 182 0 1 0 6] 
#[0 14 17 0 21] 
#[0 14 21 0 165] 
#[0 4 186 0 2 0 6] 
#[1 14 25 0 2 3 230 0 44 3 230 0 76 3 230 0 83 3 230 0 92 3 230 0 95 3 230 0 127] 
#[1 14 29 0 2 3 234 0 44 3 234 0 76 3 234 0 83 3 234 0 92 3 234 0 95 3 234 0 127] 
#[0 4 190 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 2 102 0 2 1 119 0 44 1 123 0 76 1 127 0 83 1 131 0 92 1 135 0 95 8 193 0 115 1 143 0 127 8 197 0 249 14 33 0 250] 
#[1 2 102 0 2 1 119 0 44 1 123 0 76 1 127 0 83 1 131 0 92 1 135 0 95 8 193 0 115 1 143 0 127 8 197 0 249 14 37 0 250] 
#[0 4 194 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 4 198 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 4 202 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 14 41 0 1] 
#[1 4 206 0 2 4 206 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 4 206 1 15] 
#[0 4 210 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 14 45 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 14 49 0 1] 
#[1 4 214 0 2 4 214 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 4 214 1 15] 
#[0 4 218 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 14 53 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 2 225 0 1 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 12 245 0 158 3 65 0 164 14 57 0 195 12 253 0 196] 
#[1 14 61 0 101 14 65 0 110] 
#[1 4 222 0 2 4 222 0 10 4 222 0 65 4 222 0 88 4 222 0 104 4 222 0 150 12 245 0 158 14 69 0 196 4 222 1 15] 
#[0 4 226 0 2 0 10 0 65 0 88 0 104 0 150 0 158 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 14 73 0 231 2 142 1 15] 
#[0 4 230 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 14 77 0 231 2 142 1 15] 
#[0 4 234 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 14 81 0 169 14 81 0 232 14 81 0 233 3 86 1 15] 
#[1 2 105 0 1 14 85 0 2 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 0 109 0 131 0 113 0 132 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 0 129 0 160 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 2 109 0 226 1 77 0 247 2 113 1 3 2 113 1 4 2 113 1 8 2 113 1 9 1 97 1 12] 
#[0 4 238 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[1 4 242 0 2 3 73 0 6 4 242 0 10 4 242 0 65 4 242 0 73 4 242 0 77 4 242 0 78 4 242 0 88 4 242 0 104 4 242 0 117 4 242 0 120 4 242 0 124 4 242 0 150 4 242 0 159 4 242 0 169 3 77 1 1 4 242 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 14 89 0 231 2 142 1 15] 
#[0 4 246 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 2 142 0 2 2 142 0 10 2 142 0 65 9 57 0 73 2 142 0 88 2 142 0 104 2 142 0 150 2 142 0 169 9 61 0 230 14 93 0 231 2 142 1 15] 
#[0 4 250 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 14 97 0 169 14 97 0 232 14 97 0 233 3 86 1 15] 
#[0 4 254 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 85 0 84 0 89 0 85 0 121 0 152 14 101 0 211 14 105 0 214] 
#[1 5 2 0 2 5 2 0 10 14 109 0 58 5 2 0 65 5 2 0 88 5 2 0 104 5 2 0 150 5 2 1 15] 
#[0 5 6 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 10 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 14 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 18 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 22 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 85 0 84 0 89 0 85 0 121 0 152 14 113 0 211 14 117 0 214] 
#[0 5 26 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 14 121 0 2] 
#[0 5 30 0 1 0 2 0 6 0 23 0 27 0 32 0 35 0 36 0 37 0 40 0 41 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 110 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 14 125 0 226] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 14 129 0 226] 
#[0 14 133 0 1] 
#[0 5 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 14 137 0 2] 
#[1 2 225 0 1 14 141 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[1 2 225 0 1 14 145 0 2 2 229 0 3 2 233 0 4 2 237 0 5 2 241 0 7 2 245 0 9 2 249 0 11 2 253 0 12 3 1 0 13 3 5 0 14 3 9 0 15 3 13 0 16 3 17 0 20 3 21 0 24 3 25 0 60 3 29 0 80 3 33 0 81 3 37 0 91 3 41 0 96 3 45 0 105 3 49 0 108 3 53 0 110 3 57 0 116 3 61 0 119 3 65 0 164] 
#[0 14 149 0 2] 
#[0 14 153 0 2] 
#[0 5 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 14 157 0 2] 
#[0 5 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 14 161 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 14 165 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 14 169 0 2 3 73 0 6 3 77 1 1] 
#[0 14 173 0 20] 
#[0 14 177 0 20] 
#[0 14 181 0 20] 
#[0 14 185 0 20] 
#[0 14 189 0 20] 
#[0 14 193 0 129] 
#[1 14 197 0 72 14 201 0 121] 
#[1 14 205 0 72 14 209 0 121] 
#[1 14 213 0 45 14 217 0 149 14 221 0 169] 
#[0 14 225 0 129] 
#[1 14 229 0 72 14 233 0 121] 
#[1 14 237 0 72 14 241 0 121] 
#[1 14 245 0 2 4 217 0 10] 
#[1 4 170 0 2 4 170 0 10 4 170 0 65 13 233 0 82 4 170 0 88 4 170 0 104 13 237 0 123 4 170 0 150 13 241 0 151 14 249 0 184 13 249 0 187 4 170 1 15] 
#[0 14 253 0 165] 
#[0 15 1 0 82] 
#[1 15 5 0 82 15 9 0 123] 
#[0 5 62 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 5 66 0 2 5 66 0 6 5 66 0 10 5 66 0 65 5 66 0 88 5 66 0 104 5 66 0 150 15 13 0 186 5 66 1 15] 
#[1 10 181 0 165 15 17 0 193] 
#[0 5 70 0 2 0 6] 
#[0 5 74 0 1 0 6] 
#[0 5 78 0 1 0 6] 
#[0 5 82 0 1 0 6] 
#[1 0 21 0 1 15 21 0 99 0 109 0 131 0 113 0 132 0 129 0 160 15 25 0 226] 
#[0 5 86 0 2 0 6] 
#[0 5 90 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 5 94 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 15 29 0 2 4 198 0 44 4 198 0 76 4 198 0 83 4 198 0 92 4 198 0 95 4 198 0 127] 
#[1 15 33 0 2 4 202 0 44 4 202 0 76 4 202 0 83 4 202 0 92 4 202 0 95 4 202 0 127] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 15 37 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 15 41 0 2 3 73 0 6 3 77 1 1] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 15 45 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 15 49 0 2 3 73 0 6 3 77 1 1] 
#[1 5 98 0 2 5 98 0 10 5 98 0 65 5 98 0 88 5 98 0 104 5 98 0 150 12 245 0 158 14 69 0 196 5 98 1 15] 
#[0 15 53 0 138] 
#[0 15 57 0 101] 
#[0 5 102 0 2 0 10 0 65 0 88 0 104 0 150 0 158 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 15 61 0 169 15 61 0 232 15 61 0 233 3 86 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 15 65 0 169 15 65 0 232 15 65 0 233 3 86 1 15] 
#[0 5 106 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 110 0 2 0 10 0 65 0 73 0 77 0 78 0 88 0 104 0 117 0 120 0 124 0 150 0 159 0 169 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 15 69 0 169 15 69 0 232 15 69 0 233 3 86 1 15] 
#[1 3 86 0 2 3 86 0 10 3 86 0 65 3 86 0 88 3 86 0 104 3 86 0 150 15 73 0 169 15 73 0 232 15 73 0 233 3 86 1 15] 
#[0 5 114 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 118 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 122 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 85 0 84 0 89 0 85 0 121 0 152 15 77 0 211 15 81 0 214] 
#[0 5 126 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 130 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 1 166 0 1 1 166 0 2 1 166 0 6 1 166 0 23 1 166 0 27 1 166 0 32 1 166 0 35 1 166 0 36 1 166 0 37 1 166 0 40 1 166 0 41 1 166 0 43 1 166 0 47 1 166 0 52 1 166 0 53 1 166 0 57 1 166 0 59 1 166 0 64 1 166 0 66 1 166 0 67 1 166 0 74 1 166 0 79 1 166 0 84 1 166 0 85 1 166 0 98 1 166 0 99 1 166 0 102 1 166 0 110 1 166 0 128 1 166 0 131 1 166 0 132 1 166 0 134 1 166 0 152 1 166 0 153 1 166 0 160 15 85 0 204 7 89 0 205] 
#[1 15 89 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 15 93 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 15 97 0 226] 
#[0 5 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 5 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 15 101 0 2 3 73 0 6 3 77 1 1] 
#[0 5 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 15 105 0 45 15 109 0 149 15 113 0 169] 
#[1 15 117 0 45 15 121 0 149 15 125 0 169] 
#[1 15 129 0 45 15 133 0 149 15 137 0 169] 
#[1 15 141 0 45 15 145 0 149 15 149 0 169] 
#[1 15 153 0 45 15 157 0 149 15 161 0 169] 
#[0 15 165 0 20] 
#[0 15 169 0 20] 
#[0 15 173 0 20] 
#[0 15 177 0 20] 
#[0 15 181 0 20] 
#[0 15 185 0 129] 
#[1 15 189 0 72 15 193 0 121] 
#[1 15 197 0 72 15 201 0 121] 
#[0 15 205 0 20] 
#[0 15 209 0 20] 
#[0 15 213 0 20] 
#[0 15 217 0 20] 
#[0 15 221 0 20] 
#[0 5 166 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 170 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 15 225 0 1] 
#[0 15 229 0 165] 
#[0 15 233 0 165] 
#[0 15 237 0 82] 
#[1 5 174 0 2 15 241 0 6 5 174 0 10 5 174 0 65 5 174 0 88 5 174 0 104 5 174 0 150 15 245 0 185 5 174 1 15] 
#[0 5 178 0 2 0 6] 
#[0 15 249 0 129] 
#[1 5 182 0 2 5 182 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 5 182 1 15] 
#[0 5 186 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[0 5 190 0 2 0 6 0 10 0 19 0 44 0 65 0 73 0 76 0 77 0 78 0 83 0 88 0 92 0 95 0 104 0 115 0 117 0 120 0 124 0 127 0 134 0 150 0 153 0 159 0 169 1 15] 
#[1 15 253 0 2 3 73 0 6 3 77 1 1] 
#[0 5 194 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 16 1 0 2 3 73 0 6 3 77 1 1] 
#[0 5 198 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 16 5 0 152] 
#[0 16 9 0 138] 
#[0 5 202 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 206 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 210 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 214 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 218 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 222 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 226 0 1 0 2 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 74 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 5 230 0 1 0 6 0 23 0 27 0 36 0 37 0 40 0 43 0 47 0 52 0 53 0 57 0 59 0 64 0 66 0 67 0 79 0 84 0 85 0 98 0 99 0 102 0 128 0 131 0 132 0 134 0 152 0 153 0 160] 
#[0 5 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 16 13 0 2 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150] 
#[0 5 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 16 17 0 129] 
#[1 16 21 0 72 16 25 0 121] 
#[1 16 29 0 72 16 33 0 121] 
#[0 16 37 0 129] 
#[1 16 41 0 72 16 45 0 121] 
#[1 16 49 0 72 16 53 0 121] 
#[0 16 57 0 129] 
#[1 16 61 0 72 16 65 0 121] 
#[1 16 69 0 72 16 73 0 121] 
#[0 16 77 0 129] 
#[1 16 81 0 72 16 85 0 121] 
#[1 16 89 0 72 16 93 0 121] 
#[0 16 97 0 129] 
#[1 16 101 0 72 16 105 0 121] 
#[1 16 109 0 72 16 113 0 121] 
#[1 16 117 0 45 16 121 0 149 16 125 0 169] 
#[1 16 129 0 45 16 133 0 149 16 137 0 169] 
#[1 16 141 0 45 16 145 0 149 16 149 0 169] 
#[1 16 153 0 45 16 157 0 149 16 161 0 169] 
#[1 16 165 0 45 16 169 0 149 16 173 0 169] 
#[0 16 177 0 20] 
#[0 16 181 0 20] 
#[0 16 185 0 20] 
#[0 16 189 0 20] 
#[0 16 193 0 20] 
#[1 16 197 0 45 16 201 0 149 16 205 0 169] 
#[1 16 209 0 45 16 213 0 149 16 217 0 169] 
#[1 16 221 0 45 16 225 0 149 16 229 0 169] 
#[1 16 233 0 45 16 237 0 149 16 241 0 169] 
#[1 16 245 0 45 16 249 0 149 16 253 0 169] 
#[0 17 1 0 165] 
#[0 17 5 0 1] 
#[0 17 9 0 1] 
#[0 17 13 0 165] 
#[1 13 233 0 82 13 237 0 123 13 241 0 151 17 17 0 187] 
#[0 5 242 0 2 0 6 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 17 21 0 73] 
#[0 5 246 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 5 250 0 2 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 17 25 0 134] 
#[0 17 29 0 85] 
#[0 5 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 17 33 0 2] 
#[0 17 37 0 2] 
#[0 17 41 0 2] 
#[0 17 45 0 2] 
#[0 17 49 0 2] 
#[0 17 53 0 2] 
#[0 17 57 0 2] 
#[0 17 61 0 2] 
#[0 17 65 0 2] 
#[0 17 69 0 2] 
#[0 17 73 0 2] 
#[0 17 77 0 2] 
#[0 17 81 0 2] 
#[0 17 85 0 2] 
#[0 17 89 0 2] 
#[0 17 93 0 2] 
#[0 17 97 0 2] 
#[0 17 101 0 2] 
#[0 17 105 0 2] 
#[0 17 109 0 2] 
#[0 17 113 0 2] 
#[0 17 117 0 2] 
#[0 17 121 0 2] 
#[0 17 125 0 2] 
#[0 17 129 0 2] 
#[0 17 133 0 129] 
#[1 17 137 0 72 17 141 0 121] 
#[1 17 145 0 72 17 149 0 121] 
#[0 17 153 0 129] 
#[1 17 157 0 72 17 161 0 121] 
#[1 17 165 0 72 17 169 0 121] 
#[0 17 173 0 129] 
#[1 17 177 0 72 17 181 0 121] 
#[1 17 185 0 72 17 189 0 121] 
#[0 17 193 0 129] 
#[1 17 197 0 72 17 201 0 121] 
#[1 17 205 0 72 17 209 0 121] 
#[0 17 213 0 129] 
#[1 17 217 0 72 17 221 0 121] 
#[1 17 225 0 72 17 229 0 121] 
#[1 17 233 0 45 17 237 0 149 17 241 0 169] 
#[1 17 245 0 45 17 249 0 149 17 253 0 169] 
#[1 18 1 0 45 18 5 0 149 18 9 0 169] 
#[1 18 13 0 45 18 17 0 149 18 21 0 169] 
#[1 18 25 0 45 18 29 0 149 18 33 0 169] 
#[0 18 37 0 129] 
#[1 18 41 0 72 18 45 0 121] 
#[1 18 49 0 72 18 53 0 121] 
#[0 18 57 0 129] 
#[1 18 61 0 72 18 65 0 121] 
#[1 18 69 0 72 18 73 0 121] 
#[0 18 77 0 129] 
#[1 18 81 0 72 18 85 0 121] 
#[1 18 89 0 72 18 93 0 121] 
#[0 18 97 0 129] 
#[1 18 101 0 72 18 105 0 121] 
#[1 18 109 0 72 18 113 0 121] 
#[0 18 117 0 129] 
#[1 18 121 0 72 18 125 0 121] 
#[1 18 129 0 72 18 133 0 121] 
#[1 6 2 0 2 6 2 0 6 18 137 0 189] 
#[0 18 141 0 165] 
#[0 18 145 0 165] 
#[0 18 149 0 1] 
#[0 6 6 0 2 0 6 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 18 153 0 17] 
#[1 1 57 0 165 18 157 0 212 7 57 0 213 7 61 1 9] 
#[0 18 161 0 1] 
#[0 6 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 18 165 0 2] 
#[0 18 169 0 2] 
#[0 18 173 0 2] 
#[0 18 177 0 2] 
#[0 18 181 0 2] 
#[0 18 185 0 2] 
#[0 18 189 0 2] 
#[0 18 193 0 2] 
#[0 18 197 0 2] 
#[0 18 201 0 2] 
#[0 18 205 0 2] 
#[0 18 209 0 2] 
#[0 18 213 0 2] 
#[0 18 217 0 2] 
#[0 18 221 0 2] 
#[0 18 225 0 2] 
#[0 18 229 0 2] 
#[0 18 233 0 2] 
#[0 18 237 0 2] 
#[0 18 241 0 2] 
#[0 18 245 0 2] 
#[0 18 249 0 2] 
#[0 18 253 0 2] 
#[0 19 1 0 2] 
#[0 19 5 0 2] 
#[0 19 9 0 129] 
#[1 19 13 0 72 19 17 0 121] 
#[1 19 21 0 72 19 25 0 121] 
#[0 19 29 0 129] 
#[1 19 33 0 72 19 37 0 121] 
#[1 19 41 0 72 19 45 0 121] 
#[0 19 49 0 129] 
#[1 19 53 0 72 19 57 0 121] 
#[1 19 61 0 72 19 65 0 121] 
#[0 19 69 0 129] 
#[1 19 73 0 72 19 77 0 121] 
#[1 19 81 0 72 19 85 0 121] 
#[0 19 89 0 129] 
#[1 19 93 0 72 19 97 0 121] 
#[1 19 101 0 72 19 105 0 121] 
#[0 19 109 0 2] 
#[0 19 113 0 2] 
#[0 19 117 0 2] 
#[0 19 121 0 2] 
#[0 19 125 0 2] 
#[0 19 129 0 2] 
#[0 19 133 0 2] 
#[0 19 137 0 2] 
#[0 19 141 0 2] 
#[0 19 145 0 2] 
#[0 19 149 0 2] 
#[0 19 153 0 2] 
#[0 19 157 0 2] 
#[0 19 161 0 2] 
#[0 19 165 0 2] 
#[0 19 169 0 2] 
#[0 19 173 0 2] 
#[0 19 177 0 2] 
#[0 19 181 0 2] 
#[0 19 185 0 2] 
#[0 19 189 0 2] 
#[0 19 193 0 2] 
#[0 19 197 0 2] 
#[0 19 201 0 2] 
#[0 19 205 0 2] 
#[1 19 209 0 2 19 213 0 6 19 217 0 188] 
#[1 6 2 0 2 6 2 0 6 19 221 0 189] 
#[1 6 2 0 2 6 2 0 6 19 225 0 189] 
#[0 19 229 0 165] 
#[0 19 233 0 106] 
#[1 6 110 0 2 9 157 0 6 6 110 0 10 6 110 0 65 6 110 0 88 6 110 0 104 6 110 0 150 6 110 0 158 6 110 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 19 237 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[0 6 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 19 241 0 2] 
#[0 19 245 0 2] 
#[0 19 249 0 2] 
#[0 19 253 0 2] 
#[0 20 1 0 2] 
#[0 20 5 0 2] 
#[0 20 9 0 2] 
#[0 20 13 0 2] 
#[0 20 17 0 2] 
#[0 20 21 0 2] 
#[0 20 25 0 2] 
#[0 20 29 0 2] 
#[0 20 33 0 2] 
#[0 20 37 0 2] 
#[0 20 41 0 2] 
#[0 20 45 0 2] 
#[0 20 49 0 2] 
#[0 20 53 0 2] 
#[0 20 57 0 2] 
#[0 20 61 0 2] 
#[0 20 65 0 2] 
#[0 20 69 0 2] 
#[0 20 73 0 2] 
#[0 20 77 0 2] 
#[0 20 81 0 2] 
#[0 6 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 6 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[1 7 58 0 2 7 58 0 6 7 58 0 10 7 58 0 65 7 58 0 88 7 58 0 104 8 61 0 120 7 58 0 150 20 85 0 241 7 58 1 15] 
#[0 20 89 0 165] 
#[0 7 62 0 2 0 6] 
#[1 20 93 0 2 19 213 0 6 19 217 0 188] 
#[1 20 97 0 2 19 213 0 6 19 217 0 188] 
#[1 6 2 0 2 6 2 0 6 20 101 0 189] 
#[1 0 21 0 1 0 109 0 131 0 113 0 132 0 129 0 160 20 105 0 226] 
#[1 20 109 0 2 3 73 0 6 3 77 1 1] 
#[0 7 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 19 0 20 0 21 0 24 0 44 0 58 0 59 0 60 0 63 0 65 0 73 0 75 0 76 0 77 0 78 0 80 0 81 0 83 0 88 0 90 0 91 0 92 0 95 0 96 0 104 0 105 0 108 0 110 0 115 0 116 0 117 0 119 0 120 0 124 0 127 0 130 0 134 0 138 0 150 0 152 0 153 0 158 0 159 0 160 0 164 0 165 0 169 1 15] 
#[0 7 166 0 2 0 6 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 7 170 0 2 0 6] 
#[1 7 174 0 2 7 174 0 6 7 174 0 10 7 174 0 65 7 174 0 88 7 174 0 104 8 61 0 120 7 174 0 150 20 113 0 241 7 174 1 15] 
#[1 7 178 0 2 7 178 0 6 7 178 0 10 7 178 0 65 7 178 0 88 7 178 0 104 8 61 0 120 7 178 0 150 20 117 0 241 7 178 1 15] 
#[1 20 121 0 2 19 213 0 6 19 217 0 188] 
#[1 7 182 0 2 7 182 0 10 2 89 0 65 2 93 0 88 2 97 0 104 2 101 0 150 7 182 1 15] 
#[1 7 186 0 2 7 186 0 10 7 186 0 65 7 186 0 88 7 186 0 104 7 186 0 150 20 125 0 154 7 186 0 158 7 186 1 15] 
#[0 7 190 0 2 0 6 0 10 0 65 0 88 0 104 0 150 1 15] 
#[0 7 194 0 2 0 6 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 7 198 0 2 7 198 0 6 7 198 0 10 7 198 0 65 7 198 0 88 7 198 0 104 8 61 0 120 7 198 0 150 20 129 0 241 7 198 1 15] 
#[0 20 133 0 1] 
#[0 7 202 0 2 0 6 0 10 0 65 0 88 0 104 0 150 1 15] 
#[1 0 233 0 1 0 10 0 3 0 237 0 5 0 241 0 7 0 245 0 31 0 249 0 33 0 253 0 42 1 1 0 48 1 5 0 68 1 9 0 69 1 13 0 89 1 17 0 110 1 21 0 111 1 25 0 136 1 29 0 139 1 33 0 140 1 37 0 144 1 41 0 145 1 45 0 146 1 49 0 147 1 53 0 163 0 7 0 165 1 61 0 166 1 65 0 167 1 69 0 168 1 73 0 169 1 77 0 247 20 137 1 0 1 105 1 2 1 109 1 3 1 109 1 4 1 109 1 8 1 109 1 9 1 97 1 12] 
#[1 20 141 0 2 3 73 0 6 3 77 1 1] 
#[0 7 206 0 2 0 10 0 65 0 88 0 104 0 150 0 158 1 15]
	).
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression1: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression2: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result else: (nodes at: 3).
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression3: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression4: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result else: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement1: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result forToken: (nodes at: 3).
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement2: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement1: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement2: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForComment1: nodes [
	| result |
	result := TeradataCommentNode new.
	result commentToken: (nodes at: 1).
	result onToken: (nodes at: 2).
	result viewToken: (nodes at: 3).
	result table: (nodes at: 4).
	result comment: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateMacroStatement1: nodes [
	| result |
	result := TeradataCreateMacroStatementNode new.
	result createToken: (nodes at: 1).
	result macroToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addToken: ((nodes at: 4) at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result statements.
	result addTokens: ((nodes at: 7) at: 2) to: result semicolons.
	result addTokens: (nodes at: 8) to: result semicolons.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTable1: nodes [
	| result |
	result := TeradataCreateTableNode new.
	result createToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result columns.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result indexes.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTable2: nodes [
	| result |
	result := TeradataCreateTableNode new.
	result createToken: (nodes at: 1).
	result multisetToken: (nodes at: 2).
	result tableToken: (nodes at: 3).
	result table: (nodes at: 4).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result columns.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result indexes.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableColumn1: nodes [
	| result |
	result := TeradataCreateTableColumnNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableColumns1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableOption1: nodes [
	| result |
	result := TeradataCreateTableOptionNode new.
	result comma: (nodes at: 1).
	result noToken: (nodes at: 2).
	result fallbackToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableOption2: nodes [
	| result |
	result := TeradataCreateTableOptionNode new.
	result comma: (nodes at: 1).
	result noToken: (nodes at: 2).
	result beforeToken: (nodes at: 3).
	result journalToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableOption3: nodes [
	| result |
	result := TeradataCreateTableOptionNode new.
	result comma: (nodes at: 1).
	result noToken: (nodes at: 2).
	result afterToken: (nodes at: 3).
	result journalToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableOption4: nodes [
	| result |
	result := TeradataCreateTableOptionNode new.
	result comma: (nodes at: 1).
	result checksumToken: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateTableOption5: nodes [
	| result |
	result := TeradataCreateTableOptionNode new.
	result comma: (nodes at: 1).
	result defaultToken: (nodes at: 2).
	result mergeBlockRatioToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateView1: nodes [
	| result |
	result := TeradataCreateViewNode new.
	result createToken: (nodes at: 1).
	result viewToken: (nodes at: 2).
	result view: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addToken: (nodes at: 5) to: result columns.
	result addTokens: ((nodes at: 6) at: 1) to: result commas.
	result addTokens: ((nodes at: 6) at: 2) to: result columns.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result query: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateView2: nodes [
	| result |
	result := TeradataCreateViewNode new.
	result createToken: (nodes at: 1).
	result viewToken: (nodes at: 2).
	result view: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addToken: (nodes at: 5) to: result columns.
	result addTokens: ((nodes at: 6) at: 1) to: result commas.
	result addTokens: ((nodes at: 6) at: 2) to: result columns.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result lockingToken: (nodes at: 9).
	result rowToken: (nodes at: 10).
	result forToken: (nodes at: 11).
	result accessToken: (nodes at: 12).
	result modeToken: (nodes at: 13).
	result query: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDatabaseStatement1: nodes [
	| result |
	result := TeradataDatabaseStatementNode new.
	result databaseToken: (nodes at: 1).
	result database: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery10: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery11: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result where: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery12: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result allToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery7: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery8: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result where: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery9: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result allToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDropTableQuery1: nodes [
	| result |
	result := TeradataDropTableQueryNode new.
	result dropToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForElseExpression1: nodes [
	| result |
	result := TeradataElseExpressionNode new.
	result elseToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForEmptyGroupByExpression1: nodes [
	| result |
	result := TeradataEmptyGroupByExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 2) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement3: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement4: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression100: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression113: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression114: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result followingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression115: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression118: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result followingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression119: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result followingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result followingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression11: nodes [
	| result |
	result := TeradataBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression120: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result followingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression123: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression124: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result followingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression125: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression126: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression139: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression140: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result followingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression141: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression144: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result followingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression145: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result followingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result followingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression146: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result followingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression149: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression150: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result followingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression151: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression152: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression165: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression166: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result followingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression167: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression170: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result followingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression171: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result followingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result followingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression172: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result followingTokens.
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression175: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression176: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result followingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression177: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression178: nodes [
	| result |
	result := TeradataIntervalExpressionNode new.
	result intervalToken: (nodes at: 1).
	result interval: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression179: nodes [
	| result |
	result := TeradataCaseSpecificExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result caseSpecificToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression180: nodes [
	| result |
	result := TeradataTitleExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result titleToken: (nodes at: 3).
	result title: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression181: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression183: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result countType: (nodes at: 3).
	result value: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression186: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression187: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression190: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result existsToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result query: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression191: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result notToken: (nodes at: 1).
	result existsToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression192: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression193: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result withToken: (nodes at: 6).
	result errorToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression196: nodes [
	| result |
	result := TeradataXmlAggExpressionNode new.
	result xmlaggToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression197: nodes [
	| result |
	result := TeradataUnicodeEscapeExpressionNode new.
	result value: (nodes at: 1).
	result uescapeToken: (nodes at: 2).
	result escape: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression198: nodes [
	| result |
	result := TeradataIgnoreNullsExpressionNode new.
	result value: (nodes at: 1).
	result ignoreToken: (nodes at: 2).
	result nullsToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression26: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression27: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	result escapeToken: (nodes at: 4).
	result escape: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression28: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression29: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	result escapeToken: (nodes at: 5).
	result escape: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression2: nodes [
	| result |
	result := TeradataVariableExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression30: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression31: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result forToken: (nodes at: 6).
	result for: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression32: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression33: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result to: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression34: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result nullToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression35: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result nullToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression36: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression37: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression38: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNode: (nodes at: 4) to: result values.
	result addToken: (nodes at: 5) to: result commas.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression39: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression3: nodes [
	| result |
	result := TeradataLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression40: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result commas.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression41: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression42: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result commas.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression43: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result inToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression44: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result inToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result commas.
	result addNodes: ((nodes at: 8) at: 1) to: result values.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression45: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression46: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result query: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression47: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result inToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result query: (nodes at: 8).
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression48: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result notToken: (nodes at: 6).
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result query: (nodes at: 9).
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression49: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result formatToken: (nodes at: 3).
	result format: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression50: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression51: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result comma: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression56: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression57: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression58: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression59: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result formatToken: (nodes at: 6).
	result format: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression5: nodes [
	| result |
	result := TeradataNullExpressionNode new.
	result nullToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression61: nodes [
	| result |
	result := TeradataUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression62: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result betweenToken: (nodes at: 2).
	result first: (nodes at: 3).
	result andToken: (nodes at: 4).
	result last: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression63: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result betweenToken: (nodes at: 3).
	result first: (nodes at: 4).
	result andToken: (nodes at: 5).
	result last: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression64: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression65: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression66: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result character: (nodes at: 4).
	result fromToken: (nodes at: 5).
	result value: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression6: nodes [
	| result |
	result := TeradataStarExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression71: nodes [
	| result |
	result := TeradataQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result query: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression73: nodes [
	| result |
	result := TeradataExtractExpressionNode new.
	result extractToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result name: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression74: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression87: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression88: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result followingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression89: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression92: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result followingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression93: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result followingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result followingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression94: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result followingTokens.
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression97: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression98: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result followingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression99: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionList2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionListNode1: nodes [
	| result |
	result := TeradataExpressionListNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result values.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionWithDistinct1: nodes [
	| result |
	result := TeradataDistinctExpressionNode new.
	result distinctToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile1: nodes [
	| result |
	result := TeradataFileNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result statements.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolons.
	result addTokens: (nodes at: 2) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile2: nodes [
	| result |
	result := TeradataFileNode new.
	result addTokens: (nodes at: 1) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFromTables1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression1: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression2: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression1: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression2: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHavingExpression1: nodes [
	| result |
	result := TeradataHavingNode new.
	result havingToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHelpSessionStatement1: nodes [
	| result |
	result := TeradataHelpSessionStatementNode new.
	result helpToken: (nodes at: 1).
	result sessionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifier1: nodes [
	| result |
	result := TeradataIdentifierExpressionNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifierName1: nodes [
	| result |
	result := TeradataIdentifierNameNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex1: nodes [
	| result |
	result := TeradataIndexNode new.
	result indexToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addToken: (nodes at: 4) to: result columns.
	result addTokens: ((nodes at: 5) at: 1) to: result commas.
	result addTokens: ((nodes at: 5) at: 2) to: result columns.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex2: nodes [
	| result |
	result := TeradataIndexNode new.
	result indexToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addToken: (nodes at: 4) to: result columns.
	result addTokens: ((nodes at: 5) at: 1) to: result commas.
	result addTokens: ((nodes at: 5) at: 2) to: result columns.
	result rightParen: (nodes at: 6).
	result partition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex3: nodes [
	| result |
	result := TeradataIndexNode new.
	result primaryToken: (nodes at: 1).
	result indexToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addToken: (nodes at: 5) to: result columns.
	result addTokens: ((nodes at: 6) at: 1) to: result commas.
	result addTokens: ((nodes at: 6) at: 2) to: result columns.
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex4: nodes [
	| result |
	result := TeradataIndexNode new.
	result primaryToken: (nodes at: 1).
	result indexToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addToken: (nodes at: 5) to: result columns.
	result addTokens: ((nodes at: 6) at: 1) to: result commas.
	result addTokens: ((nodes at: 6) at: 2) to: result columns.
	result rightParen: (nodes at: 7).
	result partition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex5: nodes [
	| result |
	result := TeradataIndexNode new.
	result uniqueToken: (nodes at: 1).
	result indexToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addToken: (nodes at: 5) to: result columns.
	result addTokens: ((nodes at: 6) at: 1) to: result commas.
	result addTokens: ((nodes at: 6) at: 2) to: result columns.
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex6: nodes [
	| result |
	result := TeradataIndexNode new.
	result uniqueToken: (nodes at: 1).
	result indexToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addToken: (nodes at: 5) to: result columns.
	result addTokens: ((nodes at: 6) at: 1) to: result commas.
	result addTokens: ((nodes at: 6) at: 2) to: result columns.
	result rightParen: (nodes at: 7).
	result partition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex7: nodes [
	| result |
	result := TeradataIndexNode new.
	result uniqueToken: (nodes at: 1).
	result primaryToken: (nodes at: 2).
	result indexToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addToken: (nodes at: 6) to: result columns.
	result addTokens: ((nodes at: 7) at: 1) to: result commas.
	result addTokens: ((nodes at: 7) at: 2) to: result columns.
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIndex8: nodes [
	| result |
	result := TeradataIndexNode new.
	result uniqueToken: (nodes at: 1).
	result primaryToken: (nodes at: 2).
	result indexToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addToken: (nodes at: 6) to: result columns.
	result addTokens: ((nodes at: 7) at: 1) to: result commas.
	result addTokens: ((nodes at: 7) at: 2) to: result columns.
	result rightParen: (nodes at: 8).
	result partition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery11: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result query: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery12: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result query: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery5: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result valuesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery6: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result valuesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result addNodes: ((nodes at: 8) at: 1) to: result values.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery7: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result valuesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery8: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result valuesToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result addNodes: ((nodes at: 9) at: 1) to: result values.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIntoExpression1: nodes [
	| result |
	result := TeradataIntoExpressionNode new.
	result intoToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement1: nodes [
	| result |
	result := TeradataBeginLoadingStatementNode new.
	result beginToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result table: (nodes at: 3).
	result errorfilesToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result withToken: (nodes at: 6).
	result intervalToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement2: nodes [
	| result |
	result := TeradataEndLoadingStatementNode new.
	result endToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement5: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement6: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement7: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement8: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	result statement: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery1: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result mergeTable: (nodes at: 2).
	result usingToken: (nodes at: 3).
	result usingTable: (nodes at: 4).
	result onToken: (nodes at: 5).
	result condition: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery2: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result mergeTable: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result usingTable: (nodes at: 5).
	result onToken: (nodes at: 6).
	result condition: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression2: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result alias: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression3: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForOrderByExpression1: nodes [
	| result |
	result := TeradataOrderByExpressionNode new.
	result orderToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForParameter1: nodes [
	| result |
	result := TeradataParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForPartitionByExpression1: nodes [
	| result |
	result := TeradataPartitionByExpressionNode new.
	result partitionToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQualifyExpression1: nodes [
	| result |
	result := TeradataQualifyExpressionNode new.
	result qualifyToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression2: nodes [
	| result |
	result := Array new: 6.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression4: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression5: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression6: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForRollbackStatement1: nodes [
	| result |
	result := TeradataRollbackStatementNode new.
	result rollbackToken: (nodes at: 1).
	result workToken: (nodes at: 2).
	result work: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result tables.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery10: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result topToken: (nodes at: 3).
	result top: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result into: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result wheres.
	result addNodes: ((nodes at: 7) at: 2) to: result groups.
	result addNodes: ((nodes at: 7) at: 3) to: result havings.
	result addNodes: ((nodes at: 7) at: 4) to: result partitions.
	result addNodes: ((nodes at: 7) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 7) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 7) at: 7).
	result addNodes: ((nodes at: 7) at: 8) to: result tables.
	result addTokens: ((nodes at: 7) at: 9) to: result commas.
	result forToken: ((nodes at: 8) at: 1).
	result cursorToken: ((nodes at: 8) at: 2).
	result count: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery13: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery14: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result allToken: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result right: ((nodes at: 4) at: 2).
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery15: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery16: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result allToken: (nodes at: 5).
	result addToken: ((nodes at: 6) at: 1) to: result leftParens.
	result right: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 6) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery17: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result withTables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery18: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result recursiveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result withTables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery19: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result left: (nodes at: 1).
	result minusToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery20: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result minusToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery21: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery22: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery23: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery24: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery7: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result into: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result wheres.
	result addNodes: ((nodes at: 4) at: 2) to: result groups.
	result addNodes: ((nodes at: 4) at: 3) to: result havings.
	result addNodes: ((nodes at: 4) at: 4) to: result partitions.
	result addNodes: ((nodes at: 4) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 4) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result tables.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result forToken: ((nodes at: 5) at: 1).
	result cursorToken: ((nodes at: 5) at: 2).
	result count: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery8: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result topToken: (nodes at: 2).
	result top: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result into: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result wheres.
	result addNodes: ((nodes at: 6) at: 2) to: result groups.
	result addNodes: ((nodes at: 6) at: 3) to: result havings.
	result addNodes: ((nodes at: 6) at: 4) to: result partitions.
	result addNodes: ((nodes at: 6) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 6) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 6) at: 7).
	result addNodes: ((nodes at: 6) at: 8) to: result tables.
	result addTokens: ((nodes at: 6) at: 9) to: result commas.
	result forToken: ((nodes at: 7) at: 1).
	result cursorToken: ((nodes at: 7) at: 2).
	result count: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery9: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result into: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result wheres.
	result addNodes: ((nodes at: 5) at: 2) to: result groups.
	result addNodes: ((nodes at: 5) at: 3) to: result havings.
	result addNodes: ((nodes at: 5) at: 4) to: result partitions.
	result addNodes: ((nodes at: 5) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 5) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result tables.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result forToken: ((nodes at: 6) at: 1).
	result cursorToken: ((nodes at: 6) at: 2).
	result count: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetExpression1: nodes [
	| result |
	result := TeradataSetExpressionNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement1: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result forToken: (nodes at: 5).
	result sessionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement2: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result updateToken: (nodes at: 5).
	result forToken: (nodes at: 6).
	result sessionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable10: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result direction: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable12: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result type: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable13: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable14: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result direction: (nodes at: 3).
	result type: (nodes at: 4).
	result joinToken: (nodes at: 5).
	result right: (nodes at: 6).
	result onToken: ((nodes at: 7) at: 1).
	result on: ((nodes at: 7) at: 2).
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable17: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable1: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable2: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable3: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable4: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable5: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable6: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result asToken: (nodes at: 4).
	result alias: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable7: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result joinToken: (nodes at: 2).
	result right: (nodes at: 3).
	result onToken: ((nodes at: 4) at: 1).
	result on: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement1: nodes [
	| result |
	result := TeradataBeginTransactionStatementNode new.
	result beginToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement2: nodes [
	| result |
	result := TeradataEndTransactionStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType1: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result addNodes: (nodes at: 2) to: result options.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType2: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result options.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType3: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result options.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeName2: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeOption1: nodes [
	| result |
	result := TeradataCharacterSetOptionNode new.
	result characterToken: (nodes at: 1).
	result setToken: (nodes at: 2).
	result encoding: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeOption2: nodes [
	| result |
	result := TeradataNotNullOptionNode new.
	result notToken: (nodes at: 1).
	result nullToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeOption3: nodes [
	| result |
	result := TeradataFormatOptionNode new.
	result formatToken: (nodes at: 1).
	result format: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeOption4: nodes [
	| result |
	result := TeradataCompressOptionNode new.
	result compressToken: (nodes at: 1).
	result compress: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeOption5: nodes [
	| result |
	result := TeradataCaseSpecificOptionNode new.
	result caseSpecificToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery10: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery12: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery13: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery15: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery16: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery18: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result else: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery19: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery1: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery20: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery3: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result elseToken: (nodes at: 5).
	result else: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery4: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery6: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery7: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery9: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn1: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn2: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumns2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result columns.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement2: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result columns.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpression1: nodes [
	| result |
	result := TeradataWhenExpressionNode new.
	result whenToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpressions1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition1: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result matchedToken: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result updateToken: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition2: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition3: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	result valuesToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result leftParens.
	result addNodes: ((nodes at: 11) at: 1) to: result values.
	result addTokens: ((nodes at: 11) at: 2) to: result commas.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhereExpression1: nodes [
	| result |
	result := TeradataWhereExpressionNode new.
	result whereToken: (nodes at: 1).
	result where: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable1: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable2: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result query: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_2: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 7 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__ON___onToken__Expression__on___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #testing }
TeradataParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
TeradataParser >> useAllTokenIds [
	^ false
]
