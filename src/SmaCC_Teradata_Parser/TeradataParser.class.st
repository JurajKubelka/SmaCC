Class {
	#name : #TeradataParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Teradata_Parser'
}

{ #category : #generated }
TeradataParser class >> ambiguousTransitions [
^#(
#[ 0 254 3 89] 
#[ 0 254 3 153] 
#[ 0 254 3 161] 
#[ 0 254 3 185] 
#[ 1 2 3 89] 
#[ 1 2 3 153] 
#[ 1 2 3 161] 
#[ 1 2 3 185] 
#[ 1 14 3 89] 
#[ 1 14 3 153] 
#[ 1 14 3 161] 
#[ 1 14 3 185] 
#[ 0 206 1 30] 
#[ 1 38 1 42] 
#[ 1 134 6 209] 
#[ 1 198 2 81] 
#[ 1 198 2 85] 
#[ 1 198 2 89] 
#[ 1 198 2 93] 
#[ 1 198 2 97] 
#[ 1 198 7 81] 
#[ 1 198 2 101] 
#[ 2 22 3 89] 
#[ 2 22 3 153] 
#[ 2 22 3 161] 
#[ 2 22 3 185] 
#[ 2 26 3 89] 
#[ 2 26 3 153] 
#[ 2 26 3 161] 
#[ 2 26 3 185] 
#[ 2 30 3 89] 
#[ 2 30 3 153] 
#[ 2 30 3 161] 
#[ 2 30 3 185] 
#[ 2 34 3 89] 
#[ 2 34 3 153] 
#[ 2 34 3 161] 
#[ 2 34 3 185] 
#[ 2 38 3 89] 
#[ 2 38 3 153] 
#[ 2 38 3 161] 
#[ 2 38 3 185] 
#[ 2 42 3 89] 
#[ 2 42 3 153] 
#[ 2 42 3 161] 
#[ 2 42 3 185] 
#[ 2 46 3 89] 
#[ 2 46 3 153] 
#[ 2 46 3 161] 
#[ 2 46 3 185] 
#[ 2 50 3 89] 
#[ 2 50 3 153] 
#[ 2 50 3 161] 
#[ 2 50 3 185] 
#[ 2 54 3 89] 
#[ 2 54 3 153] 
#[ 2 54 3 161] 
#[ 2 54 3 185] 
#[ 2 58 3 89] 
#[ 2 58 3 153] 
#[ 2 58 3 161] 
#[ 2 58 3 185] 
#[ 2 62 3 89] 
#[ 2 62 3 153] 
#[ 2 62 3 161] 
#[ 2 62 3 185] 
#[ 2 66 3 89] 
#[ 2 66 3 153] 
#[ 2 66 3 161] 
#[ 2 66 3 185] 
#[ 2 74 3 89] 
#[ 2 74 3 153] 
#[ 2 74 3 161] 
#[ 2 74 3 185] 
#[ 2 82 3 89] 
#[ 2 82 3 153] 
#[ 2 82 3 161] 
#[ 2 82 3 185] 
#[ 2 90 3 89] 
#[ 2 90 8 133] 
#[ 2 90 3 153] 
#[ 2 90 3 161] 
#[ 2 90 3 185] 
#[ 2 94 3 89] 
#[ 2 94 3 153] 
#[ 2 94 3 161] 
#[ 2 94 3 185] 
#[ 2 98 3 89] 
#[ 2 98 3 153] 
#[ 2 98 3 161] 
#[ 2 98 3 185] 
#[ 2 102 3 89] 
#[ 2 102 3 153] 
#[ 2 102 3 161] 
#[ 2 102 3 185] 
#[ 2 106 3 89] 
#[ 2 106 3 153] 
#[ 2 106 3 161] 
#[ 2 106 3 185] 
#[ 3 38 3 89] 
#[ 3 38 3 153] 
#[ 3 38 3 161] 
#[ 3 38 3 185] 
#[ 3 42 3 89] 
#[ 3 42 10 49] 
#[ 3 42 3 153] 
#[ 3 42 3 161] 
#[ 3 42 3 185] 
#[ 2 230 3 138] 
#[ 2 66 3 89 3 182] 
#[ 2 66 3 93 3 182] 
#[ 2 66 3 97 3 182] 
#[ 2 66 3 101 3 182] 
#[ 2 66 3 105 3 182] 
#[ 2 66 3 109 3 182] 
#[ 2 66 3 113 3 182] 
#[ 2 66 3 117 3 182] 
#[ 2 66 3 121 3 182] 
#[ 2 66 3 125 3 182] 
#[ 2 66 3 129 3 182] 
#[ 2 66 3 133 3 182] 
#[ 2 66 3 137 3 182] 
#[ 2 66 3 145 3 182] 
#[ 2 66 3 149 3 182] 
#[ 2 66 3 153 3 182] 
#[ 2 66 3 157 3 182] 
#[ 2 66 3 161 3 182] 
#[ 2 66 3 165 3 182] 
#[ 2 66 3 169 3 182] 
#[ 2 66 3 173 3 182] 
#[ 2 66 3 177 3 182] 
#[ 2 66 3 181 3 182] 
#[ 2 66 3 182 3 185] 
#[ 2 66 3 182 3 189] 
#[ 1 234 3 186] 
#[ 3 89 3 190] 
#[ 3 153 3 190] 
#[ 3 161 3 190] 
#[ 3 185 3 190] 
#[ 2 66 3 89 4 106] 
#[ 2 66 3 93 4 106] 
#[ 2 66 3 97 4 106] 
#[ 2 66 3 101 4 106] 
#[ 2 66 3 105 4 106] 
#[ 2 66 3 109 4 106] 
#[ 2 66 3 113 4 106] 
#[ 2 66 3 117 4 106] 
#[ 2 66 3 121 4 106] 
#[ 2 66 3 125 4 106] 
#[ 2 66 3 129 4 106] 
#[ 2 66 3 133 4 106] 
#[ 2 66 3 137 4 106] 
#[ 2 66 3 145 4 106] 
#[ 2 66 3 149 4 106] 
#[ 2 66 3 153 4 106] 
#[ 2 66 3 157 4 106] 
#[ 2 66 3 161 4 106] 
#[ 2 66 3 165 4 106] 
#[ 2 66 3 169 4 106] 
#[ 2 66 3 173 4 106] 
#[ 2 66 3 177 4 106] 
#[ 2 66 3 181 4 106] 
#[ 2 66 3 185 4 106] 
#[ 2 66 3 189 4 106] 
#[ 1 234 4 110] 
#[ 3 89 4 114] 
#[ 3 153 4 114] 
#[ 3 161 4 114] 
#[ 3 185 4 114]
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> cacheId [
	^'2020-07-24T13:25:57.978607-05:00'
]

{ #category : #generated }
TeradataParser class >> definitionComment [
"%glr;
%ignorecase;
%left ""UNION"" ""MINUS"" ""INTERSECT"" ""EXCEPT"";
%left ""OR"";
%left ""AND"";
%nonassoc ""="" ""EQ"" ""<>"" ""NE"" ""<"" ""<="" "">"" "">="" ""BETWEEN"";
%left ""||"";
%nonassoc ""LIKE"" ""IN"" ""NOT"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""MOD"";
%right ""**"";

%prefix Teradata;
%suffix Node;
%root Program;
%hierarchy Expression (
    AliasedExpression
    BetweenExpression
    BinaryExpression
    CaseExpression
    CaseSpecificExpression
    CastExpression
    ConversionExpression
    CountExpression
    EmptyGroupByExpression
    ExistsExpression
    ExtractExpression
    FunctionExpression
    IdentifierExpression
    IgnoreNullsExpression
    InQueryExpression
    IntervalExpression
    InValueExpression
    IsNullExpression
    LikeExpression
    LiteralExpression
    NullExpression
    OverExpression
    QueryExpression
    StarExpression
    SubstringExpression
    TimestampExpression
    TitleExpression
    TranslateExpression
    TrimExpression
    UnicodeEscapeExpression
    UnaryExpression
    VariableExpression
    XmlAggExpression
);

<identifier>
	: [a-z_\$][a-z0-9_\$]* 
	| (\"" [^\""\r\n]* \"")+
	;
<variable>
	: \: <identifier>
	| \?
	;
<ustring>
	: U \& (\' [^\']* \')+
	;
<string>
	: (\' [^\']* \')+
	| \' [0-9A-F]* \' \s* XC[VF]?
	;
<number>
	: [0-9][0-9X]* (\. [0-9X]*)?	# XXXX -- patterns?
	;
<whitespace>
	: \s+
	;
<comment>
	: \-\- [^\r\n]*
	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;
File
	: Statements "";"" 'semicolon'* {{}}
	| "";"" 'semicolon'* {{}}
	;
Statements
	: Statement 'statement'
	| Statements "";"" 'semicolon'* "";"" 'semicolon' Statement 'statement'
	;
Statement
	: SelectQuery
	| DeleteQuery
	| ExecuteStatement
	| DatabaseStatement
	| TransactionStatement
	| HelpSessionStatement
	| SetStatement
	| CheckWorkloadStatement
	| LoadingStatement
	| UsingStatement
	| InsertQuery
	| UpdateQuery
	| DropTableQuery
	| CheckpointStatement
	| CreateMacroStatement
	| LockTableStatement
	| RollbackStatement
	| MergeQuery	;
MergeQuery
	: ""MERGE"" 'mergeToken' ""INTO"" 'intoToken'? Table 'mergeTable' ""USING"" 'usingToken' Table 'usingTable' ""ON"" 'onToken' Expression 'condition' WhenMergeCondition 'whenMerge'+ {{}}
	;
WhenMergeCondition
	: ""WHEN"" 'whenToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""UPDATE"" 'updateToken' ""SET"" 'setToken' SetExpressionList {{}}
	| ""WHEN"" 'whenToken' ""NOT"" 'notToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""INSERT"" 'insertToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' (""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen')? {{}}
	;
RollbackStatement
	: ""ROLLBACK"" 'rollbackToken' ""WORK"" 'workToken' <string> 'work' ""FROM"" 'fromToken' TableList WhereExpression 'where' {{}}
	;
LockTableStatement
	: (""LOCKING"" 'lockToken' | ""LOCK"" 'lockToken') ""TABLE"" 'tableToken'? TableName 'table' ""FOR"" 'forToken' <identifier> 'lock' Statement 'statement'? {{}}
	;
CreateMacroStatement
	: ""CREATE"" 'createToken' ""MACRO"" 'macroToken' IdentifierName 'name' MacroArgs ""AS"" 'asToken' ""("" 'leftParen' Statements "";"" 'semicolon'* "")"" 'rightParen' {{}}
	;
MacroArgs
	:
	| ""("" 'leftParen' ParameterList "")"" 'rightParen'
	;
ParameterList
	: Parameter 'parameter'
	| ParameterList "","" 'comma' Parameter 'parameter'
	;
Parameter
	: IdentifierName 'name' Type 'type' {{}}
	;
Type
	: TypeName (""("" 'leftParen' <number> 'precision' ("","" 'comma' <number> 'scale')? "")"" 'rightParen')? (""CHARACTER"" 'characterToken' ""SET"" 'setToken' <identifier> 'encoding')? {{}}
	;
TypeName
	: SingleTypeName 'name'
	| ""DOUBLE"" 'name' ""PRECISION"" 'name'
	;
SingleTypeName
	: ""CHAR""
	| ""VARCHAR""
	| ""CLOB""
	| ""DATE""
	| ""TIME""
	| ""TIMESTAMP""
	| ""BYTEINT""
	| ""SMALLINT""
	| ""INT""
	| ""INTEGER""
	| ""BIGINT""
	| ""DEC""
	| ""DECIMAL""
	| ""NUMERIC""
	| ""FLOAT""
	| ""REAL""
	| ""NUMBER""
	| ""VARBYTE""
	| ""BYTE""
	;
CheckpointStatement
	: ""CHECKPOINT"" 'checkpointToken' ""LOADING"" 'loadingToken' ""INTERVAL"" 'intervalToken' <number> 'interal' ""END"" 'endToken'? {{}}
	;
DropTableQuery
	: ""DROP"" 'dropToken' ""TABLE"" 'tableToken' TableName 'table' {{}}
	;
UpdateQuery
	: ""UPDATE"" 'updateToken' TableName 'table' (""AS"" 'asToken'? <identifier> 'alias')? ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? (""ELSE"" 'elseToken' (InsertQuery 'else' | UpdateQuery 'else'))? {{}}
	| ""UPDATE"" 'updateToken' TableName 'table' ""FROM"" 'fromToken' TableList ""SET"" 'setToken' SetExpressionList WhereExpression 'where'? {{}}
	;
SetExpressionList
	: SetExpression 'setExpression'
	| SetExpressionList "","" 'comma' SetExpression 'setExpression'
	;
SetExpression
	: Identifier 'name' ""="" 'equals' Expression 'value' {{}}
	;
InsertQuery
	: (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken'? TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	| (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken' TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? SelectQuery 'query' {{}}
	;
UsingStatement
	: ""USING"" 'usingToken' UsingColumns Statement 'statement' {{}}
	| ""USING"" 'usingToken' ""("" 'leftParen' UsingColumns "")"" 'rightParen' Statement 'statement' {{}}
	;
UsingColumns
	: UsingColumn 'column'
	| UsingColumns "","" 'comma' UsingColumn 'column'
	;
UsingColumn
	: <identifier> 'name' Type 'type' {{}}
	| <identifier> 'name' ""("" 'leftParen' Type 'type' "")"" 'rightParen' {{}}
	;
LoadingStatement
	: ""BEGIN"" 'beginToken' ""LOADING"" 'loadingToken' TableName 'table' ""ERRORFILES"" 'errorfilesToken' ExpressionList ""WITH"" 'withToken' ""INTERVAL"" 'intervalToken' {{BeginLoadingStatement}}
	| ""END"" 'endToken' ""LOADING"" 'loadingToken' {{EndLoadingStatement}}
	;
CheckWorkloadStatement
	: ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""FOR"" 'forToken' Statement 'statement'  {{}}
	| ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""END"" 'endToken'  {{}}
	;
SetStatement
	: ""SET"" 'setToken' IdentifierName 'name' ""="" 'equals' Expression 'value' ""UPDATE"" 'updateToken'? ""FOR"" 'forToken' ""SESSION"" 'sessionToken' {{}}
	;
HelpSessionStatement
	: ""HELP"" 'helpToken' ""SESSION"" 'sessionToken' {{}}
	;
TransactionStatement
	: ""BT"" 'beginToken' {{BeginTransactionStatement}}
	| ""ET"" 'endToken' {{EndTransactionStatement}}
	;
DatabaseStatement
	: ""DATABASE"" 'databaseToken' IdentifierName 'database' {{}}
	;
ExecuteStatement
	: (""EXECUTE"" 'executeToken' | ""EXEC"" 'executeToken') IdentifierName 'name' ( ""("" 'leftParen' ExpressionList "")"" 'rightParen' )? {{}}
	;
DeleteQuery
	: (""DELETE"" 'deleteToken' | ""DEL"" 'deleteToken') ""FROM"" 'fromToken'? Table 'table' (WhereExpression 'where' | ""ALL"" 'allToken')? {{}}
	;
SelectQuery
	: (""SELECT"" 'selectToken' | ""SEL"" 'selectToken') (""DISTINCT"" 'distinctToken' | ""DISTINCTROW"" 'distinctToken')? (""TOP"" 'topToken' <number> 'top')? ExpressionList IntoExpression 'into'? (FromTables? QueryExpressions)? (""FOR"" 'forToken' ""CURSOR"" 'cursorToken')? (<number> 'count')? {{}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""UNION"" 'unionToken' ""ALL"" 'allToken'? UnionSelectQuery {{UnionQuery}}
	| ""WITH"" 'withToken' ""RECURSIVE"" 'recursiveToken'? WithTables Statement 'statement' {{WithQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""MINUS"" 'minusToken' UnionSelectQuery {{MinusQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""INTERSECT"" 'intersectToken' UnionSelectQuery {{IntersectQuery}}
	| ( SelectQuery 'left' | ""("" 'leftParen' SelectQuery 'left' "")"" 'rightParen' ) ""EXCEPT"" 'intersectToken' UnionSelectQuery {{ExceptQuery}}
	;
QueryExpressions
	:
	| QueryExpressions QueryExpression
	;
QueryExpression
	: WhereExpression 'where'
	| GroupByExpression 'group'
	| HavingExpression 'having'
	| PartitionByExpression 'partition'
	| QualifyExpression 'qualify'
	| OrderByExpression 'orderBy'
	;
WithTables
	: WithTable 'withTable'
	| WithTables "","" 'comma' WithTable 'withTable'
	;
WithTable
	: IdentifierName 'name' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""AS"" 'asToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{WithTableDefinition}}
	;
HavingExpression
	: ""HAVING"" 'havingToken' Expression 'condition' {{Having}}
	;
UnionSelectQuery
	: ""("" 'leftParen' SelectQuery 'right' "")"" 'rightParen' OrderByExpression 'orderBy'
	| SelectQuery 'right'
	;
QualifyExpression
	: ""QUALIFY"" 'qualifyToken' Expression 'condition' {{}}
	;
PartitionByExpression
	: ""PARTITION"" 'partitionToken' ""BY"" 'byToken' ExpressionList {{}}
	;
IntoExpression
	: ""INTO"" 'intoToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	;
FromTables
	: ""FROM"" 'fromToken' TableList
	;
TableList
	: Table 'table'
	| TableList "","" 'comma' Table 'table'
	;
 Table
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' (""AS"" 'asToken'? <identifier> 'alias')? {{Table}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' (""AS"" 'asToken'? <identifier> 'alias')? {{SelectTable}}
	| Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction' | ""FULL"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? {{JoinTable}}
	| ""("" 'leftParen' Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? "")"" 'rightParen' {{JoinTable}}
	;
TableName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{Table}}
	;
WhereExpression
	: ""WHERE"" 'whereToken' Expression 'where' {{}}
	;
GroupByExpression
	: ""GROUP"" 'groupToken' ""BY"" 'byToken' ExpressionList {{GroupBy}}
	| ""GROUP"" 'groupToken' ""BY"" 'byToken' EmptyGroupByExpression 'value' {{GroupBy}}
	;
EmptyGroupByExpression
	: ""("" 'leftParen' "")"" 'rightParen' {{EmptyGroupByExpression}}
	;
OrderByExpression
	: ""ORDER"" 'orderToken' ""BY"" 'byToken' ExpressionList {{}}
	;
ExpressionList
	: NamedExpression 'value'
	| ExpressionList "","" 'comma'+ NamedExpression 'value'
	;
NamedExpression
	: Expression 
	| Expression 'expression' ""AS"" 'asToken'? <identifier> 'alias' {{AliasedExpression}}
	;
Expression
	: Identifier
	| <variable> 'name' {{VariableExpression}}
	| <string> 'value' {{LiteralExpression}}
	| <number> 'value' {{LiteralExpression}}
	| ""NULL"" 'nullToken' {{NullExpression}}
	| (<identifier> 'name' ""."" 'period')* ""*"" 'star' {{StarExpression}}
	| CaseExpression
	| FunctionExpression
	| Expression 'left' (""+"" 'operator' | ""-"" 'operator' | ""*"" 'operator' | ""/"" 'operator' | ""MOD"" 'operator' | ""||"" 'operator' | ""**"" 'operator' | ""EQ"" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'left' (""AND"" 'operator' | ""OR"" 'operator' | ""="" 'operator' | ""<>"" 'operator' | ""NE"" 'operator' |  ""<"" 'operator' | ""<="" 'operator' | "">"" 'operator' | "">="" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""LIKE"" 'likeToken' Expression 'like' (""ESCAPE"" 'escapeToken' Expression 'escape')? {{LikeExpression}}
	| ""SUBSTRING"" 'substringToken' ""("" 'leftParen' Expression 'value' ""FROM"" 'fromToken' Expression 'from' (""FOR"" 'forToken' Expression 'for')? "")"" 'rightParen' {{SubstringExpression}}
	| Expression 'value' ""IS"" 'isToken' ""NOT"" 'notToken'? ""NULL"" 'nullToken' {{IsNullExpression}}
	| ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}
	| Expression 'testValue' ""NOT"" 'notToken'? ""IN"" 'inToken' (Expression 'value' | ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen') {{InValueExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| Expression 'value' ""("" 'leftParen' ""FORMAT"" 'formatToken' <string> 'format' "")"" 'rightParen' {{ConversionExpression}}
	| Expression 'value' ""("" 'leftParen' Type 'type' ("","" 'comma' ""FORMAT"" 'formatToken' <string> 'format' )? "")"" 'rightParen' {{ConversionExpression}}
	| ""CAST"" 'castToken' ""("" 'leftParen' Expression 'value' ""AS"" 'asToken' Type 'type'? (""FORMAT"" 'formatToken' <string> 'format')? "")"" 'rightParen' {{CastExpression}}
	| (""-"" 'operator' | ""+"" 'operator') Expression 'value' {{UnaryExpression}}
	| Expression 'value' (""NOT"" 'notToken')? ""BETWEEN"" 'betweenToken' Expression 'first' ""AND"" 'andToken' Expression 'last' {{BetweenExpression}}
	| ""TRIM"" 'trimToken' ""("" 'leftParen' ((""BOTH"" 'positionToken' | ""TRAILING"" 'positionToken' | ""LEADING"" 'positionToken') ""FROM"" 'fromToken')? Expression 'value' "")"" 'rightParen' {{TrimExpression}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{QueryExpression}}
	| ""NOT"" 'operator' Expression 'value' {{UnaryExpression}}
	| ""EXTRACT"" 'extractToken' ""("" 'leftParen'  <identifier> 'name' ""FROM"" 'fromToken' Expression 'value' "")"" 'rightParen' {{ExtractExpression}}
	| Expression 'value' ""OVER"" 'overToken' ""("" 'leftParen' PartitionByExpression 'partition'? OrderByExpression 'orderBy'? (""ROWS"" 'rows' ""BETWEEN"" 'betweenToken' ((<number> 'from' | ""UNBOUNDED"" 'from') ""PRECEDING"" 'precedingToken' | ""CURRENT"" 'currentFromToken' ""ROW"" 'rowFromToken') ""AND"" 'andToken' ((<number> 'to' | ""UNBOUNDED"" 'to') ""PRECEDING"" 'precedingToken' | ""CURRENT"" 'currentToToken' ""ROW"" 'rowToToken'))? "")"" 'rightParen' {{OverExpression}}
	| ""INTERVAL"" 'intervalToken' <string> 'interval' <identifier> 'name' {{IntervalExpression}}
	| Expression 'value' ""("" 'leftParen' ""CASESPECIFIC"" 'caseSpecificToken' "")"" 'rightParen' {{CaseSpecificExpression}}
	| Expression 'value' ""("" 'leftParen' ""TITLE"" 'titleToken' <string> 'title' "")"" 'rightParen' {{TitleExpression}}
	| ""COUNT"" 'countToken' ""("" 'leftParen' (""DISTINCT"" 'countType' | ""ALL"" 'countType')? Expression 'value' "")"" 'rightParen' {{CountExpression}}
	| (""TIMESTAMP"" 'typeToken' | ""DATE"" 'typeToken' | ""TIME"" 'typeToken') (<string> 'value')? {{TimestampExpression}}
	| (""NOT"" 'notToken')? ""EXISTS"" 'existsToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{ExistsExpression}}
	| (""TRANSLATE"" 'translateToken' | ""TRANSLATE_CHK"" 'translateToken') ""("" 'leftParen' Expression 'value' ""USING"" 'usingToken' <identifier> 'operation' (""WITH"" 'withToken' ""ERROR"" 'errorToken')? "")"" 'rightParen' {{TranslateExpression}}
	| ""XMLAGG"" 'xmlaggToken' ""("" 'leftParen' Expression 'value' OrderByExpression 'orderBy' "")"" 'rightParen' {{XmlAggExpression}}
	| <ustring> 'value' ""UESCAPE"" 'uescapeToken' <string> 'escape' {{UnicodeEscapeExpression}}
	| Expression 'value' ""IGNORE"" 'ignoreToken' ""NULLS"" 'nullsToken' {{IgnoreNullsExpression}}
	;
CaseExpression
	: ""CASE"" 'caseToken' Expression 'expression'? WhenExpressions ElseExpression 'else'? ""END"" 'endToken' {{}}
	;
ElseExpression
	: ""ELSE"" 'elseToken' Expression 'value' {{}}
	;
WhenExpressions
	: WhenExpression 'when'
	| WhenExpressions WhenExpression 'when'
	;
WhenExpression
	: ""WHEN"" 'whenToken' Expression 'condition' ""THEN"" 'thenToken' Expression 'value' {{}}
	;
FunctionExpression
	: IdentifierName 'function' ""("" 'leftParen' ExpressionList? "")"" 'rightParen' {{}}
	;
Identifier
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{IdentifierExpression}}
	;
IdentifierName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{}}
	;"
]

{ #category : #generated }
TeradataParser class >> reduceTable [
^#(
	#(155 0 #reduceActionFor_____semicolon__1: 1457153 false ) 
	#(183 1 #reduceActionForTransactionStatement1: 6170625 false ) 
	#(208 0 #reduceActionFor__identifier___name_______period___1: 8832001 false ) 
	#(183 1 #reduceActionForTransactionStatement2: 6170626 false ) 
	#(154 1 #reduceActionForFile2: 1437698 false ) 
	#(156 1 #reduceActionForStatements1: 1508353 false ) 
	#(157 1 #liftFirstValue: 1618962 false ) 
	#(157 1 #liftFirstValue: 1618961 false ) 
	#(157 1 #liftFirstValue: 1618960 false ) 
	#(157 1 #liftFirstValue: 1618959 false ) 
	#(157 1 #liftFirstValue: 1618958 false ) 
	#(157 1 #liftFirstValue: 1618957 false ) 
	#(157 1 #liftFirstValue: 1618956 false ) 
	#(157 1 #liftFirstValue: 1618955 false ) 
	#(157 1 #liftFirstValue: 1618954 false ) 
	#(157 1 #liftFirstValue: 1618953 false ) 
	#(157 1 #liftFirstValue: 1618952 false ) 
	#(157 1 #liftFirstValue: 1618951 false ) 
	#(157 1 #liftFirstValue: 1618950 false ) 
	#(157 1 #liftFirstValue: 1618949 false ) 
	#(157 1 #liftFirstValue: 1618948 false ) 
	#(157 1 #liftFirstValue: 1618947 false ) 
	#(157 1 #liftFirstValue: 1618946 false ) 
	#(157 1 #liftFirstValue: 1618945 false ) 
	#(184 2 #reduceActionForDatabaseStatement1: 6295553 false ) 
	#(186 2 #reduceActionForDeleteQuery7: 6537223 false ) 
	#(186 2 #reduceActionForDeleteQuery7: 6537217 false ) 
	#(179 2 #reduceActionForLoadingStatement2: 5446658 false ) 
	#(185 2 #reduceActionForExecuteStatement3: 6379523 false ) 
	#(185 2 #reduceActionForExecuteStatement3: 6379521 false ) 
	#(182 2 #reduceActionForHelpSessionStatement1: 6092801 false ) 
	#(220 1 #reduceActionForExpression109: 10232941 false ) 
	#(220 1 #reduceActionForExpression5: 10232837 false ) 
	#(220 1 #reduceActionForExpression109: 10232943 false ) 
	#(220 1 #reduceActionForExpression109: 10232939 false ) 
	#(220 1 #reduceActionForExpression2: 10232834 false ) 
	#(220 1 #reduceActionForExpression3: 10232835 false ) 
	#(220 1 #reduceActionForExpression3: 10232836 false ) 
	#(188 0 #nil 6868993 false ) 
	#(217 1 #reduceActionForStatements1: 10007553 false ) 
	#(219 1 #liftFirstValue: 10109953 false ) 
	#(220 1 #liftFirstValue: 10232839 false ) 
	#(220 1 #liftFirstValue: 10232840 false ) 
	#(220 1 #liftFirstValue: 10232833 false ) 
	#(177 1 #reduceActionForStatements1: 5224449 false ) 
	#(197 1 #reduceActionForStatements1: 7949313 false ) 
	#(155 2 #reduceActionFor_____semicolon__2: 1457154 false ) 
	#(154 2 #reduceActionForFile1: 1437697 false ) 
	#(180 3 #reduceActionForCheckWorkloadStatement2: 5727234 false ) 
	#(164 0 #reduceActionForMacroArgs1: 3095553 false ) 
	#(227 2 #reduceActionForIdentifierName1: 15478785 false ) 
	#(208 2 #reduceActionFor__identifier___name_______period___2: 8832002 false ) 
	#(186 3 #reduceActionForDeleteQuery10: 6537226 false ) 
	#(186 3 #reduceActionForDeleteQuery9: 6537225 false ) 
	#(209 0 #nil 9138177 false ) 
	#(186 3 #reduceActionForDeleteQuery8: 6537224 false ) 
	#(206 2 #reduceActionForTable1: 8822785 false ) 
	#(186 3 #reduceActionForDeleteQuery10: 6537220 false ) 
	#(186 3 #reduceActionForDeleteQuery9: 6537219 false ) 
	#(186 3 #reduceActionForDeleteQuery8: 6537218 false ) 
	#(171 3 #reduceActionForDropTableQuery1: 3981313 false ) 
	#(212 2 #reduceActionForTable1: 9508865 false ) 
	#(220 2 #reduceActionForExpression51: 10232883 false ) 
	#(220 2 #reduceActionForExpression51: 10232882 false ) 
	#(223 1 #reduceActionForWhenExpressions1: 15075329 false ) 
	#(220 2 #reduceActionForExpression110: 10232942 false ) 
	#(220 2 #reduceActionForExpression51: 10232891 false ) 
	#(220 2 #reduceActionForExpression110: 10232944 false ) 
	#(220 2 #reduceActionForExpression110: 10232940 false ) 
	#(220 2 #reduceActionForExpression6: 10232838 false ) 
	#(226 2 #reduceActionForIdentifier1: 15378433 false ) 
	#(218 1 #reduceActionForWhenExpressions1: 10068993 false ) 
	#(190 0 #reduceActionFor_FromTables__QueryExpressions__1: 6892545 false ) 
	#(195 0 #reduceActionForQueryExpressions1: 7681025 false ) 
	#(188 1 #liftFirstValue: 6868994 false ) 
	#(219 2 #reduceActionForNamedExpression2: 10109954 false ) 
	#(169 1 #liftFirstValue: 3582987 false ) 
	#(169 1 #liftFirstValue: 3582995 false ) 
	#(169 1 #liftFirstValue: 3582983 false ) 
	#(169 1 #liftFirstValue: 3582977 false ) 
	#(169 1 #liftFirstValue: 3582979 false ) 
	#(169 1 #liftFirstValue: 3582980 false ) 
	#(169 1 #liftFirstValue: 3582988 false ) 
	#(169 1 #liftFirstValue: 3582989 false ) 
	#(169 1 #liftFirstValue: 3582991 false ) 
	#(169 1 #liftFirstValue: 3582985 false ) 
	#(169 1 #liftFirstValue: 3582986 false ) 
	#(169 1 #liftFirstValue: 3582993 false ) 
	#(169 1 #liftFirstValue: 3582990 false ) 
	#(169 1 #liftFirstValue: 3582992 false ) 
	#(169 1 #liftFirstValue: 3582984 false ) 
	#(169 1 #liftFirstValue: 3582981 false ) 
	#(169 1 #liftFirstValue: 3582982 false ) 
	#(169 1 #liftFirstValue: 3582994 false ) 
	#(169 1 #liftFirstValue: 3582978 false ) 
	#(178 2 #reduceActionForUsingColumn1: 5315585 false ) 
	#(167 1 #reduceActionForType1: 3314689 false ) 
	#(168 1 #reduceActionForWhenExpressions1: 3506177 false ) 
	#(176 3 #reduceActionForUsingStatement1: 5041153 false ) 
	#(187 3 #reduceActionForSelectQuery17: 6690833 false ) 
	#(200 1 #reduceActionForUnionSelectQuery2: 8305666 false ) 
	#(187 3 #reduceActionForSelectQuery23: 6690839 false ) 
	#(187 3 #reduceActionForSelectQuery21: 6690837 false ) 
	#(187 3 #reduceActionForSelectQuery19: 6690835 false ) 
	#(187 3 #reduceActionForSelectQuery13: 6690829 false ) 
	#(180 4 #reduceActionForCheckWorkloadStatement1: 5727233 false ) 
	#(170 4 #reduceActionForCheckpointStatement1: 3826689 false ) 
	#(207 2 #reduceActionFor__identifier___name_______period__1: 8832001 false ) 
	#(206 3 #reduceActionForTable4: 8822788 false ) 
	#(186 4 #reduceActionForDeleteQuery12: 6537228 false ) 
	#(186 4 #reduceActionForDeleteQuery11: 6537227 false ) 
	#(209 1 #liftFirstValue: 9138178 false ) 
	#(211 0 #reduceActionFor__ON___onToken__Expression__on___1: 9225217 false ) 
	#(213 2 #reduceActionForWhereExpression1: 9592833 false ) 
	#(206 3 #reduceActionForTable2: 8822786 false ) 
	#(186 4 #reduceActionForDeleteQuery12: 6537222 false ) 
	#(186 4 #reduceActionForDeleteQuery11: 6537221 false ) 
	#(175 4 #reduceActionForInsertQuery11: 4638731 false ) 
	#(175 4 #reduceActionForInsertQuery11: 4638729 false ) 
	#(162 4 #reduceActionForLockTableStatement5: 2727941 false ) 
	#(162 4 #reduceActionForLockTableStatement5: 2727937 false ) 
	#(220 3 #reduceActionForExpression58: 10232890 false ) 
	#(220 3 #reduceActionForExpression34: 10232866 false ) 
	#(221 3 #reduceActionForCaseExpression1: 14880769 false ) 
	#(223 2 #reduceActionFor_____semicolon__2: 15075330 false ) 
	#(220 3 #reduceActionForExpression101: 10232933 false ) 
	#(220 3 #reduceActionForExpression120: 10232952 false ) 
	#(190 1 #reduceActionFor_FromTables__QueryExpressions__2: 6892546 false ) 
	#(192 0 #reduceActionFor__ON___onToken__Expression__on___1: 6925313 false ) 
	#(189 1 #reduceActionFor_FromTables__QueryExpressions_1: 6892545 false ) 
	#(218 2 #reduceActionFor_____semicolon__2: 10068994 false ) 
	#(217 3 #reduceActionForExpressionList2: 10007554 false ) 
	#(220 3 #reduceActionForExpression11: 10232843 false ) 
	#(220 3 #reduceActionForExpression11: 10232847 false ) 
	#(220 3 #reduceActionForExpression11: 10232841 false ) 
	#(220 3 #reduceActionForExpression11: 10232842 false ) 
	#(220 3 #reduceActionForExpression11: 10232844 false ) 
	#(220 3 #reduceActionForExpression11: 10232854 false ) 
	#(220 3 #reduceActionForExpression11: 10232855 false ) 
	#(220 3 #reduceActionForExpression11: 10232852 false ) 
	#(220 3 #reduceActionForExpression11: 10232851 false ) 
	#(220 3 #reduceActionForExpression11: 10232856 false ) 
	#(220 3 #reduceActionForExpression11: 10232857 false ) 
	#(220 3 #reduceActionForExpression11: 10232849 false ) 
	#(219 3 #reduceActionForNamedExpression3: 10109955 false ) 
	#(220 3 #reduceActionForExpression11: 10232848 false ) 
	#(220 3 #reduceActionForExpression121: 10232953 false ) 
	#(220 3 #reduceActionForExpression35: 10232867 false ) 
	#(220 3 #reduceActionForExpression32: 10232864 false ) 
	#(220 3 #reduceActionForExpression26: 10232858 false ) 
	#(220 3 #reduceActionForExpression11: 10232845 false ) 
	#(220 3 #reduceActionForExpression11: 10232853 false ) 
	#(220 3 #reduceActionForExpression11: 10232850 false ) 
	#(220 3 #reduceActionForExpression11: 10232846 false ) 
	#(225 3 #reduceActionForFunctionExpression1: 15270913 false ) 
	#(205 1 #reduceActionForStatements1: 8751105 false ) 
	#(172 4 #reduceActionForUpdateQuery1: 4067329 false ) 
	#(173 1 #reduceActionForStatements1: 4442113 false ) 
	#(168 2 #reduceActionForTypeName2: 3506178 false ) 
	#(177 3 #reduceActionForUsingColumns2: 5224450 false ) 
	#(187 4 #reduceActionForSelectQuery18: 6690834 false ) 
	#(197 3 #reduceActionForUsingColumns2: 7949314 false ) 
	#(156 4 #reduceActionForStatements2: 1508354 false ) 
	#(187 4 #reduceActionForSelectQuery14: 6690830 false ) 
	#(187 5 #reduceActionForSelectQuery24: 6690840 false ) 
	#(187 5 #reduceActionForSelectQuery22: 6690838 false ) 
	#(187 5 #reduceActionForSelectQuery20: 6690836 false ) 
	#(187 5 #reduceActionForSelectQuery15: 6690831 false ) 
	#(170 5 #reduceActionForCheckpointStatement2: 3826690 false ) 
	#(165 1 #reduceActionForStatements1: 3163137 false ) 
	#(206 4 #reduceActionForTable5: 8822789 false ) 
	#(211 1 #reduceActionFor_FromTables__QueryExpressions__2: 9225218 false ) 
	#(206 4 #reduceActionForTable7: 8822791 false ) 
	#(206 4 #reduceActionForTable3: 8822787 false ) 
	#(185 5 #reduceActionForExecuteStatement4: 6379524 false ) 
	#(185 5 #reduceActionForExecuteStatement4: 6379522 false ) 
	#(162 5 #reduceActionForLockTableStatement7: 2727943 false ) 
	#(162 5 #reduceActionForLockTableStatement6: 2727942 false ) 
	#(162 5 #reduceActionForLockTableStatement7: 2727939 false ) 
	#(162 5 #reduceActionForLockTableStatement6: 2727938 false ) 
	#(221 4 #reduceActionForCaseExpression3: 14880771 false ) 
	#(222 2 #reduceActionForElseExpression1: 15009793 false ) 
	#(221 4 #reduceActionForCaseExpression2: 14880770 false ) 
	#(220 4 #reduceActionForExpression104: 10232936 false ) 
	#(220 4 #reduceActionForExpression113: 10232945 false ) 
	#(220 4 #reduceActionForExpression54: 10232886 false ) 
	#(204 2 #reduceActionForFromTables1: 8704001 false ) 
	#(192 1 #reduceActionFor_FromTables__QueryExpressions__2: 6925314 false ) 
	#(194 0 #nil 6969345 false ) 
	#(195 2 #reduceActionForQueryExpressions2: 7681026 false ) 
	#(196 1 #reduceActionForQueryExpression3: 7741443 false ) 
	#(196 1 #reduceActionForQueryExpression5: 7741445 false ) 
	#(196 1 #reduceActionForQueryExpression4: 7741444 false ) 
	#(196 1 #reduceActionForQueryExpression1: 7741441 false ) 
	#(196 1 #reduceActionForQueryExpression2: 7741442 false ) 
	#(196 1 #reduceActionForQueryExpression6: 7741446 false ) 
	#(189 2 #reduceActionFor_FromTables__QueryExpressions_2: 6892546 false ) 
	#(220 4 #reduceActionForExpression102: 10232934 false ) 
	#(220 4 #reduceActionForExpression44: 10232876 false ) 
	#(220 4 #reduceActionForExpression33: 10232865 false ) 
	#(220 4 #reduceActionForExpression37: 10232869 false ) 
	#(220 4 #reduceActionForExpression28: 10232860 false ) 
	#(220 4 #reduceActionForExpression61: 10232893 false ) 
	#(225 4 #reduceActionForFunctionExpression2: 15270914 false ) 
	#(172 5 #reduceActionForUpdateQuery4: 4067332 false ) 
	#(172 5 #reduceActionForUpdateQuery7: 4067335 false ) 
	#(176 5 #reduceActionForUsingStatement2: 5041154 false ) 
	#(178 4 #reduceActionForUsingColumn2: 5315586 false ) 
	#(187 6 #reduceActionForSelectQuery16: 6690832 false ) 
	#(164 3 #reduceActionForMacroArgs2: 3095554 false ) 
	#(166 2 #reduceActionForParameter1: 3258369 false ) 
	#(206 5 #reduceActionForTable6: 8822790 false ) 
	#(206 5 #reduceActionForTable12: 8822796 false ) 
	#(206 5 #reduceActionForTable12: 8822795 false ) 
	#(210 2 #reduceActionFor__identifier___name_______period__1: 9225217 false ) 
	#(175 6 #reduceActionForInsertQuery5: 4638725 false ) 
	#(175 6 #reduceActionForInsertQuery5: 4638721 false ) 
	#(162 6 #reduceActionForLockTableStatement8: 2727944 false ) 
	#(162 6 #reduceActionForLockTableStatement8: 2727940 false ) 
	#(161 6 #reduceActionForRollbackStatement1: 2580481 false ) 
	#(224 4 #reduceActionForWhenExpression1: 15162369 false ) 
	#(221 5 #reduceActionForCaseExpression4: 14880772 false ) 
	#(220 5 #reduceActionForExpression46: 10232878 false ) 
	#(220 5 #reduceActionForExpression106: 10232938 false ) 
	#(220 5 #reduceActionForExpression106: 10232937 false ) 
	#(220 5 #reduceActionForExpression114: 10232946 false ) 
	#(220 5 #reduceActionForExpression119: 10232951 false ) 
	#(203 4 #reduceActionForIntoExpression1: 8608769 false ) 
	#(191 2 #reduceActionFor__identifier___name_______period__1: 6925313 false ) 
	#(193 1 #liftFirstValue: 6969345 false ) 
	#(194 1 #liftFirstValue: 6969346 false ) 
	#(187 6 #reduceActionForSelectQuery7: 6690823 false ) 
	#(199 2 #reduceActionForHavingExpression1: 8223745 false ) 
	#(201 2 #reduceActionForQualifyExpression1: 8435713 false ) 
	#(220 5 #reduceActionForExpression43: 10232875 false ) 
	#(220 5 #reduceActionForExpression103: 10232935 false ) 
	#(220 5 #reduceActionForExpression52: 10232884 false ) 
	#(220 5 #reduceActionForExpression39: 10232871 false ) 
	#(220 5 #reduceActionForExpression27: 10232859 false ) 
	#(220 5 #reduceActionForExpression81: 10232913 false ) 
	#(220 5 #reduceActionForExpression71: 10232903 false ) 
	#(187 6 #reduceActionForSelectQuery7: 6690817 false ) 
	#(181 6 #reduceActionForSetStatement1: 5927937 false ) 
	#(172 6 #reduceActionForUpdateQuery13: 4067341 false ) 
	#(205 3 #reduceActionForUsingColumns2: 8751106 false ) 
	#(172 6 #reduceActionForUpdateQuery19: 4067347 false ) 
	#(173 3 #reduceActionForUsingColumns2: 4442114 false ) 
	#(172 6 #reduceActionForUpdateQuery3: 4067331 false ) 
	#(172 6 #reduceActionForUpdateQuery3: 4067330 false ) 
	#(174 3 #reduceActionForSetExpression1: 4561921 false ) 
	#(172 6 #reduceActionForUpdateQuery10: 4067338 false ) 
	#(167 4 #reduceActionForType3: 3314691 false ) 
	#(167 4 #reduceActionForType2: 3314690 false ) 
	#(198 5 #reduceActionForWithTable1: 8038401 false ) 
	#(200 4 #reduceActionForUnionSelectQuery1: 8305665 false ) 
	#(179 7 #reduceActionForLoadingStatement1: 5446657 false ) 
	#(165 3 #reduceActionForUsingColumns2: 3163138 false ) 
	#(206 6 #reduceActionForTable13: 8822797 false ) 
	#(206 6 #reduceActionForTable10: 8822794 false ) 
	#(206 6 #reduceActionForTable10: 8822792 false ) 
	#(206 6 #reduceActionForTable10: 8822793 false ) 
	#(175 7 #reduceActionForInsertQuery12: 4638732 false ) 
	#(175 7 #reduceActionForInsertQuery7: 4638727 false ) 
	#(175 7 #reduceActionForInsertQuery12: 4638730 false ) 
	#(175 7 #reduceActionForInsertQuery7: 4638723 false ) 
	#(158 7 #reduceActionForMergeQuery1: 1990657 false ) 
	#(159 1 #reduceActionForWhenExpressions1: 2146305 false ) 
	#(220 6 #reduceActionForExpression48: 10232880 false ) 
	#(187 7 #reduceActionForSelectQuery9: 6690825 false ) 
	#(187 7 #reduceActionForSelectQuery9: 6690827 false ) 
	#(220 6 #reduceActionForExpression60: 10232892 false ) 
	#(220 6 #reduceActionForExpression30: 10232862 false ) 
	#(220 6 #reduceActionForExpression115: 10232947 false ) 
	#(220 6 #reduceActionForExpression115: 10232949 false ) 
	#(220 6 #reduceActionForExpression55: 10232887 false ) 
	#(220 6 #reduceActionForExpression55: 10232889 false ) 
	#(220 6 #reduceActionForExpression55: 10232888 false ) 
	#(216 3 #reduceActionForOrderByExpression1: 9925633 false ) 
	#(214 3 #reduceActionForGroupByExpression2: 9661442 false ) 
	#(214 3 #reduceActionForGroupByExpression1: 9661441 false ) 
	#(202 3 #reduceActionForPartitionByExpression1: 8514561 false ) 
	#(220 6 #reduceActionForExpression53: 10232885 false ) 
	#(220 6 #reduceActionForExpression40: 10232872 false ) 
	#(220 6 #reduceActionForExpression29: 10232861 false ) 
	#(220 6 #reduceActionForExpression91: 10232923 false ) 
	#(187 7 #reduceActionForSelectQuery9: 6690819 false ) 
	#(187 7 #reduceActionForSelectQuery9: 6690821 false ) 
	#(181 7 #reduceActionForSetStatement2: 5927938 false ) 
	#(172 7 #reduceActionForUpdateQuery16: 4067344 false ) 
	#(172 7 #reduceActionForUpdateQuery20: 4067348 false ) 
	#(172 7 #reduceActionForUpdateQuery6: 4067334 false ) 
	#(172 7 #reduceActionForUpdateQuery6: 4067333 false ) 
	#(172 7 #reduceActionForUpdateQuery9: 4067337 false ) 
	#(172 7 #reduceActionForUpdateQuery9: 4067336 false ) 
	#(206 7 #reduceActionForTable17: 8822801 false ) 
	#(206 7 #reduceActionForTable17: 8822800 false ) 
	#(158 8 #reduceActionForMergeQuery2: 1990658 false ) 
	#(159 2 #reduceActionFor_____semicolon__2: 2146306 false ) 
	#(220 7 #reduceActionForExpression47: 10232879 false ) 
	#(187 8 #reduceActionForSelectQuery8: 6690824 false ) 
	#(215 2 #reduceActionForEmptyGroupByExpression1: 9834497 false ) 
	#(220 7 #reduceActionForExpression45: 10232877 false ) 
	#(220 7 #reduceActionForExpression36: 10232868 false ) 
	#(187 8 #reduceActionForSelectQuery8: 6690818 false ) 
	#(172 8 #reduceActionForUpdateQuery15: 4067343 false ) 
	#(172 8 #reduceActionForUpdateQuery15: 4067342 false ) 
	#(172 8 #reduceActionForUpdateQuery12: 4067340 false ) 
	#(172 8 #reduceActionForUpdateQuery12: 4067339 false ) 
	#(167 6 #reduceActionForType5: 3314693 false ) 
	#(163 9 #reduceActionForCreateMacroStatement1: 2907137 false ) 
	#(206 8 #reduceActionForTable14: 8822798 false ) 
	#(206 8 #reduceActionForTable14: 8822799 false ) 
	#(175 9 #reduceActionForInsertQuery6: 4638726 false ) 
	#(175 9 #reduceActionForInsertQuery6: 4638722 false ) 
	#(220 8 #reduceActionForExpression49: 10232881 false ) 
	#(187 9 #reduceActionForSelectQuery10: 6690826 false ) 
	#(187 9 #reduceActionForSelectQuery10: 6690828 false ) 
	#(220 8 #reduceActionForExpression31: 10232863 false ) 
	#(220 8 #reduceActionForExpression116: 10232948 false ) 
	#(220 8 #reduceActionForExpression116: 10232950 false ) 
	#(220 8 #reduceActionForExpression38: 10232870 false ) 
	#(187 9 #reduceActionForSelectQuery10: 6690820 false ) 
	#(187 9 #reduceActionForSelectQuery10: 6690822 false ) 
	#(172 9 #reduceActionForUpdateQuery18: 4067346 false ) 
	#(172 9 #reduceActionForUpdateQuery18: 4067345 false ) 
	#(167 7 #reduceActionForType4: 3314692 false ) 
	#(198 8 #reduceActionForWithTable2: 8038402 false ) 
	#(175 10 #reduceActionForInsertQuery8: 4638728 false ) 
	#(175 10 #reduceActionForInsertQuery8: 4638724 false ) 
	#(220 9 #reduceActionForExpression41: 10232873 false ) 
	#(220 10 #reduceActionForExpression42: 10232874 false ) 
	#(167 9 #reduceActionForType6: 3314694 false ) 
	#(160 6 #reduceActionForWhenMergeCondition1: 2187265 false ) 
	#(220 11 #reduceActionForExpression70: 10232902 false ) 
	#(220 11 #reduceActionForExpression69: 10232901 false ) 
	#(220 11 #reduceActionForExpression69: 10232900 false ) 
	#(220 11 #reduceActionForExpression67: 10232899 false ) 
	#(220 11 #reduceActionForExpression66: 10232898 false ) 
	#(220 11 #reduceActionForExpression66: 10232897 false ) 
	#(220 11 #reduceActionForExpression67: 10232896 false ) 
	#(220 11 #reduceActionForExpression66: 10232895 false ) 
	#(220 11 #reduceActionForExpression66: 10232894 false ) 
	#(220 12 #reduceActionForExpression90: 10232922 false ) 
	#(220 12 #reduceActionForExpression89: 10232921 false ) 
	#(220 12 #reduceActionForExpression89: 10232920 false ) 
	#(220 12 #reduceActionForExpression87: 10232919 false ) 
	#(220 12 #reduceActionForExpression86: 10232918 false ) 
	#(220 12 #reduceActionForExpression86: 10232917 false ) 
	#(220 12 #reduceActionForExpression87: 10232916 false ) 
	#(220 12 #reduceActionForExpression86: 10232915 false ) 
	#(220 12 #reduceActionForExpression86: 10232914 false ) 
	#(220 12 #reduceActionForExpression80: 10232912 false ) 
	#(220 12 #reduceActionForExpression79: 10232911 false ) 
	#(220 12 #reduceActionForExpression79: 10232910 false ) 
	#(220 12 #reduceActionForExpression77: 10232909 false ) 
	#(220 12 #reduceActionForExpression76: 10232908 false ) 
	#(220 12 #reduceActionForExpression76: 10232907 false ) 
	#(220 12 #reduceActionForExpression77: 10232906 false ) 
	#(220 12 #reduceActionForExpression76: 10232905 false ) 
	#(220 12 #reduceActionForExpression76: 10232904 false ) 
	#(160 8 #reduceActionForWhenMergeCondition2: 2187266 false ) 
	#(220 13 #reduceActionForExpression100: 10232932 false ) 
	#(220 13 #reduceActionForExpression99: 10232931 false ) 
	#(220 13 #reduceActionForExpression99: 10232930 false ) 
	#(220 13 #reduceActionForExpression97: 10232929 false ) 
	#(220 13 #reduceActionForExpression96: 10232928 false ) 
	#(220 13 #reduceActionForExpression96: 10232927 false ) 
	#(220 13 #reduceActionForExpression97: 10232926 false ) 
	#(220 13 #reduceActionForExpression96: 10232925 false ) 
	#(220 13 #reduceActionForExpression96: 10232924 false ) 
	#(160 12 #reduceActionForWhenMergeCondition3: 2187267 false )
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> scannerClass [
	^TeradataScanner
]

{ #category : #generated }
TeradataParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
TeradataParser class >> symbolNames [
	^ #('"("' '")"' '"*"' '"**"' '"+"' '","' '"-"' '"."' '"/"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"ALL"' '"AND"' '"AS"' '"BEGIN"' '"BETWEEN"' '"BIGINT"' '"BOTH"' '"BT"' '"BY"' '"BYTE"' '"BYTEINT"' '"CASE"' '"CASESPECIFIC"' '"CAST"' '"CHAR"' '"CHARACTER"' '"CHECK"' '"CHECKPOINT"' '"CLOB"' '"COUNT"' '"CREATE"' '"CROSS"' '"CURRENT"' '"CURSOR"' '"DATABASE"' '"DATE"' '"DEC"' '"DECIMAL"' '"DEL"' '"DELETE"' '"DISTINCT"' '"DISTINCTROW"' '"DOUBLE"' '"DROP"' '"ELSE"' '"END"' '"EQ"' '"ERROR"' '"ERRORFILES"' '"ESCAPE"' '"ET"' '"EXCEPT"' '"EXEC"' '"EXECUTE"' '"EXISTS"' '"EXTRACT"' '"FLOAT"' '"FOR"' '"FORMAT"' '"FROM"' '"FULL"' '"GROUP"' '"HAVING"' '"HELP"' '"IGNORE"' '"IN"' '"INNER"' '"INS"' '"INSERT"' '"INT"' '"INTEGER"' '"INTERSECT"' '"INTERVAL"' '"INTO"' '"IS"' '"JOIN"' '"LEADING"' '"LEFT"' '"LIKE"' '"LOADING"' '"LOCK"' '"LOCKING"' '"MACRO"' '"MATCHED"' '"MERGE"' '"MINUS"' '"MOD"' '"NE"' '"NOT"' '"NULL"' '"NULLS"' '"NUMBER"' '"NUMERIC"' '"ON"' '"OR"' '"ORDER"' '"OUTER"' '"OVER"' '"PARTITION"' '"PRECEDING"' '"PRECISION"' '"QUALIFY"' '"REAL"' '"RECURSIVE"' '"RIGHT"' '"ROLLBACK"' '"ROW"' '"ROWS"' '"SEL"' '"SELECT"' '"SESSION"' '"SET"' '"SMALLINT"' '"SUBSTRING"' '"TABLE"' '"THEN"' '"TIME"' '"TIMESTAMP"' '"TITLE"' '"TOP"' '"TRAILING"' '"TRANSLATE"' '"TRANSLATE_CHK"' '"TRIM"' '"UESCAPE"' '"UNBOUNDED"' '"UNION"' '"UPDATE"' '"USING"' '"VALUES"' '"VARBYTE"' '"VARCHAR"' '"WHEN"' '"WHERE"' '"WITH"' '"WORK"' '"WORKLOAD"' '"XMLAGG"' '"||"' '<identifier>' '<variable>' '<ustring>' '<string>' '<number>' '<whitespace>' '<comment>' 'B e g i n' 'File' '";" ''semicolon''*' 'Statements' 'Statement' 'MergeQuery' 'WhenMergeCondition ''whenMerge''+' 'WhenMergeCondition' 'RollbackStatement' 'LockTableStatement' 'CreateMacroStatement' 'MacroArgs' 'ParameterList' 'Parameter' 'Type' 'TypeName' 'SingleTypeName' 'CheckpointStatement' 'DropTableQuery' 'UpdateQuery' 'SetExpressionList' 'SetExpression' 'InsertQuery' 'UsingStatement' 'UsingColumns' 'UsingColumn' 'LoadingStatement' 'CheckWorkloadStatement' 'SetStatement' 'HelpSessionStatement' 'TransactionStatement' 'DatabaseStatement' 'ExecuteStatement' 'DeleteQuery' 'SelectQuery' 'IntoExpression ''into''?' '(FromTables? QueryExpressions)' '(FromTables? QueryExpressions)?' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')?' '(<number> ''count'')' '(<number> ''count'')?' 'QueryExpressions' 'QueryExpression' 'WithTables' 'WithTable' 'HavingExpression' 'UnionSelectQuery' 'QualifyExpression' 'PartitionByExpression' 'IntoExpression' 'FromTables' 'TableList' 'Table' '(<identifier> ''name'' "." ''period'')' '(<identifier> ''name'' "." ''period'')*' '"OUTER" ''type''?' '("ON" ''onToken'' Expression ''on'')' '("ON" ''onToken'' Expression ''on'')?' 'TableName' 'WhereExpression' 'GroupByExpression' 'EmptyGroupByExpression' 'OrderByExpression' 'ExpressionList' '"," ''comma''+' 'NamedExpression' 'Expression' 'CaseExpression' 'ElseExpression' 'WhenExpressions' 'WhenExpression' 'FunctionExpression' 'Identifier' 'IdentifierName' 'E O F' 'error')
]

{ #category : #generated }
TeradataParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #TeradataFileNode #TeradataFileNode #OrderedCollection #OrderedCollection #TeradataProgramNode #TeradataMergeQueryNode #OrderedCollection #TeradataWhenMergeConditionNode #TeradataRollbackStatementNode #TeradataLockTableStatementNode #TeradataCreateMacroStatementNode #OrderedCollection #OrderedCollection #TeradataParameterNode #TeradataTypeNode #OrderedCollection #SmaCCToken #TeradataCheckpointStatementNode #TeradataDropTableQueryNode #TeradataUpdateQueryNode #OrderedCollection #TeradataSetExpressionNode #TeradataInsertQueryNode #TeradataUsingStatementNode #OrderedCollection #TeradataUsingColumnNode #TeradataProgramNode #TeradataCheckWorkloadStatementNode #TeradataSetStatementNode #TeradataHelpSessionStatementNode #TeradataProgramNode #TeradataDatabaseStatementNode #TeradataExecuteStatementNode #TeradataDeleteQueryNode #TeradataProgramNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #TeradataWithTableDefinitionNode #TeradataHavingNode #OrderedCollection #TeradataQualifyExpressionNode #TeradataPartitionByExpressionNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #TeradataProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #TeradataTableNode #TeradataWhereExpressionNode #TeradataGroupByNode #TeradataEmptyGroupByExpressionNode #TeradataOrderByExpressionNode #OrderedCollection #OrderedCollection #TeradataExpressionNode #TeradataExpressionNode #TeradataCaseExpressionNode #TeradataElseExpressionNode #OrderedCollection #TeradataWhenExpressionNode #TeradataFunctionExpressionNode #TeradataIdentifierExpressionNode #TeradataIdentifierNameNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
TeradataParser class >> transitionTable [
^#(
#[1 0 9 0 1 0 6 0 10 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 0 117 0 154 0 121 0 155 0 125 0 156 0 129 0 157 0 129 0 158 0 129 0 161 0 129 0 162 0 129 0 163 0 129 0 170 0 129 0 171 0 129 0 172 0 129 0 175 0 129 0 176 0 129 0 179 0 129 0 180 0 129 0 181 0 129 0 182 0 129 0 183 0 129 0 184 0 129 0 185 0 129 0 186 0 201 0 187 0 6 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 0 205 0 187] 
#[0 0 209 0 86] 
#[0 0 10 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 213 0 143] 
#[0 0 217 0 86] 
#[0 0 221 0 89] 
#[1 0 14 0 146 0 225 0 208 0 229 0 227] 
#[1 0 233 0 1 0 237 0 66 0 14 0 146 0 241 0 206 0 245 0 208] 
#[1 0 233 0 1 0 249 0 66 0 14 0 146 0 253 0 206 0 245 0 208] 
#[0 1 1 0 121] 
#[0 1 5 0 86] 
#[0 0 18 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 14 0 146 0 225 0 208 1 9 0 227] 
#[1 0 14 0 146 0 225 0 208 1 13 0 227] 
#[0 1 17 0 117] 
#[1 1 21 0 80 0 14 0 146 1 25 0 208 1 29 0 212] 
#[1 1 33 0 80 0 14 0 146 1 25 0 208 1 37 0 212] 
#[1 1 41 0 121 0 14 0 146 1 25 0 208 1 45 0 212] 
#[1 1 49 0 121 0 14 0 146 1 25 0 208 1 53 0 212] 
#[1 0 233 0 1 1 57 0 80 0 14 0 146 1 61 0 206 0 245 0 208] 
#[0 1 65 0 142] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 97 0 47 1 101 0 48 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 137 0 126 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 1 177 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 205 0 47 1 209 0 48 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 213 0 126 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 1 217 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 14 0 146 0 225 0 208 1 221 0 227] 
#[1 0 14 0 146 1 25 0 208 1 225 0 212] 
#[1 1 229 0 1 1 233 0 146 1 237 0 177 1 241 0 178] 
#[1 1 245 0 110 0 14 0 146 1 249 0 197 1 253 0 198 0 225 0 208 2 1 0 227] 
#[0 0 0 0 228] 
#[1 2 5 0 10 0 22 0 228] 
#[1 0 6 0 10 2 9 0 155 0 6 0 228] 
#[0 0 26 0 2 0 10 0 228] 
#[0 0 30 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 34 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 38 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 42 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 46 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 50 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 54 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 58 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 62 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 66 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 70 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 74 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 78 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 82 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 86 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 90 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 94 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 98 0 2 0 98 0 10 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133 0 98 0 228] 
#[1 2 29 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 0 14 0 146 1 25 0 208 2 33 0 212] 
#[1 2 37 0 52 2 41 0 64] 
#[0 2 45 0 79] 
#[1 0 14 0 146 0 225 0 208 2 49 0 227] 
#[1 2 53 0 146 2 57 0 207] 
#[0 0 102 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 61 0 1 0 93 0 115 0 97 0 116 0 113 0 141 0 14 0 146 2 65 0 187 2 69 0 206 0 245 0 208] 
#[1 0 233 0 1 0 14 0 146 2 73 0 206 0 245 0 208] 
#[1 0 106 0 2 0 106 0 10 2 77 0 17 2 81 0 38 0 106 0 58 2 85 0 67 2 89 0 73 0 106 0 78 2 93 0 82 2 97 0 84 0 106 0 92 2 101 0 111 0 106 0 133 2 105 0 140 2 109 0 213 0 106 0 228] 
#[1 2 113 0 146 2 57 0 207] 
#[1 0 233 0 1 0 14 0 146 2 117 0 206 0 245 0 208] 
#[1 0 110 0 2 0 110 0 10 2 121 0 17 2 81 0 38 0 110 0 58 2 85 0 67 2 89 0 73 0 110 0 78 2 93 0 82 2 97 0 84 0 110 0 92 2 101 0 111 0 110 0 133 2 105 0 140 2 125 0 213 0 110 0 228] 
#[1 0 14 0 146 1 25 0 208 2 129 0 212] 
#[0 0 114 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 133 0 1 0 118 0 2 0 118 0 10 0 118 0 58 0 118 0 78 0 118 0 92 0 118 0 133 0 118 0 228] 
#[1 2 137 0 1 0 122 0 2 0 122 0 10 0 122 0 58 0 122 0 78 0 122 0 92 0 122 0 133 0 122 0 228] 
#[0 0 126 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 14 0 146 1 25 0 208 2 141 0 212] 
#[1 2 145 0 146 2 57 0 207] 
#[1 2 149 0 1 2 153 0 136] 
#[1 0 14 0 146 1 25 0 208 2 157 0 212] 
#[1 2 161 0 1 2 165 0 136] 
#[1 0 14 0 146 1 25 0 208 2 169 0 212] 
#[0 2 173 0 64] 
#[1 0 14 0 146 1 25 0 208 2 177 0 212] 
#[0 2 181 0 64] 
#[1 0 233 0 1 0 14 0 146 2 185 0 206 0 245 0 208] 
#[1 2 81 0 38 2 85 0 67 2 89 0 73 2 93 0 82 2 97 0 84 2 101 0 111 2 189 0 135] 
#[0 2 193 0 149] 
#[1 2 197 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 2 201 0 187 1 173 0 208 2 205 0 220 2 205 0 221 2 205 0 225 2 205 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 2 209 0 220 2 209 0 221 2 209 0 225 2 209 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 2 213 0 220 2 213 0 221 2 213 0 225 2 213 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 2 217 0 139 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 2 221 0 220 2 221 0 221 2 225 0 223 2 229 0 224 2 221 0 225 2 221 0 226 1 201 0 227] 
#[0 2 233 0 1] 
#[0 2 237 0 1] 
#[1 0 130 0 1 0 130 0 2 0 130 0 3 0 130 0 4 0 130 0 5 0 130 0 6 0 130 0 7 0 130 0 9 0 130 0 10 0 130 0 11 0 130 0 12 0 130 0 13 0 130 0 14 0 130 0 15 0 130 0 16 0 130 0 17 0 130 0 18 0 130 0 19 0 130 0 21 0 130 0 38 0 130 0 51 0 130 0 52 0 130 0 53 0 130 0 56 0 130 0 58 0 130 0 64 0 130 0 66 0 130 0 67 0 130 0 68 0 130 0 69 0 130 0 71 0 130 0 72 0 130 0 73 0 130 0 78 0 130 0 80 0 130 0 81 0 130 0 82 0 130 0 84 0 130 0 85 0 130 0 92 0 130 0 93 0 130 0 94 0 130 0 95 0 130 0 100 0 130 0 101 0 130 0 102 0 130 0 104 0 130 0 105 0 130 0 108 0 130 0 111 0 130 0 114 0 130 0 118 0 130 0 122 0 130 0 133 0 130 0 134 0 130 0 135 0 130 0 139 0 130 0 140 0 130 0 141 0 130 0 145 0 130 0 146 2 241 0 149 0 130 0 150 0 130 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 2 245 0 126 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 2 249 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 2 253 0 126 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 3 1 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 3 5 0 1] 
#[0 3 9 0 1] 
#[0 3 13 0 149] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 3 17 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 3 21 0 220 3 21 0 221 3 21 0 225 3 21 0 226 1 201 0 227] 
#[0 0 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 25 0 1] 
#[1 0 138 0 1 0 138 0 2 0 138 0 3 0 138 0 4 0 138 0 5 0 138 0 6 0 138 0 7 0 138 0 9 0 138 0 10 0 138 0 11 0 138 0 12 0 138 0 13 0 138 0 14 0 138 0 15 0 138 0 16 0 138 0 17 0 138 0 18 0 138 0 19 0 138 0 21 0 138 0 38 0 138 0 51 0 138 0 52 0 138 0 53 0 138 0 56 0 138 0 58 0 138 0 64 0 138 0 66 0 138 0 67 0 138 0 68 0 138 0 69 0 138 0 71 0 138 0 72 0 138 0 73 0 138 0 78 0 138 0 80 0 138 0 81 0 138 0 82 0 138 0 84 0 138 0 85 0 138 0 92 0 138 0 93 0 138 0 94 0 138 0 95 0 138 0 100 0 138 0 101 0 138 0 102 0 138 0 104 0 138 0 105 0 138 0 108 0 138 0 111 0 138 0 114 0 138 0 118 0 138 0 122 0 138 0 133 0 138 0 134 0 138 0 135 0 138 0 139 0 138 0 140 0 138 0 141 0 138 0 145 0 138 0 146 3 29 0 149 0 138 0 150 0 138 0 228] 
#[1 0 142 0 1 0 142 0 2 0 142 0 3 0 142 0 4 0 142 0 5 0 142 0 6 0 142 0 7 0 142 0 9 0 142 0 10 0 142 0 11 0 142 0 12 0 142 0 13 0 142 0 14 0 142 0 15 0 142 0 16 0 142 0 17 0 142 0 18 0 142 0 19 0 142 0 21 0 142 0 38 0 142 0 51 0 142 0 52 0 142 0 53 0 142 0 56 0 142 0 58 0 142 0 64 0 142 0 66 0 142 0 67 0 142 0 68 0 142 0 69 0 142 0 71 0 142 0 72 0 142 0 73 0 142 0 78 0 142 0 80 0 142 0 81 0 142 0 82 0 142 0 84 0 142 0 85 0 142 0 92 0 142 0 93 0 142 0 94 0 142 0 95 0 142 0 100 0 142 0 101 0 142 0 102 0 142 0 104 0 142 0 105 0 142 0 108 0 142 0 111 0 142 0 114 0 142 0 118 0 142 0 122 0 142 0 133 0 142 0 134 0 142 0 135 0 142 0 139 0 142 0 140 0 142 0 141 0 142 0 145 0 142 0 146 3 33 0 149 0 142 0 150 0 142 0 228] 
#[0 3 37 0 150] 
#[0 3 41 0 1] 
#[0 3 45 0 1] 
#[0 3 49 0 1] 
#[0 3 53 0 1] 
#[0 0 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 57 0 131] 
#[0 0 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 3 61 0 3 3 65 0 146 2 57 0 207] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 3 77 0 188 3 77 0 203 3 85 0 218 0 158 0 228] 
#[0 0 162 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[1 3 89 0 1 0 166 0 2 3 93 0 3 3 97 0 4 3 101 0 5 0 166 0 6 3 105 0 7 3 109 0 9 0 166 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 141 0 19 3 145 0 21 3 149 0 53 0 166 0 58 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 69 3 153 0 71 3 157 0 72 0 166 0 78 0 166 0 80 3 161 0 81 3 165 0 85 0 166 0 92 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 0 166 0 102 3 185 0 104 0 166 0 105 0 166 0 108 0 166 0 114 0 166 0 133 0 166 0 140 0 166 0 141 3 189 0 145 3 193 0 146 0 166 0 150 0 166 0 228] 
#[0 0 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 0 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 197 0 1] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 3 201 0 126 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 3 205 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 3 209 0 126 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 3 213 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 3 217 0 150] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 3 221 0 188 3 221 0 203 3 85 0 218 0 158 0 228] 
#[0 3 225 0 14] 
#[1 3 229 0 19 3 233 0 66 3 237 0 118 3 241 0 146] 
#[1 1 233 0 146 3 245 0 177 1 241 0 178] 
#[1 3 249 0 1 4 85 0 22 4 85 0 26 4 85 0 27 4 85 0 31 4 85 0 35 4 85 0 42 4 85 0 43 4 85 0 44 4 29 0 49 4 85 0 63 4 85 0 76 4 85 0 77 4 85 0 98 4 85 0 99 4 85 0 109 4 85 0 119 4 85 0 123 4 85 0 124 4 85 0 137 4 85 0 138 4 77 0 167 4 81 0 168 4 85 0 169] 
#[1 0 9 0 1 4 89 0 6 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 4 93 0 157 4 93 0 158 4 93 0 161 4 93 0 162 4 93 0 163 4 93 0 170 4 93 0 171 4 93 0 172 4 93 0 175 4 93 0 176 4 93 0 179 4 93 0 180 4 93 0 181 4 93 0 182 4 93 0 183 4 93 0 184 4 93 0 185 4 93 0 186 0 201 0 187] 
#[0 0 182 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 0 14 0 146 4 97 0 197 1 253 0 198 0 225 0 208 2 1 0 227] 
#[1 0 9 0 1 4 101 0 6 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 4 105 0 157 4 105 0 158 4 105 0 161 4 105 0 162 4 105 0 163 4 105 0 170 4 105 0 171 4 105 0 172 4 105 0 175 4 105 0 176 4 105 0 179 4 105 0 180 4 105 0 181 4 105 0 182 4 105 0 183 4 105 0 184 4 105 0 185 4 105 0 186 0 201 0 187] 
#[0 0 186 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 4 109 0 1 4 113 0 19] 
#[0 0 190 0 10 0 228] 
#[1 4 117 0 10 0 194 0 228] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 4 129 0 200] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 4 133 0 200] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 4 137 0 200] 
#[1 4 121 0 1 4 141 0 17 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 4 145 0 200] 
#[1 4 149 0 58 4 153 0 78 4 157 0 92 4 161 0 133] 
#[0 4 165 0 55] 
#[0 0 198 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 9 0 1 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 4 169 0 157 4 169 0 158 4 169 0 161 4 169 0 162 4 169 0 163 4 169 0 170 4 169 0 171 4 169 0 172 4 169 0 175 4 169 0 176 4 169 0 179 4 169 0 180 4 169 0 181 4 169 0 182 4 169 0 183 4 169 0 184 4 169 0 185 4 169 0 186 0 201 0 187] 
#[0 4 173 0 150] 
#[1 4 177 0 1 0 202 0 19 4 181 0 164] 
#[1 0 206 0 1 0 206 0 2 4 185 0 8 0 206 0 10 0 206 0 14 0 206 0 19 0 206 0 22 0 206 0 26 0 206 0 27 0 206 0 31 0 206 0 35 0 206 0 42 0 206 0 43 0 206 0 44 0 206 0 49 0 206 0 58 0 206 0 63 0 206 0 76 0 206 0 77 0 206 0 78 0 206 0 92 0 206 0 98 0 206 0 99 0 206 0 109 0 206 0 119 0 206 0 123 0 206 0 124 0 206 0 133 0 206 0 137 0 206 0 138 0 206 0 228] 
#[0 0 210 0 3 0 146] 
#[1 2 61 0 1 0 93 0 115 0 97 0 116 0 113 0 141 0 14 0 146 4 189 0 187 2 69 0 206 0 245 0 208] 
#[1 4 193 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 4 197 0 38 2 85 0 67 4 201 0 73 4 205 0 82 4 209 0 84 4 213 0 111] 
#[1 0 214 0 2 0 214 0 10 4 217 0 17 2 81 0 38 0 214 0 58 2 85 0 67 2 89 0 73 0 214 0 78 2 93 0 82 2 97 0 84 0 214 0 92 2 101 0 111 0 214 0 133 2 105 0 140 4 221 0 213 0 214 0 228] 
#[0 0 218 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 225 0 82] 
#[1 0 222 0 82 4 233 0 103 4 233 0 209] 
#[0 4 237 0 82] 
#[1 0 233 0 1 0 14 0 146 4 241 0 206 0 245 0 208] 
#[1 0 222 0 82 4 245 0 103 4 245 0 209] 
#[1 0 222 0 82 4 249 0 103 4 249 0 209] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 4 253 0 220 4 253 0 221 4 253 0 225 4 253 0 226 1 201 0 227] 
#[0 0 226 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 230 0 2 0 230 0 6 4 185 0 8 0 230 0 10 0 230 0 17 5 1 0 19 0 230 0 38 0 230 0 58 0 230 0 64 0 230 0 67 0 230 0 68 0 230 0 69 0 230 0 73 0 230 0 78 0 230 0 82 0 230 0 84 0 230 0 92 0 230 0 100 0 230 0 102 0 230 0 105 0 230 0 108 0 230 0 111 0 230 0 118 0 230 0 133 0 230 0 135 0 230 0 140 5 5 0 146 0 230 0 150 0 230 0 228] 
#[1 0 234 0 2 0 234 0 10 5 9 0 17 2 81 0 38 0 234 0 58 2 85 0 67 2 89 0 73 0 234 0 78 2 93 0 82 2 97 0 84 0 234 0 92 2 101 0 111 0 234 0 133 2 105 0 140 5 13 0 213 0 234 0 228] 
#[0 0 238 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 242 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 0 246 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 17 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 21 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 5 25 0 1 0 93 0 115 0 97 0 116 5 29 0 136 0 113 0 141 5 33 0 187] 
#[1 0 250 0 1 0 250 0 2 4 185 0 8 0 250 0 10 0 250 0 19 0 250 0 55 0 250 0 58 0 250 0 64 0 250 0 66 0 250 0 78 0 250 0 92 0 250 0 115 0 250 0 116 0 250 0 118 0 250 0 133 0 250 0 136 0 250 0 141 0 250 0 146 0 250 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 37 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 5 41 0 1] 
#[1 5 45 0 1 0 93 0 115 0 97 0 116 5 49 0 136 0 113 0 141 5 53 0 187] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 57 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 5 61 0 1] 
#[0 5 65 0 64] 
#[0 5 69 0 146] 
#[0 5 73 0 64] 
#[0 5 77 0 146] 
#[1 2 81 0 38 2 85 0 67 2 89 0 73 2 93 0 82 2 97 0 84 2 101 0 111 5 81 0 135] 
#[1 0 233 0 1 0 14 0 146 5 85 0 206 0 245 0 208] 
#[0 5 89 0 66] 
#[1 2 197 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 5 93 0 187 1 173 0 208 2 205 0 220 2 205 0 221 2 205 0 225 2 205 0 226 1 201 0 227] 
#[1 5 97 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 3 89 0 1 5 101 0 2 3 93 0 3 3 97 0 4 3 101 0 5 5 105 0 6 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 0 7 0 1 0 254 0 2 3 93 0 3 3 97 0 4 0 254 0 5 0 254 0 6 0 254 0 7 3 109 0 9 0 254 0 10 0 254 0 11 0 254 0 12 0 254 0 13 0 254 0 14 0 254 0 15 0 254 0 16 0 254 0 17 0 254 0 18 0 254 0 19 0 254 0 21 0 254 0 38 0 254 0 51 0 254 0 52 0 254 0 53 0 254 0 56 0 254 0 58 0 254 0 64 0 254 0 66 0 254 0 67 0 254 0 68 0 254 0 69 0 11 0 71 0 254 0 72 0 254 0 73 0 254 0 78 0 254 0 80 0 15 0 81 0 254 0 82 0 254 0 84 0 254 0 85 0 254 0 92 3 169 0 93 0 254 0 94 0 254 0 95 0 254 0 100 0 254 0 101 0 254 0 102 0 19 0 104 0 254 0 105 0 254 0 108 0 254 0 111 0 254 0 114 0 254 0 118 0 254 0 122 0 254 0 133 0 254 0 134 0 254 0 135 0 254 0 139 0 254 0 140 0 254 0 141 0 254 0 145 0 254 0 146 0 254 0 150 0 254 0 228] 
#[1 0 23 0 1 1 2 0 2 3 93 0 3 3 97 0 4 1 2 0 5 1 2 0 6 1 2 0 7 3 109 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 21 1 2 0 38 1 2 0 51 1 2 0 52 1 2 0 53 1 2 0 56 1 2 0 58 1 2 0 64 1 2 0 66 1 2 0 67 1 2 0 68 1 2 0 69 0 27 0 71 1 2 0 72 1 2 0 73 1 2 0 78 1 2 0 80 0 31 0 81 1 2 0 82 1 2 0 84 1 2 0 85 1 2 0 92 3 169 0 93 1 2 0 94 1 2 0 95 1 2 0 100 1 2 0 101 1 2 0 102 0 35 0 104 1 2 0 105 1 2 0 108 1 2 0 111 1 2 0 114 1 2 0 118 1 2 0 122 1 2 0 133 1 2 0 134 1 2 0 135 1 2 0 139 1 2 0 140 1 2 0 141 1 2 0 145 1 2 0 146 1 2 0 150 1 2 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 109 0 220 5 109 0 221 5 109 0 225 5 109 0 226 1 201 0 227] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 2 217 0 139 3 189 0 145 5 113 0 223 2 229 0 224] 
#[1 5 117 0 51 5 121 0 52 2 217 0 139 5 125 0 222 5 129 0 224] 
#[0 1 6 0 51 0 52 0 139] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 133 0 220 5 133 0 221 5 133 0 225 5 133 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 5 137 0 17 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 5 141 0 47 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 145 0 220 5 145 0 221 5 145 0 225 5 145 0 226 1 201 0 227] 
#[0 1 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 149 0 150] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 5 153 0 188 5 153 0 203 3 85 0 218 0 158 0 228] 
#[0 5 157 0 150] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 5 161 0 188 5 161 0 203 3 85 0 218 0 158 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 5 165 0 187] 
#[0 5 169 0 146] 
#[0 5 173 0 146] 
#[0 5 177 0 1] 
#[1 0 39 0 1 1 14 0 2 3 93 0 3 3 97 0 4 3 101 0 5 1 14 0 6 3 105 0 7 3 109 0 9 1 14 0 10 1 14 0 11 1 14 0 12 1 14 0 13 1 14 0 14 1 14 0 15 1 14 0 16 1 14 0 17 1 14 0 18 1 14 0 19 1 14 0 21 1 14 0 38 1 14 0 51 1 14 0 52 1 14 0 53 1 14 0 56 1 14 0 58 1 14 0 64 1 14 0 66 1 14 0 67 1 14 0 68 1 14 0 69 0 43 0 71 1 14 0 73 1 14 0 78 1 14 0 80 0 47 0 81 1 14 0 82 1 14 0 84 1 14 0 92 3 169 0 93 1 14 0 94 1 14 0 100 1 14 0 101 1 14 0 102 0 51 0 104 1 14 0 105 1 14 0 108 1 14 0 111 1 14 0 114 1 14 0 118 1 14 0 122 1 14 0 133 1 14 0 134 1 14 0 135 1 14 0 139 1 14 0 140 1 14 0 141 1 14 0 145 1 14 0 146 1 14 0 150 1 14 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 181 0 220 5 181 0 221 5 181 0 225 5 181 0 226 1 201 0 227] 
#[0 1 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 1 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 185 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 189 0 220 5 189 0 221 5 189 0 225 5 189 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 193 0 220 5 193 0 221 5 193 0 225 5 193 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 5 197 0 23 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 5 201 0 83 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 5 205 0 127 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 209 0 220 5 209 0 221 5 209 0 225 5 209 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 213 0 220 5 213 0 221 5 213 0 225 5 213 0 226 1 201 0 227] 
#[0 5 217 0 149] 
#[0 1 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 55 0 1 1 30 0 2 1 30 0 3 1 30 0 4 1 30 0 5 1 30 0 6 1 30 0 7 4 185 0 8 1 30 0 9 1 30 0 10 1 30 0 11 1 30 0 12 1 30 0 13 1 30 0 14 1 30 0 15 1 30 0 16 1 30 0 17 1 30 0 18 1 30 0 19 1 30 0 21 1 30 0 38 1 30 0 51 1 30 0 52 1 30 0 53 1 30 0 56 1 30 0 58 1 30 0 64 1 30 0 66 1 30 0 67 1 30 0 68 1 30 0 69 1 30 0 71 1 30 0 72 1 30 0 73 1 30 0 78 1 30 0 80 1 30 0 81 1 30 0 82 1 30 0 84 1 30 0 85 1 30 0 92 1 30 0 93 1 30 0 94 1 30 0 95 1 30 0 100 1 30 0 101 1 30 0 102 1 30 0 104 1 30 0 105 1 30 0 108 1 30 0 111 1 30 0 114 1 30 0 118 1 30 0 122 1 30 0 133 1 30 0 134 1 30 0 135 1 30 0 139 1 30 0 140 1 30 0 141 1 30 0 145 1 30 0 146 1 30 0 150 1 30 0 228] 
#[0 1 34 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 42 0 61 0 62 0 79 0 95 0 96 0 120 0 123 0 124 0 128 0 129 0 130 0 144 0 146 0 147 0 148 0 149 0 150] 
#[0 5 221 0 1] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 5 233 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[0 1 46 0 2 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 5 245 0 6 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 5 249 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 4 85 0 22 4 85 0 26 4 85 0 27 5 253 0 29 4 85 0 31 4 85 0 35 4 85 0 42 4 85 0 43 4 85 0 44 4 29 0 49 4 85 0 63 6 1 0 65 4 85 0 76 4 85 0 77 4 85 0 98 4 85 0 99 4 85 0 109 4 85 0 119 4 85 0 123 4 85 0 124 6 5 0 125 4 85 0 137 4 85 0 138 6 9 0 167 4 81 0 168 4 85 0 169] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 13 0 220 6 13 0 221 6 13 0 225 6 13 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 17 0 220 6 17 0 221 6 17 0 225 6 17 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 21 0 220 6 21 0 221 6 21 0 225 6 21 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 25 0 220 6 25 0 221 6 25 0 225 6 25 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 29 0 220 6 29 0 221 6 29 0 225 6 29 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 33 0 220 6 33 0 221 6 33 0 225 6 33 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 37 0 220 6 37 0 221 6 37 0 225 6 37 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 41 0 220 6 41 0 221 6 41 0 225 6 41 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 45 0 220 6 45 0 221 6 45 0 225 6 45 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 49 0 220 6 49 0 221 6 49 0 225 6 49 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 53 0 220 6 53 0 221 6 53 0 225 6 53 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 57 0 220 6 57 0 221 6 57 0 225 6 57 0 226 1 201 0 227] 
#[0 6 61 0 146] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 65 0 220 6 65 0 221 6 65 0 225 6 65 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 69 0 220 6 69 0 221 6 69 0 225 6 69 0 226 1 201 0 227] 
#[0 6 73 0 97] 
#[1 6 77 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 81 0 220 6 81 0 221 6 81 0 225 6 81 0 226 1 201 0 227] 
#[1 6 85 0 95 6 89 0 96] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 93 0 220 6 93 0 221 6 93 0 225 6 93 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 97 0 220 6 97 0 221 6 97 0 225 6 97 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 101 0 220 6 101 0 221 6 101 0 225 6 101 0 226 1 201 0 227] 
#[1 6 105 0 21 6 109 0 72 6 113 0 85] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 117 0 220 6 117 0 221 6 117 0 225 6 117 0 226 1 201 0 227] 
#[0 6 121 0 1] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 125 0 220 6 125 0 221 6 125 0 225 6 125 0 226 1 201 0 227] 
#[0 1 50 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[1 1 69 0 1 6 129 0 2 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 133 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 6 137 0 150] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 6 141 0 188 6 141 0 203 3 85 0 218 0 158 0 228] 
#[0 6 145 0 150] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 6 149 0 188 6 149 0 203 3 85 0 218 0 158 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 153 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 6 157 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 161 0 220 6 161 0 221 6 161 0 225 6 161 0 226 1 201 0 227] 
#[0 6 165 0 146] 
#[1 0 233 0 1 0 14 0 146 6 169 0 205 6 173 0 206 0 245 0 208] 
#[1 0 14 0 146 6 177 0 173 6 181 0 174 6 185 0 208 6 189 0 226] 
#[0 6 193 0 118] 
#[1 6 197 0 2 4 89 0 6] 
#[1 4 85 0 22 4 85 0 26 4 85 0 27 4 85 0 31 4 85 0 35 4 85 0 42 4 85 0 43 4 85 0 44 4 29 0 49 4 85 0 63 4 85 0 76 4 85 0 77 4 85 0 98 4 85 0 99 4 85 0 109 4 85 0 119 4 85 0 123 4 85 0 124 4 85 0 137 4 85 0 138 6 201 0 167 4 81 0 168 4 85 0 169] 
#[0 1 54 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 58 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 62 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 66 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 70 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 74 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 78 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 82 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 6 205 0 107] 
#[0 1 86 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 90 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 94 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 98 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 102 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 106 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 110 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 114 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 118 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 122 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 126 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 1 130 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 0 63 0 1 1 134 0 2 1 134 0 6 1 134 0 20 1 134 0 24 6 213 0 32 1 134 0 33 1 134 0 34 1 134 0 37 1 134 0 41 1 134 0 45 1 134 0 46 1 134 0 50 1 134 0 52 1 134 0 57 1 134 0 59 1 134 0 60 1 134 0 65 1 134 0 70 1 134 0 74 1 134 0 75 1 134 0 87 1 134 0 88 1 134 0 91 1 134 0 112 1 134 0 115 1 134 0 116 1 134 0 118 1 134 0 134 1 134 0 135 1 134 0 141] 
#[0 1 138 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 1 233 0 146 6 217 0 178] 
#[0 1 142 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 9 0 1 4 101 0 6 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 6 221 0 157 6 221 0 158 6 221 0 161 6 221 0 162 6 221 0 163 6 221 0 170 6 221 0 171 6 221 0 172 6 221 0 175 6 221 0 176 6 221 0 179 6 221 0 180 6 221 0 181 6 221 0 182 6 221 0 183 6 221 0 184 6 221 0 185 6 221 0 186 0 201 0 187] 
#[1 0 14 0 146 6 225 0 198 0 225 0 208 2 1 0 227] 
#[0 1 146 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 6 229 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 6 233 0 1] 
#[1 0 9 0 1 0 190 0 2 0 190 0 10 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 6 237 0 157 6 237 0 158 6 237 0 161 6 237 0 162 6 237 0 163 6 237 0 170 6 237 0 171 6 237 0 172 6 237 0 175 6 237 0 176 6 237 0 179 6 237 0 180 6 237 0 181 6 237 0 182 6 237 0 183 6 237 0 184 6 237 0 185 6 237 0 186 0 201 0 187 0 190 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 6 241 0 187] 
#[1 1 150 0 2 1 150 0 10 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133 1 150 0 228] 
#[0 1 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 158 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 162 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 6 245 0 200] 
#[0 1 166 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 6 249 0 200] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 6 253 0 200] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 7 1 0 200] 
#[1 4 121 0 1 7 5 0 17 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 7 9 0 200] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 13 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 1 170 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 174 0 2 1 174 0 10 7 17 0 52 1 174 0 58 1 174 0 78 1 174 0 92 1 174 0 133 1 174 0 228] 
#[1 0 14 0 146 7 21 0 165 7 25 0 166 0 225 0 208 7 29 0 227] 
#[0 7 33 0 19] 
#[0 1 178 0 3 0 146] 
#[1 7 37 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 1 182 0 2 1 182 0 6 1 182 0 10 1 182 0 17 7 41 0 19 1 182 0 38 1 182 0 58 1 182 0 64 1 182 0 67 1 182 0 68 1 182 0 69 1 182 0 73 1 182 0 78 1 182 0 82 1 182 0 84 1 182 0 92 1 182 0 100 1 182 0 102 1 182 0 105 1 182 0 108 1 182 0 111 1 182 0 118 1 182 0 133 1 182 0 135 1 182 0 140 7 45 0 146 1 182 0 150 1 182 0 228] 
#[0 7 49 0 82] 
#[0 7 53 0 82] 
#[1 0 233 0 1 0 14 0 146 7 57 0 206 0 245 0 208] 
#[1 0 222 0 82 7 61 0 103 7 61 0 209] 
#[1 0 222 0 82 7 65 0 103 7 65 0 209] 
#[0 1 186 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 190 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 233 0 1 0 14 0 146 7 69 0 206 0 245 0 208] 
#[0 1 194 0 82] 
#[0 7 73 0 82] 
#[1 0 233 0 1 0 14 0 146 7 77 0 206 0 245 0 208] 
#[1 1 198 0 2 1 198 0 6 1 198 0 10 1 198 0 17 0 67 0 38 1 198 0 58 1 198 0 64 0 71 0 67 1 198 0 68 1 198 0 69 0 75 0 73 1 198 0 78 0 79 0 82 0 83 0 84 1 198 0 92 0 87 0 100 1 198 0 102 1 198 0 105 1 198 0 108 0 91 0 111 1 198 0 118 1 198 0 133 1 198 0 135 1 198 0 140 1 198 0 150 7 85 0 210 7 89 0 211 1 198 0 228] 
#[0 7 93 0 82] 
#[0 7 97 0 82] 
#[1 3 89 0 1 1 202 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 1 202 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 1 202 0 51 3 149 0 53 1 202 0 58 1 202 0 64 1 202 0 68 1 202 0 69 3 153 0 71 3 157 0 72 1 202 0 78 3 161 0 81 3 165 0 85 1 202 0 92 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 1 202 0 102 3 185 0 104 1 202 0 105 1 202 0 108 1 202 0 133 1 202 0 140 3 189 0 145 1 202 0 150 1 202 0 228] 
#[0 7 101 0 146] 
#[0 1 206 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 1 210 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 1 214 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 7 105 0 2 3 69 0 6 3 85 0 218] 
#[1 7 109 0 2 3 69 0 6 3 85 0 218] 
#[1 2 197 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 0 205 0 187 1 173 0 208 7 113 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 7 117 0 1] 
#[1 1 218 0 2 1 218 0 10 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133 1 218 0 228] 
#[1 7 121 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 125 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 2 197 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 0 205 0 187 1 173 0 208 7 129 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 7 133 0 1] 
#[1 1 222 0 2 1 222 0 10 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133 1 222 0 228] 
#[1 7 137 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 141 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 7 145 0 146] 
#[1 0 9 0 1 1 226 0 2 1 226 0 10 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 1 226 0 58 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 1 226 0 78 0 77 0 87 0 81 0 88 0 85 0 91 1 226 0 92 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 1 226 0 133 0 105 0 134 0 109 0 135 0 113 0 141 7 149 0 157 7 149 0 158 7 149 0 161 7 149 0 162 7 149 0 163 7 149 0 170 7 149 0 171 7 149 0 172 7 149 0 175 7 149 0 176 7 149 0 179 7 149 0 180 7 149 0 181 7 149 0 182 7 149 0 183 7 149 0 184 7 149 0 185 7 149 0 186 0 201 0 187 1 226 0 228] 
#[0 7 153 0 146] 
#[1 0 9 0 1 1 230 0 2 1 230 0 10 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 1 230 0 58 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 1 230 0 78 0 77 0 87 0 81 0 88 0 85 0 91 1 230 0 92 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 1 230 0 133 0 105 0 134 0 109 0 135 0 113 0 141 7 157 0 157 7 157 0 158 7 157 0 161 7 157 0 162 7 157 0 163 7 157 0 170 7 157 0 171 7 157 0 172 7 157 0 175 7 157 0 176 7 157 0 179 7 157 0 180 7 157 0 181 7 157 0 182 7 157 0 183 7 157 0 184 7 157 0 185 7 157 0 186 0 201 0 187 1 230 0 228] 
#[1 0 233 0 1 0 14 0 146 7 161 0 206 0 245 0 208] 
#[1 2 81 0 38 2 85 0 67 2 89 0 73 2 93 0 82 2 97 0 84 7 165 0 100 2 101 0 111] 
#[1 0 233 0 1 0 14 0 146 7 169 0 205 6 173 0 206 0 245 0 208] 
#[1 7 173 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[0 1 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 1 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 177 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 7 181 0 122 3 189 0 145] 
#[1 5 117 0 51 7 185 0 52 2 217 0 139 7 189 0 222 5 129 0 224] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 193 0 220 7 193 0 221 7 193 0 225 7 193 0 226 1 201 0 227] 
#[0 1 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 7 197 0 52] 
#[0 1 246 0 51 0 52 0 139] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 7 201 0 19 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 205 0 220 7 205 0 221 7 205 0 225 7 205 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 209 0 220 7 209 0 221 7 209 0 225 7 209 0 226 1 201 0 227] 
#[1 3 89 0 1 7 213 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 217 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 7 221 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 7 225 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 7 229 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 7 233 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[0 7 237 0 66] 
#[0 1 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 7 241 0 187] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 7 245 0 66 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 7 249 0 188 7 249 0 203 3 85 0 218 0 158 0 228] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 7 253 0 135 3 189 0 145] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 8 1 0 135 3 189 0 145] 
#[0 8 5 0 66] 
#[0 8 9 0 66] 
#[0 8 13 0 66] 
#[1 3 89 0 1 8 17 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 8 21 0 102 3 185 0 104 3 189 0 145 8 25 0 216] 
#[0 1 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 8 29 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 233 0 1 0 14 0 146 8 33 0 205 6 173 0 206 0 245 0 208] 
#[0 2 2 0 2 0 10 0 58 0 64 0 78 0 92 0 133 0 150 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 8 45 0 192 2 6 0 228] 
#[1 2 10 0 2 2 10 0 10 2 10 0 58 2 10 0 64 8 49 0 68 8 53 0 69 2 10 0 78 2 10 0 92 8 21 0 102 8 57 0 105 8 61 0 108 2 10 0 133 2 105 0 140 2 10 0 150 8 65 0 196 8 69 0 199 8 73 0 201 8 77 0 202 8 81 0 213 8 85 0 214 8 89 0 216 2 10 0 228] 
#[1 1 42 0 2 1 42 0 10 1 42 0 58 1 42 0 64 1 42 0 68 1 42 0 69 1 42 0 78 1 42 0 92 1 42 0 102 1 42 0 105 1 42 0 108 1 42 0 133 1 42 0 140 1 42 0 150 8 93 0 195 1 42 0 228] 
#[0 2 14 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 42 0 61 0 62 0 79 0 95 0 96 0 120 0 123 0 124 0 128 0 129 0 130 0 144 0 146 0 147 0 148 0 149 0 150] 
#[0 2 18 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[0 8 97 0 2] 
#[0 8 101 0 149] 
#[0 8 105 0 149] 
#[1 8 109 0 2 8 113 0 6] 
#[1 0 95 0 1 2 22 0 2 2 22 0 3 3 97 0 4 2 22 0 5 2 22 0 6 2 22 0 7 2 22 0 9 2 22 0 10 2 22 0 11 2 22 0 12 2 22 0 13 2 22 0 14 2 22 0 15 2 22 0 16 2 22 0 17 2 22 0 18 2 22 0 19 2 22 0 21 2 22 0 38 2 22 0 51 2 22 0 52 2 22 0 53 2 22 0 56 2 22 0 58 2 22 0 64 2 22 0 66 2 22 0 67 2 22 0 68 2 22 0 69 0 99 0 71 2 22 0 72 2 22 0 73 2 22 0 78 2 22 0 80 0 103 0 81 2 22 0 82 2 22 0 84 2 22 0 85 2 22 0 92 2 22 0 93 2 22 0 94 2 22 0 95 2 22 0 100 2 22 0 101 2 22 0 102 0 107 0 104 2 22 0 105 2 22 0 108 2 22 0 111 2 22 0 114 2 22 0 118 2 22 0 122 2 22 0 133 2 22 0 134 2 22 0 135 2 22 0 139 2 22 0 140 2 22 0 141 2 22 0 145 2 22 0 146 2 22 0 150 2 22 0 228] 
#[1 0 111 0 1 2 26 0 2 2 26 0 3 3 97 0 4 2 26 0 5 2 26 0 6 2 26 0 7 2 26 0 9 2 26 0 10 2 26 0 11 2 26 0 12 2 26 0 13 2 26 0 14 2 26 0 15 2 26 0 16 2 26 0 17 2 26 0 18 2 26 0 19 2 26 0 21 2 26 0 38 2 26 0 51 2 26 0 52 2 26 0 53 2 26 0 56 2 26 0 58 2 26 0 64 2 26 0 66 2 26 0 67 2 26 0 68 2 26 0 69 0 115 0 71 2 26 0 72 2 26 0 73 2 26 0 78 2 26 0 80 0 119 0 81 2 26 0 82 2 26 0 84 2 26 0 85 2 26 0 92 2 26 0 93 2 26 0 94 2 26 0 95 2 26 0 100 2 26 0 101 2 26 0 102 0 123 0 104 2 26 0 105 2 26 0 108 2 26 0 111 2 26 0 114 2 26 0 118 2 26 0 122 2 26 0 133 2 26 0 134 2 26 0 135 2 26 0 139 2 26 0 140 2 26 0 141 2 26 0 145 2 26 0 146 2 26 0 150 2 26 0 228] 
#[1 0 127 0 1 2 30 0 2 3 93 0 3 3 97 0 4 2 30 0 5 2 30 0 6 2 30 0 7 3 109 0 9 2 30 0 10 2 30 0 11 2 30 0 12 2 30 0 13 2 30 0 14 2 30 0 15 2 30 0 16 2 30 0 17 2 30 0 18 2 30 0 19 2 30 0 21 2 30 0 38 2 30 0 51 2 30 0 52 2 30 0 53 2 30 0 56 2 30 0 58 2 30 0 64 2 30 0 66 2 30 0 67 2 30 0 68 2 30 0 69 0 131 0 71 2 30 0 72 2 30 0 73 2 30 0 78 2 30 0 80 0 135 0 81 2 30 0 82 2 30 0 84 2 30 0 85 2 30 0 92 3 169 0 93 2 30 0 94 2 30 0 95 2 30 0 100 2 30 0 101 2 30 0 102 0 139 0 104 2 30 0 105 2 30 0 108 2 30 0 111 2 30 0 114 2 30 0 118 2 30 0 122 2 30 0 133 2 30 0 134 2 30 0 135 2 30 0 139 2 30 0 140 2 30 0 141 2 30 0 145 2 30 0 146 2 30 0 150 2 30 0 228] 
#[1 0 143 0 1 2 34 0 2 3 93 0 3 3 97 0 4 2 34 0 5 2 34 0 6 2 34 0 7 3 109 0 9 2 34 0 10 2 34 0 11 2 34 0 12 2 34 0 13 2 34 0 14 2 34 0 15 2 34 0 16 2 34 0 17 2 34 0 18 2 34 0 19 2 34 0 21 2 34 0 38 2 34 0 51 2 34 0 52 2 34 0 53 2 34 0 56 2 34 0 58 2 34 0 64 2 34 0 66 2 34 0 67 2 34 0 68 2 34 0 69 0 147 0 71 2 34 0 72 2 34 0 73 2 34 0 78 2 34 0 80 0 151 0 81 2 34 0 82 2 34 0 84 2 34 0 85 2 34 0 92 3 169 0 93 2 34 0 94 2 34 0 95 2 34 0 100 2 34 0 101 2 34 0 102 0 155 0 104 2 34 0 105 2 34 0 108 2 34 0 111 2 34 0 114 2 34 0 118 2 34 0 122 2 34 0 133 2 34 0 134 2 34 0 135 2 34 0 139 2 34 0 140 2 34 0 141 2 34 0 145 2 34 0 146 2 34 0 150 2 34 0 228] 
#[1 0 159 0 1 2 38 0 2 2 38 0 3 3 97 0 4 2 38 0 5 2 38 0 6 2 38 0 7 2 38 0 9 2 38 0 10 2 38 0 11 2 38 0 12 2 38 0 13 2 38 0 14 2 38 0 15 2 38 0 16 2 38 0 17 2 38 0 18 2 38 0 19 2 38 0 21 2 38 0 38 2 38 0 51 2 38 0 52 2 38 0 53 2 38 0 56 2 38 0 58 2 38 0 64 2 38 0 66 2 38 0 67 2 38 0 68 2 38 0 69 0 163 0 71 2 38 0 72 2 38 0 73 2 38 0 78 2 38 0 80 0 167 0 81 2 38 0 82 2 38 0 84 2 38 0 85 2 38 0 92 2 38 0 93 2 38 0 94 2 38 0 95 2 38 0 100 2 38 0 101 2 38 0 102 0 171 0 104 2 38 0 105 2 38 0 108 2 38 0 111 2 38 0 114 2 38 0 118 2 38 0 122 2 38 0 133 2 38 0 134 2 38 0 135 2 38 0 139 2 38 0 140 2 38 0 141 2 38 0 145 2 38 0 146 2 38 0 150 2 38 0 228] 
#[1 0 175 0 1 2 42 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 42 0 6 3 105 0 7 3 109 0 9 2 42 0 10 2 42 0 17 2 42 0 18 2 42 0 19 2 42 0 38 2 42 0 51 2 42 0 52 2 42 0 56 2 42 0 58 2 42 0 64 2 42 0 66 2 42 0 67 2 42 0 68 2 42 0 69 0 179 0 71 3 157 0 72 2 42 0 73 2 42 0 78 2 42 0 80 0 183 0 81 2 42 0 82 2 42 0 84 3 165 0 85 2 42 0 92 3 169 0 93 3 177 0 95 2 42 0 100 2 42 0 101 2 42 0 102 0 187 0 104 2 42 0 105 2 42 0 108 2 42 0 111 2 42 0 114 2 42 0 118 2 42 0 122 2 42 0 133 2 42 0 134 2 42 0 135 2 42 0 139 2 42 0 140 2 42 0 141 3 189 0 145 2 42 0 146 2 42 0 150 2 42 0 228] 
#[1 0 191 0 1 2 46 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 46 0 6 3 105 0 7 3 109 0 9 2 46 0 10 2 46 0 17 2 46 0 18 2 46 0 19 2 46 0 38 2 46 0 51 2 46 0 52 2 46 0 56 2 46 0 58 2 46 0 64 2 46 0 66 2 46 0 67 2 46 0 68 2 46 0 69 0 195 0 71 3 157 0 72 2 46 0 73 2 46 0 78 2 46 0 80 0 199 0 81 2 46 0 82 2 46 0 84 3 165 0 85 2 46 0 92 3 169 0 93 3 177 0 95 2 46 0 100 2 46 0 101 2 46 0 102 0 203 0 104 2 46 0 105 2 46 0 108 2 46 0 111 2 46 0 114 2 46 0 118 2 46 0 122 2 46 0 133 2 46 0 134 2 46 0 135 2 46 0 139 2 46 0 140 2 46 0 141 3 189 0 145 2 46 0 146 2 46 0 150 2 46 0 228] 
#[1 0 207 0 1 2 50 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 50 0 6 3 105 0 7 3 109 0 9 2 50 0 10 2 50 0 17 2 50 0 18 2 50 0 19 2 50 0 38 2 50 0 51 2 50 0 52 2 50 0 56 2 50 0 58 2 50 0 64 2 50 0 66 2 50 0 67 2 50 0 68 2 50 0 69 0 211 0 71 3 157 0 72 2 50 0 73 2 50 0 78 2 50 0 80 0 215 0 81 2 50 0 82 2 50 0 84 3 165 0 85 2 50 0 92 3 169 0 93 3 177 0 95 2 50 0 100 2 50 0 101 2 50 0 102 0 219 0 104 2 50 0 105 2 50 0 108 2 50 0 111 2 50 0 114 2 50 0 118 2 50 0 122 2 50 0 133 2 50 0 134 2 50 0 135 2 50 0 139 2 50 0 140 2 50 0 141 3 189 0 145 2 50 0 146 2 50 0 150 2 50 0 228] 
#[1 0 223 0 1 2 54 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 54 0 6 3 105 0 7 3 109 0 9 2 54 0 10 2 54 0 17 2 54 0 18 2 54 0 19 2 54 0 38 2 54 0 51 2 54 0 52 2 54 0 56 2 54 0 58 2 54 0 64 2 54 0 66 2 54 0 67 2 54 0 68 2 54 0 69 0 227 0 71 3 157 0 72 2 54 0 73 2 54 0 78 2 54 0 80 0 231 0 81 2 54 0 82 2 54 0 84 3 165 0 85 2 54 0 92 3 169 0 93 3 177 0 95 2 54 0 100 2 54 0 101 2 54 0 102 0 235 0 104 2 54 0 105 2 54 0 108 2 54 0 111 2 54 0 114 2 54 0 118 2 54 0 122 2 54 0 133 2 54 0 134 2 54 0 135 2 54 0 139 2 54 0 140 2 54 0 141 3 189 0 145 2 54 0 146 2 54 0 150 2 54 0 228] 
#[1 0 239 0 1 2 58 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 58 0 6 3 105 0 7 3 109 0 9 2 58 0 10 2 58 0 17 2 58 0 18 2 58 0 19 2 58 0 38 2 58 0 51 2 58 0 52 2 58 0 56 2 58 0 58 2 58 0 64 2 58 0 66 2 58 0 67 2 58 0 68 2 58 0 69 0 243 0 71 3 157 0 72 2 58 0 73 2 58 0 78 2 58 0 80 0 247 0 81 2 58 0 82 2 58 0 84 3 165 0 85 2 58 0 92 3 169 0 93 3 177 0 95 2 58 0 100 2 58 0 101 2 58 0 102 0 251 0 104 2 58 0 105 2 58 0 108 2 58 0 111 2 58 0 114 2 58 0 118 2 58 0 122 2 58 0 133 2 58 0 134 2 58 0 135 2 58 0 139 2 58 0 140 2 58 0 141 3 189 0 145 2 58 0 146 2 58 0 150 2 58 0 228] 
#[1 0 255 0 1 2 62 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 62 0 6 3 105 0 7 3 109 0 9 2 62 0 10 2 62 0 17 2 62 0 18 2 62 0 19 2 62 0 38 2 62 0 51 2 62 0 52 2 62 0 56 2 62 0 58 2 62 0 64 2 62 0 66 2 62 0 67 2 62 0 68 2 62 0 69 1 3 0 71 3 157 0 72 2 62 0 73 2 62 0 78 2 62 0 80 1 7 0 81 2 62 0 82 2 62 0 84 3 165 0 85 2 62 0 92 3 169 0 93 3 177 0 95 2 62 0 100 2 62 0 101 2 62 0 102 1 11 0 104 2 62 0 105 2 62 0 108 2 62 0 111 2 62 0 114 2 62 0 118 2 62 0 122 2 62 0 133 2 62 0 134 2 62 0 135 2 62 0 139 2 62 0 140 2 62 0 141 3 189 0 145 2 62 0 146 2 62 0 150 2 62 0 228] 
#[1 1 15 0 1 2 66 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 66 0 6 3 105 0 7 3 109 0 9 2 66 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 2 66 0 17 2 66 0 18 2 66 0 19 3 145 0 21 2 66 0 38 2 66 0 51 2 66 0 52 3 149 0 53 2 66 0 56 2 66 0 58 2 66 0 64 2 66 0 66 2 66 0 67 2 66 0 68 2 66 0 69 1 19 0 71 3 157 0 72 2 66 0 73 2 66 0 78 2 66 0 80 1 23 0 81 2 66 0 82 2 66 0 84 3 165 0 85 2 66 0 92 3 169 0 93 3 173 0 94 3 177 0 95 2 66 0 100 2 66 0 101 2 66 0 102 1 27 0 104 2 66 0 105 2 66 0 108 2 66 0 111 2 66 0 114 2 66 0 118 2 66 0 122 2 66 0 133 2 66 0 134 2 66 0 135 2 66 0 139 2 66 0 140 2 66 0 141 3 189 0 145 2 66 0 146 2 66 0 150 2 66 0 228] 
#[0 2 70 0 2 0 6 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 80 0 92 0 102 0 105 0 108 0 114 0 133 0 140 0 141 0 150 0 228] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 8 117 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 1 31 0 1 2 74 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 74 0 6 3 105 0 7 3 109 0 9 2 74 0 10 2 74 0 17 2 74 0 18 2 74 0 19 2 74 0 38 2 74 0 51 2 74 0 52 2 74 0 56 2 74 0 58 2 74 0 64 2 74 0 66 2 74 0 67 2 74 0 68 2 74 0 69 1 35 0 71 3 157 0 72 2 74 0 73 2 74 0 78 2 74 0 80 1 39 0 81 2 74 0 82 2 74 0 84 3 165 0 85 2 74 0 92 3 169 0 93 3 177 0 95 2 74 0 100 2 74 0 101 2 74 0 102 1 43 0 104 2 74 0 105 2 74 0 108 2 74 0 111 2 74 0 114 2 74 0 118 2 74 0 122 2 74 0 133 2 74 0 134 2 74 0 135 2 74 0 139 2 74 0 140 2 74 0 141 3 189 0 145 2 74 0 146 2 74 0 150 2 74 0 228] 
#[0 2 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 2 197 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 8 121 0 187 1 173 0 208 8 125 0 220 8 125 0 221 8 125 0 225 8 125 0 226 1 201 0 227] 
#[1 1 47 0 1 2 82 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 82 0 6 3 105 0 7 3 109 0 9 2 82 0 10 2 82 0 11 2 82 0 12 2 82 0 13 2 82 0 14 2 82 0 15 2 82 0 16 2 82 0 17 2 82 0 18 2 82 0 19 2 82 0 21 2 82 0 38 2 82 0 51 2 82 0 52 2 82 0 53 2 82 0 56 2 82 0 58 2 82 0 64 2 82 0 66 2 82 0 67 2 82 0 68 2 82 0 69 1 51 0 71 2 82 0 73 2 82 0 78 2 82 0 80 1 55 0 81 2 82 0 82 2 82 0 84 2 82 0 92 3 169 0 93 2 82 0 94 2 82 0 100 2 82 0 101 2 82 0 102 1 59 0 104 2 82 0 105 2 82 0 108 2 82 0 111 2 82 0 114 2 82 0 118 2 82 0 122 2 82 0 133 2 82 0 134 2 82 0 135 2 82 0 139 2 82 0 140 2 82 0 141 2 82 0 145 2 82 0 146 2 82 0 150 2 82 0 228] 
#[0 8 129 0 96] 
#[0 2 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 63 0 1 2 90 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 90 0 6 3 105 0 7 3 109 0 9 2 90 0 10 2 90 0 11 2 90 0 12 2 90 0 13 2 90 0 14 2 90 0 15 2 90 0 16 2 90 0 17 2 90 0 18 2 90 0 19 2 90 0 21 2 90 0 38 2 90 0 51 2 90 0 52 2 90 0 53 1 67 0 56 2 90 0 58 2 90 0 64 2 90 0 66 2 90 0 67 2 90 0 68 2 90 0 69 1 71 0 71 2 90 0 73 2 90 0 78 2 90 0 80 1 75 0 81 2 90 0 82 2 90 0 84 2 90 0 92 3 169 0 93 2 90 0 94 2 90 0 100 2 90 0 101 2 90 0 102 1 79 0 104 2 90 0 105 2 90 0 108 2 90 0 111 2 90 0 114 2 90 0 118 2 90 0 122 2 90 0 133 2 90 0 134 2 90 0 135 2 90 0 139 2 90 0 140 2 90 0 141 2 90 0 145 2 90 0 146 2 90 0 150 2 90 0 228] 
#[1 1 83 0 1 2 94 0 2 2 94 0 3 3 97 0 4 2 94 0 5 2 94 0 6 2 94 0 7 2 94 0 9 2 94 0 10 2 94 0 11 2 94 0 12 2 94 0 13 2 94 0 14 2 94 0 15 2 94 0 16 2 94 0 17 2 94 0 18 2 94 0 19 2 94 0 21 2 94 0 38 2 94 0 51 2 94 0 52 2 94 0 53 2 94 0 56 2 94 0 58 2 94 0 64 2 94 0 66 2 94 0 67 2 94 0 68 2 94 0 69 1 87 0 71 2 94 0 72 2 94 0 73 2 94 0 78 2 94 0 80 1 91 0 81 2 94 0 82 2 94 0 84 2 94 0 85 2 94 0 92 2 94 0 93 2 94 0 94 2 94 0 95 2 94 0 100 2 94 0 101 2 94 0 102 1 95 0 104 2 94 0 105 2 94 0 108 2 94 0 111 2 94 0 114 2 94 0 118 2 94 0 122 2 94 0 133 2 94 0 134 2 94 0 135 2 94 0 139 2 94 0 140 2 94 0 141 2 94 0 145 2 94 0 146 2 94 0 150 2 94 0 228] 
#[1 1 99 0 1 2 98 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 98 0 6 3 105 0 7 3 109 0 9 2 98 0 10 2 98 0 17 2 98 0 18 2 98 0 19 2 98 0 38 2 98 0 51 2 98 0 52 2 98 0 56 2 98 0 58 2 98 0 64 2 98 0 66 2 98 0 67 2 98 0 68 2 98 0 69 1 103 0 71 3 157 0 72 2 98 0 73 2 98 0 78 2 98 0 80 1 107 0 81 2 98 0 82 2 98 0 84 3 165 0 85 2 98 0 92 3 169 0 93 3 177 0 95 2 98 0 100 2 98 0 101 2 98 0 102 1 111 0 104 2 98 0 105 2 98 0 108 2 98 0 111 2 98 0 114 2 98 0 118 2 98 0 122 2 98 0 133 2 98 0 134 2 98 0 135 2 98 0 139 2 98 0 140 2 98 0 141 3 189 0 145 2 98 0 146 2 98 0 150 2 98 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 8 137 0 220 8 137 0 221 8 137 0 225 8 137 0 226 1 201 0 227] 
#[1 8 141 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 8 145 0 220 8 145 0 221 8 145 0 225 8 145 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 8 149 0 220 8 149 0 221 8 149 0 225 8 149 0 226 1 201 0 227] 
#[1 1 115 0 1 2 102 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 102 0 6 3 105 0 7 3 109 0 9 2 102 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 2 102 0 17 3 137 0 18 2 102 0 19 3 145 0 21 2 102 0 38 2 102 0 51 2 102 0 52 3 149 0 53 2 102 0 56 2 102 0 58 2 102 0 64 2 102 0 66 2 102 0 67 2 102 0 68 2 102 0 69 1 119 0 71 3 157 0 72 2 102 0 73 2 102 0 78 2 102 0 80 1 123 0 81 2 102 0 82 2 102 0 84 3 165 0 85 2 102 0 92 3 169 0 93 3 173 0 94 3 177 0 95 2 102 0 100 2 102 0 101 2 102 0 102 1 127 0 104 2 102 0 105 2 102 0 108 2 102 0 111 2 102 0 114 2 102 0 118 2 102 0 122 2 102 0 133 2 102 0 134 2 102 0 135 2 102 0 139 2 102 0 140 2 102 0 141 3 189 0 145 2 102 0 146 2 102 0 150 2 102 0 228] 
#[1 8 153 0 2 8 21 0 102 8 57 0 105 8 157 0 114 8 161 0 202 8 165 0 216] 
#[1 1 131 0 1 2 106 0 2 3 93 0 3 3 97 0 4 3 101 0 5 2 106 0 6 3 105 0 7 3 109 0 9 2 106 0 10 2 106 0 11 2 106 0 12 2 106 0 13 2 106 0 14 2 106 0 15 2 106 0 16 2 106 0 17 2 106 0 18 2 106 0 19 2 106 0 21 2 106 0 38 2 106 0 51 2 106 0 52 2 106 0 53 2 106 0 56 2 106 0 58 2 106 0 64 2 106 0 66 2 106 0 67 2 106 0 68 2 106 0 69 1 135 0 71 3 157 0 72 2 106 0 73 2 106 0 78 2 106 0 80 1 139 0 81 2 106 0 82 2 106 0 84 3 165 0 85 2 106 0 92 3 169 0 93 2 106 0 94 3 177 0 95 2 106 0 100 2 106 0 101 2 106 0 102 1 143 0 104 2 106 0 105 2 106 0 108 2 106 0 111 2 106 0 114 2 106 0 118 2 106 0 122 2 106 0 133 2 106 0 134 2 106 0 135 2 106 0 139 2 106 0 140 2 106 0 141 2 106 0 145 2 106 0 146 2 106 0 150 2 106 0 228] 
#[0 2 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 8 169 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 8 173 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 8 177 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 8 181 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 8 185 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 8 189 0 188 8 189 0 203 3 85 0 218 0 158 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 8 193 0 192 2 6 0 228] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 8 197 0 64 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 8 201 0 134 3 189 0 145] 
#[0 8 205 0 118] 
#[1 8 209 0 6 8 213 0 118] 
#[1 2 114 0 2 2 114 0 6 2 114 0 10 2 81 0 38 2 114 0 58 2 114 0 64 2 85 0 67 2 114 0 68 2 114 0 69 2 89 0 73 2 114 0 78 2 93 0 82 2 97 0 84 2 114 0 92 2 114 0 102 2 114 0 105 2 114 0 108 2 101 0 111 2 114 0 118 2 114 0 133 2 114 0 140 2 114 0 150 2 114 0 228] 
#[1 2 118 0 2 8 217 0 6 2 118 0 10 8 221 0 51 2 118 0 58 2 118 0 78 2 118 0 92 2 118 0 133 2 105 0 140 8 225 0 213 2 118 0 228] 
#[0 2 122 0 2 0 6 0 10 0 51 0 58 0 78 0 92 0 133 0 139 0 140 0 228] 
#[1 8 229 0 146 2 57 0 207] 
#[0 8 233 0 14] 
#[1 0 14 0 146 8 237 0 173 6 181 0 174 6 185 0 208 6 189 0 226] 
#[1 0 9 0 1 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 8 241 0 157 8 241 0 158 8 241 0 161 8 241 0 162 8 241 0 163 8 241 0 170 8 241 0 171 8 241 0 172 8 241 0 175 8 241 0 176 8 241 0 179 8 241 0 180 8 241 0 181 8 241 0 182 8 241 0 183 8 241 0 184 8 241 0 185 8 241 0 186 0 201 0 187] 
#[0 8 245 0 2] 
#[0 2 126 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 8 249 0 150] 
#[0 8 253 0 118] 
#[0 2 130 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 2 134 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 138 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 9 1 0 2 3 69 0 6 3 85 0 218] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 9 5 0 187] 
#[0 2 142 0 2 0 10 0 228] 
#[1 9 9 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[0 2 146 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 150 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 158 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 4 121 0 1 0 93 0 115 0 97 0 116 0 113 0 141 4 125 0 187 9 13 0 200] 
#[0 2 162 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 3 69 0 6 9 17 0 141 3 85 0 218] 
#[0 2 166 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 9 21 0 2 9 25 0 6] 
#[0 2 170 0 2 0 6] 
#[1 4 85 0 22 4 85 0 26 4 85 0 27 4 85 0 31 4 85 0 35 4 85 0 42 4 85 0 43 4 85 0 44 4 29 0 49 4 85 0 63 4 85 0 76 4 85 0 77 4 85 0 98 4 85 0 99 4 85 0 109 4 85 0 119 4 85 0 123 4 85 0 124 4 85 0 137 4 85 0 138 9 29 0 167 4 81 0 168 4 85 0 169] 
#[0 9 33 0 1] 
#[1 7 41 0 19 1 182 0 38 4 149 0 58 1 182 0 67 1 182 0 73 4 153 0 78 1 182 0 82 1 182 0 84 4 157 0 92 1 182 0 111 4 161 0 133 7 45 0 146] 
#[0 9 37 0 146] 
#[0 2 174 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 0 233 0 1 0 14 0 146 9 41 0 206 0 245 0 208] 
#[1 0 233 0 1 0 14 0 146 9 45 0 206 0 245 0 208] 
#[1 1 198 0 2 0 67 0 38 0 71 0 67 0 75 0 73 0 79 0 82 0 83 0 84 7 81 0 100 0 91 0 111 7 85 0 210 9 49 0 211] 
#[0 9 53 0 82] 
#[0 9 57 0 82] 
#[1 1 198 0 2 1 198 0 6 1 198 0 10 1 198 0 17 0 67 0 38 1 198 0 58 1 198 0 64 0 71 0 67 1 198 0 68 1 198 0 69 0 75 0 73 1 198 0 78 0 79 0 82 0 83 0 84 1 198 0 92 0 87 0 100 1 198 0 102 1 198 0 105 1 198 0 108 0 91 0 111 1 198 0 118 1 198 0 133 1 198 0 135 1 198 0 140 1 198 0 150 7 85 0 210 9 61 0 211 1 198 0 228] 
#[1 0 233 0 1 0 14 0 146 9 65 0 206 0 245 0 208] 
#[1 1 198 0 2 1 198 0 6 1 198 0 10 1 198 0 17 0 67 0 38 1 198 0 58 1 198 0 64 0 71 0 67 1 198 0 68 1 198 0 69 0 75 0 73 1 198 0 78 0 79 0 82 0 83 0 84 1 198 0 92 0 87 0 100 1 198 0 102 1 198 0 105 1 198 0 108 0 91 0 111 1 198 0 118 1 198 0 133 1 198 0 135 1 198 0 140 1 198 0 150 7 85 0 210 9 69 0 211 1 198 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 73 0 220 9 73 0 221 9 73 0 225 9 73 0 226 1 201 0 227] 
#[0 2 178 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 2 182 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 0 233 0 1 0 14 0 146 9 77 0 206 0 245 0 208] 
#[1 0 233 0 1 0 14 0 146 9 81 0 206 0 245 0 208] 
#[0 2 186 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 2 190 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 2 194 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 9 85 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 89 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 9 93 0 136] 
#[1 9 97 0 2 3 69 0 6 3 85 0 218] 
#[1 9 101 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 105 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 9 109 0 136] 
#[1 9 113 0 2 3 69 0 6 3 85 0 218] 
#[1 0 9 0 1 2 198 0 2 2 198 0 10 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 2 198 0 58 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 2 198 0 78 0 77 0 87 0 81 0 88 0 85 0 91 2 198 0 92 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 2 198 0 133 0 105 0 134 0 109 0 135 0 113 0 141 9 117 0 157 9 117 0 158 9 117 0 161 9 117 0 162 9 117 0 163 9 117 0 170 9 117 0 171 9 117 0 172 9 117 0 175 9 117 0 176 9 117 0 179 9 117 0 180 9 117 0 181 9 117 0 182 9 117 0 183 9 117 0 184 9 117 0 185 9 117 0 186 0 201 0 187 2 198 0 228] 
#[0 2 202 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 9 0 1 2 206 0 2 2 206 0 10 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 2 206 0 58 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 2 206 0 78 0 77 0 87 0 81 0 88 0 85 0 91 2 206 0 92 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 2 206 0 133 0 105 0 134 0 109 0 135 0 113 0 141 9 121 0 157 9 121 0 158 9 121 0 161 9 121 0 162 9 121 0 163 9 121 0 170 9 121 0 171 9 121 0 172 9 121 0 175 9 121 0 176 9 121 0 179 9 121 0 180 9 121 0 181 9 121 0 182 9 121 0 183 9 121 0 184 9 121 0 185 9 121 0 186 0 201 0 187 2 206 0 228] 
#[0 2 210 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 81 0 38 2 85 0 67 2 89 0 73 2 93 0 82 2 97 0 84 9 125 0 100 2 101 0 111] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 129 0 220 9 129 0 221 9 129 0 225 9 129 0 226 1 201 0 227] 
#[1 8 209 0 6 2 105 0 140 9 133 0 213] 
#[1 1 234 0 1 1 234 0 2 1 234 0 3 1 234 0 4 1 234 0 5 1 234 0 6 1 234 0 7 1 234 0 9 1 234 0 11 1 234 0 12 1 234 0 13 1 234 0 14 1 234 0 15 1 234 0 16 1 234 0 18 1 234 0 19 1 234 0 21 1 234 0 53 4 149 0 58 1 234 0 71 1 234 0 72 4 153 0 78 1 234 0 81 1 234 0 85 4 157 0 92 1 234 0 93 1 234 0 94 1 234 0 95 1 234 0 101 1 234 0 104 4 161 0 133 1 234 0 145 1 234 0 146] 
#[1 9 137 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 141 0 220 9 141 0 221 9 141 0 225 9 141 0 226 1 201 0 227] 
#[0 2 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 145 0 52] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 2 218 0 52 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[0 2 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 9 149 0 2 4 85 0 22 4 85 0 26 4 85 0 27 4 85 0 31 4 85 0 35 4 85 0 42 4 85 0 43 4 85 0 44 4 29 0 49 4 85 0 63 9 153 0 65 4 85 0 76 4 85 0 77 4 85 0 98 4 85 0 99 4 85 0 109 4 85 0 119 4 85 0 123 4 85 0 124 4 85 0 137 4 85 0 138 9 157 0 167 4 81 0 168 4 85 0 169] 
#[1 3 89 0 1 9 161 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 3 89 0 1 9 165 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[0 2 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 9 169 0 188 9 169 0 203 3 85 0 218 0 158 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 9 173 0 192 2 6 0 228] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 9 177 0 188 9 177 0 203 3 85 0 218 0 158 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 9 181 0 192 2 6 0 228] 
#[0 2 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 185 0 220 9 185 0 221 9 185 0 225 9 185 0 226 1 201 0 227] 
#[1 9 189 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 193 0 220 9 193 0 221 9 193 0 225 9 193 0 226 1 201 0 227] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 9 197 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[0 9 201 0 146] 
#[0 9 205 0 146] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 209 0 220 9 209 0 221 9 209 0 225 9 209 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 213 0 220 9 213 0 221 9 213 0 225 9 213 0 226 1 201 0 227] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 217 0 220 9 217 0 221 9 217 0 225 9 217 0 226 1 201 0 227] 
#[0 2 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 9 221 0 25] 
#[0 9 225 0 2] 
#[1 9 229 0 2 3 69 0 6 3 85 0 218] 
#[1 2 238 0 2 8 209 0 6 2 238 0 10 2 238 0 58 2 238 0 64 2 238 0 68 2 238 0 69 2 238 0 78 2 238 0 92 2 238 0 102 2 238 0 105 2 238 0 108 2 238 0 133 2 238 0 140 2 238 0 150 2 238 0 228] 
#[0 9 233 0 40] 
#[0 2 242 0 2 0 10 0 58 0 78 0 92 0 133 0 150 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 9 245 0 150 9 245 0 193 9 245 0 194 2 246 0 228] 
#[0 9 249 0 25] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 9 253 0 220 9 253 0 221 9 253 0 225 9 253 0 226 1 201 0 227] 
#[0 10 1 0 25] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 10 5 0 220 10 5 0 221 10 5 0 225 10 5 0 226 1 201 0 227] 
#[0 2 250 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 2 254 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 2 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 6 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 10 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 14 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 18 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 3 22 0 2 3 22 0 10 3 22 0 58 3 22 0 64 8 49 0 68 8 53 0 69 3 22 0 78 3 22 0 92 8 21 0 102 8 57 0 105 8 61 0 108 3 22 0 133 2 105 0 140 3 22 0 150 8 65 0 196 8 69 0 199 8 73 0 201 8 77 0 202 8 81 0 213 8 85 0 214 8 89 0 216 3 22 0 228] 
#[0 3 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 10 9 0 2] 
#[0 10 13 0 2] 
#[0 3 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 10 17 0 65] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 10 21 0 220 10 21 0 221 10 21 0 225 10 21 0 226 1 201 0 227] 
#[1 10 25 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 3 89 0 1 5 101 0 2 3 93 0 3 3 97 0 4 3 101 0 5 10 29 0 6 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[0 3 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 10 33 0 220 10 33 0 221 10 33 0 225 10 33 0 226 1 201 0 227] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 10 37 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 2 197 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 10 41 0 187 1 173 0 208 10 45 0 220 10 45 0 221 10 45 0 225 10 45 0 226 1 201 0 227] 
#[1 1 147 0 1 3 38 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 38 0 6 3 105 0 7 3 109 0 9 3 38 0 10 3 38 0 11 3 38 0 12 3 38 0 13 3 38 0 14 3 38 0 15 3 38 0 16 3 38 0 17 3 38 0 18 3 38 0 19 3 38 0 21 3 38 0 38 3 38 0 51 3 38 0 52 3 38 0 53 3 38 0 56 3 38 0 58 3 38 0 64 3 38 0 66 3 38 0 67 3 38 0 68 3 38 0 69 1 151 0 71 3 38 0 73 3 38 0 78 3 38 0 80 1 155 0 81 3 38 0 82 3 38 0 84 3 38 0 92 3 169 0 93 3 38 0 94 3 38 0 100 3 38 0 101 3 38 0 102 1 159 0 104 3 38 0 105 3 38 0 108 3 38 0 111 3 38 0 114 3 38 0 118 3 38 0 122 3 38 0 133 3 38 0 134 3 38 0 135 3 38 0 139 3 38 0 140 3 38 0 141 3 38 0 145 3 38 0 146 3 38 0 150 3 38 0 228] 
#[1 1 163 0 1 3 42 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 42 0 6 3 105 0 7 3 109 0 9 3 42 0 10 3 42 0 11 3 42 0 12 3 42 0 13 3 42 0 14 3 42 0 15 3 42 0 16 3 42 0 17 3 42 0 18 3 42 0 19 3 42 0 21 3 42 0 38 3 42 0 51 3 42 0 52 3 42 0 53 1 167 0 56 3 42 0 58 3 42 0 64 3 42 0 66 3 42 0 67 3 42 0 68 3 42 0 69 1 171 0 71 3 42 0 73 3 42 0 78 3 42 0 80 1 175 0 81 3 42 0 82 3 42 0 84 3 42 0 92 3 169 0 93 3 42 0 94 3 42 0 100 3 42 0 101 3 42 0 102 1 179 0 104 3 42 0 105 3 42 0 108 3 42 0 111 3 42 0 114 3 42 0 118 3 42 0 122 3 42 0 133 3 42 0 134 3 42 0 135 3 42 0 139 3 42 0 140 3 42 0 141 3 42 0 145 3 42 0 146 3 42 0 150 3 42 0 228] 
#[0 3 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 10 53 0 21] 
#[1 10 57 0 2 8 21 0 102 10 61 0 114 10 65 0 216] 
#[1 10 69 0 2 10 73 0 114] 
#[0 3 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 10 77 0 188 10 77 0 203 3 85 0 218 0 158 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 10 81 0 192 2 6 0 228] 
#[1 0 158 0 2 3 69 0 6 0 158 0 10 0 158 0 58 0 158 0 64 0 158 0 66 0 158 0 68 0 158 0 69 0 158 0 78 3 73 0 80 0 158 0 92 0 158 0 102 0 158 0 105 0 158 0 108 0 158 0 133 0 158 0 140 0 158 0 150 10 85 0 188 10 85 0 203 3 85 0 218 0 158 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 10 89 0 192 2 6 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 10 93 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 10 97 0 150 10 97 0 193 10 97 0 194 2 246 0 228] 
#[0 10 101 0 117] 
#[0 10 105 0 64] 
#[1 0 14 0 146 10 109 0 173 6 181 0 174 6 185 0 208 6 189 0 226] 
#[1 0 233 0 1 0 14 0 146 10 113 0 206 0 245 0 208] 
#[1 0 14 0 146 10 117 0 173 6 181 0 174 6 185 0 208 6 189 0 226] 
#[1 0 14 0 146 10 121 0 174 6 185 0 208 6 189 0 226] 
#[1 0 69 0 74 0 73 0 75 0 105 0 134 10 125 0 172 10 129 0 175] 
#[1 3 54 0 2 3 54 0 10 10 133 0 51 3 54 0 58 3 54 0 78 3 54 0 92 3 54 0 133 3 54 0 228] 
#[1 4 185 0 8 1 30 0 14] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 10 137 0 220 10 137 0 221 10 137 0 225 10 137 0 226 1 201 0 227] 
#[1 3 58 0 2 8 217 0 6 3 58 0 10 10 141 0 51 3 58 0 58 3 58 0 78 3 58 0 92 3 58 0 133 2 105 0 140 10 145 0 213 3 58 0 228] 
#[0 3 62 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 66 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 10 149 0 2 10 153 0 6] 
#[0 10 157 0 146] 
#[0 10 161 0 19] 
#[1 10 165 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 4 149 0 58 4 153 0 78 4 157 0 92 8 21 0 102 4 161 0 133 10 169 0 216] 
#[0 3 70 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 10 173 0 79] 
#[0 3 74 0 19] 
#[1 0 14 0 146 10 177 0 166 0 225 0 208 7 29 0 227] 
#[0 3 78 0 2 0 6] 
#[1 0 9 0 1 0 13 0 20 0 17 0 24 0 21 0 33 0 25 0 34 0 29 0 37 0 33 0 41 0 37 0 45 0 41 0 46 0 45 0 50 0 49 0 52 0 53 0 57 0 57 0 59 0 61 0 60 0 65 0 70 0 69 0 74 0 73 0 75 0 77 0 87 0 81 0 88 0 85 0 91 0 89 0 112 0 93 0 115 0 97 0 116 0 101 0 118 0 105 0 134 0 109 0 135 0 113 0 141 10 181 0 156 0 129 0 157 0 129 0 158 0 129 0 161 0 129 0 162 0 129 0 163 0 129 0 170 0 129 0 171 0 129 0 172 0 129 0 175 0 129 0 176 0 129 0 179 0 129 0 180 0 129 0 181 0 129 0 182 0 129 0 183 0 129 0 184 0 129 0 185 0 129 0 186 0 201 0 187] 
#[0 3 82 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 1 198 0 2 0 67 0 38 0 71 0 67 0 75 0 73 0 79 0 82 0 83 0 84 7 81 0 100 0 91 0 111 7 85 0 210 10 185 0 211] 
#[1 1 198 0 2 0 67 0 38 0 71 0 67 0 75 0 73 0 79 0 82 0 83 0 84 7 81 0 100 0 91 0 111 7 85 0 210 10 189 0 211] 
#[1 10 193 0 2 2 182 0 38 2 182 0 67 2 182 0 73 2 182 0 82 2 182 0 84 2 182 0 111] 
#[1 0 233 0 1 0 14 0 146 10 197 0 206 0 245 0 208] 
#[1 0 233 0 1 0 14 0 146 10 201 0 206 0 245 0 208] 
#[0 3 86 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 1 198 0 2 1 198 0 6 1 198 0 10 1 198 0 17 0 67 0 38 1 198 0 58 1 198 0 64 0 71 0 67 1 198 0 68 1 198 0 69 0 75 0 73 1 198 0 78 0 79 0 82 0 83 0 84 1 198 0 92 0 87 0 100 1 198 0 102 1 198 0 105 1 198 0 108 0 91 0 111 1 198 0 118 1 198 0 133 1 198 0 135 1 198 0 140 1 198 0 150 7 85 0 210 10 205 0 211 1 198 0 228] 
#[0 3 90 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 3 89 0 1 3 94 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 94 0 6 3 105 0 7 3 109 0 9 3 94 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 94 0 17 3 137 0 18 3 145 0 21 3 94 0 38 3 149 0 53 3 94 0 58 3 94 0 64 3 94 0 67 3 94 0 68 3 94 0 69 3 153 0 71 3 157 0 72 3 94 0 73 3 94 0 78 3 161 0 81 3 94 0 82 3 94 0 84 3 165 0 85 3 94 0 92 3 169 0 93 3 173 0 94 3 177 0 95 3 94 0 100 3 181 0 101 3 94 0 102 3 185 0 104 3 94 0 105 3 94 0 108 3 94 0 111 3 94 0 118 3 94 0 133 3 94 0 135 3 94 0 140 3 189 0 145 3 94 0 150 3 94 0 228] 
#[1 1 198 0 2 1 198 0 6 1 198 0 10 1 198 0 17 0 67 0 38 1 198 0 58 1 198 0 64 0 71 0 67 1 198 0 68 1 198 0 69 0 75 0 73 1 198 0 78 0 79 0 82 0 83 0 84 1 198 0 92 0 87 0 100 1 198 0 102 1 198 0 105 1 198 0 108 0 91 0 111 1 198 0 118 1 198 0 133 1 198 0 135 1 198 0 140 1 198 0 150 7 85 0 210 10 209 0 211 1 198 0 228] 
#[1 1 198 0 2 1 198 0 6 1 198 0 10 1 198 0 17 0 67 0 38 1 198 0 58 1 198 0 64 0 71 0 67 1 198 0 68 1 198 0 69 0 75 0 73 1 198 0 78 0 79 0 82 0 83 0 84 1 198 0 92 0 87 0 100 1 198 0 102 1 198 0 105 1 198 0 108 0 91 0 111 1 198 0 118 1 198 0 133 1 198 0 135 1 198 0 140 1 198 0 150 7 85 0 210 10 213 0 211 1 198 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 10 217 0 136 0 113 0 141 10 221 0 187] 
#[1 10 225 0 2 3 69 0 6 3 85 0 218] 
#[0 10 229 0 1] 
#[0 3 98 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 10 233 0 136 0 113 0 141 10 237 0 187] 
#[1 10 241 0 2 3 69 0 6 3 85 0 218] 
#[0 10 245 0 1] 
#[0 3 102 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 106 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 110 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 10 249 0 220 10 249 0 221 10 249 0 225 10 249 0 226 1 201 0 227] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 10 253 0 139 3 189 0 145 11 1 0 159 11 5 0 160] 
#[0 3 114 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 11 9 0 72 11 13 0 95] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 118 0 51 3 118 0 52 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 118 0 139 3 189 0 145] 
#[0 3 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 17 0 149] 
#[1 11 21 0 2 11 25 0 65] 
#[0 3 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 11 29 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 11 33 0 150 11 33 0 193 11 33 0 194 2 246 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 11 37 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 11 41 0 150 11 41 0 193 11 41 0 194 2 246 0 228] 
#[1 3 89 0 1 11 45 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[0 1 183 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 3 89 0 1 11 49 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 11 53 0 64 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 11 57 0 192 2 6 0 228] 
#[1 11 61 0 2 11 65 0 141] 
#[1 11 69 0 2 11 73 0 141] 
#[1 3 89 0 1 11 77 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 3 89 0 1 11 81 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 3 89 0 1 11 85 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 89 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 3 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 146 0 2 0 10 0 58 0 64 0 66 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 3 150 0 2 0 10 0 58 0 78 0 92 0 133 0 150 0 228] 
#[0 3 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 158 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 162 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 11 93 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 97 0 215 11 101 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 3 89 0 1 3 166 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 166 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 166 0 58 3 166 0 64 3 166 0 68 3 166 0 69 3 153 0 71 3 157 0 72 3 166 0 78 3 161 0 81 3 165 0 85 3 166 0 92 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 166 0 102 3 185 0 104 3 166 0 105 3 166 0 108 3 166 0 133 3 166 0 140 3 189 0 145 3 166 0 150 3 166 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 105 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 3 89 0 1 3 170 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 170 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 170 0 58 3 170 0 64 3 170 0 68 3 170 0 69 3 153 0 71 3 157 0 72 3 170 0 78 3 161 0 81 3 165 0 85 3 170 0 92 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 170 0 102 3 185 0 104 3 170 0 105 3 170 0 108 3 170 0 133 3 170 0 140 3 189 0 145 3 170 0 150 3 170 0 228] 
#[0 3 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 3 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 109 0 149] 
#[1 1 187 0 1 3 182 0 2 1 191 0 3 1 195 0 4 1 199 0 5 3 182 0 6 1 203 0 7 1 207 0 9 3 182 0 10 1 211 0 11 1 215 0 12 1 219 0 13 1 223 0 14 1 227 0 15 1 231 0 16 3 182 0 17 1 235 0 18 3 182 0 19 1 239 0 21 3 182 0 38 3 182 0 51 3 182 0 52 1 243 0 53 3 182 0 56 3 182 0 58 3 182 0 64 3 182 0 66 3 182 0 67 3 182 0 68 3 182 0 69 1 247 0 71 1 251 0 72 3 182 0 73 3 182 0 78 3 182 0 80 1 255 0 81 3 182 0 82 3 182 0 84 2 3 0 85 3 182 0 92 2 7 0 93 2 11 0 94 2 15 0 95 3 182 0 100 2 19 0 101 3 182 0 102 2 23 0 104 3 182 0 105 3 182 0 108 3 182 0 111 3 182 0 114 3 182 0 118 3 182 0 122 3 182 0 133 3 182 0 134 3 182 0 135 3 182 0 139 3 182 0 140 3 182 0 141 2 27 0 145 3 182 0 146 3 182 0 150 3 182 0 228] 
#[0 2 31 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 113 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 2 35 0 1 3 190 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 190 0 6 3 105 0 7 3 109 0 9 3 190 0 10 3 190 0 11 3 190 0 12 3 190 0 13 3 190 0 14 3 190 0 15 3 190 0 16 3 190 0 17 3 190 0 18 3 190 0 19 3 190 0 21 3 190 0 38 3 190 0 51 3 190 0 52 3 190 0 53 3 190 0 56 3 190 0 58 3 190 0 64 3 190 0 66 3 190 0 67 3 190 0 68 3 190 0 69 2 39 0 71 3 190 0 73 3 190 0 78 3 190 0 80 2 43 0 81 3 190 0 82 3 190 0 84 3 190 0 92 3 169 0 93 3 190 0 94 3 190 0 100 3 190 0 101 3 190 0 102 2 47 0 104 3 190 0 105 3 190 0 108 3 190 0 111 3 190 0 114 3 190 0 118 3 190 0 122 3 190 0 133 3 190 0 134 3 190 0 135 3 190 0 139 3 190 0 140 3 190 0 141 3 190 0 145 3 190 0 146 3 190 0 150 3 190 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 117 0 220 11 117 0 221 11 117 0 225 11 117 0 226 1 201 0 227] 
#[1 11 121 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 3 89 0 1 5 101 0 2 3 93 0 3 3 97 0 4 3 101 0 5 11 125 0 6 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 129 0 220 11 129 0 221 11 129 0 225 11 129 0 226 1 201 0 227] 
#[1 11 133 0 39 11 137 0 132 11 141 0 150] 
#[0 3 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 145 0 21] 
#[1 11 149 0 2 11 153 0 114] 
#[0 3 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 11 157 0 21] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 11 161 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 11 165 0 150 11 165 0 193 11 165 0 194 2 246 0 228] 
#[1 0 59 0 2 0 59 0 10 0 59 0 58 0 59 0 64 5 225 0 66 1 42 0 68 1 42 0 69 0 59 0 78 0 59 0 92 1 42 0 102 1 42 0 105 1 42 0 108 0 59 0 133 1 42 0 140 0 59 0 150 5 229 0 189 11 169 0 190 5 237 0 195 5 241 0 204 0 59 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 11 173 0 150 11 173 0 193 11 173 0 194 2 246 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 11 177 0 192 2 6 0 228] 
#[0 3 202 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 206 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 11 181 0 117] 
#[1 3 210 0 2 8 217 0 6 3 210 0 10 11 185 0 51 3 210 0 58 3 210 0 78 3 210 0 92 3 210 0 133 2 105 0 140 11 189 0 213 3 210 0 228] 
#[1 3 214 0 2 3 214 0 6 3 214 0 10 2 81 0 38 3 214 0 58 3 214 0 64 2 85 0 67 3 214 0 68 3 214 0 69 2 89 0 73 3 214 0 78 2 93 0 82 2 97 0 84 3 214 0 92 3 214 0 102 3 214 0 105 3 214 0 108 2 101 0 111 3 214 0 118 3 214 0 133 3 214 0 140 3 214 0 150 3 214 0 228] 
#[1 3 218 0 2 8 217 0 6 3 218 0 10 3 218 0 58 3 218 0 78 3 218 0 92 3 218 0 133 2 105 0 140 11 193 0 213 3 218 0 228] 
#[0 3 222 0 2 0 6 0 10 0 51 0 58 0 78 0 92 0 133 0 139 0 140 0 228] 
#[0 3 226 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 3 230 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 69 0 74 0 73 0 75 0 105 0 134 11 197 0 172 11 201 0 175] 
#[1 3 89 0 1 3 234 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 234 0 6 3 105 0 7 3 109 0 9 3 234 0 10 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 234 0 51 3 149 0 53 3 234 0 58 3 153 0 71 3 157 0 72 3 234 0 78 3 161 0 81 3 165 0 85 3 234 0 92 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 234 0 133 3 234 0 139 3 234 0 140 3 189 0 145 3 234 0 228] 
#[1 0 69 0 74 0 73 0 75 0 105 0 134 11 205 0 172 11 209 0 175] 
#[1 3 238 0 2 3 238 0 10 11 213 0 51 3 238 0 58 3 238 0 78 3 238 0 92 3 238 0 133 3 238 0 228] 
#[1 3 242 0 1 3 242 0 2 3 242 0 6 3 242 0 20 3 242 0 24 11 217 0 32 3 242 0 33 3 242 0 34 3 242 0 37 3 242 0 41 3 242 0 45 3 242 0 46 3 242 0 50 3 242 0 52 3 242 0 57 3 242 0 59 3 242 0 60 3 242 0 65 3 242 0 70 3 242 0 74 3 242 0 75 3 242 0 87 3 242 0 88 3 242 0 91 3 242 0 112 3 242 0 115 3 242 0 116 3 242 0 118 3 242 0 134 3 242 0 135 3 242 0 141] 
#[0 11 221 0 150] 
#[0 3 246 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 11 225 0 1] 
#[0 3 250 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 3 254 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 2 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 6 0 2 0 6] 
#[1 0 6 0 2 0 6 0 10 11 229 0 155] 
#[1 11 233 0 2 3 86 0 38 3 86 0 67 3 86 0 73 3 86 0 82 3 86 0 84 3 86 0 111] 
#[1 11 237 0 2 3 90 0 38 3 90 0 67 3 90 0 73 3 90 0 82 3 90 0 84 3 90 0 111] 
#[0 4 10 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 1 198 0 2 0 67 0 38 0 71 0 67 0 75 0 73 0 79 0 82 0 83 0 84 7 81 0 100 0 91 0 111 7 85 0 210 11 241 0 211] 
#[1 1 198 0 2 0 67 0 38 0 71 0 67 0 75 0 73 0 79 0 82 0 83 0 84 7 81 0 100 0 91 0 111 7 85 0 210 11 245 0 211] 
#[0 4 14 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 18 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 22 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 11 249 0 1] 
#[1 4 26 0 2 4 26 0 10 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133 4 26 0 228] 
#[0 4 30 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 11 253 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 12 1 0 1] 
#[1 4 34 0 2 4 34 0 10 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133 4 34 0 228] 
#[0 4 38 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 12 5 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 3 89 0 1 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 10 253 0 139 3 189 0 145 12 9 0 159 11 5 0 160] 
#[1 12 13 0 90 12 17 0 95] 
#[1 4 42 0 2 4 42 0 10 4 42 0 58 4 42 0 78 4 42 0 92 4 42 0 133 10 253 0 139 12 21 0 160 4 42 0 228] 
#[0 4 46 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 228] 
#[0 12 25 0 1] 
#[0 12 29 0 72] 
#[0 12 33 0 2] 
#[0 4 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 37 0 149] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 12 41 0 192 2 6 0 228] 
#[0 4 54 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 12 45 0 192 2 6 0 228] 
#[0 4 58 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 12 49 0 220 12 49 0 221 12 49 0 225 12 49 0 226 1 201 0 227] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 12 53 0 150 12 53 0 193 12 53 0 194 2 246 0 228] 
#[0 4 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 57 0 54] 
#[0 4 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 61 0 54] 
#[0 4 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 4 90 0 2 3 69 0 6 4 90 0 10 4 90 0 58 4 90 0 64 4 90 0 68 4 90 0 69 4 90 0 78 4 90 0 92 4 90 0 102 4 90 0 105 4 90 0 108 4 90 0 114 4 90 0 133 4 90 0 140 4 90 0 150 3 85 0 218 4 90 0 228] 
#[1 2 197 0 1 12 65 0 2 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 0 93 0 115 0 97 0 116 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 0 113 0 141 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 2 201 0 187 1 173 0 208 2 205 0 220 2 205 0 221 2 205 0 225 2 205 0 226 1 201 0 227] 
#[0 4 94 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[1 4 98 0 2 3 69 0 6 4 98 0 10 4 98 0 58 4 98 0 64 4 98 0 68 4 98 0 69 4 98 0 78 4 98 0 92 4 98 0 102 4 98 0 105 4 98 0 108 4 98 0 133 4 98 0 140 4 98 0 150 3 85 0 218 4 98 0 228] 
#[1 4 102 0 2 3 69 0 6 4 102 0 10 4 102 0 58 4 102 0 64 4 102 0 68 4 102 0 69 4 102 0 78 4 102 0 92 4 102 0 102 4 102 0 105 4 102 0 108 4 102 0 114 4 102 0 133 4 102 0 140 4 102 0 150 3 85 0 218 4 102 0 228] 
#[0 12 69 0 2] 
#[1 12 73 0 2 3 69 0 6 3 85 0 218] 
#[1 2 51 0 1 4 106 0 2 2 55 0 3 2 59 0 4 2 63 0 5 4 106 0 6 2 67 0 7 2 71 0 9 4 106 0 10 2 75 0 11 2 79 0 12 2 83 0 13 2 87 0 14 2 91 0 15 2 95 0 16 4 106 0 17 2 99 0 18 4 106 0 19 2 103 0 21 4 106 0 38 4 106 0 51 4 106 0 52 2 107 0 53 4 106 0 56 4 106 0 58 4 106 0 64 4 106 0 66 4 106 0 67 4 106 0 68 4 106 0 69 2 111 0 71 2 115 0 72 4 106 0 73 4 106 0 78 4 106 0 80 2 119 0 81 4 106 0 82 4 106 0 84 2 123 0 85 4 106 0 92 2 127 0 93 2 131 0 94 2 135 0 95 4 106 0 100 2 139 0 101 4 106 0 102 2 143 0 104 4 106 0 105 4 106 0 108 4 106 0 111 4 106 0 114 4 106 0 118 4 106 0 122 4 106 0 133 4 106 0 134 4 106 0 135 4 106 0 139 4 106 0 140 4 106 0 141 2 147 0 145 4 106 0 146 4 106 0 150 4 106 0 228] 
#[0 2 151 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 12 77 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 2 155 0 1 4 114 0 2 3 93 0 3 3 97 0 4 3 101 0 5 4 114 0 6 3 105 0 7 3 109 0 9 4 114 0 10 4 114 0 11 4 114 0 12 4 114 0 13 4 114 0 14 4 114 0 15 4 114 0 16 4 114 0 17 4 114 0 18 4 114 0 19 4 114 0 21 4 114 0 38 4 114 0 51 4 114 0 52 4 114 0 53 4 114 0 56 4 114 0 58 4 114 0 64 4 114 0 66 4 114 0 67 4 114 0 68 4 114 0 69 2 159 0 71 4 114 0 73 4 114 0 78 4 114 0 80 2 163 0 81 4 114 0 82 4 114 0 84 4 114 0 92 3 169 0 93 4 114 0 94 4 114 0 100 4 114 0 101 4 114 0 102 2 167 0 104 4 114 0 105 4 114 0 108 4 114 0 111 4 114 0 114 4 114 0 118 4 114 0 122 4 114 0 133 4 114 0 134 4 114 0 135 4 114 0 139 4 114 0 140 4 114 0 141 4 114 0 145 4 114 0 146 4 114 0 150 4 114 0 228] 
#[0 12 81 0 113] 
#[0 12 85 0 106] 
#[0 12 89 0 106] 
#[1 12 93 0 39 12 97 0 132 12 101 0 150] 
#[0 4 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 105 0 21] 
#[1 12 109 0 39 12 113 0 132 12 117 0 150] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 12 121 0 192 2 6 0 228] 
#[0 4 122 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 6 0 2 2 6 0 10 2 6 0 58 8 37 0 64 2 6 0 78 2 6 0 92 2 6 0 133 2 6 0 150 8 41 0 191 12 125 0 192 2 6 0 228] 
#[0 4 126 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 12 129 0 150 12 129 0 193 12 129 0 194 2 246 0 228] 
#[0 4 130 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 69 0 74 0 73 0 75 0 105 0 134 12 133 0 172 12 137 0 175] 
#[1 4 134 0 2 4 134 0 10 12 141 0 51 4 134 0 58 4 134 0 78 4 134 0 92 4 134 0 133 4 134 0 228] 
#[0 4 138 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 142 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 146 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 150 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 154 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 69 0 74 0 73 0 75 0 105 0 134 12 145 0 172 12 149 0 175] 
#[0 12 153 0 118] 
#[0 12 157 0 2] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 12 161 0 187] 
#[1 12 165 0 2 4 117 0 10] 
#[0 4 158 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 162 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 12 169 0 2 4 18 0 38 4 18 0 67 4 18 0 73 4 18 0 82 4 18 0 84 4 18 0 111] 
#[1 12 173 0 2 4 22 0 38 4 22 0 67 4 22 0 73 4 22 0 82 4 22 0 84 4 22 0 111] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 12 177 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 12 181 0 2 3 69 0 6 3 85 0 218] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 12 185 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 12 189 0 2 3 69 0 6 3 85 0 218] 
#[1 4 166 0 2 4 166 0 10 4 166 0 58 4 166 0 78 4 166 0 92 4 166 0 133 10 253 0 139 12 21 0 160 4 166 0 228] 
#[0 12 193 0 122] 
#[0 12 197 0 90] 
#[0 4 170 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 228] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 12 201 0 187] 
#[0 12 205 0 1] 
#[0 4 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 12 209 0 2] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 12 213 0 150 12 213 0 193 12 213 0 194 2 246 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 12 217 0 150 12 217 0 193 12 217 0 194 2 246 0 228] 
#[1 3 89 0 1 12 221 0 2 3 93 0 3 3 97 0 4 3 101 0 5 3 105 0 7 3 109 0 9 3 113 0 11 3 117 0 12 3 121 0 13 3 125 0 14 3 129 0 15 3 133 0 16 3 137 0 18 3 145 0 21 3 149 0 53 3 153 0 71 3 157 0 72 3 161 0 81 3 165 0 85 3 169 0 93 3 173 0 94 3 177 0 95 3 181 0 101 3 185 0 104 3 189 0 145] 
#[0 4 178 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 12 225 0 2] 
#[0 12 229 0 2] 
#[0 4 182 0 2 0 10 0 58 0 64 0 68 0 69 0 78 0 92 0 102 0 105 0 108 0 133 0 140 0 150 0 228] 
#[0 4 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 12 233 0 2 3 69 0 6 3 85 0 218] 
#[0 12 237 0 18] 
#[0 12 241 0 18] 
#[0 12 245 0 18] 
#[0 12 249 0 113] 
#[0 12 253 0 106] 
#[0 13 1 0 106] 
#[1 13 5 0 39 13 9 0 132 13 13 0 150] 
#[0 13 17 0 113] 
#[0 13 21 0 106] 
#[0 13 25 0 106] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 13 29 0 150 13 29 0 193 13 29 0 194 2 246 0 228] 
#[1 2 246 0 2 2 246 0 10 2 246 0 58 2 246 0 78 2 246 0 92 2 246 0 133 13 33 0 150 13 33 0 193 13 33 0 194 2 246 0 228] 
#[0 4 194 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 198 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 202 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 0 69 0 74 0 73 0 75 0 105 0 134 13 37 0 172 13 41 0 175] 
#[0 4 206 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 210 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 13 45 0 146] 
#[1 4 214 0 1 4 214 0 2 4 214 0 6 4 214 0 20 4 214 0 24 13 49 0 32 4 214 0 33 4 214 0 34 4 214 0 37 4 214 0 41 4 214 0 45 4 214 0 46 4 214 0 50 4 214 0 52 4 214 0 57 4 214 0 59 4 214 0 60 4 214 0 65 4 214 0 70 4 214 0 74 4 214 0 75 4 214 0 87 4 214 0 88 4 214 0 91 4 214 0 112 4 214 0 115 4 214 0 116 4 214 0 118 4 214 0 134 4 214 0 135 4 214 0 141] 
#[1 13 53 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[0 4 218 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 222 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[0 4 226 0 2 0 6 0 10 0 17 0 38 0 58 0 64 0 67 0 68 0 69 0 73 0 78 0 82 0 84 0 92 0 100 0 102 0 105 0 108 0 111 0 118 0 133 0 135 0 140 0 150 0 228] 
#[1 13 57 0 2 3 69 0 6 3 85 0 218] 
#[0 4 230 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[1 13 61 0 2 3 69 0 6 3 85 0 218] 
#[0 4 234 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 13 65 0 134] 
#[0 13 69 0 122] 
#[1 13 73 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[1 0 9 0 1 0 93 0 115 0 97 0 116 0 113 0 141 13 77 0 187] 
#[0 4 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 242 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 246 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 4 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 4 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 13 81 0 39 13 85 0 132 13 89 0 150] 
#[1 13 93 0 39 13 97 0 132 13 101 0 150] 
#[1 13 105 0 39 13 109 0 132 13 113 0 150] 
#[0 13 117 0 18] 
#[0 13 121 0 18] 
#[0 13 125 0 18] 
#[0 13 129 0 113] 
#[0 13 133 0 106] 
#[0 13 137 0 106] 
#[0 13 141 0 18] 
#[0 13 145 0 18] 
#[0 13 149 0 18] 
#[0 5 10 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 14 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 18 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 22 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 26 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 13 153 0 118] 
#[0 5 30 0 1 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[0 5 34 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 5 38 0 2 0 10 0 58 0 78 0 92 0 133 0 228] 
#[0 13 157 0 118] 
#[0 13 161 0 75] 
#[0 5 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 13 165 0 2 2 13 0 58 2 17 0 78 2 21 0 92 2 25 0 133] 
#[0 13 169 0 113] 
#[0 13 173 0 106] 
#[0 13 177 0 106] 
#[0 13 181 0 113] 
#[0 13 185 0 106] 
#[0 13 189 0 106] 
#[0 13 193 0 113] 
#[0 13 197 0 106] 
#[0 13 201 0 106] 
#[1 13 205 0 39 13 209 0 132 13 213 0 150] 
#[1 13 217 0 39 13 221 0 132 13 225 0 150] 
#[1 13 229 0 39 13 233 0 132 13 237 0 150] 
#[0 13 241 0 18] 
#[0 13 245 0 18] 
#[0 13 249 0 18] 
#[1 13 253 0 39 14 1 0 132 14 5 0 150] 
#[1 14 9 0 39 14 13 0 132 14 17 0 150] 
#[1 14 21 0 39 14 25 0 132 14 29 0 150] 
#[0 14 33 0 146] 
#[1 0 14 0 146 14 37 0 173 6 181 0 174 6 185 0 208 6 189 0 226] 
#[0 14 41 0 1] 
#[0 5 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 14 45 0 2] 
#[0 14 49 0 2] 
#[0 14 53 0 2] 
#[0 14 57 0 2] 
#[0 14 61 0 2] 
#[0 14 65 0 2] 
#[0 14 69 0 2] 
#[0 14 73 0 2] 
#[0 14 77 0 2] 
#[0 14 81 0 113] 
#[0 14 85 0 106] 
#[0 14 89 0 106] 
#[0 14 93 0 113] 
#[0 14 97 0 106] 
#[0 14 101 0 106] 
#[0 14 105 0 113] 
#[0 14 109 0 106] 
#[0 14 113 0 106] 
#[1 14 117 0 39 14 121 0 132 14 125 0 150] 
#[1 14 129 0 39 14 133 0 132 14 137 0 150] 
#[1 14 141 0 39 14 145 0 132 14 149 0 150] 
#[0 14 153 0 113] 
#[0 14 157 0 106] 
#[0 14 161 0 106] 
#[0 14 165 0 113] 
#[0 14 169 0 106] 
#[0 14 173 0 106] 
#[0 14 177 0 113] 
#[0 14 181 0 106] 
#[0 14 185 0 106] 
#[0 5 50 0 1 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 41 0 45 0 46 0 50 0 52 0 57 0 59 0 60 0 65 0 70 0 74 0 75 0 87 0 88 0 91 0 112 0 115 0 116 0 118 0 134 0 135 0 141] 
#[1 5 54 0 2 8 217 0 6 5 54 0 10 5 54 0 58 5 54 0 78 5 54 0 92 5 54 0 133 5 54 0 139 5 54 0 228] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 14 189 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[0 5 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 14 193 0 2] 
#[0 14 197 0 2] 
#[0 14 201 0 2] 
#[0 14 205 0 2] 
#[0 14 209 0 2] 
#[0 14 213 0 2] 
#[0 14 217 0 2] 
#[0 14 221 0 2] 
#[0 14 225 0 2] 
#[0 14 229 0 113] 
#[0 14 233 0 106] 
#[0 14 237 0 106] 
#[0 14 241 0 113] 
#[0 14 245 0 106] 
#[0 14 249 0 106] 
#[0 14 253 0 113] 
#[0 15 1 0 106] 
#[0 15 5 0 106] 
#[0 15 9 0 2] 
#[0 15 13 0 2] 
#[0 15 17 0 2] 
#[0 15 21 0 2] 
#[0 15 25 0 2] 
#[0 15 29 0 2] 
#[0 15 33 0 2] 
#[0 15 37 0 2] 
#[0 15 41 0 2] 
#[1 15 45 0 2 3 69 0 6 3 85 0 218] 
#[0 5 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 15 49 0 2] 
#[0 15 53 0 2] 
#[0 15 57 0 2] 
#[0 15 61 0 2] 
#[0 15 65 0 2] 
#[0 15 69 0 2] 
#[0 15 73 0 2] 
#[0 15 77 0 2] 
#[0 15 81 0 2] 
#[0 5 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[1 5 166 0 2 5 166 0 10 5 166 0 58 5 166 0 78 5 166 0 92 5 166 0 133 15 85 0 136 5 166 0 139 5 166 0 228] 
#[0 5 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 5 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 51 0 52 0 53 0 56 0 58 0 64 0 66 0 67 0 68 0 69 0 71 0 72 0 73 0 78 0 80 0 81 0 82 0 84 0 85 0 92 0 93 0 94 0 95 0 100 0 101 0 102 0 104 0 105 0 108 0 111 0 114 0 118 0 122 0 133 0 134 0 135 0 139 0 140 0 141 0 145 0 146 0 150 0 228] 
#[0 15 89 0 1] 
#[1 1 69 0 1 0 14 0 3 1 73 0 5 1 77 0 7 1 81 0 28 1 85 0 30 1 89 0 36 1 93 0 42 1 105 0 61 1 109 0 62 1 113 0 79 1 117 0 95 1 121 0 96 1 125 0 120 1 129 0 123 1 133 0 124 1 141 0 128 1 145 0 129 1 149 0 130 1 153 0 144 0 14 0 146 1 157 0 147 1 161 0 148 1 165 0 149 1 169 0 150 1 173 0 208 15 93 0 217 1 181 0 219 1 185 0 220 1 185 0 221 1 185 0 225 1 185 0 226 1 201 0 227] 
#[1 15 97 0 2 3 69 0 6 3 85 0 218] 
#[0 5 206 0 2 0 10 0 58 0 78 0 92 0 133 0 139 0 228]
	).
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression1: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression2: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result else: (nodes at: 3).
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression3: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression4: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result else: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement1: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result forToken: (nodes at: 3).
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement2: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement1: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement2: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateMacroStatement1: nodes [
	| result |
	result := TeradataCreateMacroStatementNode new.
	result createToken: (nodes at: 1).
	result macroToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addToken: ((nodes at: 4) at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result statements.
	result addTokens: ((nodes at: 7) at: 2) to: result semicolons.
	result addTokens: (nodes at: 8) to: result semicolons.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDatabaseStatement1: nodes [
	| result |
	result := TeradataDatabaseStatementNode new.
	result databaseToken: (nodes at: 1).
	result database: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery10: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery11: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result where: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery12: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result allToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery7: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery8: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result where: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery9: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result allToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDropTableQuery1: nodes [
	| result |
	result := TeradataDropTableQueryNode new.
	result dropToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForElseExpression1: nodes [
	| result |
	result := TeradataElseExpressionNode new.
	result elseToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForEmptyGroupByExpression1: nodes [
	| result |
	result := TeradataEmptyGroupByExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 2) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement3: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement4: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression100: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression101: nodes [
	| result |
	result := TeradataIntervalExpressionNode new.
	result intervalToken: (nodes at: 1).
	result interval: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression102: nodes [
	| result |
	result := TeradataCaseSpecificExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result caseSpecificToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression103: nodes [
	| result |
	result := TeradataTitleExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result titleToken: (nodes at: 3).
	result title: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression104: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression106: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result countType: (nodes at: 3).
	result value: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression109: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression110: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression113: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result existsToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result query: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression114: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result notToken: (nodes at: 1).
	result existsToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression115: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression116: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result withToken: (nodes at: 6).
	result errorToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression119: nodes [
	| result |
	result := TeradataXmlAggExpressionNode new.
	result xmlaggToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression11: nodes [
	| result |
	result := TeradataBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression120: nodes [
	| result |
	result := TeradataUnicodeEscapeExpressionNode new.
	result value: (nodes at: 1).
	result uescapeToken: (nodes at: 2).
	result escape: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression121: nodes [
	| result |
	result := TeradataIgnoreNullsExpressionNode new.
	result value: (nodes at: 1).
	result ignoreToken: (nodes at: 2).
	result nullsToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression26: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression27: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	result escapeToken: (nodes at: 4).
	result escape: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression28: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression29: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	result escapeToken: (nodes at: 5).
	result escape: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression2: nodes [
	| result |
	result := TeradataVariableExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression30: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression31: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result forToken: (nodes at: 6).
	result for: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression32: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result nullToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression33: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result nullToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression34: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression35: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression36: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNode: (nodes at: 4) to: result values.
	result addToken: (nodes at: 5) to: result commas.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression37: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression38: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result commas.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression39: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression3: nodes [
	| result |
	result := TeradataLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression40: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result query: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression41: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result inToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result query: (nodes at: 8).
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression42: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result notToken: (nodes at: 6).
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result query: (nodes at: 9).
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression43: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result formatToken: (nodes at: 3).
	result format: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression44: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression45: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result comma: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression46: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression47: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression48: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression49: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result formatToken: (nodes at: 6).
	result format: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression51: nodes [
	| result |
	result := TeradataUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression52: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result betweenToken: (nodes at: 2).
	result first: (nodes at: 3).
	result andToken: (nodes at: 4).
	result last: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression53: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result betweenToken: (nodes at: 3).
	result first: (nodes at: 4).
	result andToken: (nodes at: 5).
	result last: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression54: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression55: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression58: nodes [
	| result |
	result := TeradataQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result query: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression5: nodes [
	| result |
	result := TeradataNullExpressionNode new.
	result nullToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression60: nodes [
	| result |
	result := TeradataExtractExpressionNode new.
	result extractToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result name: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression61: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression66: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression67: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result from: (nodes at: 6).
	result addToken: (nodes at: 7) to: result precedingTokens.
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression69: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result to: (nodes at: 9).
	result addToken: (nodes at: 10) to: result precedingTokens.
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression6: nodes [
	| result |
	result := TeradataStarExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression70: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result rows: (nodes at: 4).
	result betweenToken: (nodes at: 5).
	result currentFromToken: (nodes at: 6).
	result rowFromToken: (nodes at: 7).
	result andToken: (nodes at: 8).
	result currentToToken: (nodes at: 9).
	result rowToToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression71: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression76: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression77: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression79: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression80: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression81: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression86: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression87: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result from: (nodes at: 7).
	result addToken: (nodes at: 8) to: result precedingTokens.
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression89: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result to: (nodes at: 10).
	result addToken: (nodes at: 11) to: result precedingTokens.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression90: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result rows: (nodes at: 5).
	result betweenToken: (nodes at: 6).
	result currentFromToken: (nodes at: 7).
	result rowFromToken: (nodes at: 8).
	result andToken: (nodes at: 9).
	result currentToToken: (nodes at: 10).
	result rowToToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression91: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression96: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression97: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result from: (nodes at: 8).
	result addToken: (nodes at: 9) to: result precedingTokens.
	result andToken: (nodes at: 10).
	result currentToToken: (nodes at: 11).
	result rowToToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression99: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result rows: (nodes at: 6).
	result betweenToken: (nodes at: 7).
	result currentFromToken: (nodes at: 8).
	result rowFromToken: (nodes at: 9).
	result andToken: (nodes at: 10).
	result to: (nodes at: 11).
	result addToken: (nodes at: 12) to: result precedingTokens.
	result addToken: (nodes at: 13) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionList2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile1: nodes [
	| result |
	result := TeradataFileNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result statements.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolons.
	result addTokens: (nodes at: 2) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile2: nodes [
	| result |
	result := TeradataFileNode new.
	result addTokens: (nodes at: 1) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFromTables1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression1: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression2: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression1: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression2: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHavingExpression1: nodes [
	| result |
	result := TeradataHavingNode new.
	result havingToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHelpSessionStatement1: nodes [
	| result |
	result := TeradataHelpSessionStatementNode new.
	result helpToken: (nodes at: 1).
	result sessionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifier1: nodes [
	| result |
	result := TeradataIdentifierExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifierName1: nodes [
	| result |
	result := TeradataIdentifierNameNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery11: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result query: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery12: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result query: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery5: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result valuesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery6: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result valuesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result addNodes: ((nodes at: 8) at: 1) to: result values.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery7: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result valuesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery8: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result valuesToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result addNodes: ((nodes at: 9) at: 1) to: result values.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIntoExpression1: nodes [
	| result |
	result := TeradataIntoExpressionNode new.
	result intoToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement1: nodes [
	| result |
	result := TeradataBeginLoadingStatementNode new.
	result beginToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result table: (nodes at: 3).
	result errorfilesToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result withToken: (nodes at: 6).
	result intervalToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement2: nodes [
	| result |
	result := TeradataEndLoadingStatementNode new.
	result endToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement5: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement6: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement7: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement8: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	result statement: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery1: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result mergeTable: (nodes at: 2).
	result usingToken: (nodes at: 3).
	result usingTable: (nodes at: 4).
	result onToken: (nodes at: 5).
	result condition: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery2: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result mergeTable: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result usingTable: (nodes at: 5).
	result onToken: (nodes at: 6).
	result condition: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression2: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result alias: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression3: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForOrderByExpression1: nodes [
	| result |
	result := TeradataOrderByExpressionNode new.
	result orderToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForParameter1: nodes [
	| result |
	result := TeradataParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForPartitionByExpression1: nodes [
	| result |
	result := TeradataPartitionByExpressionNode new.
	result partitionToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQualifyExpression1: nodes [
	| result |
	result := TeradataQualifyExpressionNode new.
	result qualifyToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression2: nodes [
	| result |
	result := Array new: 6.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression4: nodes [
	| result |
	result := Array new: 6.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression5: nodes [
	| result |
	result := Array new: 6.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpression6: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQueryExpressions2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForRollbackStatement1: nodes [
	| result |
	result := TeradataRollbackStatementNode new.
	result rollbackToken: (nodes at: 1).
	result workToken: (nodes at: 2).
	result work: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result tables.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery10: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result topToken: (nodes at: 3).
	result top: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result into: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result wheres.
	result addNodes: ((nodes at: 7) at: 2) to: result groups.
	result addNodes: ((nodes at: 7) at: 3) to: result havings.
	result addNodes: ((nodes at: 7) at: 4) to: result partitions.
	result addNodes: ((nodes at: 7) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 7) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 7) at: 7).
	result addNodes: ((nodes at: 7) at: 8) to: result tables.
	result addTokens: ((nodes at: 7) at: 9) to: result commas.
	result forToken: ((nodes at: 8) at: 1).
	result cursorToken: ((nodes at: 8) at: 2).
	result count: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery13: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery14: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result allToken: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result right: ((nodes at: 4) at: 2).
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery15: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery16: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result unionToken: (nodes at: 4).
	result allToken: (nodes at: 5).
	result addToken: ((nodes at: 6) at: 1) to: result leftParens.
	result right: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 6) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery17: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result withTables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery18: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result recursiveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result withTables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery19: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result left: (nodes at: 1).
	result minusToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery20: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result minusToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery21: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery22: nodes [
	| result |
	result := TeradataIntersectQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery23: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result left: (nodes at: 1).
	result intersectToken: (nodes at: 2).
	result addToken: ((nodes at: 3) at: 1) to: result leftParens.
	result right: ((nodes at: 3) at: 2).
	result addToken: ((nodes at: 3) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery24: nodes [
	| result |
	result := TeradataExceptQueryNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result left: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	result intersectToken: (nodes at: 4).
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result right: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result orderBy: ((nodes at: 5) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery7: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result into: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result wheres.
	result addNodes: ((nodes at: 4) at: 2) to: result groups.
	result addNodes: ((nodes at: 4) at: 3) to: result havings.
	result addNodes: ((nodes at: 4) at: 4) to: result partitions.
	result addNodes: ((nodes at: 4) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 4) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 4) at: 7).
	result addNodes: ((nodes at: 4) at: 8) to: result tables.
	result addTokens: ((nodes at: 4) at: 9) to: result commas.
	result forToken: ((nodes at: 5) at: 1).
	result cursorToken: ((nodes at: 5) at: 2).
	result count: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery8: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result topToken: (nodes at: 2).
	result top: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result into: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result wheres.
	result addNodes: ((nodes at: 6) at: 2) to: result groups.
	result addNodes: ((nodes at: 6) at: 3) to: result havings.
	result addNodes: ((nodes at: 6) at: 4) to: result partitions.
	result addNodes: ((nodes at: 6) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 6) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 6) at: 7).
	result addNodes: ((nodes at: 6) at: 8) to: result tables.
	result addTokens: ((nodes at: 6) at: 9) to: result commas.
	result forToken: ((nodes at: 7) at: 1).
	result cursorToken: ((nodes at: 7) at: 2).
	result count: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery9: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result into: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result wheres.
	result addNodes: ((nodes at: 5) at: 2) to: result groups.
	result addNodes: ((nodes at: 5) at: 3) to: result havings.
	result addNodes: ((nodes at: 5) at: 4) to: result partitions.
	result addNodes: ((nodes at: 5) at: 5) to: result qualifies.
	result addNodes: ((nodes at: 5) at: 6) to: result orderBies.
	result fromToken: ((nodes at: 5) at: 7).
	result addNodes: ((nodes at: 5) at: 8) to: result tables.
	result addTokens: ((nodes at: 5) at: 9) to: result commas.
	result forToken: ((nodes at: 6) at: 1).
	result cursorToken: ((nodes at: 6) at: 2).
	result count: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetExpression1: nodes [
	| result |
	result := TeradataSetExpressionNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement1: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result forToken: (nodes at: 5).
	result sessionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement2: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result updateToken: (nodes at: 5).
	result forToken: (nodes at: 6).
	result sessionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable10: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result direction: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable12: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result type: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable13: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable14: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result direction: (nodes at: 3).
	result type: (nodes at: 4).
	result joinToken: (nodes at: 5).
	result right: (nodes at: 6).
	result onToken: ((nodes at: 7) at: 1).
	result on: ((nodes at: 7) at: 2).
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable17: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable1: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable2: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable3: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable4: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable5: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable6: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result asToken: (nodes at: 4).
	result alias: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable7: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result joinToken: (nodes at: 2).
	result right: (nodes at: 3).
	result onToken: ((nodes at: 4) at: 1).
	result on: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement1: nodes [
	| result |
	result := TeradataBeginTransactionStatementNode new.
	result beginToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement2: nodes [
	| result |
	result := TeradataEndTransactionStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType1: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType2: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result characterToken: (nodes at: 2).
	result setToken: (nodes at: 3).
	result encoding: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType3: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType4: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result characterToken: (nodes at: 5).
	result setToken: (nodes at: 6).
	result encoding: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType5: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType6: nodes [
	| result |
	result := TeradataTypeNode new.
	result addTokens: (nodes at: 1) to: result names.
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result characterToken: (nodes at: 7).
	result setToken: (nodes at: 8).
	result encoding: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTypeName2: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery10: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery12: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result where: (nodes at: 6).
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery13: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery15: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result elseToken: (nodes at: 7).
	result else: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery16: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery18: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	result elseToken: (nodes at: 8).
	result else: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery19: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery1: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery20: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result where: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery3: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result elseToken: (nodes at: 5).
	result else: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery4: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery6: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result where: (nodes at: 5).
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery7: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery9: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result alias: (nodes at: 3).
	result setToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn1: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn2: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumns2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result columns.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement2: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result columns.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpression1: nodes [
	| result |
	result := TeradataWhenExpressionNode new.
	result whenToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpressions1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition1: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result matchedToken: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result updateToken: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition2: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition3: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	result valuesToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result leftParens.
	result addNodes: ((nodes at: 11) at: 1) to: result values.
	result addTokens: ((nodes at: 11) at: 2) to: result commas.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhereExpression1: nodes [
	| result |
	result := TeradataWhereExpressionNode new.
	result whereToken: (nodes at: 1).
	result where: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable1: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable2: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result query: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions_2: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 7 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__1: nodes [
	| result |
	result := Array new: 9.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__QueryExpressions__2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__ON___onToken__Expression__on___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #testing }
TeradataParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
TeradataParser >> useAllTokenIds [
	^ false
]
