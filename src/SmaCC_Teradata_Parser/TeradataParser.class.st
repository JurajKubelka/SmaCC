Class {
	#name : #TeradataParser,
	#superclass : #SmaCCGLRParser,
	#category : #'SmaCC_Teradata_Parser'
}

{ #category : #generated }
TeradataParser class >> ambiguousTransitions [
^#(
#[ 0 254 3 49] 
#[ 0 254 3 113] 
#[ 0 254 3 137] 
#[ 1 2 3 49] 
#[ 1 2 3 113] 
#[ 1 2 3 137] 
#[ 1 14 3 49] 
#[ 1 14 3 113] 
#[ 1 14 3 137] 
#[ 0 206 1 30] 
#[ 1 38 1 42] 
#[ 1 38 1 46 1 50] 
#[ 1 38 5 137] 
#[ 1 190 2 53] 
#[ 1 190 2 57] 
#[ 1 190 2 61] 
#[ 1 190 2 65] 
#[ 1 190 6 237] 
#[ 1 190 2 69] 
#[ 1 38 1 46] 
#[ 1 46 2 14] 
#[ 2 14 5 137] 
#[ 2 26 3 49] 
#[ 2 26 3 113] 
#[ 2 26 3 137] 
#[ 2 30 3 49] 
#[ 2 30 3 113] 
#[ 2 30 3 137] 
#[ 2 34 3 49] 
#[ 2 34 3 113] 
#[ 2 34 3 137] 
#[ 2 38 3 49] 
#[ 2 38 3 113] 
#[ 2 38 3 137] 
#[ 2 42 3 49] 
#[ 2 42 3 113] 
#[ 2 42 3 137] 
#[ 2 46 3 49] 
#[ 2 46 3 113] 
#[ 2 46 3 137] 
#[ 2 50 3 49] 
#[ 2 50 3 113] 
#[ 2 50 3 137] 
#[ 2 54 3 49] 
#[ 2 54 3 113] 
#[ 2 54 3 137] 
#[ 2 58 3 49] 
#[ 2 58 3 113] 
#[ 2 58 3 137] 
#[ 2 62 3 49] 
#[ 2 62 3 113] 
#[ 2 62 3 137] 
#[ 2 66 3 49] 
#[ 2 66 3 113] 
#[ 2 66 3 137] 
#[ 2 70 3 49] 
#[ 2 70 3 113] 
#[ 2 70 3 137] 
#[ 2 78 3 49] 
#[ 2 78 3 113] 
#[ 2 78 3 137] 
#[ 2 86 3 49] 
#[ 2 86 8 85] 
#[ 2 86 3 113] 
#[ 2 86 3 137] 
#[ 2 90 3 49] 
#[ 2 90 3 113] 
#[ 2 90 3 137] 
#[ 2 94 3 49] 
#[ 2 94 3 113] 
#[ 2 94 3 137] 
#[ 2 98 3 49] 
#[ 2 98 3 113] 
#[ 2 98 3 137] 
#[ 2 102 3 49] 
#[ 2 102 3 113] 
#[ 2 102 3 137] 
#[ 3 10 3 49] 
#[ 3 10 3 113] 
#[ 3 10 3 137] 
#[ 3 14 3 49] 
#[ 3 14 10 89] 
#[ 3 14 3 113] 
#[ 3 14 3 137] 
#[ 2 206 3 114] 
#[ 2 70 3 49 3 178] 
#[ 2 70 3 53 3 178] 
#[ 2 70 3 57 3 178] 
#[ 2 70 3 61 3 178] 
#[ 2 70 3 65 3 178] 
#[ 2 70 3 69 3 178] 
#[ 2 70 3 73 3 178] 
#[ 2 70 3 77 3 178] 
#[ 2 70 3 81 3 178] 
#[ 2 70 3 85 3 178] 
#[ 2 70 3 89 3 178] 
#[ 2 70 3 93 3 178] 
#[ 2 70 3 97 3 178] 
#[ 2 70 3 105 3 178] 
#[ 2 70 3 109 3 178] 
#[ 2 70 3 113 3 178] 
#[ 2 70 3 117 3 178] 
#[ 2 70 3 121 3 178] 
#[ 2 70 3 125 3 178] 
#[ 2 70 3 129 3 178] 
#[ 2 70 3 133 3 178] 
#[ 2 70 3 137 3 178] 
#[ 2 70 3 141 3 178] 
#[ 1 230 3 182] 
#[ 3 49 3 186] 
#[ 3 113 3 186] 
#[ 3 137 3 186] 
#[ 2 70 3 49 4 114] 
#[ 2 70 3 53 4 114] 
#[ 2 70 3 57 4 114] 
#[ 2 70 3 61 4 114] 
#[ 2 70 3 65 4 114] 
#[ 2 70 3 69 4 114] 
#[ 2 70 3 73 4 114] 
#[ 2 70 3 77 4 114] 
#[ 2 70 3 81 4 114] 
#[ 2 70 3 85 4 114] 
#[ 2 70 3 89 4 114] 
#[ 2 70 3 93 4 114] 
#[ 2 70 3 97 4 114] 
#[ 2 70 3 105 4 114] 
#[ 2 70 3 109 4 114] 
#[ 2 70 3 113 4 114] 
#[ 2 70 3 117 4 114] 
#[ 2 70 3 121 4 114] 
#[ 2 70 3 125 4 114] 
#[ 2 70 3 129 4 114] 
#[ 2 70 3 133 4 114] 
#[ 2 70 3 137 4 114] 
#[ 2 70 3 141 4 114] 
#[ 1 230 4 118] 
#[ 3 49 4 122] 
#[ 3 113 4 122] 
#[ 3 137 4 122]
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> cacheId [
	^'2020-07-15T15:09:59.205311-05:00'
]

{ #category : #generated }
TeradataParser class >> definitionComment [
"%glr;
%ignorecase;
%left ""UNION"" ""MINUS"";
%left ""OR"";
%left ""AND"";
%nonassoc ""="" ""<>"" ""NE"" ""<"" ""<="" "">"" "">="" ""BETWEEN"";
%left ""||"";
%nonassoc ""LIKE"" ""IN"" ""NOT"";
%left ""+"" ""-"";
%left ""*"" ""/"" ""MOD"";
%right ""**"";

%prefix Teradata;
%suffix Node;
%root Program;
%hierarchy Expression (
    AliasedExpression
    BetweenExpression
    BinaryExpression
    CaseExpression
    CaseSpecificExpression
    CastExpression
    ConversionExpression
    CountExpression
    ExistsExpression
    ExtractExpression
    FunctionExpression
    IdentifierExpression
    InQueryExpression
    IntervalExpression
    InValueExpression
    IsNullExpression
    LikeExpression
    LiteralExpression
    NullExpression
    OverExpression
    QueryExpression
    StarExpression
    SubstringExpression
    TimestampExpression
    TitleExpression
    TranslateExpression
    TrimExpression
    UnaryExpression
    VariableExpression
    XmlAggExpression
);

<identifier>
	: [a-z_\$][a-z0-9_\$]* 
	| (\"" [^\""\r\n]* \"")+
	;
<variable>
	: \: <identifier>
	| \?
	;
<string>
	: (\' [^\']* \')+
	| \' [0-9A-F]* \' \s* XC[VF]?
	;
<number>
	: [0-9]+ ((\. [0-9]*) | X+)?	# XXXX -- patterns?
	;
<whitespace>
	: \s+
	;
<comment>
	: \-\- [^\r\n]*
	| (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;
File
	: Statements "";"" 'semicolon'* {{}}
	| "";"" 'semicolon'* {{}}
	;
Statements
	: Statement 'statement'
	| Statements "";"" 'semicolon'* "";"" 'semicolon' Statement 'statement'
	;
Statement
	: SelectQuery
	| DeleteQuery
	| ExecuteStatement
	| DatabaseStatement
	| TransactionStatement
	| HelpSessionStatement
	| SetStatement
	| CheckWorkloadStatement
	| LoadingStatement
	| UsingStatement
	| InsertQuery
	| UpdateQuery
	| DropTableQuery
	| CheckpointStatement
	| CreateMacroStatement
	| LockTableStatement
	| RollbackStatement
	| MergeQuery	;
MergeQuery
	: ""MERGE"" 'mergeToken' ""INTO"" 'intoToken'? Table 'mergeTable' ""USING"" 'usingToken' Table 'usingTable' ""ON"" 'onToken' Expression 'condition' WhenMergeCondition 'whenMerge'+ {{}}
	;
WhenMergeCondition
	: ""WHEN"" 'whenToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""UPDATE"" 'updateToken' ""SET"" 'setToken' SetExpressionList {{}}
	| ""WHEN"" 'whenToken' ""NOT"" 'notToken' ""MATCHED"" 'matchedToken' ""THEN"" 'thenToken' ""INSERT"" 'insertToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' (""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen')? {{}}
	;
RollbackStatement
	: ""ROLLBACK"" 'rollbackToken' ""WORK"" 'workToken' <string> 'work' ""FROM"" 'fromToken' TableList WhereExpression {{}}
	;
LockTableStatement
	: (""LOCKING"" 'lockToken' | ""LOCK"" 'lockToken') ""TABLE"" 'tableToken'? TableName 'table' ""FOR"" 'forToken' <identifier> 'lock' Statement 'statement'? {{}}
	;
CreateMacroStatement
	: ""CREATE"" 'createToken' ""MACRO"" 'macroToken' IdentifierName 'name' MacroArgs ""AS"" 'asToken' ""("" 'leftParen' Statements "";"" 'semicolon'* "")"" 'rightParen' {{}}
	;
MacroArgs
	:
	| ""("" 'leftParen' ParameterList "")"" 'rightParen'
	;
ParameterList
	: Parameter 'parameter'
	| ParameterList "","" 'comma' Parameter 'parameter'
	;
Parameter
	: IdentifierName 'name' Type 'type' {{}}
	;
Type
	: TypeName 'name' (""("" 'leftParen' <number> 'precision' ("","" 'comma' <number> 'scale')? "")"" 'rightParen')? (""CHARACTER"" 'characterToken' ""SET"" 'setToken' <identifier> 'encoding')? {{}}
	;
TypeName
	: ""CHAR""
	| ""VARCHAR""
	| ""CLOB""
	| ""DATE""
	| ""TIME""
	| ""TIMESTAMP""
	| ""BYTEINT""
	| ""SMALLINT""
	| ""INT""
	| ""INTEGER""
	| ""BIGINT""
	| ""DEC""
	| ""DECIMAL""
	| ""NUMERIC""
	| ""FLOAT""
	| ""REAL""
	| ""NUMBER""
	| ""VARBYTE""
	| ""BYTE""
	;
CheckpointStatement
	: ""CHECKPOINT"" 'checkpointToken' ""LOADING"" 'loadingToken' ""INTERVAL"" 'intervalToken' <number> 'interal' ""END"" 'endToken'? {{}}
	;
DropTableQuery
	: ""DROP"" 'dropToken' ""TABLE"" 'tableToken' TableName 'table' {{}}
	;
UpdateQuery
	: ""UPDATE"" 'updateToken' TableName 'table' ""SET"" 'setToken' SetExpressionList WhereExpression? (""ELSE"" 'elseToken' (InsertQuery 'else' | UpdateQuery 'else'))? {{}}
	| ""UPDATE"" 'updateToken' TableName 'table' ""FROM"" 'fromToken' TableList ""SET"" 'setToken' SetExpressionList WhereExpression? {{}}
	;
SetExpressionList
	: SetExpression 'setExpression'
	| SetExpressionList "","" 'comma' SetExpression 'setExpression'
	;
SetExpression
	: Identifier 'name' ""="" 'equals' Expression 'value' {{}}
	;
InsertQuery
	: (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken'? TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""VALUES"" 'valuesToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	| (""INSERT"" 'insertToken' | ""INS"" 'insertToken') ""INTO"" 'intoToken' TableName 'table' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? SelectQuery 'query' {{}}
	;
UsingStatement
	: ""USING"" 'usingToken' UsingColumns Statement 'statement' {{}}
	| ""USING"" 'usingToken' ""("" 'leftParen' UsingColumns "")"" 'rightParen' Statement 'statement' {{}}
	;
UsingColumns
	: UsingColumn 'column'
	| UsingColumns "","" 'comma' UsingColumn 'column'
	;
UsingColumn
	: <identifier> 'name' Type 'type' {{}}
	| <identifier> 'name' ""("" 'leftParen' Type 'type' "")"" 'rightParen' {{}}
	;
LoadingStatement
	: ""BEGIN"" 'beginToken' ""LOADING"" 'loadingToken' TableName 'table' ""ERRORFILES"" 'errorfilesToken' ExpressionList ""WITH"" 'withToken' ""INTERVAL"" 'intervalToken' {{BeginLoadingStatement}}
	| ""END"" 'endToken' ""LOADING"" 'loadingToken' {{EndLoadingStatement}}
	;
CheckWorkloadStatement
	: ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""FOR"" 'forToken' Statement 'statement'  {{}}
	| ""CHECK"" 'checkToken' ""WORKLOAD"" 'workloadToken' ""END"" 'endToken'  {{}}
	;
SetStatement
	: ""SET"" 'setToken' IdentifierName 'name' ""="" 'equals' Expression 'value' ""UPDATE"" 'updateToken'? ""FOR"" 'forToken' ""SESSION"" 'sessionToken' {{}}
	;
HelpSessionStatement
	: ""HELP"" 'helpToken' ""SESSION"" 'sessionToken' {{}}
	;
TransactionStatement
	: ""BT"" 'beginToken' {{BeginTransactionStatement}}
	| ""ET"" 'endToken' {{EndTransactionStatement}}
	;
DatabaseStatement
	: ""DATABASE"" 'databaseToken' IdentifierName 'database' {{}}
	;
ExecuteStatement
	: (""EXECUTE"" 'executeToken' | ""EXEC"" 'executeToken') IdentifierName 'name' ( ""("" 'leftParen' ExpressionList "")"" 'rightParen' )? {{}}
	;
DeleteQuery
	: (""DELETE"" 'deleteToken' | ""DEL"" 'deleteToken') ""FROM"" 'fromToken'? Table 'table' (WhereExpression | ""ALL"" 'allToken')? {{}}
	;
SelectQuery
	: (""SELECT"" 'selectToken' | ""SEL"" 'selectToken') (""DISTINCT"" 'distinctToken' | ""DISTINCTROW"" 'distinctToken')? (""TOP"" 'topToken' <number> 'top')? ExpressionList IntoExpression 'into'? (FromTables? WhereExpression? GroupByExpression  'group'? HavingExpression 'having'? PartitionByExpression 'partition'? QualifyExpression 'qualify'? OrderByExpression 'orderBy'?)? (""FOR"" 'forToken' ""CURSOR"" 'cursorToken')?  {{}}
	| (""SELECT"" 'selectToken' | ""SEL"" 'selectToken') (""DISTINCT"" 'distinctToken' | ""DISTINCTROW"" 'distinctToken')? (""TOP"" 'topToken' <number> 'top')? ExpressionList IntoExpression 'into'? (FromTables? GroupByExpression  'group'? HavingExpression 'having'? PartitionByExpression 'partition'? QualifyExpression 'qualify'?)? OrderByExpression 'orderBy' WhereExpression (""FOR"" 'forToken' ""CURSOR"" 'cursorToken')?  {{}}
	| SelectQuery 'left' ""UNION"" 'unionToken' ""ALL"" 'allToken'? UnionSelectQuery {{UnionQuery}}
	| ""WITH"" 'withToken' ""RECURSIVE"" 'recursiveToken'? WithTables Statement 'statement' {{WithQuery}}
	| SelectQuery 'left' ""MINUS"" 'minusToken' UnionSelectQuery {{MinusQuery}}
	;
WithTables
	: WithTable 'withTable'
	| WithTables "","" 'comma' WithTable 'withTable'
	;
WithTable
	: IdentifierName 'name' (""("" 'leftParen' ExpressionList "")"" 'rightParen')? ""AS"" 'asToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{WithTableDefinition}}
	;
HavingExpression
	: ""HAVING"" 'havingToken' Expression 'condition' {{Having}}
	;
UnionSelectQuery
	: ""("" 'leftParen' SelectQuery 'right' "")"" 'rightParen' OrderByExpression 'orderBy'
	| SelectQuery 'right'
	;
QualifyExpression
	: ""QUALIFY"" 'qualifyToken' Expression 'condition' {{}}
	;
PartitionByExpression
	: ""PARTITION"" 'partitionToken' ""BY"" 'byToken' ExpressionList {{}}
	;
IntoExpression
	: ""INTO"" 'intoToken' ""("" 'leftParen' ExpressionList "")"" 'rightParen' {{}}
	;
FromTables
	: ""FROM"" 'fromToken' TableList
	;
TableList
	: Table 'table'
	| TableList "","" 'comma' Table 'table'
	;
 Table
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' (""AS"" 'asToken'? <identifier> 'alias')? {{Table}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' (""AS"" 'asToken'? <identifier> 'alias')? {{SelectTable}}
	| Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? {{JoinTable}}
	| ""("" 'leftParen' Table 'left' ((""LEFT"" 'direction' | ""RIGHT"" 'direction') ""OUTER"" 'type'? | ""INNER"" 'type' | ""CROSS"" 'type')? ""JOIN"" 'joinToken' Table 'right' (""ON"" 'onToken' Expression 'on')? "")"" 'rightParen' {{JoinTable}}
	;
TableName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{Table}}
	;
WhereExpression
	: ""WHERE"" 'whereToken' Expression 'where'
	;
GroupByExpression
	: ""GROUP"" 'groupToken' ""BY"" 'byToken' ExpressionList {{GroupBy}}
	;
OrderByExpression
	: ""ORDER"" 'orderToken' ""BY"" 'byToken' ExpressionList {{}}
	;
ExpressionList
	: NamedExpression 'value'
	| ExpressionList "","" 'comma'+ NamedExpression 'value'
	;
NamedExpression
	: Expression 
	| Expression 'expression' ""AS"" 'asToken'? <identifier> 'alias' {{AliasedExpression}}
	;
Expression
	: Identifier
	| <variable> 'name' {{VariableExpression}}
	| <string> 'value' {{LiteralExpression}}
	| <number> 'value' {{LiteralExpression}}
	| ""NULL"" 'nullToken' {{NullExpression}}
	| (<identifier> 'name' ""."" 'period')* ""*"" 'star' {{StarExpression}}
	| CaseExpression
	| FunctionExpression
	| Expression 'left' (""+"" 'operator' | ""-"" 'operator' | ""*"" 'operator' | ""/"" 'operator' | ""MOD"" 'operator' | ""||"" 'operator' | ""**"" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'left' (""AND"" 'operator' | ""OR"" 'operator' | ""="" 'operator' | ""<>"" 'operator' | ""NE"" 'operator' |  ""<"" 'operator' | ""<="" 'operator' | "">"" 'operator' | "">="" 'operator') Expression 'right' {{BinaryExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""LIKE"" 'likeToken' Expression 'like' (""ESCAPE"" 'escapeToken' Expression 'escape')? {{LikeExpression}}
	| ""SUBSTRING"" 'substringToken' ""("" 'leftParen' Expression 'value' ""FROM"" 'fromToken' Expression 'from' (""FOR"" 'forToken' Expression 'for')? "")"" 'rightParen' {{SubstringExpression}}
	| Expression 'value' ""IS"" 'isToken' ""NOT"" 'notToken'? ""NULL"" 'nullToken' {{IsNullExpression}}
	| ""("" 'leftParen' Expression "")"" 'rightParen' {{Expression}}
	| Expression 'testValue' ""NOT"" 'notToken'? ""IN"" 'inToken' (Expression 'value' | ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen') {{InValueExpression}}
	| Expression 'value' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| ""("" 'leftParen' Expression 'value' "","" 'comma' ExpressionList "")"" 'rightParen' ""NOT"" 'notToken'? ""IN"" 'inToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{InQueryExpression}}
	| Expression 'value' ""("" 'leftParen' ""FORMAT"" 'formatToken' <string> 'format' "")"" 'rightParen' {{ConversionExpression}}
	| Expression 'value' ""("" 'leftParen' Type 'type' ("","" 'comma' ""FORMAT"" 'formatToken' <string> 'format' )? "")"" 'rightParen' {{ConversionExpression}}
	| ""CAST"" 'castToken' ""("" 'leftParen' Expression 'value' ""AS"" 'asToken' Type 'type'? (""FORMAT"" 'formatToken' <string> 'format')? "")"" 'rightParen' {{CastExpression}}
	| (""-"" 'operator' | ""+"" 'operator') Expression 'value' {{UnaryExpression}}
	| Expression 'value' (""NOT"" 'notToken')? ""BETWEEN"" 'betweenToken' Expression 'first' ""AND"" 'andToken' Expression 'last' {{BetweenExpression}}
	| ""TRIM"" 'trimToken' ""("" 'leftParen' ((""BOTH"" 'positionToken' | ""TRAILING"" 'positionToken' | ""LEADING"" 'positionToken') ""FROM"" 'fromToken')? Expression 'value' "")"" 'rightParen' {{TrimExpression}}
	| ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{QueryExpression}}
	| ""NOT"" 'operator' Expression 'value' {{UnaryExpression}}
	| ""EXTRACT"" 'extractToken' ""("" 'leftParen'  <identifier> 'name' ""FROM"" 'fromToken' Expression 'value' "")"" 'rightParen' {{ExtractExpression}}
	| Expression 'value' ""OVER"" 'overToken' ""("" 'leftParen' PartitionByExpression 'partition'? OrderByExpression 'orderBy'? "")"" 'rightParen' {{OverExpression}}
	| ""INTERVAL"" 'intervalToken' <string> 'interval' <identifier> 'name' {{IntervalExpression}}
	| Expression 'value' ""("" 'leftParen' ""CASESPECIFIC"" 'caseSpecificToken' "")"" 'rightParen' {{CaseSpecificExpression}}
	| Expression 'value' ""("" 'leftParen' ""TITLE"" 'titleToken' <string> 'title' "")"" 'rightParen' {{TitleExpression}}
	| ""COUNT"" 'countToken' ""("" 'leftParen' (""DISTINCT"" 'countType' | ""ALL"" 'countType')? Expression 'value' "")"" 'rightParen' {{CountExpression}}
	| (""TIMESTAMP"" 'typeToken' | ""DATE"" 'typeToken' | ""TIME"" 'typeToken') (<string> 'value')? {{TimestampExpression}}
	| (""NOT"" 'notToken')? ""EXISTS"" 'existsToken' ""("" 'leftParen' SelectQuery 'query' "")"" 'rightParen' {{ExistsExpression}}
	| (""TRANSLATE"" 'translateToken' | ""TRANSLATE_CHK"" 'translateToken') ""("" 'leftParen' Expression 'value' ""USING"" 'usingToken' <identifier> 'operation' (""WITH"" 'withToken' ""ERROR"" 'errorToken')? "")"" 'rightParen' {{TranslateExpression}}
	| ""XMLAGG"" 'xmlaggToken' ""("" 'leftParen' Expression 'value' OrderByExpression 'orderBy' "")"" 'rightParen' {{XmlAggExpression}}
	;
CaseExpression
	: ""CASE"" 'caseToken' Expression 'expression'? WhenExpressions ElseExpression 'else'? ""END"" 'endToken' {{}}
	;
ElseExpression
	: ""ELSE"" 'elseToken' Expression 'value' {{}}
	;
WhenExpressions
	: WhenExpression 'when'
	| WhenExpressions WhenExpression 'when'
	;
WhenExpression
	: ""WHEN"" 'whenToken' Expression 'condition' ""THEN"" 'thenToken' Expression 'value' {{}}
	;
FunctionExpression
	: IdentifierName 'function' ""("" 'leftParen' ExpressionList? "")"" 'rightParen' {{}}
	;
Identifier
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{IdentifierExpression}}
	;
IdentifierName
	: (<identifier> 'name' ""."" 'period')* <identifier> 'name' {{}}
	;"
]

{ #category : #generated }
TeradataParser class >> reduceTable [
^#(
	#(140 0 #reduceActionFor_____semicolon__1: 1309697 false ) 
	#(167 1 #reduceActionForTransactionStatement1: 5881857 false ) 
	#(193 0 #reduceActionFor__identifier___name_______period___1: 8411137 false ) 
	#(167 1 #reduceActionForTransactionStatement2: 5881858 false ) 
	#(139 1 #reduceActionForFile2: 1290242 false ) 
	#(141 1 #reduceActionForStatements1: 1360897 false ) 
	#(142 1 #liftFirstValue: 1471506 false ) 
	#(142 1 #liftFirstValue: 1471505 false ) 
	#(142 1 #liftFirstValue: 1471504 false ) 
	#(142 1 #liftFirstValue: 1471503 false ) 
	#(142 1 #liftFirstValue: 1471502 false ) 
	#(142 1 #liftFirstValue: 1471501 false ) 
	#(142 1 #liftFirstValue: 1471500 false ) 
	#(142 1 #liftFirstValue: 1471499 false ) 
	#(142 1 #liftFirstValue: 1471498 false ) 
	#(142 1 #liftFirstValue: 1471497 false ) 
	#(142 1 #liftFirstValue: 1471496 false ) 
	#(142 1 #liftFirstValue: 1471495 false ) 
	#(142 1 #liftFirstValue: 1471494 false ) 
	#(142 1 #liftFirstValue: 1471493 false ) 
	#(142 1 #liftFirstValue: 1471492 false ) 
	#(142 1 #liftFirstValue: 1471491 false ) 
	#(142 1 #liftFirstValue: 1471490 false ) 
	#(142 1 #liftFirstValue: 1471489 false ) 
	#(168 2 #reduceActionForDatabaseStatement1: 6006785 false ) 
	#(170 2 #reduceActionForDeleteQuery7: 6248455 false ) 
	#(170 2 #reduceActionForDeleteQuery7: 6248449 false ) 
	#(163 2 #reduceActionForLoadingStatement2: 5157890 false ) 
	#(169 2 #reduceActionForExecuteStatement3: 6090755 false ) 
	#(169 2 #reduceActionForExecuteStatement3: 6090753 false ) 
	#(166 2 #reduceActionForHelpSessionStatement1: 5804033 false ) 
	#(204 1 #reduceActionForExpression72: 9610312 false ) 
	#(204 1 #reduceActionForExpression5: 9610245 false ) 
	#(204 1 #reduceActionForExpression72: 9610314 false ) 
	#(204 1 #reduceActionForExpression72: 9610310 false ) 
	#(204 1 #reduceActionForExpression2: 9610242 false ) 
	#(204 1 #reduceActionForExpression3: 9610243 false ) 
	#(204 1 #reduceActionForExpression3: 9610244 false ) 
	#(172 0 #nil 6572033 false ) 
	#(201 1 #reduceActionForStatements1: 9384961 false ) 
	#(203 1 #liftFirstValue: 9487361 false ) 
	#(204 1 #liftFirstValue: 9610247 false ) 
	#(204 1 #liftFirstValue: 9610248 false ) 
	#(204 1 #liftFirstValue: 9610241 false ) 
	#(161 1 #reduceActionForStatements1: 4935681 false ) 
	#(182 1 #reduceActionForStatements1: 7528449 false ) 
	#(140 2 #reduceActionFor_____semicolon__2: 1309698 false ) 
	#(139 2 #reduceActionForFile1: 1290241 false ) 
	#(164 3 #reduceActionForCheckWorkloadStatement2: 5438466 false ) 
	#(149 0 #reduceActionForMacroArgs1: 2939905 false ) 
	#(211 2 #reduceActionForIdentifierName1: 14347265 false ) 
	#(193 2 #reduceActionFor__identifier___name_______period___2: 8411138 false ) 
	#(170 3 #reduceActionForDeleteQuery10: 6248458 false ) 
	#(170 3 #reduceActionForDeleteQuery9: 6248457 false ) 
	#(194 0 #nil 8695809 false ) 
	#(170 3 #reduceActionForDeleteQuery8: 6248456 false ) 
	#(191 2 #reduceActionForTable1: 8401921 false ) 
	#(170 3 #reduceActionForDeleteQuery10: 6248452 false ) 
	#(170 3 #reduceActionForDeleteQuery9: 6248451 false ) 
	#(170 3 #reduceActionForDeleteQuery8: 6248450 false ) 
	#(155 3 #reduceActionForDropTableQuery1: 3749889 false ) 
	#(197 2 #reduceActionForTable1: 9066497 false ) 
	#(204 2 #reduceActionForExpression50: 9610290 false ) 
	#(204 2 #reduceActionForExpression50: 9610289 false ) 
	#(207 1 #reduceActionForWhenExpressions1: 13943809 false ) 
	#(204 2 #reduceActionForExpression73: 9610313 false ) 
	#(204 2 #reduceActionForExpression50: 9610298 false ) 
	#(204 2 #reduceActionForExpression73: 9610315 false ) 
	#(204 2 #reduceActionForExpression73: 9610311 false ) 
	#(204 2 #reduceActionForExpression6: 9610246 false ) 
	#(210 2 #reduceActionForIdentifier1: 14246913 false ) 
	#(202 1 #reduceActionForWhenExpressions1: 9446401 false ) 
	#(175 0 #nil 6682625 false ) 
	#(174 0 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____1: 6595585 false ) 
	#(176 0 #nil 6718465 false ) 
	#(181 0 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify____1: 7019521 false ) 
	#(172 1 #liftFirstValue: 6572034 false ) 
	#(203 2 #reduceActionForNamedExpression2: 9487362 false ) 
	#(153 1 #liftFirstValue: 3357707 false ) 
	#(153 1 #liftFirstValue: 3357715 false ) 
	#(153 1 #liftFirstValue: 3357703 false ) 
	#(153 1 #liftFirstValue: 3357697 false ) 
	#(153 1 #liftFirstValue: 3357699 false ) 
	#(153 1 #liftFirstValue: 3357700 false ) 
	#(153 1 #liftFirstValue: 3357708 false ) 
	#(153 1 #liftFirstValue: 3357709 false ) 
	#(153 1 #liftFirstValue: 3357711 false ) 
	#(153 1 #liftFirstValue: 3357705 false ) 
	#(153 1 #liftFirstValue: 3357706 false ) 
	#(153 1 #liftFirstValue: 3357713 false ) 
	#(153 1 #liftFirstValue: 3357710 false ) 
	#(153 1 #liftFirstValue: 3357712 false ) 
	#(153 1 #liftFirstValue: 3357704 false ) 
	#(153 1 #liftFirstValue: 3357701 false ) 
	#(153 1 #liftFirstValue: 3357702 false ) 
	#(153 1 #liftFirstValue: 3357714 false ) 
	#(153 1 #liftFirstValue: 3357698 false ) 
	#(162 2 #reduceActionForUsingColumn1: 5026817 false ) 
	#(152 1 #reduceActionForType1: 3159041 false ) 
	#(160 3 #reduceActionForUsingStatement1: 4752385 false ) 
	#(171 3 #reduceActionForSelectQuery27: 6393883 false ) 
	#(185 1 #reduceActionForUnionSelectQuery2: 7884802 false ) 
	#(171 3 #reduceActionForSelectQuery29: 6393885 false ) 
	#(171 3 #reduceActionForSelectQuery25: 6393881 false ) 
	#(164 4 #reduceActionForCheckWorkloadStatement1: 5438465 false ) 
	#(154 4 #reduceActionForCheckpointStatement1: 3595265 false ) 
	#(192 2 #reduceActionFor__identifier___name_______period__1: 8411137 false ) 
	#(191 3 #reduceActionForTable4: 8401924 false ) 
	#(170 4 #reduceActionForDeleteQuery12: 6248460 false ) 
	#(170 4 #reduceActionForDeleteQuery11: 6248459 false ) 
	#(196 0 #reduceActionFor__ON___onToken__Expression__on___1: 8782849 false ) 
	#(194 1 #liftFirstValue: 8695810 false ) 
	#(198 2 #reduceActionFor__identifier___name_______period__1: 9150465 false ) 
	#(191 3 #reduceActionForTable2: 8401922 false ) 
	#(170 4 #reduceActionForDeleteQuery12: 6248454 false ) 
	#(170 4 #reduceActionForDeleteQuery11: 6248453 false ) 
	#(159 4 #reduceActionForInsertQuery11: 4349963 false ) 
	#(159 4 #reduceActionForInsertQuery11: 4349961 false ) 
	#(147 4 #reduceActionForLockTableStatement5: 2572293 false ) 
	#(147 4 #reduceActionForLockTableStatement5: 2572289 false ) 
	#(204 3 #reduceActionForExpression57: 9610297 false ) 
	#(204 3 #reduceActionForExpression33: 9610273 false ) 
	#(205 3 #reduceActionForCaseExpression1: 13749249 false ) 
	#(207 2 #reduceActionFor_____semicolon__2: 13943810 false ) 
	#(204 3 #reduceActionForExpression64: 9610304 false ) 
	#(174 1 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____2: 6595586 false ) 
	#(179 0 #reduceActionFor__ON___onToken__Expression__on___1: 6779905 false ) 
	#(180 1 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___1: 7019521 false ) 
	#(181 1 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____2: 7019522 false ) 
	#(176 1 #liftFirstValue: 6718466 false ) 
	#(175 1 #liftFirstValue: 6682626 false ) 
	#(202 2 #reduceActionFor_____semicolon__2: 9446402 false ) 
	#(201 3 #reduceActionForExpressionList2: 9384962 false ) 
	#(204 3 #reduceActionForExpression11: 9610251 false ) 
	#(204 3 #reduceActionForExpression11: 9610255 false ) 
	#(204 3 #reduceActionForExpression11: 9610249 false ) 
	#(204 3 #reduceActionForExpression11: 9610250 false ) 
	#(204 3 #reduceActionForExpression11: 9610252 false ) 
	#(204 3 #reduceActionForExpression11: 9610261 false ) 
	#(204 3 #reduceActionForExpression11: 9610262 false ) 
	#(204 3 #reduceActionForExpression11: 9610259 false ) 
	#(204 3 #reduceActionForExpression11: 9610258 false ) 
	#(204 3 #reduceActionForExpression11: 9610263 false ) 
	#(204 3 #reduceActionForExpression11: 9610264 false ) 
	#(204 3 #reduceActionForExpression11: 9610256 false ) 
	#(203 3 #reduceActionForNamedExpression3: 9487363 false ) 
	#(204 3 #reduceActionForExpression34: 9610274 false ) 
	#(204 3 #reduceActionForExpression31: 9610271 false ) 
	#(204 3 #reduceActionForExpression25: 9610265 false ) 
	#(204 3 #reduceActionForExpression11: 9610253 false ) 
	#(204 3 #reduceActionForExpression11: 9610260 false ) 
	#(204 3 #reduceActionForExpression11: 9610257 false ) 
	#(204 3 #reduceActionForExpression11: 9610254 false ) 
	#(209 3 #reduceActionForFunctionExpression1: 14139393 false ) 
	#(190 1 #reduceActionForStatements1: 8330241 false ) 
	#(156 4 #reduceActionForUpdateQuery1: 3835905 false ) 
	#(157 1 #reduceActionForStatements1: 4153345 false ) 
	#(161 3 #reduceActionForUsingColumns2: 4935682 false ) 
	#(171 4 #reduceActionForSelectQuery28: 6393884 false ) 
	#(182 3 #reduceActionForUsingColumns2: 7528450 false ) 
	#(141 4 #reduceActionForStatements2: 1360898 false ) 
	#(171 4 #reduceActionForSelectQuery26: 6393882 false ) 
	#(154 5 #reduceActionForCheckpointStatement2: 3595266 false ) 
	#(150 1 #reduceActionForStatements1: 3007489 false ) 
	#(191 4 #reduceActionForTable5: 8401925 false ) 
	#(196 1 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____2: 8782850 false ) 
	#(191 4 #reduceActionForTable7: 8401927 false ) 
	#(191 4 #reduceActionForTable3: 8401923 false ) 
	#(169 5 #reduceActionForExecuteStatement4: 6090756 false ) 
	#(169 5 #reduceActionForExecuteStatement4: 6090754 false ) 
	#(147 5 #reduceActionForLockTableStatement7: 2572295 false ) 
	#(147 5 #reduceActionForLockTableStatement6: 2572294 false ) 
	#(147 5 #reduceActionForLockTableStatement7: 2572291 false ) 
	#(147 5 #reduceActionForLockTableStatement6: 2572290 false ) 
	#(205 4 #reduceActionForCaseExpression3: 13749251 false ) 
	#(206 2 #reduceActionForElseExpression1: 13878273 false ) 
	#(205 4 #reduceActionForCaseExpression2: 13749250 false ) 
	#(204 4 #reduceActionForExpression67: 9610307 false ) 
	#(204 4 #reduceActionForExpression76: 9610316 false ) 
	#(204 4 #reduceActionForExpression53: 9610293 false ) 
	#(189 2 #reduceActionForFromTables1: 8283137 false ) 
	#(184 2 #reduceActionForHavingExpression1: 7802881 false ) 
	#(186 2 #reduceActionForQualifyExpression1: 8014849 false ) 
	#(179 1 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____2: 6779906 false ) 
	#(171 5 #reduceActionForSelectQuery7: 6393863 false ) 
	#(177 0 #nil 6748161 false ) 
	#(180 2 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___3: 7019523 false ) 
	#(180 2 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___2: 7019522 false ) 
	#(180 2 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___9: 7019529 false ) 
	#(180 2 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___5: 7019525 false ) 
	#(204 4 #reduceActionForExpression65: 9610305 false ) 
	#(204 4 #reduceActionForExpression43: 9610283 false ) 
	#(204 4 #reduceActionForExpression32: 9610272 false ) 
	#(204 4 #reduceActionForExpression36: 9610276 false ) 
	#(204 4 #reduceActionForExpression27: 9610267 false ) 
	#(204 4 #reduceActionForExpression60: 9610300 false ) 
	#(209 4 #reduceActionForFunctionExpression2: 14139394 false ) 
	#(171 5 #reduceActionForSelectQuery7: 6393857 false ) 
	#(156 5 #reduceActionForUpdateQuery4: 3835908 false ) 
	#(160 5 #reduceActionForUsingStatement2: 4752386 false ) 
	#(162 4 #reduceActionForUsingColumn2: 5026818 false ) 
	#(149 3 #reduceActionForMacroArgs2: 2939906 false ) 
	#(151 2 #reduceActionForParameter1: 3102721 false ) 
	#(191 5 #reduceActionForTable6: 8401926 false ) 
	#(191 5 #reduceActionForTable11: 8401931 false ) 
	#(191 5 #reduceActionForTable11: 8401930 false ) 
	#(195 2 #reduceActionFor__identifier___name_______period__1: 8782849 false ) 
	#(159 6 #reduceActionForInsertQuery5: 4349957 false ) 
	#(159 6 #reduceActionForInsertQuery5: 4349953 false ) 
	#(147 6 #reduceActionForLockTableStatement8: 2572296 false ) 
	#(147 6 #reduceActionForLockTableStatement8: 2572292 false ) 
	#(146 6 #reduceActionForRollbackStatement1: 2433025 false ) 
	#(208 4 #reduceActionForWhenExpression1: 14030849 false ) 
	#(205 5 #reduceActionForCaseExpression4: 13749252 false ) 
	#(204 5 #reduceActionForExpression45: 9610285 false ) 
	#(204 5 #reduceActionForExpression69: 9610309 false ) 
	#(204 5 #reduceActionForExpression69: 9610308 false ) 
	#(171 6 #reduceActionForSelectQuery9: 6393865 false ) 
	#(171 6 #reduceActionForSelectQuery9: 6393867 false ) 
	#(204 5 #reduceActionForExpression77: 9610317 false ) 
	#(204 5 #reduceActionForExpression82: 9610322 false ) 
	#(188 4 #reduceActionForIntoExpression1: 8187905 false ) 
	#(199 3 #reduceActionForGroupByExpression1: 9213953 false ) 
	#(187 3 #reduceActionForPartitionByExpression1: 8093697 false ) 
	#(178 2 #reduceActionFor__identifier___name_______period__1: 6779905 false ) 
	#(173 3 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___1: 6595585 false ) 
	#(177 1 #liftFirstValue: 6748162 false ) 
	#(180 3 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___4: 7019524 false ) 
	#(180 3 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___11: 7019531 false ) 
	#(180 3 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___10: 7019530 false ) 
	#(180 3 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___13: 7019533 false ) 
	#(180 3 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___7: 7019527 false ) 
	#(180 3 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___6: 7019526 false ) 
	#(204 5 #reduceActionForExpression42: 9610282 false ) 
	#(204 5 #reduceActionForExpression66: 9610306 false ) 
	#(204 5 #reduceActionForExpression51: 9610291 false ) 
	#(204 5 #reduceActionForExpression38: 9610278 false ) 
	#(204 5 #reduceActionForExpression26: 9610266 false ) 
	#(204 5 #reduceActionForExpression62: 9610302 false ) 
	#(204 5 #reduceActionForExpression61: 9610301 false ) 
	#(171 6 #reduceActionForSelectQuery9: 6393859 false ) 
	#(171 6 #reduceActionForSelectQuery9: 6393861 false ) 
	#(165 6 #reduceActionForSetStatement1: 5639169 false ) 
	#(190 3 #reduceActionForUsingColumns2: 8330242 false ) 
	#(156 6 #reduceActionForUpdateQuery7: 3835911 false ) 
	#(157 3 #reduceActionForUsingColumns2: 4153346 false ) 
	#(156 6 #reduceActionForUpdateQuery3: 3835907 false ) 
	#(156 6 #reduceActionForUpdateQuery3: 3835906 false ) 
	#(158 3 #reduceActionForSetExpression1: 4273153 false ) 
	#(152 4 #reduceActionForType3: 3159043 false ) 
	#(152 4 #reduceActionForType2: 3159042 false ) 
	#(183 5 #reduceActionForWithTable1: 7617537 false ) 
	#(185 4 #reduceActionForUnionSelectQuery1: 7884801 false ) 
	#(163 7 #reduceActionForLoadingStatement1: 5157889 false ) 
	#(150 3 #reduceActionForUsingColumns2: 3007490 false ) 
	#(191 6 #reduceActionForTable12: 8401932 false ) 
	#(191 6 #reduceActionForTable8: 8401928 false ) 
	#(191 6 #reduceActionForTable8: 8401929 false ) 
	#(159 7 #reduceActionForInsertQuery12: 4349964 false ) 
	#(159 7 #reduceActionForInsertQuery7: 4349959 false ) 
	#(159 7 #reduceActionForInsertQuery12: 4349962 false ) 
	#(159 7 #reduceActionForInsertQuery7: 4349955 false ) 
	#(143 7 #reduceActionForMergeQuery1: 1843201 false ) 
	#(144 1 #reduceActionForWhenExpressions1: 1998849 false ) 
	#(204 6 #reduceActionForExpression47: 9610287 false ) 
	#(204 6 #reduceActionForExpression59: 9610299 false ) 
	#(204 6 #reduceActionForExpression29: 9610269 false ) 
	#(171 7 #reduceActionForSelectQuery8: 6393864 false ) 
	#(204 6 #reduceActionForExpression78: 9610318 false ) 
	#(204 6 #reduceActionForExpression78: 9610320 false ) 
	#(204 6 #reduceActionForExpression54: 9610294 false ) 
	#(204 6 #reduceActionForExpression54: 9610296 false ) 
	#(204 6 #reduceActionForExpression54: 9610295 false ) 
	#(200 3 #reduceActionForOrderByExpression1: 9303041 false ) 
	#(171 7 #reduceActionForSelectQuery19: 6393875 false ) 
	#(173 4 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___2: 6595586 false ) 
	#(173 4 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___9: 6595593 false ) 
	#(180 4 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___12: 7019532 false ) 
	#(180 4 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___15: 7019535 false ) 
	#(180 4 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___14: 7019534 false ) 
	#(173 4 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___5: 6595589 false ) 
	#(173 4 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___3: 6595587 false ) 
	#(180 4 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___8: 7019528 false ) 
	#(204 6 #reduceActionForExpression52: 9610292 false ) 
	#(204 6 #reduceActionForExpression39: 9610279 false ) 
	#(204 6 #reduceActionForExpression28: 9610268 false ) 
	#(204 6 #reduceActionForExpression63: 9610303 false ) 
	#(171 7 #reduceActionForSelectQuery8: 6393858 false ) 
	#(171 7 #reduceActionForSelectQuery19: 6393869 false ) 
	#(165 7 #reduceActionForSetStatement2: 5639170 false ) 
	#(156 7 #reduceActionForUpdateQuery8: 3835912 false ) 
	#(156 7 #reduceActionForUpdateQuery6: 3835910 false ) 
	#(156 7 #reduceActionForUpdateQuery6: 3835909 false ) 
	#(191 7 #reduceActionForTable16: 8401936 false ) 
	#(191 7 #reduceActionForTable16: 8401935 false ) 
	#(143 8 #reduceActionForMergeQuery2: 1843202 false ) 
	#(144 2 #reduceActionFor_____semicolon__2: 1998850 false ) 
	#(204 7 #reduceActionForExpression46: 9610286 false ) 
	#(171 8 #reduceActionForSelectQuery10: 6393866 false ) 
	#(171 8 #reduceActionForSelectQuery21: 6393877 false ) 
	#(171 8 #reduceActionForSelectQuery10: 6393868 false ) 
	#(171 8 #reduceActionForSelectQuery21: 6393879 false ) 
	#(173 5 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___10: 6595594 false ) 
	#(173 5 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___13: 6595597 false ) 
	#(173 5 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___11: 6595595 false ) 
	#(180 5 #reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___16: 7019536 false ) 
	#(173 5 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___6: 6595590 false ) 
	#(173 5 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___7: 6595591 false ) 
	#(173 5 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___4: 6595588 false ) 
	#(204 7 #reduceActionForExpression44: 9610284 false ) 
	#(204 7 #reduceActionForExpression35: 9610275 false ) 
	#(171 8 #reduceActionForSelectQuery10: 6393860 false ) 
	#(171 8 #reduceActionForSelectQuery21: 6393871 false ) 
	#(171 8 #reduceActionForSelectQuery10: 6393862 false ) 
	#(171 8 #reduceActionForSelectQuery21: 6393873 false ) 
	#(152 6 #reduceActionForType5: 3159045 false ) 
	#(148 9 #reduceActionForCreateMacroStatement1: 2751489 false ) 
	#(191 8 #reduceActionForTable13: 8401933 false ) 
	#(191 8 #reduceActionForTable13: 8401934 false ) 
	#(159 9 #reduceActionForInsertQuery6: 4349958 false ) 
	#(159 9 #reduceActionForInsertQuery6: 4349954 false ) 
	#(204 8 #reduceActionForExpression48: 9610288 false ) 
	#(204 8 #reduceActionForExpression30: 9610270 false ) 
	#(171 9 #reduceActionForSelectQuery20: 6393876 false ) 
	#(204 8 #reduceActionForExpression79: 9610319 false ) 
	#(204 8 #reduceActionForExpression79: 9610321 false ) 
	#(173 6 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___14: 6595598 false ) 
	#(173 6 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___15: 6595599 false ) 
	#(173 6 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___12: 6595596 false ) 
	#(173 6 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___8: 6595592 false ) 
	#(204 8 #reduceActionForExpression37: 9610277 false ) 
	#(171 9 #reduceActionForSelectQuery20: 6393870 false ) 
	#(152 7 #reduceActionForType4: 3159044 false ) 
	#(183 8 #reduceActionForWithTable2: 7617538 false ) 
	#(159 10 #reduceActionForInsertQuery8: 4349960 false ) 
	#(159 10 #reduceActionForInsertQuery8: 4349956 false ) 
	#(204 9 #reduceActionForExpression40: 9610280 false ) 
	#(171 10 #reduceActionForSelectQuery22: 6393878 false ) 
	#(171 10 #reduceActionForSelectQuery22: 6393880 false ) 
	#(173 7 #reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___16: 6595600 false ) 
	#(171 10 #reduceActionForSelectQuery22: 6393872 false ) 
	#(171 10 #reduceActionForSelectQuery22: 6393874 false ) 
	#(204 10 #reduceActionForExpression41: 9610281 false ) 
	#(152 9 #reduceActionForType6: 3159046 false ) 
	#(145 6 #reduceActionForWhenMergeCondition1: 2039809 false ) 
	#(145 8 #reduceActionForWhenMergeCondition2: 2039810 false ) 
	#(145 12 #reduceActionForWhenMergeCondition3: 2039811 false )
	).
]

{ #category : #'generated-accessing' }
TeradataParser class >> scannerClass [
	^TeradataScanner
]

{ #category : #generated }
TeradataParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
TeradataParser class >> symbolNames [
	^ #('"("' '")"' '"*"' '"**"' '"+"' '","' '"-"' '"."' '"/"' '";"' '"<"' '"<="' '"<>"' '"="' '">"' '">="' '"ALL"' '"AND"' '"AS"' '"BEGIN"' '"BETWEEN"' '"BIGINT"' '"BOTH"' '"BT"' '"BY"' '"BYTE"' '"BYTEINT"' '"CASE"' '"CASESPECIFIC"' '"CAST"' '"CHAR"' '"CHARACTER"' '"CHECK"' '"CHECKPOINT"' '"CLOB"' '"COUNT"' '"CREATE"' '"CROSS"' '"CURSOR"' '"DATABASE"' '"DATE"' '"DEC"' '"DECIMAL"' '"DEL"' '"DELETE"' '"DISTINCT"' '"DISTINCTROW"' '"DROP"' '"ELSE"' '"END"' '"ERROR"' '"ERRORFILES"' '"ESCAPE"' '"ET"' '"EXEC"' '"EXECUTE"' '"EXISTS"' '"EXTRACT"' '"FLOAT"' '"FOR"' '"FORMAT"' '"FROM"' '"GROUP"' '"HAVING"' '"HELP"' '"IN"' '"INNER"' '"INS"' '"INSERT"' '"INT"' '"INTEGER"' '"INTERVAL"' '"INTO"' '"IS"' '"JOIN"' '"LEADING"' '"LEFT"' '"LIKE"' '"LOADING"' '"LOCK"' '"LOCKING"' '"MACRO"' '"MATCHED"' '"MERGE"' '"MINUS"' '"MOD"' '"NE"' '"NOT"' '"NULL"' '"NUMBER"' '"NUMERIC"' '"ON"' '"OR"' '"ORDER"' '"OUTER"' '"OVER"' '"PARTITION"' '"QUALIFY"' '"REAL"' '"RECURSIVE"' '"RIGHT"' '"ROLLBACK"' '"SEL"' '"SELECT"' '"SESSION"' '"SET"' '"SMALLINT"' '"SUBSTRING"' '"TABLE"' '"THEN"' '"TIME"' '"TIMESTAMP"' '"TITLE"' '"TOP"' '"TRAILING"' '"TRANSLATE"' '"TRANSLATE_CHK"' '"TRIM"' '"UNION"' '"UPDATE"' '"USING"' '"VALUES"' '"VARBYTE"' '"VARCHAR"' '"WHEN"' '"WHERE"' '"WITH"' '"WORK"' '"WORKLOAD"' '"XMLAGG"' '"||"' '<identifier>' '<variable>' '<string>' '<number>' '<whitespace>' '<comment>' 'B e g i n' 'File' '";" ''semicolon''*' 'Statements' 'Statement' 'MergeQuery' 'WhenMergeCondition ''whenMerge''+' 'WhenMergeCondition' 'RollbackStatement' 'LockTableStatement' 'CreateMacroStatement' 'MacroArgs' 'ParameterList' 'Parameter' 'Type' 'TypeName' 'CheckpointStatement' 'DropTableQuery' 'UpdateQuery' 'SetExpressionList' 'SetExpression' 'InsertQuery' 'UsingStatement' 'UsingColumns' 'UsingColumn' 'LoadingStatement' 'CheckWorkloadStatement' 'SetStatement' 'HelpSessionStatement' 'TransactionStatement' 'DatabaseStatement' 'ExecuteStatement' 'DeleteQuery' 'SelectQuery' 'IntoExpression ''into''?' '(FromTables? WhereExpression? GroupByExpression  ''group''? HavingExpression ''having''? PartitionByExpression ''partition''? QualifyExpression ''qualify''? OrderByExpression ''orderBy''?)' '(FromTables? WhereExpression? GroupByExpression  ''group''? HavingExpression ''having''? PartitionByExpression ''partition''? QualifyExpression ''qualify''? OrderByExpression ''orderBy''?)?' 'PartitionByExpression ''partition''?' 'QualifyExpression ''qualify''?' 'OrderByExpression ''orderBy''?' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')' '("FOR" ''forToken'' "CURSOR" ''cursorToken'')?' '(FromTables? GroupByExpression  ''group''? HavingExpression ''having''? PartitionByExpression ''partition''? QualifyExpression ''qualify''?)' '(FromTables? GroupByExpression  ''group''? HavingExpression ''having''? PartitionByExpression ''partition''? QualifyExpression ''qualify''?)?' 'WithTables' 'WithTable' 'HavingExpression' 'UnionSelectQuery' 'QualifyExpression' 'PartitionByExpression' 'IntoExpression' 'FromTables' 'TableList' 'Table' '(<identifier> ''name'' "." ''period'')' '(<identifier> ''name'' "." ''period'')*' '"OUTER" ''type''?' '("ON" ''onToken'' Expression ''on'')' '("ON" ''onToken'' Expression ''on'')?' 'TableName' 'WhereExpression' 'GroupByExpression' 'OrderByExpression' 'ExpressionList' '"," ''comma''+' 'NamedExpression' 'Expression' 'CaseExpression' 'ElseExpression' 'WhenExpressions' 'WhenExpression' 'FunctionExpression' 'Identifier' 'IdentifierName' 'E O F' 'error')
]

{ #category : #generated }
TeradataParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #TeradataFileNode #TeradataFileNode #OrderedCollection #OrderedCollection #TeradataProgramNode #TeradataMergeQueryNode #OrderedCollection #TeradataWhenMergeConditionNode #TeradataRollbackStatementNode #TeradataLockTableStatementNode #TeradataCreateMacroStatementNode #OrderedCollection #OrderedCollection #TeradataParameterNode #TeradataTypeNode #SmaCCToken #TeradataCheckpointStatementNode #TeradataDropTableQueryNode #TeradataUpdateQueryNode #OrderedCollection #TeradataSetExpressionNode #TeradataInsertQueryNode #TeradataUsingStatementNode #OrderedCollection #TeradataUsingColumnNode #TeradataProgramNode #TeradataCheckWorkloadStatementNode #TeradataSetStatementNode #TeradataHelpSessionStatementNode #TeradataProgramNode #TeradataDatabaseStatementNode #TeradataExecuteStatementNode #TeradataDeleteQueryNode #TeradataProgramNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #TeradataPartitionByExpressionNode #TeradataQualifyExpressionNode #TeradataOrderByExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #TeradataWithTableDefinitionNode #TeradataHavingNode #OrderedCollection #TeradataQualifyExpressionNode #TeradataPartitionByExpressionNode #TeradataIntoExpressionNode #OrderedCollection #OrderedCollection #TeradataProgramNode #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #TeradataTableNode #OrderedCollection #TeradataGroupByNode #TeradataOrderByExpressionNode #OrderedCollection #OrderedCollection #TeradataExpressionNode #TeradataExpressionNode #TeradataCaseExpressionNode #TeradataElseExpressionNode #OrderedCollection #TeradataWhenExpressionNode #TeradataFunctionExpressionNode #TeradataIdentifierExpressionNode #TeradataIdentifierNameNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
TeradataParser class >> transitionTable [
^#(
#[1 0 6 0 10 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 0 113 0 139 0 117 0 140 0 121 0 141 0 125 0 142 0 125 0 143 0 125 0 146 0 125 0 147 0 125 0 148 0 125 0 154 0 125 0 155 0 125 0 156 0 125 0 159 0 125 0 160 0 125 0 163 0 125 0 164 0 125 0 165 0 125 0 166 0 125 0 167 0 125 0 168 0 125 0 169 0 125 0 170 0 197 0 171 0 6 0 212] 
#[0 0 201 0 79] 
#[0 0 10 0 2 0 10 0 85 0 119 0 212] 
#[0 0 205 0 129] 
#[0 0 209 0 79] 
#[0 0 213 0 82] 
#[1 0 14 0 132 0 217 0 193 0 221 0 211] 
#[1 0 225 0 1 0 229 0 62 0 14 0 132 0 233 0 191 0 237 0 193] 
#[1 0 225 0 1 0 241 0 62 0 14 0 132 0 245 0 191 0 237 0 193] 
#[0 0 249 0 109] 
#[0 0 253 0 79] 
#[0 0 18 0 2 0 10 0 85 0 119 0 212] 
#[1 0 14 0 132 0 217 0 193 1 1 0 211] 
#[1 0 14 0 132 0 217 0 193 1 5 0 211] 
#[0 1 9 0 105] 
#[1 1 13 0 73 0 14 0 132 1 17 0 193 1 21 0 197] 
#[1 1 25 0 73 0 14 0 132 1 17 0 193 1 29 0 197] 
#[1 1 33 0 109 0 14 0 132 1 17 0 193 1 37 0 197] 
#[1 1 41 0 109 0 14 0 132 1 17 0 193 1 45 0 197] 
#[1 0 225 0 1 1 49 0 73 0 14 0 132 1 53 0 191 0 237 0 193] 
#[0 1 57 0 128] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 89 0 46 1 93 0 47 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 129 0 114 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 1 165 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 193 0 46 1 197 0 47 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 201 0 114 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 1 205 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 14 0 132 0 217 0 193 1 209 0 211] 
#[1 0 14 0 132 1 17 0 193 1 213 0 197] 
#[1 1 217 0 1 1 221 0 132 1 225 0 161 1 229 0 162] 
#[1 1 233 0 100 0 14 0 132 1 237 0 182 1 241 0 183 0 217 0 193 1 245 0 211] 
#[0 0 0 0 212] 
#[1 1 249 0 10 0 22 0 212] 
#[1 0 6 0 10 1 253 0 140 0 6 0 212] 
#[0 0 26 0 2 0 10 0 212] 
#[0 0 30 0 2 0 10 0 85 0 119 0 212] 
#[0 0 34 0 2 0 10 0 85 0 119 0 212] 
#[0 0 38 0 2 0 10 0 85 0 119 0 212] 
#[0 0 42 0 2 0 10 0 85 0 119 0 212] 
#[0 0 46 0 2 0 10 0 85 0 119 0 212] 
#[0 0 50 0 2 0 10 0 85 0 119 0 212] 
#[0 0 54 0 2 0 10 0 85 0 119 0 212] 
#[0 0 58 0 2 0 10 0 85 0 119 0 212] 
#[0 0 62 0 2 0 10 0 85 0 119 0 212] 
#[0 0 66 0 2 0 10 0 85 0 119 0 212] 
#[0 0 70 0 2 0 10 0 85 0 119 0 212] 
#[0 0 74 0 2 0 10 0 85 0 119 0 212] 
#[0 0 78 0 2 0 10 0 85 0 119 0 212] 
#[0 0 82 0 2 0 10 0 85 0 119 0 212] 
#[0 0 86 0 2 0 10 0 85 0 119 0 212] 
#[0 0 90 0 2 0 10 0 85 0 119 0 212] 
#[0 0 94 0 2 0 10 0 85 0 119 0 212] 
#[1 0 98 0 2 0 98 0 10 2 1 0 85 2 5 0 119 0 98 0 212] 
#[1 0 14 0 132 1 17 0 193 2 9 0 197] 
#[1 2 13 0 50 2 17 0 60] 
#[0 2 21 0 72] 
#[1 0 14 0 132 0 217 0 193 2 25 0 211] 
#[1 2 29 0 132 2 33 0 192] 
#[0 0 102 0 2 0 10 0 85 0 119 0 212] 
#[1 0 225 0 1 0 89 0 103 0 93 0 104 0 109 0 127 0 14 0 132 2 37 0 171 2 41 0 191 0 237 0 193] 
#[1 0 225 0 1 0 14 0 132 2 45 0 191 0 237 0 193] 
#[1 0 106 0 2 0 106 0 10 2 49 0 17 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 0 106 0 85 2 69 0 101 0 106 0 119 2 73 0 126 2 77 0 198 0 106 0 212] 
#[1 2 81 0 132 2 33 0 192] 
#[1 0 225 0 1 0 14 0 132 2 85 0 191 0 237 0 193] 
#[1 0 110 0 2 0 110 0 10 2 89 0 17 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 0 110 0 85 2 69 0 101 0 110 0 119 2 73 0 126 2 93 0 198 0 110 0 212] 
#[1 0 14 0 132 1 17 0 193 2 97 0 197] 
#[0 0 114 0 2 0 10 0 85 0 119 0 212] 
#[1 2 101 0 1 0 118 0 2 0 118 0 10 0 118 0 85 0 118 0 119 0 118 0 212] 
#[1 2 105 0 1 0 122 0 2 0 122 0 10 0 122 0 85 0 122 0 119 0 122 0 212] 
#[0 0 126 0 2 0 10 0 85 0 119 0 212] 
#[1 0 14 0 132 1 17 0 193 2 109 0 197] 
#[1 2 113 0 132 2 33 0 192] 
#[1 2 117 0 1 2 121 0 122] 
#[1 0 14 0 132 1 17 0 193 2 125 0 197] 
#[1 2 129 0 1 2 133 0 122] 
#[1 0 14 0 132 1 17 0 193 2 137 0 197] 
#[0 2 141 0 60] 
#[1 0 14 0 132 1 17 0 193 2 145 0 197] 
#[0 2 149 0 60] 
#[1 0 225 0 1 0 14 0 132 2 153 0 191 0 237 0 193] 
#[1 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 2 69 0 101 2 157 0 121] 
#[0 2 161 0 134] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 0 89 0 103 0 93 0 104 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 0 109 0 127 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 2 165 0 171 1 161 0 193 2 169 0 204 2 169 0 205 2 169 0 209 2 169 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 2 173 0 204 2 173 0 205 2 173 0 209 2 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 2 177 0 204 2 177 0 205 2 177 0 209 2 177 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 2 181 0 125 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 2 185 0 204 2 185 0 205 2 189 0 207 2 193 0 208 2 185 0 209 2 185 0 210 1 189 0 211] 
#[0 2 197 0 1] 
#[0 2 201 0 1] 
#[1 0 130 0 1 0 130 0 2 0 130 0 3 0 130 0 4 0 130 0 5 0 130 0 6 0 130 0 7 0 130 0 9 0 130 0 10 0 130 0 11 0 130 0 12 0 130 0 13 0 130 0 14 0 130 0 15 0 130 0 16 0 130 0 17 0 130 0 18 0 130 0 19 0 130 0 21 0 130 0 38 0 130 0 49 0 130 0 50 0 130 0 53 0 130 0 60 0 130 0 62 0 130 0 63 0 130 0 64 0 130 0 66 0 130 0 67 0 130 0 73 0 130 0 74 0 130 0 75 0 130 0 77 0 130 0 78 0 130 0 85 0 130 0 86 0 130 0 87 0 130 0 88 0 130 0 92 0 130 0 93 0 130 0 94 0 130 0 96 0 130 0 97 0 130 0 98 0 130 0 101 0 130 0 106 0 130 0 110 0 130 0 119 0 130 0 120 0 130 0 121 0 130 0 125 0 130 0 126 0 130 0 127 0 130 0 131 0 130 0 132 2 205 0 134 0 130 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 2 209 0 114 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 2 213 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 2 217 0 114 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 2 221 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 2 225 0 1] 
#[0 2 229 0 1] 
#[0 2 233 0 134] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 2 237 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 2 241 0 204 2 241 0 205 2 241 0 209 2 241 0 210 1 189 0 211] 
#[0 0 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 2 245 0 1] 
#[1 0 138 0 1 0 138 0 2 0 138 0 3 0 138 0 4 0 138 0 5 0 138 0 6 0 138 0 7 0 138 0 9 0 138 0 10 0 138 0 11 0 138 0 12 0 138 0 13 0 138 0 14 0 138 0 15 0 138 0 16 0 138 0 17 0 138 0 18 0 138 0 19 0 138 0 21 0 138 0 38 0 138 0 49 0 138 0 50 0 138 0 53 0 138 0 60 0 138 0 62 0 138 0 63 0 138 0 64 0 138 0 66 0 138 0 67 0 138 0 73 0 138 0 74 0 138 0 75 0 138 0 77 0 138 0 78 0 138 0 85 0 138 0 86 0 138 0 87 0 138 0 88 0 138 0 92 0 138 0 93 0 138 0 94 0 138 0 96 0 138 0 97 0 138 0 98 0 138 0 101 0 138 0 106 0 138 0 110 0 138 0 119 0 138 0 120 0 138 0 121 0 138 0 125 0 138 0 126 0 138 0 127 0 138 0 131 0 138 0 132 2 249 0 134 0 138 0 212] 
#[1 0 142 0 1 0 142 0 2 0 142 0 3 0 142 0 4 0 142 0 5 0 142 0 6 0 142 0 7 0 142 0 9 0 142 0 10 0 142 0 11 0 142 0 12 0 142 0 13 0 142 0 14 0 142 0 15 0 142 0 16 0 142 0 17 0 142 0 18 0 142 0 19 0 142 0 21 0 142 0 38 0 142 0 49 0 142 0 50 0 142 0 53 0 142 0 60 0 142 0 62 0 142 0 63 0 142 0 64 0 142 0 66 0 142 0 67 0 142 0 73 0 142 0 74 0 142 0 75 0 142 0 77 0 142 0 78 0 142 0 85 0 142 0 86 0 142 0 87 0 142 0 88 0 142 0 92 0 142 0 93 0 142 0 94 0 142 0 96 0 142 0 97 0 142 0 98 0 142 0 101 0 142 0 106 0 142 0 110 0 142 0 119 0 142 0 120 0 142 0 121 0 142 0 125 0 142 0 126 0 142 0 127 0 142 0 131 0 142 0 132 2 253 0 134 0 142 0 212] 
#[0 3 1 0 135] 
#[0 3 5 0 1] 
#[0 3 9 0 1] 
#[0 3 13 0 1] 
#[0 3 17 0 1] 
#[0 0 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 0 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 0 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 3 21 0 3 3 25 0 132 2 33 0 192] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 3 37 0 172 3 37 0 188 3 45 0 202 0 158 0 212] 
#[0 0 162 0 2 0 6 0 10 0 60 0 62 0 63 0 64 0 73 0 85 0 94 0 97 0 98 0 119 0 126 0 127 0 212] 
#[1 3 49 0 1 0 166 0 2 3 53 0 3 3 57 0 4 3 61 0 5 0 166 0 6 3 65 0 7 3 69 0 9 0 166 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 101 0 19 3 105 0 21 0 166 0 60 0 166 0 62 0 166 0 63 0 166 0 64 3 109 0 66 0 166 0 73 3 113 0 74 3 117 0 78 0 166 0 85 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 0 166 0 94 3 137 0 96 0 166 0 97 0 166 0 98 0 166 0 119 0 166 0 126 0 166 0 127 3 141 0 131 3 145 0 132 0 166 0 212] 
#[0 0 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 0 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 0 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 3 149 0 1] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 3 153 0 114 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 3 157 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 3 161 0 114 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 3 165 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 3 169 0 135] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 3 173 0 172 3 173 0 188 3 45 0 202 0 158 0 212] 
#[0 3 177 0 14] 
#[1 3 181 0 62 3 185 0 106] 
#[1 1 221 0 132 3 189 0 161 1 229 0 162] 
#[1 3 193 0 1 4 21 0 22 4 21 0 26 4 21 0 27 4 21 0 31 4 21 0 35 4 21 0 41 4 21 0 42 4 21 0 43 4 21 0 59 4 21 0 70 4 21 0 71 4 21 0 90 4 21 0 91 4 21 0 99 4 21 0 107 4 21 0 111 4 21 0 112 4 21 0 123 4 21 0 124 4 17 0 152 4 21 0 153] 
#[1 4 25 0 6 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 4 29 0 142 4 29 0 143 4 29 0 146 4 29 0 147 4 29 0 148 4 29 0 154 4 29 0 155 4 29 0 156 4 29 0 159 4 29 0 160 4 29 0 163 4 29 0 164 4 29 0 165 4 29 0 166 4 29 0 167 4 29 0 168 4 29 0 169 4 29 0 170 0 197 0 171] 
#[0 0 182 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[1 0 14 0 132 4 33 0 182 1 241 0 183 0 217 0 193 1 245 0 211] 
#[1 4 37 0 6 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 4 41 0 142 4 41 0 143 4 41 0 146 4 41 0 147 4 41 0 148 4 41 0 154 4 41 0 155 4 41 0 156 4 41 0 159 4 41 0 160 4 41 0 163 4 41 0 164 4 41 0 165 4 41 0 166 4 41 0 167 4 41 0 168 4 41 0 169 4 41 0 170 0 197 0 171] 
#[0 0 186 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[1 4 45 0 1 4 49 0 19] 
#[0 0 190 0 10 0 212] 
#[1 4 53 0 10 0 194 0 212] 
#[1 4 57 0 1 0 89 0 103 0 93 0 104 0 109 0 127 4 61 0 171 4 65 0 185] 
#[1 4 57 0 1 4 69 0 17 0 89 0 103 0 93 0 104 0 109 0 127 4 61 0 171 4 73 0 185] 
#[0 4 77 0 52] 
#[0 0 198 0 2 0 10 0 85 0 119 0 212] 
#[1 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 4 81 0 142 4 81 0 143 4 81 0 146 4 81 0 147 4 81 0 148 4 81 0 154 4 81 0 155 4 81 0 156 4 81 0 159 4 81 0 160 4 81 0 163 4 81 0 164 4 81 0 165 4 81 0 166 4 81 0 167 4 81 0 168 4 81 0 169 4 81 0 170 0 197 0 171] 
#[0 4 85 0 135] 
#[1 4 89 0 1 0 202 0 19 4 93 0 149] 
#[1 0 206 0 1 0 206 0 2 4 97 0 8 0 206 0 10 0 206 0 14 0 206 0 19 0 206 0 22 0 206 0 26 0 206 0 27 0 206 0 31 0 206 0 35 0 206 0 41 0 206 0 42 0 206 0 43 0 206 0 59 0 206 0 70 0 206 0 71 0 206 0 85 0 206 0 90 0 206 0 91 0 206 0 99 0 206 0 107 0 206 0 111 0 206 0 112 0 206 0 119 0 206 0 123 0 206 0 124 0 206 0 212] 
#[0 0 210 0 3 0 132] 
#[1 4 101 0 2 2 1 0 85 2 5 0 119] 
#[1 4 105 0 38 4 109 0 67 4 113 0 75 4 117 0 77 4 121 0 101] 
#[1 0 214 0 2 0 214 0 10 4 125 0 17 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 0 214 0 85 2 69 0 101 0 214 0 119 2 73 0 126 4 129 0 198 0 214 0 212] 
#[0 0 218 0 2 0 10 0 85 0 119 0 212] 
#[0 4 133 0 75] 
#[0 4 137 0 75] 
#[1 0 225 0 1 0 14 0 132 4 141 0 191 0 237 0 193] 
#[1 0 222 0 75 4 149 0 95 4 149 0 194] 
#[1 0 222 0 75 4 153 0 95 4 153 0 194] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 4 157 0 204 4 157 0 205 4 157 0 209 4 157 0 210 1 189 0 211] 
#[0 0 226 0 2 0 10 0 85 0 119 0 212] 
#[1 0 230 0 2 0 230 0 6 4 97 0 8 0 230 0 10 0 230 0 17 4 161 0 19 0 230 0 38 0 230 0 60 0 230 0 63 0 230 0 64 0 230 0 67 0 230 0 75 0 230 0 77 0 230 0 85 0 230 0 92 0 230 0 94 0 230 0 97 0 230 0 98 0 230 0 101 0 230 0 106 0 230 0 119 0 230 0 121 0 230 0 126 4 165 0 132 0 230 0 212] 
#[1 0 234 0 2 0 234 0 10 4 169 0 17 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 0 234 0 85 2 69 0 101 0 234 0 119 2 73 0 126 4 173 0 198 0 234 0 212] 
#[0 0 238 0 2 0 10 0 85 0 119 0 212] 
#[0 0 242 0 2 0 10 0 85 0 119 0 212] 
#[0 0 246 0 2 0 10 0 85 0 119 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 4 177 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 4 181 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 4 185 0 1 0 89 0 103 0 93 0 104 4 189 0 122 0 109 0 127 4 193 0 171] 
#[1 0 250 0 1 0 250 0 2 4 97 0 8 0 250 0 10 0 250 0 52 0 250 0 60 0 250 0 62 0 250 0 85 0 250 0 103 0 250 0 104 0 250 0 106 0 250 0 119 0 250 0 122 0 250 0 127 0 250 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 4 197 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 4 201 0 1] 
#[1 4 205 0 1 0 89 0 103 0 93 0 104 4 209 0 122 0 109 0 127 4 213 0 171] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 4 217 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 4 221 0 1] 
#[0 4 225 0 60] 
#[0 4 229 0 132] 
#[0 4 233 0 60] 
#[0 4 237 0 132] 
#[1 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 2 69 0 101 4 241 0 121] 
#[1 0 225 0 1 0 14 0 132 4 245 0 191 0 237 0 193] 
#[0 4 249 0 62] 
#[1 4 253 0 2 2 1 0 85 2 5 0 119] 
#[1 3 49 0 1 5 1 0 2 3 53 0 3 3 57 0 4 3 61 0 5 5 5 0 6 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 0 7 0 1 0 254 0 2 3 53 0 3 3 57 0 4 0 254 0 5 0 254 0 6 0 254 0 7 3 69 0 9 0 254 0 10 0 254 0 11 0 254 0 12 0 254 0 13 0 254 0 14 0 254 0 15 0 254 0 16 0 254 0 17 0 254 0 18 0 254 0 19 0 254 0 21 0 254 0 38 0 254 0 49 0 254 0 50 0 254 0 53 0 254 0 60 0 254 0 62 0 254 0 63 0 254 0 64 0 254 0 66 0 254 0 67 0 254 0 73 0 11 0 74 0 254 0 75 0 254 0 77 0 254 0 78 0 254 0 85 3 121 0 86 0 254 0 87 0 254 0 88 0 254 0 92 0 254 0 93 0 254 0 94 0 15 0 96 0 254 0 97 0 254 0 98 0 254 0 101 0 254 0 106 0 254 0 110 0 254 0 119 0 254 0 120 0 254 0 121 0 254 0 125 0 254 0 126 0 254 0 127 0 254 0 131 0 254 0 132 0 254 0 212] 
#[1 0 19 0 1 1 2 0 2 3 53 0 3 3 57 0 4 1 2 0 5 1 2 0 6 1 2 0 7 3 69 0 9 1 2 0 10 1 2 0 11 1 2 0 12 1 2 0 13 1 2 0 14 1 2 0 15 1 2 0 16 1 2 0 17 1 2 0 18 1 2 0 19 1 2 0 21 1 2 0 38 1 2 0 49 1 2 0 50 1 2 0 53 1 2 0 60 1 2 0 62 1 2 0 63 1 2 0 64 1 2 0 66 1 2 0 67 1 2 0 73 0 23 0 74 1 2 0 75 1 2 0 77 1 2 0 78 1 2 0 85 3 121 0 86 1 2 0 87 1 2 0 88 1 2 0 92 1 2 0 93 1 2 0 94 0 27 0 96 1 2 0 97 1 2 0 98 1 2 0 101 1 2 0 106 1 2 0 110 1 2 0 119 1 2 0 120 1 2 0 121 1 2 0 125 1 2 0 126 1 2 0 127 1 2 0 131 1 2 0 132 1 2 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 9 0 204 5 9 0 205 5 9 0 209 5 9 0 210 1 189 0 211] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 2 181 0 125 3 141 0 131 5 13 0 207 2 193 0 208] 
#[1 5 17 0 49 5 21 0 50 2 181 0 125 5 25 0 206 5 29 0 208] 
#[0 1 6 0 49 0 50 0 125] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 33 0 204 5 33 0 205 5 33 0 209 5 33 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 5 37 0 17 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 5 41 0 46 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 45 0 204 5 45 0 205 5 45 0 209 5 45 0 210 1 189 0 211] 
#[0 1 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 5 49 0 135] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 5 53 0 172 5 53 0 188 3 45 0 202 0 158 0 212] 
#[0 5 57 0 135] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 5 61 0 172 5 61 0 188 3 45 0 202 0 158 0 212] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 5 65 0 171] 
#[0 5 69 0 132] 
#[0 5 73 0 132] 
#[0 5 77 0 1] 
#[1 0 31 0 1 1 14 0 2 3 53 0 3 3 57 0 4 3 61 0 5 1 14 0 6 3 65 0 7 3 69 0 9 1 14 0 10 1 14 0 11 1 14 0 12 1 14 0 13 1 14 0 14 1 14 0 15 1 14 0 16 1 14 0 17 1 14 0 18 1 14 0 19 1 14 0 21 1 14 0 38 1 14 0 49 1 14 0 50 1 14 0 53 1 14 0 60 1 14 0 62 1 14 0 63 1 14 0 64 1 14 0 67 1 14 0 73 0 35 0 74 1 14 0 75 1 14 0 77 1 14 0 85 3 121 0 86 1 14 0 87 1 14 0 92 1 14 0 93 1 14 0 94 0 39 0 96 1 14 0 97 1 14 0 98 1 14 0 101 1 14 0 106 1 14 0 110 1 14 0 119 1 14 0 120 1 14 0 121 1 14 0 125 1 14 0 126 1 14 0 127 1 14 0 131 1 14 0 132 1 14 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 81 0 204 5 81 0 205 5 81 0 209 5 81 0 210 1 189 0 211] 
#[0 1 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 1 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 85 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 89 0 204 5 89 0 205 5 89 0 209 5 89 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 93 0 204 5 93 0 205 5 93 0 209 5 93 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 5 97 0 23 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 5 101 0 76 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 5 105 0 115 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 109 0 204 5 109 0 205 5 109 0 209 5 109 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 113 0 204 5 113 0 205 5 113 0 209 5 113 0 210 1 189 0 211] 
#[0 1 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 43 0 1 1 30 0 2 1 30 0 3 1 30 0 4 1 30 0 5 1 30 0 6 1 30 0 7 4 97 0 8 1 30 0 9 1 30 0 10 1 30 0 11 1 30 0 12 1 30 0 13 1 30 0 14 1 30 0 15 1 30 0 16 1 30 0 17 1 30 0 18 1 30 0 19 1 30 0 21 1 30 0 38 1 30 0 49 1 30 0 50 1 30 0 53 1 30 0 60 1 30 0 62 1 30 0 63 1 30 0 64 1 30 0 66 1 30 0 67 1 30 0 73 1 30 0 74 1 30 0 75 1 30 0 77 1 30 0 78 1 30 0 85 1 30 0 86 1 30 0 87 1 30 0 88 1 30 0 92 1 30 0 93 1 30 0 94 1 30 0 96 1 30 0 97 1 30 0 98 1 30 0 101 1 30 0 106 1 30 0 110 1 30 0 119 1 30 0 120 1 30 0 121 1 30 0 125 1 30 0 126 1 30 0 127 1 30 0 131 1 30 0 132 1 30 0 212] 
#[0 1 34 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 41 0 57 0 58 0 72 0 88 0 89 0 108 0 111 0 112 0 116 0 117 0 118 0 130 0 132 0 133 0 134 0 135] 
#[0 5 117 0 1] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 5 145 0 174 5 149 0 175 5 153 0 176 5 157 0 180 5 161 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 1 54 0 2 0 10 0 60 0 62 0 63 0 64 0 85 0 94 0 97 0 98 0 119 0 126 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 5 189 0 6 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 193 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 4 21 0 22 4 21 0 26 4 21 0 27 5 197 0 29 4 21 0 31 4 21 0 35 4 21 0 41 4 21 0 42 4 21 0 43 4 21 0 59 5 201 0 61 4 21 0 70 4 21 0 71 4 21 0 90 4 21 0 91 4 21 0 99 4 21 0 107 4 21 0 111 4 21 0 112 5 205 0 113 4 21 0 123 4 21 0 124 5 209 0 152 4 21 0 153] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 213 0 204 5 213 0 205 5 213 0 209 5 213 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 217 0 204 5 217 0 205 5 217 0 209 5 217 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 221 0 204 5 221 0 205 5 221 0 209 5 221 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 225 0 204 5 225 0 205 5 225 0 209 5 225 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 229 0 204 5 229 0 205 5 229 0 209 5 229 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 233 0 204 5 233 0 205 5 233 0 209 5 233 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 237 0 204 5 237 0 205 5 237 0 209 5 237 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 241 0 204 5 241 0 205 5 241 0 209 5 241 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 245 0 204 5 245 0 205 5 245 0 209 5 245 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 249 0 204 5 249 0 205 5 249 0 209 5 249 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 5 253 0 204 5 253 0 205 5 253 0 209 5 253 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 1 0 204 6 1 0 205 6 1 0 209 6 1 0 210 1 189 0 211] 
#[0 6 5 0 132] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 9 0 204 6 9 0 205 6 9 0 209 6 9 0 210 1 189 0 211] 
#[1 6 13 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 17 0 204 6 17 0 205 6 17 0 209 6 17 0 210 1 189 0 211] 
#[1 6 21 0 88 6 25 0 89] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 29 0 204 6 29 0 205 6 29 0 209 6 29 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 33 0 204 6 33 0 205 6 33 0 209 6 33 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 37 0 204 6 37 0 205 6 37 0 209 6 37 0 210 1 189 0 211] 
#[1 6 41 0 21 6 45 0 66 6 49 0 78] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 53 0 204 6 53 0 205 6 53 0 209 6 53 0 210 1 189 0 211] 
#[0 6 57 0 1] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 61 0 204 6 61 0 205 6 61 0 209 6 61 0 210 1 189 0 211] 
#[0 1 58 0 2 0 6 0 10 0 60 0 62 0 63 0 64 0 73 0 85 0 94 0 97 0 98 0 119 0 126 0 127 0 212] 
#[1 1 61 0 1 6 65 0 2 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 69 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 6 73 0 135] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 6 77 0 172 6 77 0 188 3 45 0 202 0 158 0 212] 
#[0 6 81 0 135] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 6 85 0 172 6 85 0 188 3 45 0 202 0 158 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 89 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 6 93 0 174 5 149 0 175 5 153 0 176 5 157 0 180 6 97 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 101 0 204 6 101 0 205 6 101 0 209 6 101 0 210 1 189 0 211] 
#[1 0 225 0 1 0 14 0 132 6 105 0 190 6 109 0 191 0 237 0 193] 
#[1 0 14 0 132 6 113 0 157 6 117 0 158 6 121 0 193 6 125 0 210] 
#[1 6 129 0 2 4 25 0 6] 
#[1 4 21 0 22 4 21 0 26 4 21 0 27 4 21 0 31 4 21 0 35 4 21 0 41 4 21 0 42 4 21 0 43 4 21 0 59 4 21 0 70 4 21 0 71 4 21 0 90 4 21 0 91 4 21 0 99 4 21 0 107 4 21 0 111 4 21 0 112 4 21 0 123 4 21 0 124 6 133 0 152 4 21 0 153] 
#[0 1 62 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 66 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 70 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 74 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 78 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 82 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 86 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 90 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 94 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 98 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 102 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 106 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 110 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 114 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 118 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 122 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 126 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 130 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 134 0 1 0 2 0 6 0 20 0 24 0 32 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 1 138 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[1 6 137 0 1 1 142 0 2 1 142 0 6 1 142 0 20 1 142 0 24 6 141 0 32 1 142 0 33 1 142 0 34 1 142 0 37 1 142 0 40 1 142 0 44 1 142 0 45 1 142 0 48 1 142 0 50 1 142 0 54 1 142 0 55 1 142 0 56 1 142 0 61 1 142 0 65 1 142 0 68 1 142 0 69 1 142 0 80 1 142 0 81 1 142 0 84 1 142 0 102 1 142 0 103 1 142 0 104 1 142 0 106 1 142 0 120 1 142 0 121 1 142 0 127] 
#[1 1 221 0 132 6 145 0 162] 
#[0 1 146 0 2 0 10 0 85 0 119 0 212] 
#[1 4 37 0 6 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 6 149 0 142 6 149 0 143 6 149 0 146 6 149 0 147 6 149 0 148 6 149 0 154 6 149 0 155 6 149 0 156 6 149 0 159 6 149 0 160 6 149 0 163 6 149 0 164 6 149 0 165 6 149 0 166 6 149 0 167 6 149 0 168 6 149 0 169 6 149 0 170 0 197 0 171] 
#[1 0 14 0 132 6 153 0 183 0 217 0 193 1 245 0 211] 
#[0 1 150 0 2 0 10 0 85 0 119 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 157 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 6 161 0 1] 
#[1 0 190 0 2 0 190 0 10 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 6 165 0 142 6 165 0 143 6 165 0 146 6 165 0 147 6 165 0 148 6 165 0 154 6 165 0 155 6 165 0 156 6 165 0 159 6 165 0 160 6 165 0 163 6 165 0 164 6 165 0 165 6 165 0 166 6 165 0 167 6 165 0 168 6 165 0 169 6 165 0 170 0 197 0 171 0 190 0 212] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 6 169 0 171] 
#[1 1 154 0 2 1 154 0 10 2 1 0 85 2 5 0 119 1 154 0 212] 
#[0 1 158 0 2 0 10 0 85 0 119 0 212] 
#[1 4 57 0 1 0 89 0 103 0 93 0 104 0 109 0 127 4 61 0 171 6 173 0 185] 
#[0 1 162 0 2 0 10 0 85 0 119 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 6 177 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 1 166 0 2 0 10 0 85 0 119 0 212] 
#[1 1 170 0 2 1 170 0 10 6 181 0 50 1 170 0 85 1 170 0 119 1 170 0 212] 
#[1 0 14 0 132 6 185 0 150 6 189 0 151 0 217 0 193 6 193 0 211] 
#[0 6 197 0 19] 
#[0 1 174 0 3 0 132] 
#[1 1 178 0 2 1 178 0 6 1 178 0 10 1 178 0 17 6 201 0 19 1 178 0 38 1 178 0 60 1 178 0 63 1 178 0 64 1 178 0 67 1 178 0 75 1 178 0 77 1 178 0 85 1 178 0 92 1 178 0 94 1 178 0 97 1 178 0 98 1 178 0 101 1 178 0 106 1 178 0 119 1 178 0 121 1 178 0 126 6 205 0 132 1 178 0 212] 
#[0 6 209 0 75] 
#[0 6 213 0 75] 
#[1 0 225 0 1 0 14 0 132 6 217 0 191 0 237 0 193] 
#[1 0 222 0 75 6 221 0 95 6 221 0 194] 
#[1 0 222 0 75 6 225 0 95 6 225 0 194] 
#[0 1 182 0 2 0 10 0 85 0 119 0 212] 
#[0 1 186 0 2 0 10 0 85 0 119 0 212] 
#[1 0 225 0 1 0 14 0 132 6 229 0 191 0 237 0 193] 
#[1 0 225 0 1 0 14 0 132 6 233 0 191 0 237 0 193] 
#[1 1 190 0 2 1 190 0 6 1 190 0 10 1 190 0 17 0 59 0 38 1 190 0 60 1 190 0 63 1 190 0 64 0 63 0 67 0 67 0 75 0 71 0 77 1 190 0 85 0 75 0 92 1 190 0 94 1 190 0 97 1 190 0 98 0 79 0 101 1 190 0 106 1 190 0 119 1 190 0 121 1 190 0 126 6 241 0 195 6 245 0 196 1 190 0 212] 
#[0 1 194 0 75] 
#[0 6 249 0 75] 
#[0 6 253 0 75] 
#[1 3 49 0 1 1 198 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 1 198 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 1 198 0 49 1 198 0 60 1 198 0 63 1 198 0 64 3 109 0 66 3 113 0 74 3 117 0 78 1 198 0 85 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 1 198 0 94 3 137 0 96 1 198 0 97 1 198 0 98 1 198 0 119 3 141 0 131 1 198 0 212] 
#[0 7 1 0 132] 
#[0 1 202 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 1 206 0 2 0 10 0 85 0 119 0 212] 
#[0 1 210 0 2 0 10 0 85 0 119 0 212] 
#[1 7 5 0 2 3 29 0 6 3 45 0 202] 
#[1 7 9 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 13 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 7 17 0 1] 
#[1 1 214 0 2 1 214 0 10 2 1 0 85 2 5 0 119 1 214 0 212] 
#[1 7 21 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 25 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 29 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 7 33 0 1] 
#[1 1 218 0 2 1 218 0 10 2 1 0 85 2 5 0 119 1 218 0 212] 
#[1 7 37 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 41 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 7 45 0 132] 
#[1 1 222 0 2 1 222 0 10 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 1 222 0 85 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 1 222 0 119 0 101 0 120 0 105 0 121 0 109 0 127 7 49 0 142 7 49 0 143 7 49 0 146 7 49 0 147 7 49 0 148 7 49 0 154 7 49 0 155 7 49 0 156 7 49 0 159 7 49 0 160 7 49 0 163 7 49 0 164 7 49 0 165 7 49 0 166 7 49 0 167 7 49 0 168 7 49 0 169 7 49 0 170 0 197 0 171 1 222 0 212] 
#[0 7 53 0 132] 
#[1 1 226 0 2 1 226 0 10 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 1 226 0 85 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 1 226 0 119 0 101 0 120 0 105 0 121 0 109 0 127 7 57 0 142 7 57 0 143 7 57 0 146 7 57 0 147 7 57 0 148 7 57 0 154 7 57 0 155 7 57 0 156 7 57 0 159 7 57 0 160 7 57 0 163 7 57 0 164 7 57 0 165 7 57 0 166 7 57 0 167 7 57 0 168 7 57 0 169 7 57 0 170 0 197 0 171 1 226 0 212] 
#[1 0 225 0 1 0 14 0 132 7 61 0 191 0 237 0 193] 
#[1 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 7 65 0 92 2 69 0 101] 
#[1 0 225 0 1 0 14 0 132 7 69 0 190 6 109 0 191 0 237 0 193] 
#[0 1 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 1 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 73 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 7 77 0 110 3 141 0 131] 
#[1 5 17 0 49 7 81 0 50 2 181 0 125 7 85 0 206 5 29 0 208] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 89 0 204 7 89 0 205 7 89 0 209 7 89 0 210 1 189 0 211] 
#[0 1 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 7 93 0 50] 
#[0 1 242 0 49 0 50 0 125] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 7 97 0 19 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 101 0 204 7 101 0 205 7 101 0 209 7 101 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 105 0 204 7 105 0 205 7 105 0 209 7 105 0 210 1 189 0 211] 
#[1 3 49 0 1 7 109 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 113 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 7 117 0 174 5 149 0 175 5 153 0 176 5 157 0 180 7 121 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 125 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 7 129 0 174 5 149 0 175 5 153 0 176 5 157 0 180 7 133 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[1 7 137 0 2 2 1 0 85 2 5 0 119] 
#[0 7 141 0 62] 
#[0 1 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 7 145 0 171] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 7 149 0 62 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 7 153 0 172 7 153 0 188 3 45 0 202 0 158 0 212] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 7 157 0 121 3 141 0 131] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 7 161 0 121 3 141 0 131] 
#[0 7 165 0 62] 
#[0 7 169 0 62] 
#[0 7 173 0 62] 
#[1 3 49 0 1 7 177 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 7 181 0 94 3 137 0 96 3 141 0 131 7 185 0 200] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 189 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 225 0 1 0 14 0 132 7 193 0 190 6 109 0 191 0 237 0 193] 
#[0 7 197 0 25] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 201 0 204 7 201 0 205 7 201 0 209 7 201 0 210 1 189 0 211] 
#[0 7 205 0 25] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 7 209 0 204 7 209 0 205 7 209 0 209 7 209 0 210 1 189 0 211] 
#[0 1 250 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 7 221 0 179 1 254 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 7 225 0 176 7 225 0 186 1 46 0 212] 
#[0 2 2 0 94] 
#[0 2 6 0 94] 
#[1 7 181 0 94 7 229 0 200] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 7 233 0 175 7 237 0 176 7 237 0 186 7 241 0 187 1 38 0 212] 
#[0 2 10 0 2 0 10 0 60 0 85 0 94 0 119 0 212] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 7 245 0 176 7 245 0 186 2 14 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 125 0 63 5 129 0 64 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 2 73 0 126 7 249 0 175 7 253 0 176 8 1 0 184 7 253 0 186 8 5 0 187 8 9 0 198 8 13 0 199 1 38 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 125 0 63 5 129 0 64 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 8 17 0 175 8 21 0 184 8 17 0 187 8 29 0 199 1 38 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 129 0 64 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 8 33 0 175 8 37 0 176 8 41 0 184 8 37 0 186 8 45 0 187 1 38 0 212] 
#[0 2 18 0 1 0 3 0 5 0 6 0 7 0 28 0 30 0 36 0 41 0 57 0 58 0 72 0 88 0 89 0 108 0 111 0 112 0 116 0 117 0 118 0 130 0 132 0 133 0 134 0 135] 
#[0 2 22 0 2 0 6 0 10 0 60 0 62 0 63 0 64 0 73 0 85 0 94 0 97 0 98 0 119 0 126 0 127 0 212] 
#[0 8 49 0 2] 
#[0 8 53 0 134] 
#[0 8 57 0 134] 
#[1 8 61 0 2 8 65 0 6] 
#[1 0 95 0 1 2 26 0 2 2 26 0 3 3 57 0 4 2 26 0 5 2 26 0 6 2 26 0 7 2 26 0 9 2 26 0 10 2 26 0 11 2 26 0 12 2 26 0 13 2 26 0 14 2 26 0 15 2 26 0 16 2 26 0 17 2 26 0 18 2 26 0 19 2 26 0 21 2 26 0 38 2 26 0 49 2 26 0 50 2 26 0 53 2 26 0 60 2 26 0 62 2 26 0 63 2 26 0 64 2 26 0 66 2 26 0 67 2 26 0 73 0 99 0 74 2 26 0 75 2 26 0 77 2 26 0 78 2 26 0 85 2 26 0 86 2 26 0 87 2 26 0 88 2 26 0 92 2 26 0 93 2 26 0 94 0 103 0 96 2 26 0 97 2 26 0 98 2 26 0 101 2 26 0 106 2 26 0 110 2 26 0 119 2 26 0 120 2 26 0 121 2 26 0 125 2 26 0 126 2 26 0 127 2 26 0 131 2 26 0 132 2 26 0 212] 
#[1 0 107 0 1 2 30 0 2 2 30 0 3 3 57 0 4 2 30 0 5 2 30 0 6 2 30 0 7 2 30 0 9 2 30 0 10 2 30 0 11 2 30 0 12 2 30 0 13 2 30 0 14 2 30 0 15 2 30 0 16 2 30 0 17 2 30 0 18 2 30 0 19 2 30 0 21 2 30 0 38 2 30 0 49 2 30 0 50 2 30 0 53 2 30 0 60 2 30 0 62 2 30 0 63 2 30 0 64 2 30 0 66 2 30 0 67 2 30 0 73 0 111 0 74 2 30 0 75 2 30 0 77 2 30 0 78 2 30 0 85 2 30 0 86 2 30 0 87 2 30 0 88 2 30 0 92 2 30 0 93 2 30 0 94 0 115 0 96 2 30 0 97 2 30 0 98 2 30 0 101 2 30 0 106 2 30 0 110 2 30 0 119 2 30 0 120 2 30 0 121 2 30 0 125 2 30 0 126 2 30 0 127 2 30 0 131 2 30 0 132 2 30 0 212] 
#[1 0 119 0 1 2 34 0 2 3 53 0 3 3 57 0 4 2 34 0 5 2 34 0 6 2 34 0 7 3 69 0 9 2 34 0 10 2 34 0 11 2 34 0 12 2 34 0 13 2 34 0 14 2 34 0 15 2 34 0 16 2 34 0 17 2 34 0 18 2 34 0 19 2 34 0 21 2 34 0 38 2 34 0 49 2 34 0 50 2 34 0 53 2 34 0 60 2 34 0 62 2 34 0 63 2 34 0 64 2 34 0 66 2 34 0 67 2 34 0 73 0 123 0 74 2 34 0 75 2 34 0 77 2 34 0 78 2 34 0 85 3 121 0 86 2 34 0 87 2 34 0 88 2 34 0 92 2 34 0 93 2 34 0 94 0 127 0 96 2 34 0 97 2 34 0 98 2 34 0 101 2 34 0 106 2 34 0 110 2 34 0 119 2 34 0 120 2 34 0 121 2 34 0 125 2 34 0 126 2 34 0 127 2 34 0 131 2 34 0 132 2 34 0 212] 
#[1 0 131 0 1 2 38 0 2 3 53 0 3 3 57 0 4 2 38 0 5 2 38 0 6 2 38 0 7 3 69 0 9 2 38 0 10 2 38 0 11 2 38 0 12 2 38 0 13 2 38 0 14 2 38 0 15 2 38 0 16 2 38 0 17 2 38 0 18 2 38 0 19 2 38 0 21 2 38 0 38 2 38 0 49 2 38 0 50 2 38 0 53 2 38 0 60 2 38 0 62 2 38 0 63 2 38 0 64 2 38 0 66 2 38 0 67 2 38 0 73 0 135 0 74 2 38 0 75 2 38 0 77 2 38 0 78 2 38 0 85 3 121 0 86 2 38 0 87 2 38 0 88 2 38 0 92 2 38 0 93 2 38 0 94 0 139 0 96 2 38 0 97 2 38 0 98 2 38 0 101 2 38 0 106 2 38 0 110 2 38 0 119 2 38 0 120 2 38 0 121 2 38 0 125 2 38 0 126 2 38 0 127 2 38 0 131 2 38 0 132 2 38 0 212] 
#[1 0 143 0 1 2 42 0 2 2 42 0 3 3 57 0 4 2 42 0 5 2 42 0 6 2 42 0 7 2 42 0 9 2 42 0 10 2 42 0 11 2 42 0 12 2 42 0 13 2 42 0 14 2 42 0 15 2 42 0 16 2 42 0 17 2 42 0 18 2 42 0 19 2 42 0 21 2 42 0 38 2 42 0 49 2 42 0 50 2 42 0 53 2 42 0 60 2 42 0 62 2 42 0 63 2 42 0 64 2 42 0 66 2 42 0 67 2 42 0 73 0 147 0 74 2 42 0 75 2 42 0 77 2 42 0 78 2 42 0 85 2 42 0 86 2 42 0 87 2 42 0 88 2 42 0 92 2 42 0 93 2 42 0 94 0 151 0 96 2 42 0 97 2 42 0 98 2 42 0 101 2 42 0 106 2 42 0 110 2 42 0 119 2 42 0 120 2 42 0 121 2 42 0 125 2 42 0 126 2 42 0 127 2 42 0 131 2 42 0 132 2 42 0 212] 
#[1 0 155 0 1 2 46 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 46 0 6 3 65 0 7 3 69 0 9 2 46 0 10 2 46 0 17 2 46 0 18 2 46 0 19 2 46 0 38 2 46 0 49 2 46 0 50 2 46 0 53 2 46 0 60 2 46 0 62 2 46 0 63 2 46 0 64 3 109 0 66 2 46 0 67 2 46 0 73 0 159 0 74 2 46 0 75 2 46 0 77 3 117 0 78 2 46 0 85 3 121 0 86 3 129 0 88 2 46 0 92 2 46 0 93 2 46 0 94 0 163 0 96 2 46 0 97 2 46 0 98 2 46 0 101 2 46 0 106 2 46 0 110 2 46 0 119 2 46 0 120 2 46 0 121 2 46 0 125 2 46 0 126 2 46 0 127 3 141 0 131 2 46 0 132 2 46 0 212] 
#[1 0 167 0 1 2 50 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 50 0 6 3 65 0 7 3 69 0 9 2 50 0 10 2 50 0 17 2 50 0 18 2 50 0 19 2 50 0 38 2 50 0 49 2 50 0 50 2 50 0 53 2 50 0 60 2 50 0 62 2 50 0 63 2 50 0 64 3 109 0 66 2 50 0 67 2 50 0 73 0 171 0 74 2 50 0 75 2 50 0 77 3 117 0 78 2 50 0 85 3 121 0 86 3 129 0 88 2 50 0 92 2 50 0 93 2 50 0 94 0 175 0 96 2 50 0 97 2 50 0 98 2 50 0 101 2 50 0 106 2 50 0 110 2 50 0 119 2 50 0 120 2 50 0 121 2 50 0 125 2 50 0 126 2 50 0 127 3 141 0 131 2 50 0 132 2 50 0 212] 
#[1 0 179 0 1 2 54 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 54 0 6 3 65 0 7 3 69 0 9 2 54 0 10 2 54 0 17 2 54 0 18 2 54 0 19 2 54 0 38 2 54 0 49 2 54 0 50 2 54 0 53 2 54 0 60 2 54 0 62 2 54 0 63 2 54 0 64 3 109 0 66 2 54 0 67 2 54 0 73 0 183 0 74 2 54 0 75 2 54 0 77 3 117 0 78 2 54 0 85 3 121 0 86 3 129 0 88 2 54 0 92 2 54 0 93 2 54 0 94 0 187 0 96 2 54 0 97 2 54 0 98 2 54 0 101 2 54 0 106 2 54 0 110 2 54 0 119 2 54 0 120 2 54 0 121 2 54 0 125 2 54 0 126 2 54 0 127 3 141 0 131 2 54 0 132 2 54 0 212] 
#[1 0 191 0 1 2 58 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 58 0 6 3 65 0 7 3 69 0 9 2 58 0 10 2 58 0 17 2 58 0 18 2 58 0 19 2 58 0 38 2 58 0 49 2 58 0 50 2 58 0 53 2 58 0 60 2 58 0 62 2 58 0 63 2 58 0 64 3 109 0 66 2 58 0 67 2 58 0 73 0 195 0 74 2 58 0 75 2 58 0 77 3 117 0 78 2 58 0 85 3 121 0 86 3 129 0 88 2 58 0 92 2 58 0 93 2 58 0 94 0 199 0 96 2 58 0 97 2 58 0 98 2 58 0 101 2 58 0 106 2 58 0 110 2 58 0 119 2 58 0 120 2 58 0 121 2 58 0 125 2 58 0 126 2 58 0 127 3 141 0 131 2 58 0 132 2 58 0 212] 
#[1 0 203 0 1 2 62 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 62 0 6 3 65 0 7 3 69 0 9 2 62 0 10 2 62 0 17 2 62 0 18 2 62 0 19 2 62 0 38 2 62 0 49 2 62 0 50 2 62 0 53 2 62 0 60 2 62 0 62 2 62 0 63 2 62 0 64 3 109 0 66 2 62 0 67 2 62 0 73 0 207 0 74 2 62 0 75 2 62 0 77 3 117 0 78 2 62 0 85 3 121 0 86 3 129 0 88 2 62 0 92 2 62 0 93 2 62 0 94 0 211 0 96 2 62 0 97 2 62 0 98 2 62 0 101 2 62 0 106 2 62 0 110 2 62 0 119 2 62 0 120 2 62 0 121 2 62 0 125 2 62 0 126 2 62 0 127 3 141 0 131 2 62 0 132 2 62 0 212] 
#[1 0 215 0 1 2 66 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 66 0 6 3 65 0 7 3 69 0 9 2 66 0 10 2 66 0 17 2 66 0 18 2 66 0 19 2 66 0 38 2 66 0 49 2 66 0 50 2 66 0 53 2 66 0 60 2 66 0 62 2 66 0 63 2 66 0 64 3 109 0 66 2 66 0 67 2 66 0 73 0 219 0 74 2 66 0 75 2 66 0 77 3 117 0 78 2 66 0 85 3 121 0 86 3 129 0 88 2 66 0 92 2 66 0 93 2 66 0 94 0 223 0 96 2 66 0 97 2 66 0 98 2 66 0 101 2 66 0 106 2 66 0 110 2 66 0 119 2 66 0 120 2 66 0 121 2 66 0 125 2 66 0 126 2 66 0 127 3 141 0 131 2 66 0 132 2 66 0 212] 
#[1 0 227 0 1 2 70 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 70 0 6 3 65 0 7 3 69 0 9 2 70 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 2 70 0 17 2 70 0 18 2 70 0 19 3 105 0 21 2 70 0 38 2 70 0 49 2 70 0 50 2 70 0 53 2 70 0 60 2 70 0 62 2 70 0 63 2 70 0 64 3 109 0 66 2 70 0 67 2 70 0 73 0 231 0 74 2 70 0 75 2 70 0 77 3 117 0 78 2 70 0 85 3 121 0 86 3 125 0 87 3 129 0 88 2 70 0 92 2 70 0 93 2 70 0 94 0 235 0 96 2 70 0 97 2 70 0 98 2 70 0 101 2 70 0 106 2 70 0 110 2 70 0 119 2 70 0 120 2 70 0 121 2 70 0 125 2 70 0 126 2 70 0 127 3 141 0 131 2 70 0 132 2 70 0 212] 
#[0 2 74 0 2 0 6 0 10 0 60 0 62 0 63 0 64 0 73 0 85 0 94 0 97 0 98 0 119 0 126 0 127 0 212] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 8 69 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 0 89 0 103 0 93 0 104 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 0 109 0 127 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 8 73 0 171 1 161 0 193 8 77 0 204 8 77 0 205 8 77 0 209 8 77 0 210 1 189 0 211] 
#[1 0 239 0 1 2 78 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 78 0 6 3 65 0 7 3 69 0 9 2 78 0 10 2 78 0 11 2 78 0 12 2 78 0 13 2 78 0 14 2 78 0 15 2 78 0 16 2 78 0 17 2 78 0 18 2 78 0 19 2 78 0 21 2 78 0 38 2 78 0 49 2 78 0 50 2 78 0 53 2 78 0 60 2 78 0 62 2 78 0 63 2 78 0 64 2 78 0 67 2 78 0 73 0 243 0 74 2 78 0 75 2 78 0 77 2 78 0 85 3 121 0 86 2 78 0 87 2 78 0 92 2 78 0 93 2 78 0 94 0 247 0 96 2 78 0 97 2 78 0 98 2 78 0 101 2 78 0 106 2 78 0 110 2 78 0 119 2 78 0 120 2 78 0 121 2 78 0 125 2 78 0 126 2 78 0 127 2 78 0 131 2 78 0 132 2 78 0 212] 
#[0 8 81 0 89] 
#[0 2 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 251 0 1 2 86 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 86 0 6 3 65 0 7 3 69 0 9 2 86 0 10 2 86 0 11 2 86 0 12 2 86 0 13 2 86 0 14 2 86 0 15 2 86 0 16 2 86 0 17 2 86 0 18 2 86 0 19 2 86 0 21 2 86 0 38 2 86 0 49 2 86 0 50 0 255 0 53 2 86 0 60 2 86 0 62 2 86 0 63 2 86 0 64 2 86 0 67 2 86 0 73 1 3 0 74 2 86 0 75 2 86 0 77 2 86 0 85 3 121 0 86 2 86 0 87 2 86 0 92 2 86 0 93 2 86 0 94 1 7 0 96 2 86 0 97 2 86 0 98 2 86 0 101 2 86 0 106 2 86 0 110 2 86 0 119 2 86 0 120 2 86 0 121 2 86 0 125 2 86 0 126 2 86 0 127 2 86 0 131 2 86 0 132 2 86 0 212] 
#[1 1 11 0 1 2 90 0 2 2 90 0 3 3 57 0 4 2 90 0 5 2 90 0 6 2 90 0 7 2 90 0 9 2 90 0 10 2 90 0 11 2 90 0 12 2 90 0 13 2 90 0 14 2 90 0 15 2 90 0 16 2 90 0 17 2 90 0 18 2 90 0 19 2 90 0 21 2 90 0 38 2 90 0 49 2 90 0 50 2 90 0 53 2 90 0 60 2 90 0 62 2 90 0 63 2 90 0 64 2 90 0 66 2 90 0 67 2 90 0 73 1 15 0 74 2 90 0 75 2 90 0 77 2 90 0 78 2 90 0 85 2 90 0 86 2 90 0 87 2 90 0 88 2 90 0 92 2 90 0 93 2 90 0 94 1 19 0 96 2 90 0 97 2 90 0 98 2 90 0 101 2 90 0 106 2 90 0 110 2 90 0 119 2 90 0 120 2 90 0 121 2 90 0 125 2 90 0 126 2 90 0 127 2 90 0 131 2 90 0 132 2 90 0 212] 
#[1 1 23 0 1 2 94 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 94 0 6 3 65 0 7 3 69 0 9 2 94 0 10 2 94 0 17 2 94 0 18 2 94 0 19 2 94 0 38 2 94 0 49 2 94 0 50 2 94 0 53 2 94 0 60 2 94 0 62 2 94 0 63 2 94 0 64 3 109 0 66 2 94 0 67 2 94 0 73 1 27 0 74 2 94 0 75 2 94 0 77 3 117 0 78 2 94 0 85 3 121 0 86 3 129 0 88 2 94 0 92 2 94 0 93 2 94 0 94 1 31 0 96 2 94 0 97 2 94 0 98 2 94 0 101 2 94 0 106 2 94 0 110 2 94 0 119 2 94 0 120 2 94 0 121 2 94 0 125 2 94 0 126 2 94 0 127 3 141 0 131 2 94 0 132 2 94 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 8 89 0 204 8 89 0 205 8 89 0 209 8 89 0 210 1 189 0 211] 
#[1 8 93 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 8 97 0 204 8 97 0 205 8 97 0 209 8 97 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 8 101 0 204 8 101 0 205 8 101 0 209 8 101 0 210 1 189 0 211] 
#[1 1 35 0 1 2 98 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 98 0 6 3 65 0 7 3 69 0 9 2 98 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 2 98 0 17 3 97 0 18 2 98 0 19 3 105 0 21 2 98 0 38 2 98 0 49 2 98 0 50 2 98 0 53 2 98 0 60 2 98 0 62 2 98 0 63 2 98 0 64 3 109 0 66 2 98 0 67 2 98 0 73 1 39 0 74 2 98 0 75 2 98 0 77 3 117 0 78 2 98 0 85 3 121 0 86 3 125 0 87 3 129 0 88 2 98 0 92 2 98 0 93 2 98 0 94 1 43 0 96 2 98 0 97 2 98 0 98 2 98 0 101 2 98 0 106 2 98 0 110 2 98 0 119 2 98 0 120 2 98 0 121 2 98 0 125 2 98 0 126 2 98 0 127 3 141 0 131 2 98 0 132 2 98 0 212] 
#[1 8 105 0 2 7 181 0 94 5 133 0 97 8 109 0 187 8 113 0 200] 
#[1 1 47 0 1 2 102 0 2 3 53 0 3 3 57 0 4 3 61 0 5 2 102 0 6 3 65 0 7 3 69 0 9 2 102 0 10 2 102 0 11 2 102 0 12 2 102 0 13 2 102 0 14 2 102 0 15 2 102 0 16 2 102 0 17 2 102 0 18 2 102 0 19 2 102 0 21 2 102 0 38 2 102 0 49 2 102 0 50 2 102 0 53 2 102 0 60 2 102 0 62 2 102 0 63 2 102 0 64 3 109 0 66 2 102 0 67 2 102 0 73 1 51 0 74 2 102 0 75 2 102 0 77 3 117 0 78 2 102 0 85 3 121 0 86 2 102 0 87 3 129 0 88 2 102 0 92 2 102 0 93 2 102 0 94 1 55 0 96 2 102 0 97 2 102 0 98 2 102 0 101 2 102 0 106 2 102 0 110 2 102 0 119 2 102 0 120 2 102 0 121 2 102 0 125 2 102 0 126 2 102 0 127 2 102 0 131 2 102 0 132 2 102 0 212] 
#[0 2 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 8 117 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 8 121 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 8 125 0 174 5 149 0 175 5 153 0 176 5 157 0 180 8 129 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 8 133 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 8 137 0 174 5 149 0 175 5 153 0 176 5 157 0 180 8 141 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 8 145 0 172 8 145 0 188 3 45 0 202 0 158 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 8 149 0 179 1 254 0 212] 
#[1 7 181 0 94 8 153 0 200] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 8 157 0 60 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 8 161 0 120 3 141 0 131] 
#[1 8 165 0 6 8 169 0 106] 
#[1 2 110 0 2 2 110 0 6 2 110 0 10 2 53 0 38 2 110 0 60 2 110 0 63 2 110 0 64 2 57 0 67 2 61 0 75 2 65 0 77 2 110 0 85 2 110 0 94 2 110 0 97 2 110 0 98 2 69 0 101 2 110 0 106 2 110 0 119 2 110 0 126 2 110 0 212] 
#[1 2 114 0 2 8 173 0 6 2 114 0 10 8 177 0 49 2 114 0 85 2 114 0 119 2 73 0 126 8 181 0 198 2 114 0 212] 
#[0 2 118 0 2 0 6 0 10 0 49 0 85 0 119 0 125 0 126 0 212] 
#[1 8 185 0 132 2 33 0 192] 
#[0 8 189 0 14] 
#[1 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 8 193 0 142 8 193 0 143 8 193 0 146 8 193 0 147 8 193 0 148 8 193 0 154 8 193 0 155 8 193 0 156 8 193 0 159 8 193 0 160 8 193 0 163 8 193 0 164 8 193 0 165 8 193 0 166 8 193 0 167 8 193 0 168 8 193 0 169 8 193 0 170 0 197 0 171] 
#[0 8 197 0 2] 
#[0 8 201 0 135] 
#[0 8 205 0 106] 
#[0 2 122 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 2 126 0 2 0 10 0 85 0 119 0 212] 
#[0 2 130 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[1 8 209 0 2 3 29 0 6 3 45 0 202] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 8 213 0 171] 
#[0 2 134 0 2 0 10 0 212] 
#[1 8 217 0 2 2 1 0 85 2 5 0 119] 
#[0 2 138 0 2 0 10 0 85 0 119 0 212] 
#[1 3 29 0 6 8 221 0 127 3 45 0 202] 
#[0 2 142 0 2 0 10 0 85 0 119 0 212] 
#[1 8 225 0 2 8 229 0 6] 
#[0 2 146 0 2 0 6] 
#[1 4 21 0 22 4 21 0 26 4 21 0 27 4 21 0 31 4 21 0 35 4 21 0 41 4 21 0 42 4 21 0 43 4 21 0 59 4 21 0 70 4 21 0 71 4 21 0 90 4 21 0 91 4 21 0 99 4 21 0 107 4 21 0 111 4 21 0 112 4 21 0 123 4 21 0 124 8 233 0 152 4 21 0 153] 
#[0 8 237 0 1] 
#[0 8 241 0 132] 
#[0 2 150 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 0 225 0 1 0 14 0 132 8 245 0 191 0 237 0 193] 
#[1 0 225 0 1 0 14 0 132 8 249 0 191 0 237 0 193] 
#[1 1 190 0 2 0 59 0 38 0 63 0 67 0 67 0 75 0 71 0 77 6 237 0 92 0 79 0 101 6 241 0 195 8 253 0 196] 
#[0 9 1 0 75] 
#[0 9 5 0 75] 
#[1 1 190 0 2 1 190 0 6 1 190 0 10 1 190 0 17 0 59 0 38 1 190 0 60 1 190 0 63 1 190 0 64 0 63 0 67 0 67 0 75 0 71 0 77 1 190 0 85 0 75 0 92 1 190 0 94 1 190 0 97 1 190 0 98 0 79 0 101 1 190 0 106 1 190 0 119 1 190 0 121 1 190 0 126 6 241 0 195 9 9 0 196 1 190 0 212] 
#[1 1 190 0 2 1 190 0 6 1 190 0 10 1 190 0 17 0 59 0 38 1 190 0 60 1 190 0 63 1 190 0 64 0 63 0 67 0 67 0 75 0 71 0 77 1 190 0 85 0 75 0 92 1 190 0 94 1 190 0 97 1 190 0 98 0 79 0 101 1 190 0 106 1 190 0 119 1 190 0 121 1 190 0 126 6 241 0 195 9 13 0 196 1 190 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 17 0 204 9 17 0 205 9 17 0 209 9 17 0 210 1 189 0 211] 
#[0 2 154 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 2 158 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 0 225 0 1 0 14 0 132 9 21 0 191 0 237 0 193] 
#[1 0 225 0 1 0 14 0 132 9 25 0 191 0 237 0 193] 
#[0 2 162 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 2 166 0 2 0 10 0 85 0 119 0 212] 
#[0 2 170 0 2 0 10 0 85 0 119 0 212] 
#[1 9 29 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 33 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 9 37 0 122] 
#[1 9 41 0 2 3 29 0 6 3 45 0 202] 
#[1 9 45 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 49 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 9 53 0 122] 
#[1 9 57 0 2 3 29 0 6 3 45 0 202] 
#[1 2 174 0 2 2 174 0 10 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 2 174 0 85 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 2 174 0 119 0 101 0 120 0 105 0 121 0 109 0 127 9 61 0 142 9 61 0 143 9 61 0 146 9 61 0 147 9 61 0 148 9 61 0 154 9 61 0 155 9 61 0 156 9 61 0 159 9 61 0 160 9 61 0 163 9 61 0 164 9 61 0 165 9 61 0 166 9 61 0 167 9 61 0 168 9 61 0 169 9 61 0 170 0 197 0 171 2 174 0 212] 
#[0 2 178 0 2 0 10 0 85 0 119 0 212] 
#[1 2 182 0 2 2 182 0 10 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 2 182 0 85 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 2 182 0 119 0 101 0 120 0 105 0 121 0 109 0 127 9 65 0 142 9 65 0 143 9 65 0 146 9 65 0 147 9 65 0 148 9 65 0 154 9 65 0 155 9 65 0 156 9 65 0 159 9 65 0 160 9 65 0 163 9 65 0 164 9 65 0 165 9 65 0 166 9 65 0 167 9 65 0 168 9 65 0 169 9 65 0 170 0 197 0 171 2 182 0 212] 
#[0 2 186 0 2 0 10 0 85 0 119 0 212] 
#[1 2 53 0 38 2 57 0 67 2 61 0 75 2 65 0 77 9 69 0 92 2 69 0 101] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 73 0 204 9 73 0 205 9 73 0 209 9 73 0 210 1 189 0 211] 
#[1 8 165 0 6 2 73 0 126 9 77 0 198] 
#[1 9 81 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 85 0 204 9 85 0 205 9 85 0 209 9 85 0 210 1 189 0 211] 
#[0 2 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 9 89 0 50] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 2 194 0 50 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[0 2 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 9 93 0 2 4 21 0 22 4 21 0 26 4 21 0 27 4 21 0 31 4 21 0 35 4 21 0 41 4 21 0 42 4 21 0 43 4 21 0 59 9 97 0 61 4 21 0 70 4 21 0 71 4 21 0 90 4 21 0 91 4 21 0 99 4 21 0 107 4 21 0 111 4 21 0 112 4 21 0 123 4 21 0 124 9 101 0 152 4 21 0 153] 
#[1 3 49 0 1 9 105 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 3 49 0 1 9 109 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[0 2 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 9 113 0 172 9 113 0 188 3 45 0 202 0 158 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 9 117 0 179 1 254 0 212] 
#[1 7 181 0 94 9 121 0 200] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 9 125 0 172 9 125 0 188 3 45 0 202 0 158 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 9 129 0 179 1 254 0 212] 
#[1 7 181 0 94 9 133 0 200] 
#[0 2 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 137 0 204 9 137 0 205 9 137 0 209 9 137 0 210 1 189 0 211] 
#[1 9 141 0 2 2 1 0 85 2 5 0 119] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 145 0 204 9 145 0 205 9 145 0 209 9 145 0 210 1 189 0 211] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 9 149 0 174 5 149 0 175 5 153 0 176 5 157 0 180 9 153 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 9 157 0 132] 
#[0 9 161 0 132] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 165 0 204 9 165 0 205 9 165 0 209 9 165 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 169 0 204 9 169 0 205 9 169 0 209 9 169 0 210 1 189 0 211] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 173 0 204 9 173 0 205 9 173 0 209 9 173 0 210 1 189 0 211] 
#[0 2 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 9 177 0 25] 
#[0 9 181 0 2] 
#[1 9 185 0 2 3 29 0 6 3 45 0 202] 
#[1 2 214 0 2 8 165 0 6 2 214 0 10 2 214 0 60 2 214 0 63 2 214 0 64 2 214 0 85 2 214 0 94 2 214 0 97 2 214 0 98 2 214 0 119 2 214 0 126 2 214 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 189 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 3 49 0 1 2 218 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 2 218 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 2 218 0 60 3 109 0 66 3 113 0 74 3 117 0 78 2 218 0 85 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 2 218 0 94 3 137 0 96 2 218 0 97 2 218 0 98 2 218 0 119 3 141 0 131 2 218 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 9 193 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 3 49 0 1 2 222 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 2 222 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 2 222 0 60 3 109 0 66 3 113 0 74 3 117 0 78 2 222 0 85 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 2 222 0 94 3 137 0 96 2 222 0 119 3 141 0 131 2 222 0 212] 
#[0 9 197 0 39] 
#[0 2 226 0 2 0 10 0 85 0 119 0 212] 
#[0 2 230 0 2 0 10 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 9 201 0 177 9 201 0 200 2 234 0 212] 
#[1 2 73 0 126 9 209 0 198] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 9 213 0 176 9 213 0 186 1 46 0 212] 
#[0 2 238 0 94] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 9 217 0 176 9 217 0 186 2 14 0 212] 
#[0 2 242 0 94] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 9 221 0 176 9 221 0 186 1 46 0 212] 
#[0 2 246 0 94] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 9 225 0 175 9 229 0 176 9 229 0 186 9 233 0 187 1 38 0 212] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 9 237 0 176 9 237 0 186 2 14 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 125 0 63 5 129 0 64 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 9 241 0 175 9 245 0 184 9 241 0 187 9 249 0 199 1 38 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 129 0 64 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 9 253 0 175 10 1 0 176 10 5 0 184 10 1 0 186 10 9 0 187 1 38 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 10 13 0 176 10 13 0 186 1 46 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 10 17 0 175 10 17 0 187 1 38 0 212] 
#[0 2 14 0 2 0 10 0 60 0 85 0 94 0 98 0 119 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 129 0 64 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 10 21 0 175 10 25 0 184 10 21 0 187 1 38 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 10 29 0 176 10 29 0 186 1 46 0 212] 
#[0 2 250 0 94] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 10 33 0 175 10 37 0 176 10 37 0 186 10 41 0 187 1 38 0 212] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 10 45 0 176 10 45 0 186 2 14 0 212] 
#[0 2 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 10 49 0 2] 
#[0 10 53 0 2] 
#[0 3 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 10 57 0 61] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 10 61 0 204 10 61 0 205 10 61 0 209 10 61 0 210 1 189 0 211] 
#[1 10 65 0 2 2 1 0 85 2 5 0 119] 
#[1 3 49 0 1 5 1 0 2 3 53 0 3 3 57 0 4 3 61 0 5 10 69 0 6 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[0 3 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 10 73 0 204 10 73 0 205 10 73 0 209 10 73 0 210 1 189 0 211] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 10 77 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 0 89 0 103 0 93 0 104 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 0 109 0 127 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 10 81 0 171 1 161 0 193 10 85 0 204 10 85 0 205 10 85 0 209 10 85 0 210 1 189 0 211] 
#[1 1 59 0 1 3 10 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 10 0 6 3 65 0 7 3 69 0 9 3 10 0 10 3 10 0 11 3 10 0 12 3 10 0 13 3 10 0 14 3 10 0 15 3 10 0 16 3 10 0 17 3 10 0 18 3 10 0 19 3 10 0 21 3 10 0 38 3 10 0 49 3 10 0 50 3 10 0 53 3 10 0 60 3 10 0 62 3 10 0 63 3 10 0 64 3 10 0 67 3 10 0 73 1 63 0 74 3 10 0 75 3 10 0 77 3 10 0 85 3 121 0 86 3 10 0 87 3 10 0 92 3 10 0 93 3 10 0 94 1 67 0 96 3 10 0 97 3 10 0 98 3 10 0 101 3 10 0 106 3 10 0 110 3 10 0 119 3 10 0 120 3 10 0 121 3 10 0 125 3 10 0 126 3 10 0 127 3 10 0 131 3 10 0 132 3 10 0 212] 
#[1 1 71 0 1 3 14 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 14 0 6 3 65 0 7 3 69 0 9 3 14 0 10 3 14 0 11 3 14 0 12 3 14 0 13 3 14 0 14 3 14 0 15 3 14 0 16 3 14 0 17 3 14 0 18 3 14 0 19 3 14 0 21 3 14 0 38 3 14 0 49 3 14 0 50 1 75 0 53 3 14 0 60 3 14 0 62 3 14 0 63 3 14 0 64 3 14 0 67 3 14 0 73 1 79 0 74 3 14 0 75 3 14 0 77 3 14 0 85 3 121 0 86 3 14 0 87 3 14 0 92 3 14 0 93 3 14 0 94 1 83 0 96 3 14 0 97 3 14 0 98 3 14 0 101 3 14 0 106 3 14 0 110 3 14 0 119 3 14 0 120 3 14 0 121 3 14 0 125 3 14 0 126 3 14 0 127 3 14 0 131 3 14 0 132 3 14 0 212] 
#[0 3 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 10 93 0 2 7 181 0 94 10 97 0 200] 
#[0 10 101 0 2] 
#[0 3 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 10 105 0 172 10 105 0 188 3 45 0 202 0 158 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 10 109 0 179 1 254 0 212] 
#[1 7 181 0 94 10 113 0 200] 
#[1 0 158 0 2 3 29 0 6 0 158 0 10 0 158 0 60 0 158 0 62 0 158 0 63 0 158 0 64 3 33 0 73 0 158 0 85 0 158 0 94 0 158 0 97 0 158 0 98 0 158 0 119 0 158 0 126 10 117 0 172 10 117 0 188 3 45 0 202 0 158 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 10 121 0 179 1 254 0 212] 
#[1 7 181 0 94 10 125 0 200] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 10 129 0 174 5 149 0 175 5 153 0 176 5 157 0 180 10 133 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 3 26 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 10 137 0 198] 
#[0 10 141 0 105] 
#[0 10 145 0 60] 
#[1 0 225 0 1 0 14 0 132 10 149 0 191 0 237 0 193] 
#[1 0 14 0 132 10 153 0 157 6 117 0 158 6 121 0 193 6 125 0 210] 
#[1 0 14 0 132 10 157 0 158 6 121 0 193 6 125 0 210] 
#[1 0 65 0 68 0 69 0 69 0 101 0 120 10 161 0 156 10 165 0 159] 
#[1 3 30 0 2 3 30 0 10 10 169 0 49 3 30 0 85 3 30 0 119 3 30 0 212] 
#[1 4 97 0 8 1 30 0 14] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 10 173 0 204 10 173 0 205 10 173 0 209 10 173 0 210 1 189 0 211] 
#[0 3 34 0 2 0 10 0 85 0 119 0 212] 
#[0 3 38 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[1 10 177 0 2 10 181 0 6] 
#[0 10 185 0 132] 
#[0 10 189 0 19] 
#[1 10 193 0 2 2 1 0 85 2 5 0 119] 
#[1 7 181 0 94 10 197 0 200] 
#[0 10 201 0 72] 
#[0 3 42 0 19] 
#[1 0 14 0 132 10 205 0 151 0 217 0 193 6 193 0 211] 
#[0 3 46 0 2 0 6] 
#[1 0 9 0 20 0 13 0 24 0 17 0 33 0 21 0 34 0 25 0 37 0 29 0 40 0 33 0 44 0 37 0 45 0 41 0 48 0 45 0 50 0 49 0 54 0 53 0 55 0 57 0 56 0 61 0 65 0 65 0 68 0 69 0 69 0 73 0 80 0 77 0 81 0 81 0 84 0 85 0 102 0 89 0 103 0 93 0 104 0 97 0 106 0 101 0 120 0 105 0 121 0 109 0 127 10 209 0 141 0 125 0 142 0 125 0 143 0 125 0 146 0 125 0 147 0 125 0 148 0 125 0 154 0 125 0 155 0 125 0 156 0 125 0 159 0 125 0 160 0 125 0 163 0 125 0 164 0 125 0 165 0 125 0 166 0 125 0 167 0 125 0 168 0 125 0 169 0 125 0 170 0 197 0 171] 
#[0 3 50 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 1 190 0 2 0 59 0 38 0 63 0 67 0 67 0 75 0 71 0 77 6 237 0 92 0 79 0 101 6 241 0 195 10 213 0 196] 
#[1 1 190 0 2 0 59 0 38 0 63 0 67 0 67 0 75 0 71 0 77 6 237 0 92 0 79 0 101 6 241 0 195 10 217 0 196] 
#[1 10 221 0 2 2 158 0 38 2 158 0 67 2 158 0 75 2 158 0 77 2 158 0 101] 
#[1 0 225 0 1 0 14 0 132 10 225 0 191 0 237 0 193] 
#[1 0 225 0 1 0 14 0 132 10 229 0 191 0 237 0 193] 
#[0 3 54 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 3 58 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 3 49 0 1 3 62 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 62 0 6 3 65 0 7 3 69 0 9 3 62 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 62 0 17 3 97 0 18 3 105 0 21 3 62 0 38 3 62 0 60 3 62 0 63 3 62 0 64 3 109 0 66 3 62 0 67 3 113 0 74 3 62 0 75 3 62 0 77 3 117 0 78 3 62 0 85 3 121 0 86 3 125 0 87 3 129 0 88 3 62 0 92 3 133 0 93 3 62 0 94 3 137 0 96 3 62 0 97 3 62 0 98 3 62 0 101 3 62 0 106 3 62 0 119 3 62 0 121 3 62 0 126 3 141 0 131 3 62 0 212] 
#[1 1 190 0 2 1 190 0 6 1 190 0 10 1 190 0 17 0 59 0 38 1 190 0 60 1 190 0 63 1 190 0 64 0 63 0 67 0 67 0 75 0 71 0 77 1 190 0 85 0 75 0 92 1 190 0 94 1 190 0 97 1 190 0 98 0 79 0 101 1 190 0 106 1 190 0 119 1 190 0 121 1 190 0 126 6 241 0 195 10 233 0 196 1 190 0 212] 
#[1 1 190 0 2 1 190 0 6 1 190 0 10 1 190 0 17 0 59 0 38 1 190 0 60 1 190 0 63 1 190 0 64 0 63 0 67 0 67 0 75 0 71 0 77 1 190 0 85 0 75 0 92 1 190 0 94 1 190 0 97 1 190 0 98 0 79 0 101 1 190 0 106 1 190 0 119 1 190 0 121 1 190 0 126 6 241 0 195 10 237 0 196 1 190 0 212] 
#[1 0 89 0 103 0 93 0 104 10 241 0 122 0 109 0 127 10 245 0 171] 
#[1 10 249 0 2 3 29 0 6 3 45 0 202] 
#[0 10 253 0 1] 
#[0 3 66 0 2 0 10 0 85 0 119 0 212] 
#[1 0 89 0 103 0 93 0 104 11 1 0 122 0 109 0 127 11 5 0 171] 
#[1 11 9 0 2 3 29 0 6 3 45 0 202] 
#[0 11 13 0 1] 
#[0 3 70 0 2 0 10 0 85 0 119 0 212] 
#[0 3 74 0 2 0 10 0 85 0 119 0 212] 
#[0 3 78 0 2 0 10 0 85 0 119 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 11 17 0 204 11 17 0 205 11 17 0 209 11 17 0 210 1 189 0 211] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 11 21 0 125 3 141 0 131 11 25 0 144 11 29 0 145] 
#[0 3 82 0 2 0 10 0 85 0 119 0 212] 
#[1 11 33 0 66 11 37 0 88] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 86 0 49 3 86 0 50 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 86 0 125 3 141 0 131] 
#[0 3 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 3 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 11 41 0 134] 
#[1 11 45 0 2 11 49 0 61] 
#[0 3 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 3 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 11 53 0 174 5 149 0 175 5 153 0 176 5 157 0 180 11 57 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 3 106 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 11 61 0 198] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 11 65 0 174 5 149 0 175 5 153 0 176 5 157 0 180 11 69 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 3 110 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 11 73 0 198] 
#[1 3 49 0 1 11 77 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[0 1 87 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 3 49 0 1 11 81 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 11 85 0 60 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 11 89 0 179 1 254 0 212] 
#[1 7 181 0 94 11 93 0 200] 
#[1 11 97 0 2 11 101 0 127] 
#[1 11 105 0 2 11 109 0 127] 
#[1 3 49 0 1 11 113 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 3 49 0 1 11 117 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 3 49 0 1 11 121 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 11 125 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 3 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 3 122 0 2 0 10 0 60 0 62 0 63 0 64 0 85 0 94 0 97 0 98 0 119 0 126 0 212] 
#[1 3 126 0 2 3 29 0 6 3 126 0 10 3 126 0 60 3 126 0 64 3 126 0 85 3 126 0 94 3 126 0 97 3 126 0 98 3 126 0 119 3 45 0 202 3 126 0 212] 
#[1 3 130 0 2 3 29 0 6 3 130 0 10 3 130 0 60 3 130 0 85 3 130 0 94 3 130 0 98 3 130 0 119 3 45 0 202 3 130 0 212] 
#[0 3 134 0 2 0 10 0 85 0 119 0 212] 
#[0 3 138 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 3 142 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 11 129 0 179 1 254 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 11 133 0 177 11 133 0 200 2 234 0 212] 
#[0 3 146 0 94] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 11 137 0 177 11 137 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 11 141 0 176 11 141 0 186 1 46 0 212] 
#[0 3 150 0 94] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 11 145 0 176 11 145 0 186 2 14 0 212] 
#[0 3 154 0 94] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 11 149 0 176 11 149 0 186 1 46 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 11 153 0 175 11 153 0 187 1 38 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 5 129 0 64 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 11 157 0 175 11 161 0 184 11 157 0 187 1 38 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 11 165 0 176 11 165 0 186 1 46 0 212] 
#[0 3 158 0 94] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 0 83 0 94 5 133 0 97 0 55 0 98 1 38 0 119 11 169 0 175 11 173 0 176 11 173 0 186 11 177 0 187 1 38 0 212] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 11 181 0 176 11 181 0 186 2 14 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 11 185 0 177 11 185 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 11 189 0 176 11 189 0 186 1 46 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 11 193 0 176 11 193 0 186 1 46 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 11 197 0 175 11 197 0 187 1 38 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 11 201 0 177 11 201 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 11 205 0 176 11 205 0 186 1 46 0 212] 
#[0 3 162 0 94] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 11 209 0 176 11 209 0 186 2 14 0 212] 
#[0 3 166 0 94] 
#[0 3 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 3 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 11 213 0 134] 
#[1 1 91 0 1 3 178 0 2 1 95 0 3 1 99 0 4 1 103 0 5 3 178 0 6 1 107 0 7 1 111 0 9 3 178 0 10 1 115 0 11 1 119 0 12 1 123 0 13 1 127 0 14 1 131 0 15 1 135 0 16 3 178 0 17 1 139 0 18 3 178 0 19 1 143 0 21 3 178 0 38 3 178 0 49 3 178 0 50 3 178 0 53 3 178 0 60 3 178 0 62 3 178 0 63 3 178 0 64 1 147 0 66 3 178 0 67 3 178 0 73 1 151 0 74 3 178 0 75 3 178 0 77 1 155 0 78 3 178 0 85 1 159 0 86 1 163 0 87 1 167 0 88 3 178 0 92 1 171 0 93 3 178 0 94 1 175 0 96 3 178 0 97 3 178 0 98 3 178 0 101 3 178 0 106 3 178 0 110 3 178 0 119 3 178 0 120 3 178 0 121 3 178 0 125 3 178 0 126 3 178 0 127 1 179 0 131 3 178 0 132 3 178 0 212] 
#[0 1 183 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 11 217 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 1 187 0 1 3 186 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 186 0 6 3 65 0 7 3 69 0 9 3 186 0 10 3 186 0 11 3 186 0 12 3 186 0 13 3 186 0 14 3 186 0 15 3 186 0 16 3 186 0 17 3 186 0 18 3 186 0 19 3 186 0 21 3 186 0 38 3 186 0 49 3 186 0 50 3 186 0 53 3 186 0 60 3 186 0 62 3 186 0 63 3 186 0 64 3 186 0 67 3 186 0 73 1 191 0 74 3 186 0 75 3 186 0 77 3 186 0 85 3 121 0 86 3 186 0 87 3 186 0 92 3 186 0 93 3 186 0 94 1 195 0 96 3 186 0 97 3 186 0 98 3 186 0 101 3 186 0 106 3 186 0 110 3 186 0 119 3 186 0 120 3 186 0 121 3 186 0 125 3 186 0 126 3 186 0 127 3 186 0 131 3 186 0 132 3 186 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 11 221 0 204 11 221 0 205 11 221 0 209 11 221 0 210 1 189 0 211] 
#[1 11 225 0 2 2 1 0 85 2 5 0 119] 
#[1 3 49 0 1 5 1 0 2 3 53 0 3 3 57 0 4 3 61 0 5 11 229 0 6 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 11 233 0 204 11 233 0 205 11 233 0 209 11 233 0 210 1 189 0 211] 
#[0 3 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 11 237 0 2] 
#[0 3 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 11 241 0 174 5 149 0 175 5 153 0 176 5 157 0 180 11 245 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 3 198 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 11 249 0 198] 
#[1 0 47 0 2 0 47 0 10 0 47 0 60 5 121 0 62 5 125 0 63 5 129 0 64 0 47 0 85 0 51 0 94 5 133 0 97 0 55 0 98 0 47 0 119 2 73 0 126 5 141 0 173 11 253 0 174 5 149 0 175 5 153 0 176 5 157 0 180 12 1 0 181 5 165 0 184 5 153 0 186 5 173 0 187 5 177 0 189 5 181 0 198 5 185 0 199 0 47 0 212] 
#[0 3 202 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 12 5 0 198] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 9 0 179 1 254 0 212] 
#[1 7 181 0 94 12 13 0 200] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 17 0 179 1 254 0 212] 
#[0 3 206 0 2 0 10 0 85 0 119 0 212] 
#[0 12 21 0 105] 
#[1 3 210 0 2 3 210 0 6 3 210 0 10 2 53 0 38 3 210 0 60 3 210 0 63 3 210 0 64 2 57 0 67 2 61 0 75 2 65 0 77 3 210 0 85 3 210 0 94 3 210 0 97 3 210 0 98 2 69 0 101 3 210 0 106 3 210 0 119 3 210 0 126 3 210 0 212] 
#[1 3 214 0 2 8 173 0 6 3 214 0 10 3 214 0 85 3 214 0 119 2 73 0 126 12 25 0 198 3 214 0 212] 
#[0 3 218 0 2 0 6 0 10 0 49 0 85 0 119 0 125 0 126 0 212] 
#[0 3 222 0 2 0 10 0 85 0 119 0 212] 
#[0 3 226 0 2 0 10 0 85 0 119 0 212] 
#[1 0 65 0 68 0 69 0 69 0 101 0 120 12 29 0 156 12 33 0 159] 
#[1 3 49 0 1 3 230 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 230 0 6 3 65 0 7 3 69 0 9 3 230 0 10 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 230 0 49 3 109 0 66 3 113 0 74 3 117 0 78 3 230 0 85 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 230 0 119 3 230 0 125 3 230 0 126 3 141 0 131 3 230 0 212] 
#[1 3 234 0 2 3 234 0 6 3 234 0 20 3 234 0 24 12 37 0 32 3 234 0 33 3 234 0 34 3 234 0 37 3 234 0 40 3 234 0 44 3 234 0 45 3 234 0 48 3 234 0 50 3 234 0 54 3 234 0 55 3 234 0 56 3 234 0 61 3 234 0 65 3 234 0 68 3 234 0 69 3 234 0 80 3 234 0 81 3 234 0 84 3 234 0 102 3 234 0 103 3 234 0 104 3 234 0 106 3 234 0 120 3 234 0 121 3 234 0 127] 
#[0 12 41 0 135] 
#[0 3 238 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 12 45 0 1] 
#[0 3 242 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 3 246 0 2 0 10 0 85 0 119 0 212] 
#[0 3 250 0 2 0 10 0 85 0 119 0 212] 
#[0 3 254 0 2 0 6] 
#[1 0 6 0 2 0 6 0 10 12 49 0 140] 
#[1 12 53 0 2 3 54 0 38 3 54 0 67 3 54 0 75 3 54 0 77 3 54 0 101] 
#[1 12 57 0 2 3 58 0 38 3 58 0 67 3 58 0 75 3 58 0 77 3 58 0 101] 
#[0 4 2 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 1 190 0 2 0 59 0 38 0 63 0 67 0 67 0 75 0 71 0 77 6 237 0 92 0 79 0 101 6 241 0 195 12 61 0 196] 
#[1 1 190 0 2 0 59 0 38 0 63 0 67 0 67 0 75 0 71 0 77 6 237 0 92 0 79 0 101 6 241 0 195 12 65 0 196] 
#[0 4 6 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 4 10 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 12 69 0 1] 
#[1 4 14 0 2 4 14 0 10 2 1 0 85 2 5 0 119 4 14 0 212] 
#[0 4 18 0 2 0 10 0 85 0 119 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 12 73 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[0 12 77 0 1] 
#[1 4 22 0 2 4 22 0 10 2 1 0 85 2 5 0 119 4 22 0 212] 
#[0 4 26 0 2 0 10 0 85 0 119 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 12 81 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 3 49 0 1 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 11 21 0 125 3 141 0 131 12 85 0 144 11 29 0 145] 
#[1 12 89 0 83 12 93 0 88] 
#[1 4 30 0 2 4 30 0 10 4 30 0 85 4 30 0 119 11 21 0 125 12 97 0 145 4 30 0 212] 
#[0 4 34 0 2 0 10 0 85 0 119 0 125 0 212] 
#[0 12 101 0 1] 
#[0 12 105 0 66] 
#[0 12 109 0 2] 
#[0 4 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 12 113 0 134] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 117 0 179 1 254 0 212] 
#[1 7 181 0 94 12 121 0 200] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 125 0 179 1 254 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 129 0 179 1 254 0 212] 
#[1 7 181 0 94 12 133 0 200] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 137 0 179 1 254 0 212] 
#[0 4 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 4 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 12 141 0 204 12 141 0 205 12 141 0 209 12 141 0 210 1 189 0 211] 
#[0 4 50 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 12 145 0 198] 
#[0 4 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 12 149 0 51] 
#[0 4 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 12 153 0 51] 
#[0 4 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 4 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 4 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 4 74 0 2 3 29 0 6 4 74 0 10 4 74 0 60 4 74 0 85 4 74 0 119 4 74 0 126 3 45 0 202 4 74 0 212] 
#[0 4 78 0 2 0 10 0 85 0 119 0 212] 
#[0 4 82 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 4 86 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 12 157 0 177 12 157 0 200 2 234 0 212] 
#[0 4 90 0 94] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 12 161 0 177 12 161 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 12 165 0 176 12 165 0 186 1 46 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 12 169 0 176 12 169 0 186 1 46 0 212] 
#[1 1 38 0 2 1 38 0 10 1 38 0 60 1 38 0 85 1 38 0 94 5 133 0 97 1 38 0 98 1 38 0 119 12 173 0 175 12 173 0 187 1 38 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 12 177 0 177 12 177 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 12 181 0 176 12 181 0 186 1 46 0 212] 
#[0 4 94 0 94] 
#[1 2 14 0 2 2 14 0 10 2 14 0 60 2 14 0 85 0 87 0 94 0 91 0 98 2 14 0 119 12 185 0 176 12 185 0 186 2 14 0 212] 
#[0 4 98 0 94] 
#[0 4 102 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 12 189 0 177 12 189 0 200 2 234 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 12 193 0 177 12 193 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 12 197 0 176 12 197 0 186 1 46 0 212] 
#[0 4 106 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 12 201 0 177 12 201 0 200 2 234 0 212] 
#[0 4 110 0 94] 
#[0 12 205 0 2] 
#[1 12 209 0 2 3 29 0 6 3 45 0 202] 
#[1 1 199 0 1 4 114 0 2 1 203 0 3 1 207 0 4 1 211 0 5 4 114 0 6 1 215 0 7 1 219 0 9 4 114 0 10 1 223 0 11 1 227 0 12 1 231 0 13 1 235 0 14 1 239 0 15 1 243 0 16 4 114 0 17 1 247 0 18 4 114 0 19 1 251 0 21 4 114 0 38 4 114 0 49 4 114 0 50 4 114 0 53 4 114 0 60 4 114 0 62 4 114 0 63 4 114 0 64 1 255 0 66 4 114 0 67 4 114 0 73 2 3 0 74 4 114 0 75 4 114 0 77 2 7 0 78 4 114 0 85 2 11 0 86 2 15 0 87 2 19 0 88 4 114 0 92 2 23 0 93 4 114 0 94 2 27 0 96 4 114 0 97 4 114 0 98 4 114 0 101 4 114 0 106 4 114 0 110 4 114 0 119 4 114 0 120 4 114 0 121 4 114 0 125 4 114 0 126 4 114 0 127 2 31 0 131 4 114 0 132 4 114 0 212] 
#[0 2 35 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 12 213 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 2 39 0 1 4 122 0 2 3 53 0 3 3 57 0 4 3 61 0 5 4 122 0 6 3 65 0 7 3 69 0 9 4 122 0 10 4 122 0 11 4 122 0 12 4 122 0 13 4 122 0 14 4 122 0 15 4 122 0 16 4 122 0 17 4 122 0 18 4 122 0 19 4 122 0 21 4 122 0 38 4 122 0 49 4 122 0 50 4 122 0 53 4 122 0 60 4 122 0 62 4 122 0 63 4 122 0 64 4 122 0 67 4 122 0 73 2 43 0 74 4 122 0 75 4 122 0 77 4 122 0 85 3 121 0 86 4 122 0 87 4 122 0 92 4 122 0 93 4 122 0 94 2 47 0 96 4 122 0 97 4 122 0 98 4 122 0 101 4 122 0 106 4 122 0 110 4 122 0 119 4 122 0 120 4 122 0 121 4 122 0 125 4 122 0 126 4 122 0 127 4 122 0 131 4 122 0 132 4 122 0 212] 
#[0 4 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 217 0 179 1 254 0 212] 
#[1 7 181 0 94 12 221 0 200] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 225 0 179 1 254 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 229 0 179 1 254 0 212] 
#[1 7 181 0 94 12 233 0 200] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 12 237 0 179 1 254 0 212] 
#[0 4 130 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 12 241 0 198] 
#[0 4 134 0 2 0 10 0 85 0 119 0 212] 
#[0 4 138 0 2 0 10 0 85 0 119 0 212] 
#[0 4 142 0 2 0 10 0 85 0 119 0 212] 
#[0 4 146 0 2 0 10 0 85 0 119 0 212] 
#[0 4 150 0 2 0 10 0 85 0 119 0 212] 
#[0 12 245 0 106] 
#[0 12 249 0 2] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 12 253 0 171] 
#[1 13 1 0 2 4 53 0 10] 
#[0 4 154 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 4 158 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 13 5 0 2 4 6 0 38 4 6 0 67 4 6 0 75 4 6 0 77 4 6 0 101] 
#[1 13 9 0 2 4 10 0 38 4 10 0 67 4 10 0 75 4 10 0 77 4 10 0 101] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 13 13 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 13 17 0 2 3 29 0 6 3 45 0 202] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 13 21 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 13 25 0 2 3 29 0 6 3 45 0 202] 
#[1 4 162 0 2 4 162 0 10 4 162 0 85 4 162 0 119 11 21 0 125 12 97 0 145 4 162 0 212] 
#[0 13 29 0 110] 
#[0 13 33 0 83] 
#[0 4 166 0 2 0 10 0 85 0 119 0 125 0 212] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 13 37 0 171] 
#[0 13 41 0 1] 
#[0 4 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 13 45 0 2] 
#[0 4 174 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 13 49 0 198] 
#[0 4 178 0 2 0 10 0 85 0 119 0 212] 
#[0 4 182 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 13 53 0 198] 
#[0 4 186 0 2 0 10 0 85 0 119 0 212] 
#[1 3 49 0 1 13 57 0 2 3 53 0 3 3 57 0 4 3 61 0 5 3 65 0 7 3 69 0 9 3 73 0 11 3 77 0 12 3 81 0 13 3 85 0 14 3 89 0 15 3 93 0 16 3 97 0 18 3 105 0 21 3 109 0 66 3 113 0 74 3 117 0 78 3 121 0 86 3 125 0 87 3 129 0 88 3 133 0 93 3 137 0 96 3 141 0 131] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 13 61 0 179 1 254 0 212] 
#[0 13 65 0 2] 
#[0 13 69 0 2] 
#[0 4 190 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 4 194 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 13 73 0 177 13 73 0 200 2 234 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 13 77 0 177 13 77 0 200 2 234 0 212] 
#[1 1 46 0 2 1 46 0 10 1 46 0 60 1 46 0 85 1 46 0 94 5 137 0 98 1 46 0 119 13 81 0 176 13 81 0 186 1 46 0 212] 
#[0 4 198 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 13 85 0 177 13 85 0 200 2 234 0 212] 
#[0 4 202 0 94] 
#[0 4 206 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 4 210 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 13 89 0 177 13 89 0 200 2 234 0 212] 
#[0 4 214 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 4 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 4 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 13 93 0 2 3 29 0 6 3 45 0 202] 
#[0 4 226 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 13 97 0 198] 
#[0 4 230 0 2 0 10 0 85 0 119 0 212] 
#[0 4 234 0 2 0 10 0 85 0 119 0 212] 
#[1 2 73 0 126 13 101 0 198] 
#[0 4 238 0 2 0 10 0 85 0 119 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 13 105 0 179 1 254 0 212] 
#[0 13 109 0 132] 
#[1 4 242 0 2 4 242 0 6 4 242 0 20 4 242 0 24 13 113 0 32 4 242 0 33 4 242 0 34 4 242 0 37 4 242 0 40 4 242 0 44 4 242 0 45 4 242 0 48 4 242 0 50 4 242 0 54 4 242 0 55 4 242 0 56 4 242 0 61 4 242 0 65 4 242 0 68 4 242 0 69 4 242 0 80 4 242 0 81 4 242 0 84 4 242 0 102 4 242 0 103 4 242 0 104 4 242 0 106 4 242 0 120 4 242 0 121 4 242 0 127] 
#[1 13 117 0 2 2 1 0 85 2 5 0 119] 
#[0 4 246 0 2 0 10 0 85 0 119 0 212] 
#[0 4 250 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[0 4 254 0 2 0 6 0 10 0 17 0 38 0 60 0 63 0 64 0 67 0 75 0 77 0 85 0 92 0 94 0 97 0 98 0 101 0 106 0 119 0 121 0 126 0 212] 
#[1 13 121 0 2 3 29 0 6 3 45 0 202] 
#[0 5 2 0 2 0 10 0 85 0 119 0 212] 
#[1 13 125 0 2 3 29 0 6 3 45 0 202] 
#[0 5 6 0 2 0 10 0 85 0 119 0 212] 
#[0 13 129 0 120] 
#[0 13 133 0 110] 
#[1 13 137 0 2 2 1 0 85 2 5 0 119] 
#[1 0 89 0 103 0 93 0 104 0 109 0 127 13 141 0 171] 
#[0 5 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 13 145 0 179 1 254 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 13 149 0 179 1 254 0 212] 
#[0 5 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 5 18 0 2 0 10 0 85 0 119 0 212] 
#[0 5 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 5 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 5 30 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 5 34 0 2 0 10 0 60 0 85 0 119 0 212] 
#[1 2 234 0 2 2 234 0 10 2 234 0 60 2 234 0 85 7 181 0 94 2 234 0 119 13 153 0 177 13 153 0 200 2 234 0 212] 
#[0 5 38 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 5 42 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 5 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 13 157 0 179 1 254 0 212] 
#[1 1 254 0 2 1 254 0 10 7 213 0 60 1 254 0 85 1 254 0 119 7 217 0 178 13 161 0 179 1 254 0 212] 
#[0 5 50 0 2 0 10 0 85 0 119 0 212] 
#[0 5 54 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 13 165 0 106] 
#[0 5 58 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[0 5 62 0 2 0 10 0 85 0 119 0 212] 
#[0 5 66 0 2 0 10 0 85 0 119 0 212] 
#[0 13 169 0 106] 
#[0 13 173 0 69] 
#[0 5 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[1 13 177 0 2 2 1 0 85 2 5 0 119] 
#[0 5 74 0 2 0 10 0 85 0 119 0 212] 
#[0 5 78 0 2 0 10 0 85 0 119 0 212] 
#[0 5 82 0 2 0 10 0 60 0 85 0 119 0 212] 
#[0 5 86 0 2 0 10 0 85 0 119 0 212] 
#[0 5 90 0 2 0 10 0 85 0 119 0 212] 
#[0 13 181 0 132] 
#[1 0 14 0 132 13 185 0 157 6 117 0 158 6 121 0 193 6 125 0 210] 
#[0 13 189 0 1] 
#[0 5 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 18 0 19 0 21 0 38 0 49 0 50 0 53 0 60 0 62 0 63 0 64 0 66 0 67 0 73 0 74 0 75 0 77 0 78 0 85 0 86 0 87 0 88 0 92 0 93 0 94 0 96 0 97 0 98 0 101 0 106 0 110 0 119 0 120 0 121 0 125 0 126 0 127 0 131 0 132 0 212] 
#[0 5 98 0 2 0 6 0 20 0 24 0 33 0 34 0 37 0 40 0 44 0 45 0 48 0 50 0 54 0 55 0 56 0 61 0 65 0 68 0 69 0 80 0 81 0 84 0 102 0 103 0 104 0 106 0 120 0 121 0 127] 
#[1 5 102 0 2 8 173 0 6 5 102 0 10 5 102 0 85 5 102 0 119 5 102 0 125 5 102 0 212] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 13 193 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 13 197 0 2 3 29 0 6 3 45 0 202] 
#[1 5 106 0 2 5 106 0 10 5 106 0 85 5 106 0 119 13 201 0 122 5 106 0 125 5 106 0 212] 
#[0 13 205 0 1] 
#[1 1 61 0 1 0 14 0 3 1 65 0 5 1 69 0 7 1 73 0 28 1 77 0 30 1 81 0 36 1 85 0 41 1 97 0 57 1 101 0 58 1 105 0 72 1 109 0 88 1 113 0 89 1 117 0 108 1 121 0 111 1 125 0 112 1 133 0 116 1 137 0 117 1 141 0 118 1 145 0 130 0 14 0 132 1 149 0 133 1 153 0 134 1 157 0 135 1 161 0 193 13 209 0 201 1 169 0 203 1 173 0 204 1 173 0 205 1 173 0 209 1 173 0 210 1 189 0 211] 
#[1 13 213 0 2 3 29 0 6 3 45 0 202] 
#[0 5 110 0 2 0 10 0 85 0 119 0 125 0 212]
	).
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression1: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression2: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result whens.
	result else: (nodes at: 3).
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression3: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result endToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCaseExpression4: nodes [
	| result |
	result := TeradataCaseExpressionNode new.
	result caseToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result whens.
	result else: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement1: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result forToken: (nodes at: 3).
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckWorkloadStatement2: nodes [
	| result |
	result := TeradataCheckWorkloadStatementNode new.
	result checkToken: (nodes at: 1).
	result workloadToken: (nodes at: 2).
	result endToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement1: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCheckpointStatement2: nodes [
	| result |
	result := TeradataCheckpointStatementNode new.
	result checkpointToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result intervalToken: (nodes at: 3).
	result interal: (nodes at: 4).
	result endToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForCreateMacroStatement1: nodes [
	| result |
	result := TeradataCreateMacroStatementNode new.
	result createToken: (nodes at: 1).
	result macroToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 2) to: result parameters.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addToken: ((nodes at: 4) at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result statements.
	result addTokens: ((nodes at: 7) at: 2) to: result semicolons.
	result addTokens: (nodes at: 8) to: result semicolons.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDatabaseStatement1: nodes [
	| result |
	result := TeradataDatabaseStatementNode new.
	result databaseToken: (nodes at: 1).
	result database: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery10: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery11: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result whereToken: ((nodes at: 4) at: 1).
	result where: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery12: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result fromToken: (nodes at: 2).
	result table: (nodes at: 3).
	result allToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery7: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery8: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result whereToken: ((nodes at: 3) at: 1).
	result where: ((nodes at: 3) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDeleteQuery9: nodes [
	| result |
	result := TeradataDeleteQueryNode new.
	result _deleteToken: (nodes at: 1).
	result table: (nodes at: 2).
	result allToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForDropTableQuery1: nodes [
	| result |
	result := TeradataDropTableQueryNode new.
	result dropToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForElseExpression1: nodes [
	| result |
	result := TeradataElseExpressionNode new.
	result elseToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement3: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExecuteStatement4: nodes [
	| result |
	result := TeradataExecuteStatementNode new.
	result executeToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression11: nodes [
	| result |
	result := TeradataBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression25: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression26: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result likeToken: (nodes at: 2).
	result like: (nodes at: 3).
	result escapeToken: (nodes at: 4).
	result escape: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression27: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression28: nodes [
	| result |
	result := TeradataLikeExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result likeToken: (nodes at: 3).
	result like: (nodes at: 4).
	result escapeToken: (nodes at: 5).
	result escape: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression29: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression2: nodes [
	| result |
	result := TeradataVariableExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression30: nodes [
	| result |
	result := TeradataSubstringExpressionNode new.
	result substringToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result from: (nodes at: 5).
	result forToken: (nodes at: 6).
	result for: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression31: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result nullToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression32: nodes [
	| result |
	result := TeradataIsNullExpressionNode new.
	result value: (nodes at: 1).
	result _isToken: (nodes at: 2).
	result notToken: (nodes at: 3).
	result nullToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression33: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression34: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addNode: (nodes at: 3) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression35: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNode: (nodes at: 4) to: result values.
	result addToken: (nodes at: 5) to: result commas.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression36: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result values.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression37: nodes [
	| result |
	result := TeradataInValueExpressionNode new.
	result testValue: (nodes at: 1).
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result commas.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression38: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result inToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression39: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addNode: (nodes at: 1) to: result values.
	result notToken: (nodes at: 2).
	result inToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result query: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression3: nodes [
	| result |
	result := TeradataLiteralExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression40: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result inToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result query: (nodes at: 8).
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression41: nodes [
	| result |
	result := TeradataInQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result addNode: (nodes at: 2) to: result values.
	result addToken: (nodes at: 3) to: result commas.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result notToken: (nodes at: 6).
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result query: (nodes at: 9).
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression42: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result formatToken: (nodes at: 3).
	result format: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression43: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression44: nodes [
	| result |
	result := TeradataConversionExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result comma: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression45: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression46: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result formatToken: (nodes at: 5).
	result format: (nodes at: 6).
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression47: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression48: nodes [
	| result |
	result := TeradataCastExpressionNode new.
	result castToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result formatToken: (nodes at: 6).
	result format: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression50: nodes [
	| result |
	result := TeradataUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression51: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result betweenToken: (nodes at: 2).
	result first: (nodes at: 3).
	result andToken: (nodes at: 4).
	result last: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression52: nodes [
	| result |
	result := TeradataBetweenExpressionNode new.
	result value: (nodes at: 1).
	result notToken: (nodes at: 2).
	result betweenToken: (nodes at: 3).
	result first: (nodes at: 4).
	result andToken: (nodes at: 5).
	result last: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression53: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression54: nodes [
	| result |
	result := TeradataTrimExpressionNode new.
	result trimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result positionToken: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression57: nodes [
	| result |
	result := TeradataQueryExpressionNode new.
	result addToken: (nodes at: 1) to: result leftParens.
	result query: (nodes at: 2).
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression59: nodes [
	| result |
	result := TeradataExtractExpressionNode new.
	result extractToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result name: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result value: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression5: nodes [
	| result |
	result := TeradataNullExpressionNode new.
	result nullToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression60: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression61: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression62: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression63: nodes [
	| result |
	result := TeradataOverExpressionNode new.
	result value: (nodes at: 1).
	result overToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result partition: (nodes at: 4).
	result orderBy: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression64: nodes [
	| result |
	result := TeradataIntervalExpressionNode new.
	result intervalToken: (nodes at: 1).
	result interval: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression65: nodes [
	| result |
	result := TeradataCaseSpecificExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result caseSpecificToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression66: nodes [
	| result |
	result := TeradataTitleExpressionNode new.
	result value: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result titleToken: (nodes at: 3).
	result title: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression67: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression69: nodes [
	| result |
	result := TeradataCountExpressionNode new.
	result countToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result countType: (nodes at: 3).
	result value: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression6: nodes [
	| result |
	result := TeradataStarExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result star: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression72: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression73: nodes [
	| result |
	result := TeradataTimestampExpressionNode new.
	result typeToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression76: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result existsToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result query: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression77: nodes [
	| result |
	result := TeradataExistsExpressionNode new.
	result notToken: (nodes at: 1).
	result existsToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression78: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression79: nodes [
	| result |
	result := TeradataTranslateExpressionNode new.
	result translateToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result operation: (nodes at: 5).
	result withToken: (nodes at: 6).
	result errorToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpression82: nodes [
	| result |
	result := TeradataXmlAggExpressionNode new.
	result xmlaggToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result orderBy: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForExpressionList2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile1: nodes [
	| result |
	result := TeradataFileNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result statements.
	result addTokens: ((nodes at: 1) at: 2) to: result semicolons.
	result addTokens: (nodes at: 2) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFile2: nodes [
	| result |
	result := TeradataFileNode new.
	result addTokens: (nodes at: 1) to: result semicolons.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFromTables1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression1: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForFunctionExpression2: nodes [
	| result |
	result := TeradataFunctionExpressionNode new.
	result function: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForGroupByExpression1: nodes [
	| result |
	result := TeradataGroupByNode new.
	result groupToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHavingExpression1: nodes [
	| result |
	result := TeradataHavingNode new.
	result havingToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForHelpSessionStatement1: nodes [
	| result |
	result := TeradataHelpSessionStatementNode new.
	result helpToken: (nodes at: 1).
	result sessionToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifier1: nodes [
	| result |
	result := TeradataIdentifierExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIdentifierName1: nodes [
	| result |
	result := TeradataIdentifierNameNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery11: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result query: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery12: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result query: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery5: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result valuesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery6: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result table: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result valuesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result leftParens.
	result addNodes: ((nodes at: 8) at: 1) to: result values.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result addToken: (nodes at: 9) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery7: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result valuesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result values.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForInsertQuery8: nodes [
	| result |
	result := TeradataInsertQueryNode new.
	result insertToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result table: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result valuesToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result leftParens.
	result addNodes: ((nodes at: 9) at: 1) to: result values.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result addToken: (nodes at: 10) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForIntoExpression1: nodes [
	| result |
	result := TeradataIntoExpressionNode new.
	result intoToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement1: nodes [
	| result |
	result := TeradataBeginLoadingStatementNode new.
	result beginToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	result table: (nodes at: 3).
	result errorfilesToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result withToken: (nodes at: 6).
	result intervalToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLoadingStatement2: nodes [
	| result |
	result := TeradataEndLoadingStatementNode new.
	result endToken: (nodes at: 1).
	result loadingToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement5: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement6: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result table: (nodes at: 2).
	result forToken: (nodes at: 3).
	result lock: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement7: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForLockTableStatement8: nodes [
	| result |
	result := TeradataLockTableStatementNode new.
	result lockToken: (nodes at: 1).
	result tableToken: (nodes at: 2).
	result table: (nodes at: 3).
	result forToken: (nodes at: 4).
	result lock: (nodes at: 5).
	result statement: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMacroArgs2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery1: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result mergeTable: (nodes at: 2).
	result usingToken: (nodes at: 3).
	result usingTable: (nodes at: 4).
	result onToken: (nodes at: 5).
	result condition: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForMergeQuery2: nodes [
	| result |
	result := TeradataMergeQueryNode new.
	result mergeToken: (nodes at: 1).
	result intoToken: (nodes at: 2).
	result mergeTable: (nodes at: 3).
	result usingToken: (nodes at: 4).
	result usingTable: (nodes at: 5).
	result onToken: (nodes at: 6).
	result condition: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result whenMerges.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression2: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result alias: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForNamedExpression3: nodes [
	| result |
	result := TeradataAliasedExpressionNode new.
	result expression: (nodes at: 1).
	result asToken: (nodes at: 2).
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForOrderByExpression1: nodes [
	| result |
	result := TeradataOrderByExpressionNode new.
	result orderToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForParameter1: nodes [
	| result |
	result := TeradataParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForPartitionByExpression1: nodes [
	| result |
	result := TeradataPartitionByExpressionNode new.
	result partitionToken: (nodes at: 1).
	result byToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForQualifyExpression1: nodes [
	| result |
	result := TeradataQualifyExpressionNode new.
	result qualifyToken: (nodes at: 1).
	result condition: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForRollbackStatement1: nodes [
	| result |
	result := TeradataRollbackStatementNode new.
	result rollbackToken: (nodes at: 1).
	result workToken: (nodes at: 2).
	result work: (nodes at: 3).
	result fromToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result tables.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result whereToken: ((nodes at: 6) at: 1).
	result where: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery10: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result topToken: (nodes at: 3).
	result top: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result into: (nodes at: 6).
	result partition: ((nodes at: 7) at: 1).
	result qualify: ((nodes at: 7) at: 2).
	result orderBy: ((nodes at: 7) at: 3).
	result having: ((nodes at: 7) at: 4).
	result group: ((nodes at: 7) at: 5).
	result whereToken: ((nodes at: 7) at: 6).
	result where: ((nodes at: 7) at: 7).
	result fromToken: ((nodes at: 7) at: 8).
	result addNodes: ((nodes at: 7) at: 9) to: result tables.
	result addTokens: ((nodes at: 7) at: 10) to: result commas.
	result forToken: ((nodes at: 8) at: 1).
	result cursorToken: ((nodes at: 8) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery19: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result into: (nodes at: 3).
	result qualify: ((nodes at: 4) at: 1).
	result partition: ((nodes at: 4) at: 2).
	result having: ((nodes at: 4) at: 3).
	result group: ((nodes at: 4) at: 4).
	result fromToken: ((nodes at: 4) at: 5).
	result addNodes: ((nodes at: 4) at: 6) to: result tables.
	result addTokens: ((nodes at: 4) at: 7) to: result commas.
	result orderBy: (nodes at: 5).
	result whereToken: ((nodes at: 6) at: 1).
	result where: ((nodes at: 6) at: 2).
	result forToken: ((nodes at: 7) at: 1).
	result cursorToken: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery20: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result topToken: (nodes at: 2).
	result top: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result into: (nodes at: 5).
	result qualify: ((nodes at: 6) at: 1).
	result partition: ((nodes at: 6) at: 2).
	result having: ((nodes at: 6) at: 3).
	result group: ((nodes at: 6) at: 4).
	result fromToken: ((nodes at: 6) at: 5).
	result addNodes: ((nodes at: 6) at: 6) to: result tables.
	result addTokens: ((nodes at: 6) at: 7) to: result commas.
	result orderBy: (nodes at: 7).
	result whereToken: ((nodes at: 8) at: 1).
	result where: ((nodes at: 8) at: 2).
	result forToken: ((nodes at: 9) at: 1).
	result cursorToken: ((nodes at: 9) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery21: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result into: (nodes at: 4).
	result qualify: ((nodes at: 5) at: 1).
	result partition: ((nodes at: 5) at: 2).
	result having: ((nodes at: 5) at: 3).
	result group: ((nodes at: 5) at: 4).
	result fromToken: ((nodes at: 5) at: 5).
	result addNodes: ((nodes at: 5) at: 6) to: result tables.
	result addTokens: ((nodes at: 5) at: 7) to: result commas.
	result orderBy: (nodes at: 6).
	result whereToken: ((nodes at: 7) at: 1).
	result where: ((nodes at: 7) at: 2).
	result forToken: ((nodes at: 8) at: 1).
	result cursorToken: ((nodes at: 8) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery22: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result topToken: (nodes at: 3).
	result top: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result values.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result into: (nodes at: 6).
	result qualify: ((nodes at: 7) at: 1).
	result partition: ((nodes at: 7) at: 2).
	result having: ((nodes at: 7) at: 3).
	result group: ((nodes at: 7) at: 4).
	result fromToken: ((nodes at: 7) at: 5).
	result addNodes: ((nodes at: 7) at: 6) to: result tables.
	result addTokens: ((nodes at: 7) at: 7) to: result commas.
	result orderBy: (nodes at: 8).
	result whereToken: ((nodes at: 9) at: 1).
	result where: ((nodes at: 9) at: 2).
	result forToken: ((nodes at: 10) at: 1).
	result cursorToken: ((nodes at: 10) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery25: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result leftParen: ((nodes at: 3) at: 1).
	result right: ((nodes at: 3) at: 2).
	result rightParen: ((nodes at: 3) at: 3).
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery26: nodes [
	| result |
	result := TeradataUnionQueryNode new.
	result left: (nodes at: 1).
	result unionToken: (nodes at: 2).
	result allToken: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result right: ((nodes at: 4) at: 2).
	result rightParen: ((nodes at: 4) at: 3).
	result orderBy: ((nodes at: 4) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery27: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result withTables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery28: nodes [
	| result |
	result := TeradataWithQueryNode new.
	result withToken: (nodes at: 1).
	result recursiveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result withTables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statement: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery29: nodes [
	| result |
	result := TeradataMinusQueryNode new.
	result left: (nodes at: 1).
	result minusToken: (nodes at: 2).
	result leftParen: ((nodes at: 3) at: 1).
	result right: ((nodes at: 3) at: 2).
	result rightParen: ((nodes at: 3) at: 3).
	result orderBy: ((nodes at: 3) at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery7: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result values.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result into: (nodes at: 3).
	result partition: ((nodes at: 4) at: 1).
	result qualify: ((nodes at: 4) at: 2).
	result orderBy: ((nodes at: 4) at: 3).
	result having: ((nodes at: 4) at: 4).
	result group: ((nodes at: 4) at: 5).
	result whereToken: ((nodes at: 4) at: 6).
	result where: ((nodes at: 4) at: 7).
	result fromToken: ((nodes at: 4) at: 8).
	result addNodes: ((nodes at: 4) at: 9) to: result tables.
	result addTokens: ((nodes at: 4) at: 10) to: result commas.
	result forToken: ((nodes at: 5) at: 1).
	result cursorToken: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery8: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result topToken: (nodes at: 2).
	result top: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result values.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result into: (nodes at: 5).
	result partition: ((nodes at: 6) at: 1).
	result qualify: ((nodes at: 6) at: 2).
	result orderBy: ((nodes at: 6) at: 3).
	result having: ((nodes at: 6) at: 4).
	result group: ((nodes at: 6) at: 5).
	result whereToken: ((nodes at: 6) at: 6).
	result where: ((nodes at: 6) at: 7).
	result fromToken: ((nodes at: 6) at: 8).
	result addNodes: ((nodes at: 6) at: 9) to: result tables.
	result addTokens: ((nodes at: 6) at: 10) to: result commas.
	result forToken: ((nodes at: 7) at: 1).
	result cursorToken: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSelectQuery9: nodes [
	| result |
	result := TeradataSelectQueryNode new.
	result selectToken: (nodes at: 1).
	result distinctToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result into: (nodes at: 4).
	result partition: ((nodes at: 5) at: 1).
	result qualify: ((nodes at: 5) at: 2).
	result orderBy: ((nodes at: 5) at: 3).
	result having: ((nodes at: 5) at: 4).
	result group: ((nodes at: 5) at: 5).
	result whereToken: ((nodes at: 5) at: 6).
	result where: ((nodes at: 5) at: 7).
	result fromToken: ((nodes at: 5) at: 8).
	result addNodes: ((nodes at: 5) at: 9) to: result tables.
	result addTokens: ((nodes at: 5) at: 10) to: result commas.
	result forToken: ((nodes at: 6) at: 1).
	result cursorToken: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetExpression1: nodes [
	| result |
	result := TeradataSetExpressionNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement1: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result forToken: (nodes at: 5).
	result sessionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForSetStatement2: nodes [
	| result |
	result := TeradataSetStatementNode new.
	result setToken: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result updateToken: (nodes at: 5).
	result forToken: (nodes at: 6).
	result sessionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForStatements2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable11: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result type: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable12: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result joinToken: (nodes at: 3).
	result right: (nodes at: 4).
	result onToken: ((nodes at: 5) at: 1).
	result on: ((nodes at: 5) at: 2).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable13: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result direction: (nodes at: 3).
	result type: (nodes at: 4).
	result joinToken: (nodes at: 5).
	result right: (nodes at: 6).
	result onToken: ((nodes at: 7) at: 1).
	result on: ((nodes at: 7) at: 2).
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable16: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result leftParen: (nodes at: 1).
	result left: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	result rightParen: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable1: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable2: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result alias: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable3: nodes [
	| result |
	result := TeradataTableNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result names.
	result addTokens: ((nodes at: 1) at: 2) to: result periods.
	result addToken: (nodes at: 2) to: result names.
	result asToken: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable4: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable5: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result alias: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable6: nodes [
	| result |
	result := TeradataSelectTableNode new.
	result leftParen: (nodes at: 1).
	result query: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result asToken: (nodes at: 4).
	result alias: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable7: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result joinToken: (nodes at: 2).
	result right: (nodes at: 3).
	result onToken: ((nodes at: 4) at: 1).
	result on: ((nodes at: 4) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTable8: nodes [
	| result |
	result := TeradataJoinTableNode new.
	result left: (nodes at: 1).
	result direction: (nodes at: 2).
	result type: (nodes at: 3).
	result joinToken: (nodes at: 4).
	result right: (nodes at: 5).
	result onToken: ((nodes at: 6) at: 1).
	result on: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement1: nodes [
	| result |
	result := TeradataBeginTransactionStatementNode new.
	result beginToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForTransactionStatement2: nodes [
	| result |
	result := TeradataEndTransactionStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType1: nodes [
	| result |
	result := TeradataTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType2: nodes [
	| result |
	result := TeradataTypeNode new.
	result name: (nodes at: 1).
	result characterToken: (nodes at: 2).
	result setToken: (nodes at: 3).
	result encoding: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType3: nodes [
	| result |
	result := TeradataTypeNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType4: nodes [
	| result |
	result := TeradataTypeNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result characterToken: (nodes at: 5).
	result setToken: (nodes at: 6).
	result encoding: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType5: nodes [
	| result |
	result := TeradataTypeNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForType6: nodes [
	| result |
	result := TeradataTypeNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result precision: (nodes at: 3).
	result comma: (nodes at: 4).
	result scale: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result characterToken: (nodes at: 7).
	result setToken: (nodes at: 8).
	result encoding: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUnionSelectQuery2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery1: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery3: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result elseToken: (nodes at: 5).
	result else: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery4: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result whereToken: ((nodes at: 5) at: 1).
	result where: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery6: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result setToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result whereToken: ((nodes at: 5) at: 1).
	result where: ((nodes at: 5) at: 2).
	result elseToken: (nodes at: 6).
	result else: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery7: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUpdateQuery8: nodes [
	| result |
	result := TeradataUpdateQueryNode new.
	result updateToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result tables.
	result fromToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result tables.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result whereToken: ((nodes at: 7) at: 1).
	result where: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn1: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumn2: nodes [
	| result |
	result := TeradataUsingColumnNode new.
	result name: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result type: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingColumns2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result columns.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statement: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForUsingStatement2: nodes [
	| result |
	result := TeradataUsingStatementNode new.
	result usingToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result columns.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result statement: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpression1: nodes [
	| result |
	result := TeradataWhenExpressionNode new.
	result whenToken: (nodes at: 1).
	result condition: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenExpressions1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition1: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result matchedToken: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result updateToken: (nodes at: 4).
	result setToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result setExpressions.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition2: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWhenMergeCondition3: nodes [
	| result |
	result := TeradataWhenMergeConditionNode new.
	result whenToken: (nodes at: 1).
	result notToken: (nodes at: 2).
	result matchedToken: (nodes at: 3).
	result thenToken: (nodes at: 4).
	result insertToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result addNodes: ((nodes at: 7) at: 1) to: result values.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	result valuesToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result leftParens.
	result addNodes: ((nodes at: 11) at: 1) to: result values.
	result addTokens: ((nodes at: 11) at: 2) to: result commas.
	result addToken: (nodes at: 12) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable1: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result query: (nodes at: 4).
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionForWithTable2: nodes [
	| result |
	result := TeradataWithTableDefinitionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 1) to: result values.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result leftParens.
	result query: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___10: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 2 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___11: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___12: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___13: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___14: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___15: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___16: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 1 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___1: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___2: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___3: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___4: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___5: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___7: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___8: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___9: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 5 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify____1: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___10: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___11: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 5 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___12: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 5 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	result at: 2 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___13: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 6 put: ((nodes at: 2) at: 1).
	result at: 7 put: ((nodes at: 2) at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___14: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 6 put: ((nodes at: 2) at: 1).
	result at: 7 put: ((nodes at: 2) at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	result at: 2 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___15: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 6 put: ((nodes at: 2) at: 1).
	result at: 7 put: ((nodes at: 2) at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	result at: 2 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___16: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 6 put: ((nodes at: 2) at: 1).
	result at: 7 put: ((nodes at: 2) at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	result at: 1 put: (nodes at: 5).
	result at: 2 put: (nodes at: 6).
	result at: 3 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___1: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___2: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___3: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 5 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___4: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 5 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___5: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 6 put: ((nodes at: 1) at: 1).
	result at: 7 put: ((nodes at: 1) at: 2).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___6: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 6 put: ((nodes at: 1) at: 1).
	result at: 7 put: ((nodes at: 1) at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___7: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 6 put: ((nodes at: 1) at: 1).
	result at: 7 put: ((nodes at: 1) at: 2).
	result at: 5 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___8: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 6 put: ((nodes at: 1) at: 1).
	result at: 7 put: ((nodes at: 1) at: 2).
	result at: 5 put: (nodes at: 2).
	result at: 4 put: (nodes at: 3).
	result at: 1 put: (nodes at: 4).
	result at: 2 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy___9: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 8 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____1: nodes [
	| result |
	result := Array new: 10.
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_FromTables__WhereExpression__GroupByExpression___group___HavingExpression__having___PartitionByExpression__partition___QualifyExpression__qualify___OrderByExpression__orderBy____2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__ON___onToken__Expression__on___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor_____semicolon__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
TeradataParser >> reduceActionFor__identifier___name_______period___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #testing }
TeradataParser >> tryAllTokens [
	^ true
]

{ #category : #testing }
TeradataParser >> useAllTokenIds [
	^ false
]
