Class {
	#name : #VBNetParser,
	#superclass : #SmaCCGLRParser,
	#classInstVars : [
		'keywords'
	],
	#category : #'SmaCC_VB_NET_Parser'
}

{ #category : #generated }
VBNetParser class >> ambiguousTransitions [
^#(
#[ 0 26 0 30 0 34] 
#[ 0 26 0 34] 
#[ 0 238 2 29] 
#[ 1 34 2 29] 
#[ 1 166 2 193] 
#[ 1 170 2 201] 
#[ 1 182 2 245] 
#[ 1 182 3 137] 
#[ 1 214 2 29] 
#[ 1 246 2 201] 
#[ 2 6 5 129] 
#[ 2 25 2 86] 
#[ 2 102 5 233] 
#[ 0 238 2 134] 
#[ 0 238 2 29 2 134] 
#[ 2 150 2 225] 
#[ 2 201 3 234] 
#[ 2 29 3 242] 
#[ 2 29 4 10] 
#[ 2 29 4 14] 
#[ 2 29 4 18] 
#[ 2 29 4 22] 
#[ 2 29 4 30] 
#[ 2 29 4 42] 
#[ 4 42 7 253] 
#[ 2 29 4 50] 
#[ 3 18 4 78] 
#[ 2 225 4 102] 
#[ 2 245 4 106] 
#[ 3 137 4 106] 
#[ 3 9 4 122] 
#[ 4 122 10 153] 
#[ 3 89 4 122] 
#[ 4 122 10 157] 
#[ 4 122 10 161] 
#[ 4 122 10 165] 
#[ 4 122 10 169] 
#[ 4 122 10 173] 
#[ 4 122 10 177] 
#[ 4 122 10 181] 
#[ 4 122 10 185] 
#[ 4 122 10 189] 
#[ 4 198 11 209] 
#[ 0 26 0 30 0 34 1 173 4 182 4 186 4 190 4 194 4 198 4 202 4 206] 
#[ 4 182 4 198 11 221] 
#[ 4 182 11 225] 
#[ 4 182 4 198 4 206 11 229] 
#[ 4 182 4 194 4 198 4 206 11 233] 
#[ 4 182 4 198 4 206 11 237] 
#[ 4 182 4 198 4 206 11 241] 
#[ 0 26 0 34 4 182] 
#[ 0 26 0 30 0 34 1 185 4 182 4 186 4 190 4 194 4 198 4 202 4 206] 
#[ 4 198 4 206] 
#[ 0 26 0 30 0 34 1 189 4 182 4 186 4 190 4 194 4 198 4 202 4 206] 
#[ 0 26 0 30 0 34 1 193 4 182 4 186 4 190 4 194 4 198 4 202 4 206] 
#[ 4 198 11 245] 
#[ 0 26 0 30 0 34 4 182 4 186 4 190 4 194 4 198 4 206 11 249] 
#[ 4 182 4 190 4 198 4 202 4 206 11 253] 
#[ 4 182 4 202] 
#[ 4 198 12 5] 
#[ 2 201 4 218] 
#[ 2 201 4 222] 
#[ 2 29 4 234] 
#[ 2 29 4 246] 
#[ 2 225 4 254] 
#[ 0 238 5 2] 
#[ 2 225 4 106] 
#[ 2 29 5 70] 
#[ 2 29 5 74] 
#[ 2 29 5 78] 
#[ 2 29 5 82] 
#[ 2 29 5 86] 
#[ 2 29 5 90] 
#[ 2 29 5 94] 
#[ 2 29 5 98] 
#[ 2 29 5 102] 
#[ 2 29 5 106] 
#[ 2 29 5 110] 
#[ 2 29 5 114] 
#[ 2 29 5 118] 
#[ 2 29 5 122] 
#[ 2 29 5 126] 
#[ 2 29 5 130] 
#[ 2 29 5 134] 
#[ 2 29 5 138] 
#[ 2 29 5 142] 
#[ 2 29 5 146] 
#[ 2 29 5 150] 
#[ 2 29 5 154] 
#[ 2 29 5 158] 
#[ 2 29 5 162] 
#[ 2 225 5 174] 
#[ 2 29 5 182] 
#[ 3 173 4 162] 
#[ 2 29 5 194] 
#[ 2 29 5 214] 
#[ 3 9 5 214] 
#[ 3 89 5 214] 
#[ 2 29 5 226] 
#[ 3 9 5 226] 
#[ 3 89 5 226] 
#[ 2 29 2 134] 
#[ 2 134 5 234] 
#[ 6 166 15 41] 
#[ 2 29 6 166] 
#[ 6 166 15 45] 
#[ 6 166 15 49] 
#[ 6 166 15 53] 
#[ 6 166 15 57] 
#[ 6 166 15 61] 
#[ 6 166 15 69] 
#[ 6 166 15 73] 
#[ 6 166 15 77] 
#[ 7 6 7 14] 
#[ 0 26 0 30 0 34 7 6 7 10 7 14] 
#[ 7 70 7 74] 
#[ 7 78 7 82] 
#[ 7 86 7 90] 
#[ 7 102 7 106] 
#[ 4 182 4 194 4 198 4 206 7 214 11 233] 
#[ 0 26 0 30 0 34 1 193 4 182 4 186 4 190 4 194 4 198 4 202 4 206 7 214] 
#[ 0 26 0 30 0 34 4 182 4 186 4 190 4 194 4 198 4 206 7 214 11 249] 
#[ 4 182 4 190 4 198 4 202 4 206 7 214 11 253] 
#[ 2 201 7 218] 
#[ 2 29 7 234] 
#[ 3 186 8 10] 
#[ 7 253 8 10] 
#[ 4 106 8 18] 
#[ 2 29 8 38] 
#[ 2 29 8 42] 
#[ 2 29 8 46] 
#[ 2 29 8 50] 
#[ 2 29 8 54] 
#[ 2 29 8 58] 
#[ 2 29 8 62] 
#[ 2 29 8 66] 
#[ 2 29 8 70] 
#[ 2 29 8 74] 
#[ 2 29 8 78] 
#[ 2 29 8 82] 
#[ 2 29 8 86] 
#[ 2 29 8 90] 
#[ 2 29 8 94] 
#[ 2 29 8 98] 
#[ 2 29 8 102] 
#[ 2 29 8 106] 
#[ 2 29 8 110] 
#[ 2 29 8 114] 
#[ 2 29 8 118] 
#[ 2 29 8 122] 
#[ 2 29 8 126] 
#[ 2 29 8 130] 
#[ 2 225 8 134] 
#[ 2 29 8 150] 
#[ 8 158 9 101] 
#[ 2 29 8 162] 
#[ 2 29 8 194] 
#[ 2 29 8 198] 
#[ 2 134 8 238] 
#[ 0 238 19 77] 
#[ 2 29 8 254] 
#[ 2 29 9 22] 
#[ 2 29 9 26] 
#[ 2 134 8 242] 
#[ 2 29 9 50] 
#[ 2 29 8 242] 
#[ 1 190 2 241] 
#[ 1 190 2 29] 
#[ 1 190 3 1] 
#[ 1 190 3 5] 
#[ 1 190 3 9] 
#[ 1 186 1 190] 
#[ 0 221 1 190] 
#[ 0 225 1 190] 
#[ 1 190 3 17] 
#[ 1 190 3 21] 
#[ 1 190 3 25] 
#[ 1 190 3 29] 
#[ 1 190 3 33] 
#[ 1 190 3 37] 
#[ 1 190 3 41] 
#[ 1 190 3 45] 
#[ 1 190 3 49] 
#[ 1 190 3 53] 
#[ 1 190 3 57] 
#[ 1 190 3 61] 
#[ 1 190 3 65] 
#[ 1 190 3 69] 
#[ 1 190 3 73] 
#[ 1 190 3 77] 
#[ 1 190 3 81] 
#[ 0 229 1 190] 
#[ 0 233 1 190] 
#[ 0 237 1 190] 
#[ 1 190 3 85] 
#[ 0 241 1 190] 
#[ 1 190 3 89] 
#[ 1 190 3 93] 
#[ 1 190 3 97] 
#[ 1 190 3 101] 
#[ 0 249 1 190] 
#[ 0 253 1 190] 
#[ 1 190 3 105] 
#[ 1 190 3 109] 
#[ 1 190 3 113] 
#[ 1 190 3 117] 
#[ 1 5 1 190] 
#[ 1 9 1 190] 
#[ 1 13 1 190] 
#[ 1 17 1 190] 
#[ 1 21 1 190] 
#[ 1 190 3 125] 
#[ 1 190 3 129] 
#[ 1 25 1 190] 
#[ 1 29 1 190] 
#[ 1 33 1 190] 
#[ 1 190 3 133] 
#[ 1 190 3 141] 
#[ 1 190 3 145] 
#[ 1 190 3 149] 
#[ 1 190 3 153] 
#[ 1 190 3 157] 
#[ 1 190 3 161] 
#[ 1 190 3 165] 
#[ 1 190 3 173] 
#[ 2 29 9 110] 
#[ 2 29 9 114] 
#[ 2 29 9 118] 
#[ 2 29 10 194] 
#[ 2 29 10 230] 
#[ 7 253 10 238] 
#[ 4 230 10 246] 
#[ 2 29 11 10] 
#[ 3 9 11 10] 
#[ 3 89 11 10] 
#[ 9 133 11 10] 
#[ 9 157 11 10] 
#[ 11 18 19 13] 
#[ 11 30 19 13] 
#[ 2 29 11 34] 
#[ 2 225 11 38] 
#[ 2 29 11 46] 
#[ 2 225 11 66] 
#[ 2 225 11 86] 
#[ 2 225 11 90] 
#[ 2 241 3 170] 
#[ 2 29 3 170] 
#[ 3 1 3 170] 
#[ 3 5 3 170] 
#[ 3 9 3 170] 
#[ 1 186 3 170] 
#[ 0 221 3 170] 
#[ 0 225 3 170] 
#[ 3 17 3 170] 
#[ 3 21 3 170] 
#[ 3 25 3 170] 
#[ 3 29 3 170] 
#[ 3 33 3 170] 
#[ 3 37 3 170] 
#[ 3 41 3 170] 
#[ 3 45 3 170] 
#[ 3 49 3 170] 
#[ 3 53 3 170] 
#[ 3 57 3 170] 
#[ 3 61 3 170] 
#[ 3 65 3 170] 
#[ 3 69 3 170] 
#[ 3 73 3 170] 
#[ 3 77 3 170] 
#[ 3 81 3 170] 
#[ 0 229 3 170] 
#[ 0 233 3 170] 
#[ 0 237 3 170] 
#[ 3 85 3 170] 
#[ 0 241 3 170] 
#[ 3 89 3 170] 
#[ 3 93 3 170] 
#[ 3 97 3 170] 
#[ 3 101 3 170] 
#[ 0 249 3 170] 
#[ 0 253 3 170] 
#[ 3 105 3 170] 
#[ 3 109 3 170] 
#[ 3 113 3 170] 
#[ 3 117 3 170] 
#[ 1 5 3 170] 
#[ 1 9 3 170] 
#[ 1 13 3 170] 
#[ 1 17 3 170] 
#[ 1 21 3 170] 
#[ 3 125 3 170] 
#[ 3 129 3 170] 
#[ 1 25 3 170] 
#[ 1 29 3 170] 
#[ 1 33 3 170] 
#[ 3 133 3 170] 
#[ 3 141 3 170] 
#[ 3 145 3 170] 
#[ 3 149 3 170] 
#[ 3 153 3 170] 
#[ 3 157 3 170] 
#[ 3 161 3 170] 
#[ 3 165 3 170] 
#[ 3 170 3 173] 
#[ 2 29 11 98] 
#[ 2 29 11 102] 
#[ 2 225 11 110] 
#[ 2 29 11 118] 
#[ 11 118 24 165] 
#[ 11 118 24 169] 
#[ 2 29 11 134] 
#[ 2 29 11 138] 
#[ 2 29 11 142] 
#[ 2 29 11 146] 
#[ 2 29 11 150] 
#[ 2 29 12 150] 
#[ 12 226 19 13] 
#[ 2 29 12 238] 
#[ 2 29 12 242] 
#[ 2 241 5 190] 
#[ 2 29 5 190 11 10] 
#[ 2 249 5 190 11 10] 
#[ 2 253 5 190 11 10] 
#[ 3 1 5 190] 
#[ 5 190 11 10] 
#[ 5 190 9 77] 
#[ 3 5 5 190] 
#[ 3 9 5 190 11 10] 
#[ 1 186 5 190] 
#[ 0 221 5 190] 
#[ 0 225 5 190] 
#[ 3 17 5 190] 
#[ 3 21 5 190] 
#[ 3 25 5 190] 
#[ 3 29 5 190] 
#[ 3 33 5 190] 
#[ 3 37 5 190] 
#[ 3 41 5 190] 
#[ 3 45 5 190] 
#[ 3 49 5 190] 
#[ 3 53 5 190] 
#[ 3 57 5 190] 
#[ 3 61 5 190] 
#[ 3 65 5 190] 
#[ 3 69 5 190] 
#[ 3 73 5 190] 
#[ 3 77 5 190] 
#[ 3 81 5 190] 
#[ 5 190 9 81] 
#[ 0 229 5 190] 
#[ 5 190 9 85] 
#[ 5 190 9 89] 
#[ 0 233 5 190] 
#[ 0 237 5 190] 
#[ 5 190 9 93] 
#[ 3 85 5 190] 
#[ 5 190 9 97] 
#[ 0 241 5 190] 
#[ 5 190 9 101] 
#[ 5 190 9 105] 
#[ 5 190 9 109] 
#[ 5 190 9 113] 
#[ 5 190 9 117] 
#[ 3 89 5 190 11 10] 
#[ 3 93 5 190] 
#[ 3 97 5 190] 
#[ 5 190 9 121] 
#[ 5 190 9 125] 
#[ 0 249 5 190] 
#[ 0 253 5 190] 
#[ 3 105 5 190] 
#[ 5 190 9 129] 
#[ 3 109 5 190] 
#[ 3 113 5 190] 
#[ 3 117 5 190] 
#[ 1 5 5 190] 
#[ 5 190 9 133 11 10] 
#[ 5 190 9 137] 
#[ 5 190 9 141] 
#[ 5 190 9 145] 
#[ 5 190 9 149] 
#[ 5 190 9 153] 
#[ 1 9 5 190] 
#[ 5 190 9 157 11 10] 
#[ 1 13 5 190] 
#[ 1 17 5 190] 
#[ 5 190 9 161] 
#[ 5 190 9 165] 
#[ 1 21 5 190] 
#[ 5 190 9 169] 
#[ 5 190 9 173] 
#[ 5 190 9 177] 
#[ 3 125 5 190] 
#[ 3 129 5 190] 
#[ 1 25 5 190] 
#[ 1 29 5 190] 
#[ 1 33 5 190] 
#[ 5 190 9 181] 
#[ 5 190 9 185] 
#[ 5 190 9 189] 
#[ 5 190 9 193] 
#[ 3 133 5 190] 
#[ 3 141 5 190] 
#[ 3 145 5 190] 
#[ 5 190 9 201] 
#[ 3 149 5 190] 
#[ 3 153 5 190] 
#[ 3 157 5 190] 
#[ 3 161 5 190] 
#[ 3 165 5 190] 
#[ 5 190 9 205] 
#[ 13 6 28 13] 
#[ 2 29 13 26] 
#[ 2 29 13 42] 
#[ 2 29 13 58] 
#[ 2 29 13 66] 
#[ 2 225 13 98] 
#[ 2 29 13 102] 
#[ 2 29 13 106] 
#[ 2 29 14 178] 
#[ 2 29 14 226] 
#[ 2 29 16 94] 
#[ 2 29 16 154] 
#[ 2 29 16 174] 
#[ 2 29 16 190] 
#[ 2 29 18 10] 
#[ 2 29 18 198] 
#[ 3 9 18 198] 
#[ 3 89 18 198] 
#[ 2 29 18 226] 
#[ 2 29 19 178] 
#[ 3 9 19 178] 
#[ 3 89 19 178] 
#[ 2 29 19 186] 
#[ 2 29 19 190] 
#[ 3 9 19 190] 
#[ 3 89 19 190] 
#[ 2 29 19 210] 
#[ 2 225 20 114] 
#[ 2 29 20 130] 
#[ 2 29 21 18] 
#[ 3 9 21 18] 
#[ 3 89 21 18] 
#[ 2 29 21 22] 
#[ 2 29 21 170]
	).
]

{ #category : #'generated-accessing' }
VBNetParser class >> cacheId [
	^'2020-06-22T15:24:43.225644-05:00'
]

{ #category : #generated }
VBNetParser class >> definitionComment [
"/* Much of this grammar was copied and modified for SmaCC from https://github.com/dotnet/vblang/tree/master/spec
(commit 19ec79a287fb79180b05a0ad20e8291e75fc63df) which has the following license:
---------------------------------
The MIT License (MIT)

Copyright (c) .NET Foundation and Contributors

All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the ""Software""), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
---------------------------------
*/

%glr;
%ignorecase;
%id <LineTerminator> <Identifier> <IdentifierOrKeyword>;

%ignore_variable_warning <LineTerminator>;

%left ""Xor"";
%left ""Or"" ""OrElse"";
%left ""And"" ""AndAlso"";
%right ""Not"";
%nonassoc ""=""  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"";
%left ""+"" ""-"";
%left ""Mod"";
%left ""\"";
%left ""*"" ""/"";
# unary negation
%right ""^"";
%right ""Await"";

%prefix VBNet;
%suffix Node;
%root Program;

%hierarchy Expression (
    AddressOfExpression
    AnonymousCreationExpression
    ArrayCreationExpression
    AwaitExpression
    BinaryExpression
    CastExpression
    CollectionInitializer
    ConditionalExpression
    DictionaryAccessExpression
    GetTypeExpression
    InvocationExpression
    InstanceExpression
    LambdaExpression
    Literal
    MemberAccessExpression
    ObjectCreationExpression
    PrimitiveCastExpression
    QueryExpression
    SimpleNameExpression
    TypeOfIsExpression
    UnaryExpression
);
%hierarchy LambdaExpression (
    FunctionLambdaExpression
    SubLambdaExpression
);
%hierarchy Literal (
    BooleanLiteral
    CharacterLiteral
    DateLiteral
    FloatingPointLiteral
    IntegerLiteral
    NothingLiteral
    StringLiteral
);
%hierarchy Statement (
    AddHandlerStatement
    AssignmentStatement
    ContinueStatement
    DoLoopStatement
    EndStatement
    EraseStatement
    ErrorStatement
    ExitStatement
    ForEachStatement
    ForStatement
    GoToStatement
    IfStatement
    InvocationStatement
    LabelDeclarationStatement
    LocalDeclarationStatement
    MidAssignmentStatement
    OnErrorStatement
    RaiseEventStatement
    RedimStatement
    RemoveHandlerStatement
    ResumeStatement
    ReturnStatement
    SelectStatement
    StopStatement
    SyncLockStatement
    ThrowStatement
    TryStatement
    UsingStatement
    WhileStatement
    WithStatement
    YieldStatement
);
%hierarchy DoLoopStatement (
    DoBottomLoopStatement
    DoTopLoopStatement
);

File : <LineTerminator>* Start {{}};


# 2. Lexical grammar


<Character>:
    [^\r\n\x2028\x2029]
    ;

<LineTerminator>    ###
    : \r
    | \n
    | \r\n
    | \x2028
    | \x2029
    ;

<LineContinuation>
    : _ <whitespace>* (\r\n? | \n | \x2028 | \x2029) ###
    ;

Comma
    : "","" 'comma' <LineTerminator>?
    ;

#Period
#    : ""."" 'period' <LineTerminator>?
#    ;

OpenParenthesis
    : ""("" 'leftParen' <LineTerminator>?
    ;

CloseParenthesis
    : <LineTerminator>? "")"" 'rightParen'
    ;

OpenCurlyBrace
    : ""{"" 'leftBrace' <LineTerminator>?
    ;

CloseCurlyBrace
    : <LineTerminator>? ""}"" 'rightBrace'
    ;

Equals
    : ""="" 'equals' <LineTerminator>?
    ;

ColonEquals
    : "":="" 'colonEquals' <LineTerminator>?
    ;

<whitespace>
    : [\t\ ]+
    ;

<comment>
    : <CommentMarker> <Character>*
    ;

<CommentMarker>
    : <SingleQuoteCharacter>
    | REM
    ;

<SingleQuoteCharacter>
    : \'
    | \x2018
    | \x2019
    ;

<NonEscapedIdentifier>
    : <IdentifierName> # <Any IdentifierName but not Keyword>
    ;

<EscapedIdentifier>
    : \[ <IdentifierName> \]
    ;

<IdentifierName>
    : <IdentifierStart> <IdentifierCharacter>*
    ;

<IdentifierStart>
    : <AlphaCharacter>
    | <UnderscoreCharacter> <IdentifierCharacter>
    ;

<IdentifierCharacter>
    : <UnderscoreCharacter>
    | <AlphaCharacter>
    | <NumericCharacter>
    | <CombiningCharacter>
#    | <FormattingCharacter>
    ;

<AlphaCharacter>
    : <isLetter>
    ;

<NumericCharacter>
    : <isDigit>
    ;

<CombiningCharacter>
    : [\x0300-\x036F]
    ;

#<FormattingCharacter>
#    : \<Unicode\ formatting\ character\ class\ Cf\>
#    ;

<UnderscoreCharacter>
    : _ # <Unicode connection character class Pc>
    ;

<TypeCharacter>
    : <IntegerTypeCharacter>
    | <LongTypeCharacter>
    | <DecimalTypeCharacter>
    | <SingleTypeCharacter>
    | <DoubleTypeCharacter>
    | <StringTypeCharacter>
    ;

<IntegerTypeCharacter>
    : \%
    ;

<LongTypeCharacter>
    : \&
    ;

<DecimalTypeCharacter>
    : \@
    ;

<SingleTypeCharacter>
    : \!
    ;

<DoubleTypeCharacter>
    : \#
    ;

<StringTypeCharacter>
    : \$
    ;

Literal
    : <BooleanLiteral> 'value' {{BooleanLiteral}}
    | <IntegerLiteral> 'value' {{IntegerLiteral}}
    | <FloatingPointLiteral> 'value' {{FloatingPointLiteral}}
    | <StringLiteral> 'value' {{StringLiteral}}
    | <CharacterLiteral> 'value' {{CharacterLiteral}}
    | <DateLiteral> 'value' {{DateLiteral}}
    | <Nothing> 'value' {{NothingLiteral}}
    ;

<BooleanLiteral>
    : True | False
    ;

<IntegerLiteral>
    : <IntegralLiteralValue> <IntegralTypeCharacter>?
    ;

<IntegralLiteralValue>
    : <IntLiteral>
    | <HexLiteral>
    | <OctalLiteral>
    ;

<IntegralTypeCharacter>
    : <ShortCharacter>
    | <UnsignedShortCharacter>
    | <IntegerCharacter>
    | <UnsignedIntegerCharacter>
    | <LongCharacter>
    | <UnsignedLongCharacter>
    | <IntegerTypeCharacter>
    | <LongTypeCharacter>
    ;

<ShortCharacter>
    : S
    ;

<UnsignedShortCharacter>
    : US
    ;

<IntegerCharacter>
    : I
    ;

<UnsignedIntegerCharacter>
    : UI
    ;

<LongCharacter>
    : L
    ;

<UnsignedLongCharacter>
    : UL
    ;

<IntLiteral>
    : <Digit>+
    ;

<HexLiteral>
    : \& H <HexDigit>+
    ;

<OctalLiteral>
    : \& O <OctalDigit>+
    ;

<Digit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    ;

<HexDigit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
    | A | B | C | D | E | F
    ;

<OctalDigit>
    : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
    ;

<FloatingPointLiteral>
    : <FloatingPointLiteralValue> <FloatingPointTypeCharacter>?
    | <IntLiteral> <FloatingPointTypeCharacter>
    ;

<FloatingPointTypeCharacter>
    : <SingleCharacter>
    | <DoubleCharacter>
    | <DecimalCharacter>
    | <SingleTypeCharacter>
    | <DoubleTypeCharacter>
    | <DecimalTypeCharacter>
    ;

<SingleCharacter>
    : F
    ;

<DoubleCharacter>
    : R
    ;

<DecimalCharacter>
    : D
    ;

<FloatingPointLiteralValue>
    : <IntLiteral> \. <IntLiteral> <Exponent>?
    | \. <IntLiteral> <Exponent>?
    | <IntLiteral> <Exponent>
    ;

<Exponent>
    : E <Sign>? <IntLiteral>
    ;

<Sign>
    : \+
    | \-
    ;

<StringLiteral>
    : <DoubleQuoteCharacter> <StringCharacter>* <DoubleQuoteCharacter>
    ;

<DoubleQuoteCharacter>
    : \""
    | \x201c
    | \x201D
    ;

<StringCharacter>
    : [^\""\x201c\x201D]
    | <DoubleQuoteCharacter> <DoubleQuoteCharacter>
    ;

<CharacterLiteral>
    : <DoubleQuoteCharacter> <StringCharacter> <DoubleQuoteCharacter> C
    ;

<DateLiteral>
    : \# <whitespace>* <DateOrTime> <whitespace>* \#
    ;

<DateOrTime>
    : <DateValue> <whitespace>+ <TimeValue>
    | <DateValue>
    | <TimeValue>
    ;

<DateValue>
    : <MonthValue> \/ <DayValue> \/ <YearValue>
    | <MonthValue> \- <DayValue> \- <YearValue>
    ;

<TimeValue>
    : <HourValue> \: <MinuteValue> ( \: <SecondValue> )? <whitespace>* <AMPM>?
    | <HourValue> <whitespace>* <AMPM>
    ;

<MonthValue>
    : <IntLiteral>
    ;

<DayValue>
    : <IntLiteral>
    ;

<YearValue>
    : <IntLiteral>
    ;

<HourValue>
    : <IntLiteral>
    ;

<MinuteValue>
    : <IntLiteral>
    ;

<SecondValue>
    : <IntLiteral>
    ;

<AMPM>
    : AM | PM
    ;

<ElseIf>
    : ElseIf
    | Else <whitespace> If
    ;

<Nothing>
    : Nothing
    ;

<Separator>
    : \( | \) | \{ | \} | \! | \# | \, | \. | \: | \?
    ;

<Operator>
    : \& | \* | \+ | \- | \/ | \\ | \^ | \< | \= | \>
    ;

# Moved from above
<IdentifierOrKeyword>
    : <Identifier>
#    | <Keyword>    ### not needed
    ;

<Identifier>
    : <NonEscapedIdentifier> <TypeCharacter>?
#    | <Keyword> <TypeCharacter>    ###
    | <EscapedIdentifier>
    ;

/*
<Keyword>
    : ""AddHandler""      | ""AddressOf""      | ""Alias""       | ""And""
    | ""AndAlso""         | ""As""             | ""Boolean""     | ""ByRef""
	| ""Byte""            | ""ByVal""          | ""Call""        | ""Case""        
	| ""Catch""           | ""CBool""          | ""CByte""       | ""CChar""       
	| ""CDate""           | ""CDbl""           | ""CDec""        | ""Char""        
	| ""CInt""            | ""Class""          | ""CLng""        | ""CObj""        
	| ""Const""           | ""Continue""       | ""CSByte""      | ""CShort""      
	| ""CSng""            | ""CStr""           | ""CType""       | ""CUInt""       
	| ""CULng""           | ""CUShort""        | ""Date""        | ""Decimal""     
	| ""Declare""         | ""Default""        | ""Delegate""    | ""Dim""         
	| ""DirectCast""      | ""Do""             | ""Double""      | ""Each""        
	| ""Else""            | <ElseIf>         | ""End""         | ""EndIf""       
	| ""Enum""            | ""Erase""          | ""Error""       | ""Event""       
	| ""Exit""            | ""False""          | ""Finally""     | ""For""         
	| ""Friend""          | ""Function""       | ""Get""         | ""GetType""     
	| ""GetXmlNamespace"" | ""Global""         | ""GoSub""       | ""GoTo""        
	| ""Handles""         | ""If""             | ""Implements""  | ""Imports""     
	| ""In""              | ""Inherits""       | ""Integer""     | ""Interface""   
	| ""Is""              | ""IsNot""          | ""Let""         | ""Lib""         
	| ""Like""            | ""Long""           | ""Loop""        | ""Me""          
	| ""Mod""             | ""Module""         | ""MustInherit"" | ""MustOverride""
	| ""MyBase""          | ""MyClass""        | ""Namespace""   | ""Narrowing""   
	| ""New""             | ""Next""           | ""Not""         | <Nothing>     
	| ""NotInheritable""  | ""NotOverridable"" | ""Object""      | ""Of""          
	| ""On""              | ""Operator""       | ""Option""      | ""Optional""    
	| ""Or""              | ""OrElse""         | ""Overloads""   | ""Overridable"" 
	| ""Overrides""       | ""ParamArray""     | ""Partial""     | ""Private""     
	| ""Property""        | ""Protected""      | ""Public""      | ""RaiseEvent""  
	| ""ReadOnly""        | ""ReDim""          | ""REM""         | ""RemoveHandler""
	| ""Resume""          | ""Return""         | ""SByte""       | ""Select""      
	| ""Set""             | ""Shadows""        | ""Shared""      | ""Short""       
	| ""Single""          | ""Static""         | ""Step""        | ""Stop""        
	| ""String""          | ""Structure""      | ""Sub""         | ""SyncLock""    
	| ""Then""            | ""Throw""          | ""To""          | ""True""        
	| ""Try""             | ""TryCast""        | ""TypeOf""      | ""UInteger""    
	| ""ULong""           | ""UShort""         | ""Using""       | ""Variant""     
	| ""Wend""            | ""When""           | ""While""       | ""Widening""    
	| ""With""            | ""WithEvents""     | ""WriteOnly""   | ""Xor""         
    ;
*/

# 3. Preprocessing Directives

# hacked to ignore in scanner

<preprocessorDirective>
    : \# [\t ]* (Const | If | Else | End | ExternalSource | Region | ExternalChecksum) [^\r\n\x2028\x2029]* (\r\n? | \n | \x2028 | \x2029)?
    ;

# 4. General concepts

AccessModifier
    : ""Public"" 
    | ""Protected""
    | ""Friend""
    | ""Private""
#    | ""Protected"" ""Friend""	### not needed since we are already in a list
    ;

TypeParameterList
    : OpenParenthesis ""Of"" 'ofToken' TypeParameter 'type' ( Comma TypeParameter 'typeParameter' )* CloseParenthesis {{}}
    ;

TypeParameter
    : VarianceModifier 'modifier'? <Identifier> 'name' TypeParameterConstraints? {{}}
    ;

VarianceModifier
    : ""In"" | ""Out""
    ;

TypeParameterConstraints
    : ""As"" 'asToken' Constraint 'constraint'
    | ""As"" 'asToken' OpenCurlyBrace ConstraintList CloseCurlyBrace
    ;

ConstraintList
    : Constraint 'constraint' ( Comma Constraint 'constraint' )*
    ;

Constraint
    : TypeName 'type' {{TypeConstraint}}
    | ""New"" 'newToken' {{NewConstraint}}
    | ""Structure"" 'structureToken' {{StructureConstraint}}
    | ""Class"" 'classToken' {{ClassConstraint}}
    ;



# 5. Attributes

Attributes
    : AttributeBlock 'attributeBlock'+
    ;

AttributeBlock
    : ""<"" 'ltToken' AttributeList <LineTerminator>? "">"" 'gt' (<LineTerminator> | "":"" 'statementSeparator')? {{}} ###
    ;

AttributeList
    : Attribute 'attribute' ( Comma Attribute 'attribute' )*
    ;

Attribute
    : ( AttributeModifier 'modifier' "":"" 'colonToken' )? SimpleTypeName 'type'
    ( OpenParenthesis AttributeArguments? CloseParenthesis )? {{}}
    ;

AttributeModifier
    : ""Assembly"" | ""Module""
    ;

AttributeArguments
    : AttributePositionalArgumentList
    | AttributePositionalArgumentList Comma VariablePropertyInitializerList
    | VariablePropertyInitializerList
    ;

AttributePositionalArgumentList
    : AttributeArgumentExpression 'argument'? ( Comma AttributeArgumentExpression 'argument'? )*
    ;

VariablePropertyInitializerList
    : VariablePropertyInitializer 'argument' ( Comma VariablePropertyInitializer 'argument' )*
    ;

VariablePropertyInitializer
    : <IdentifierOrKeyword> 'name' ColonEquals AttributeArgumentExpression 'value' {{}}
    ;

AttributeArgumentExpression
    : ConstantExpression
#    | GetTypeExpression    ###
#    | ArrayExpression  ###
    ;



# 6. Source files and namespaces

Start
    : OptionStatement 'option'* ImportsStatement 'import'* /* AttributesStatement* */ (NamespaceMemberDeclaration+ | Attributes?)	###
    ;

#StatementTerminator
#    : <LineTerminator> 
#    | "":"" 'statementSeparator'
#    ;

#AttributesStatement
#    : Attributes (<LineTerminator> | "":"" 'statementSeparator')
#    ;

OptionStatement
    : OptionExplicitStatement
    | OptionStrictStatement
    | OptionCompareStatement
    | OptionInferStatement
    ;

OptionExplicitStatement
    : ""Option"" 'optionToken' ""Explicit"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

OnOff
    : ""On"" 'onToken' | ""Off""
    ;

OptionStrictStatement
    : ""Option"" 'optionToken' ""Strict"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

OptionCompareStatement
    : ""Option"" 'optionToken' ""Compare"" 'option' CompareOption 'value' (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

CompareOption
    : ""Binary"" | ""Text""
    ;

OptionInferStatement
    : ""Option"" 'optionToken' ""Infer"" 'option' OnOff 'value'? (<LineTerminator> | "":"" 'statementSeparator') {{OptionStatement}}
    ;

ImportsStatement
    : ""Imports"" 'importsToken' ImportsClauses (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ImportsClauses
    : ImportsClause 'import' ( Comma ImportsClause 'import' )*
    ;

ImportsClause
    : AliasImportsClause
    | MembersImportsClause
#    | XMLNamespaceImportsClause    ### not yet implemented
    ;

AliasImportsClause
    : <Identifier> 'name' Equals TypeName 'type' {{}}
    ;

MembersImportsClause
    : TypeName 'type' {{}}
    ;

#XMLNamespaceImportsClause
#    : ""<"" 'ltToken' XMLNamespaceAttributeName XMLWhitespace? Equals XMLWhitespace?
#      XMLNamespaceValue "">"" 'gtToken' {{}}
#    ;

#XMLNamespaceValue
#    : <DoubleQuoteCharacter> XMLAttributeDoubleQuoteValueCharacter* <DoubleQuoteCharacter>
#    | <SingleQuoteCharacter> XMLAttributeSingleQuoteValueCharacter* <SingleQuoteCharacter>
#    ;

NamespaceDeclaration
    : ""Namespace"" 'namespaceToken' NamespaceName (<LineTerminator> | "":"" 'statementSeparator')
      NamespaceMemberDeclaration*
      ""End"" 'endToken' ""Namespace"" 'namespaceToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

NamespaceName
    : RelativeNamespaceName
    | ""Global"" 'globalToken'
    | ""Global"" 'globalToken' ""."" 'period' <LineTerminator>? RelativeNamespaceName    ###
    ;

RelativeNamespaceName
    : <Identifier> 'name' ( ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name')*
    ;

NamespaceMemberDeclaration
    : AttributesNamespaceDeclaration
    | TypeDeclaration 'declaration'
    ;
 AttributesNamespaceDeclaration
	: Attributes? NamespaceDeclaration 'declaration'		### moved Attributes here from Start
	;

TypeDeclaration
    : ModuleDeclaration
    | NonModuleDeclaration
    ;

NonModuleDeclaration
    : EnumDeclaration
    | StructureDeclaration
    | InterfaceDeclaration
    | ClassDeclaration
    | DelegateDeclaration
    ;




# 7. Types


TypeName
    : ArrayTypeName
    | NonArrayTypeName
    ;

NonArrayTypeName
    : SimpleTypeName
    | NullableTypeName
    ;

SimpleTypeName
    : QualifiedTypeName
    | BuiltInTypeName
    ;

QualifiedTypeName
    : <Identifier> 'name' TypeArguments? (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArguments?)* {{}}
    | ""Global"" 'globalToken' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArguments?
      (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArguments?)* {{}}
    ;

TypeArguments
    : OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis
    ;

TypeArgumentList
    : TypeName 'type' ( Comma TypeName 'type')*
    ;

BuiltInTypeName
    : ""Object"" 'name' {{}}
    | PrimitiveTypeName 'name' {{}}
    ;

TypeModifier
    : AccessModifier
    | ""Shadows""
    ;

IdentifierModifiers
    : NullableNameModifier? ArrayNameModifier?
    ;

NullableTypeName
    : NonArrayTypeName 'type' ""?"" 'nullableToken' {{}}
    ;

NullableNameModifier
    : ""?"" 'nullableToken'
    ;

TypeImplementsClause
    : ""Implements"" 'implementsToken' TypeImplements (<LineTerminator> | "":"" 'statementSeparator')
    ;

TypeImplements
    : NonArrayTypeName 'implements' ( Comma NonArrayTypeName 'implements')*
    ;

PrimitiveTypeName
    : NumericTypeName
    | ""Boolean""
    | ""Date""
    | ""Char""
    | ""String""
    ;

NumericTypeName
    : IntegralTypeName
    | FloatingPointTypeName
    | ""Decimal""
    ;

IntegralTypeName
    : ""Byte"" | ""SByte"" | ""UShort"" | ""Short"" | ""UInteger""
    | ""Integer"" | ""ULong"" | ""Long""
    ;

FloatingPointTypeName
    : ""Single"" | ""Double""
    ;

EnumDeclaration
    : Attributes? TypeModifier 'modifier'* ""Enum"" 'enumToken' <Identifier> 'name'
      ( ""As"" 'asToken' NonArrayTypeName 'type' )? (<LineTerminator> | "":"" 'statementSeparator')
      EnumMemberDeclaration 'declaration'+
      ""End"" 'endToken' ""Enum"" 'enumToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

EnumMemberDeclaration
    : Attributes? <Identifier> 'name' ( Equals ConstantExpression 'value')? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ClassDeclaration
    : Attributes? ClassModifier 'modifier'* ""Class"" 'classToken' <Identifier> 'name' TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      ClassBase?
      TypeImplementsClause*
      ClassMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Class"" 'classToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ClassModifier
    : TypeModifier
    | ""MustInherit""
    | ""NotInheritable""
    | ""Partial""
    ;

ClassBase
    : ""Inherits"" 'inheritsToken' NonArrayTypeName 'inherits' (<LineTerminator> | "":"" 'statementSeparator')
    ;

ClassMemberDeclaration
    : NonModuleDeclaration
    | EventMemberDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    | OperatorDeclaration
    ;

StructureDeclaration
    : Attributes? StructureModifier 'modifier'* ""Structure"" 'structureToken' <Identifier> 'name'
      TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      TypeImplementsClause*
      StructMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Structure"" 'structureToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

StructureModifier
    : TypeModifier
    | ""Partial""
    ;

StructMemberDeclaration
    : NonModuleDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | EventMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    | OperatorDeclaration
    ;

ModuleDeclaration
    : Attributes? TypeModifier 'modifier'* ""Module"" 'moduleToken' <Identifier> 'name' (<LineTerminator> | "":"" 'statementSeparator')
      ModuleMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Module"" 'moduleToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ModuleMemberDeclaration
    : NonModuleDeclaration
    | VariableMemberDeclaration
    | ConstantMemberDeclaration
    | EventMemberDeclaration
    | MethodMemberDeclaration
    | PropertyMemberDeclaration
    | ConstructorMemberDeclaration
    ;

InterfaceDeclaration
    : Attributes? TypeModifier 'modifier'* ""Interface"" 'interfaceToken' <Identifier> 'name'
      TypeParameterList 'typeParameters'? (<LineTerminator> | "":"" 'statementSeparator')
      InterfaceBase*
      InterfaceMemberDeclaration 'declaration'*
      ""End"" 'endToken' ""Interface"" 'interfaceToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

InterfaceBase
    : ""Inherits"" 'inheritsToken' InterfaceBases (<LineTerminator> | "":"" 'statementSeparator')
    ;

InterfaceBases
    : NonArrayTypeName 'inherits' ( Comma NonArrayTypeName 'inherits')*
    ;

InterfaceMemberDeclaration
    : NonModuleDeclaration
    | InterfaceEventMemberDeclaration
    | InterfaceMethodMemberDeclaration
    | InterfacePropertyMemberDeclaration
    ;

ArrayTypeName
    : NonArrayTypeName 'type' ArrayTypeModifiers {{}}
    ;

ArrayTypeModifiers
    : ArrayTypeModifier 'arrayTypeModifier'+
    ;

ArrayTypeModifier
    : OpenParenthesis RankList? CloseParenthesis {{}}
    ;

RankList
    : Comma+    ### convert to one or more since use is optional
    ;

ArrayNameModifier
    : ArrayTypeModifiers
    | ArraySizeInitializationModifier
    ;

DelegateDeclaration
    : Attributes? TypeModifier 'modifier'* ""Delegate"" 'delegateToken' MethodSignature  'signature' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MethodSignature
    : SubSignature
    | FunctionSignature
    ;



# 9. Type members


ImplementsClause
    : ""Implements"" 'implementsToken' ImplementsList   ###
    ;

ImplementsList
    : InterfaceMemberSpecifier 'implement' ( Comma InterfaceMemberSpecifier 'implement')*
    ;

InterfaceMemberSpecifier
    : NonArrayTypeName 'type' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    ;

MethodMemberDeclaration
    : MethodDeclaration
    | ExternalMethodDeclaration
    ;

InterfaceMethodMemberDeclaration
    : InterfaceMethodDeclaration
    ;

MethodDeclaration
    : SubDeclaration
    | MustOverrideSubDeclaration
    | FunctionDeclaration
    | MustOverrideFunctionDeclaration
    ;

InterfaceMethodDeclaration
    : InterfaceSubDeclaration
    | InterfaceFunctionDeclaration
    ;

SubSignature
    : ""Sub"" 'subToken' <Identifier> 'name' TypeParameterList 'typeParameters'?
      ( OpenParenthesis ParameterList? CloseParenthesis )? {{}}
    ;

FunctionSignature
    : ""Function"" 'functionToken' <Identifier> 'name' TypeParameterList 'typeParameters'?
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')? {{}}
    ;

SubDeclaration
    : Attributes? ProcedureModifier 'modifier'* SubSignature 'signature'
      HandlesOrImplements? <LineTerminator>
      Block
      ""End"" 'endToken' ""Sub"" 'subToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MustOverrideSubDeclaration
    : Attributes? ProcedureModifier 'modifier'* MustOverrideProcedureModifier 'modifier' ProcedureModifier 'modifier'* SubSignature 'signature' ###
      HandlesOrImplements? (<LineTerminator> | "":"" 'statementSeparator') {{SubDeclaration}}
    ;

InterfaceSubDeclaration
    : Attributes? InterfaceProcedureModifier 'modifier'* SubSignature 'signature' (<LineTerminator> | "":"" 'statementSeparator') {{SubDeclaration}}
    ;

FunctionDeclaration
    : Attributes? ProcedureModifier 'modifier'* FunctionSignature 'signature'
      HandlesOrImplements? <LineTerminator>
      Block
      ""End"" 'endToken' ""Function"" 'functionToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

MustOverrideFunctionDeclaration
    : Attributes? ProcedureModifier 'modifier'* MustOverrideProcedureModifier 'modifier' ProcedureModifier 'modifier'* FunctionSignature 'signature' ###
      HandlesOrImplements? (<LineTerminator> | "":"" 'statementSeparator') {{FunctionDeclaration}}
    ;

InterfaceFunctionDeclaration
    : Attributes? InterfaceProcedureModifier 'modifier'* FunctionSignature 'signature' (<LineTerminator> | "":"" 'statementSeparator') {{FunctionDeclaration}}
    ;

ProcedureModifier
    : AccessModifier | ""Shadows"" | ""Shared"" | ""Overridable"" | ""NotOverridable"" | ""Overrides""
    | ""Overloads"" | ""Partial"" | ""Iterator"" | ""Async""
    ;

MustOverrideProcedureModifier   ###
#    : ProcedureModifier
    : ""MustOverride""
    ;

InterfaceProcedureModifier
    : ""Shadows"" | ""Overloads""
    ;

HandlesOrImplements
    : HandlesClause
    | ImplementsClause
    ;

ExternalMethodDeclaration
    : ExternalSubDeclaration
    | ExternalFunctionDeclaration
    ;

ExternalSubDeclaration
    : Attributes? ExternalMethodModifier 'modifier'* ""Declare"" 'declareToken' CharsetModifier 'charset'? ""Sub"" 'subToken'
      <Identifier> 'name' LibraryClause AliasClause?
      ( OpenParenthesis ParameterList? CloseParenthesis )? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ExternalFunctionDeclaration
    : Attributes? ExternalMethodModifier 'modifier'* ""Declare"" 'declareToken' CharsetModifier 'charset'? ""Function"" 'functionToken'
      <Identifier> 'name' LibraryClause AliasClause?
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')?
      (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ExternalMethodModifier
    : AccessModifier
    | ""Shadows""
    | ""Overloads""
    ;

CharsetModifier
    : ""Ansi"" | ""Unicode"" | ""Auto""
    ;

LibraryClause
    : ""Lib"" 'libToken' <StringLiteral> 'library'
    ;

AliasClause
    : ""Alias"" 'aliasToken' <StringLiteral> 'alias'
    ;

ParameterList
    : Parameter 'parameter' ( Comma Parameter 'parameter')*
    ;

Parameter
    : Attributes? ParameterModifier 'modifier'* ParameterIdentifier 'identifier' ( ""As"" 'asToken' TypeName 'type' )?
      ( Equals ConstantExpression 'value')? {{}}
    ;

ParameterModifier
    : ""ByVal"" | ""ByRef"" | ""Optional"" | ""ParamArray""
    ;

ParameterIdentifier
    : <Identifier> 'name' IdentifierModifiers {{}}
    ;

HandlesClause
    : ""Handles"" 'handlesToken' EventHandlesList  ###
    ;

EventHandlesList
    : EventMemberSpecifier 'handle' ( Comma EventMemberSpecifier 'handle')*
    ;

EventMemberSpecifier
    : <Identifier> 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    | ""MyBase"" 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    | ""MyClass"" 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    | ""Me"" 'name' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' {{}}
    ;

ConstructorMemberDeclaration
    : Attributes? ConstructorModifier 'modifier'* ""Sub"" 'subToken' ""New"" 'newToken'
      ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Sub"" 'subToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstructorModifier
    : AccessModifier
    | ""Shared""
    ;

EventMemberDeclaration
    : RegularEventMemberDeclaration
    | CustomEventMemberDeclaration
    ;

RegularEventMemberDeclaration
    : Attributes? EventModifiers 'modifier'* ""Event"" 'eventToken'
      <Identifier> 'name' ParametersOrType ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

InterfaceEventMemberDeclaration
    : Attributes? InterfaceEventModifiers 'modifier'* ""Event"" 'eventToken'
      <Identifier> 'name' ParametersOrType (<LineTerminator> | "":"" 'statementSeparator') {{RegularEventMemberDeclaration}}
    ;

ParametersOrType
    : ( OpenParenthesis ParameterList? CloseParenthesis )?
    | ""As"" 'asToken' NonArrayTypeName 'type'
    ;

EventModifiers
    : AccessModifier
    | ""Shadows""
    | ""Shared""
    ;

InterfaceEventModifiers
    : ""Shadows""
    ;

CustomEventMemberDeclaration
    : Attributes? EventModifiers 'modifier'* ""Custom"" 'customToken' ""Event"" 'eventToken'
      <Identifier> 'name' ""As"" 'asToken' TypeName 'type' ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator')
      EventAccessorDeclaration 'eventAccessorDeclaration'+
      ""End"" 'endToken' ""Event"" 'eventToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

EventAccessorDeclaration
    : AddHandlerDeclaration
    | RemoveHandlerDeclaration
    | RaiseEventDeclaration
    ;

AddHandlerDeclaration
    : Attributes? ""AddHandler"" 'addHandlerToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""AddHandler"" 'addHandlerToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

RemoveHandlerDeclaration
    : Attributes? ""RemoveHandler"" 'removeHandlerToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""RemoveHandler"" 'removeHandlerToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

RaiseEventDeclaration
    : Attributes? ""RaiseEvent"" 'raiseEventToken'
      OpenParenthesis ParameterList CloseParenthesis <LineTerminator>
      Block ###
      ""End"" 'endToken' ""RaiseEvent"" 'raiseEventToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstantMemberDeclaration
    : Attributes? ConstantModifier 'modifier'* ""Const"" 'constToken' ConstantDeclarators (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

ConstantModifier
    : AccessModifier
    | ""Shadows""
    ;

ConstantDeclarators
    : ConstantDeclarator 'constant' ( Comma ConstantDeclarator 'constant')*
    ;

ConstantDeclarator
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? Equals ConstantExpression 'value' {{}}
    ;

VariableMemberDeclaration
    : Attributes? VariableModifier 'modifier'+ VariableDeclarators (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

VariableModifier
    : AccessModifier
    | ""Shadows""
    | ""Shared""
    | ""ReadOnly""
    | ""WithEvents""
    | ""Dim"" 'dimToken'
    ;

VariableDeclarators
    : VariableDeclarator 'variable' ( Comma VariableDeclarator 'variable')*
    ;

VariableDeclarator
    : VariableIdentifiers ""As"" 'asToken' ObjectCreationExpression 'value' {{}}
    | VariableIdentifiers ( ""As"" 'asToken' TypeName 'type' )? ( Equals Expression 'value' )? {{}}
    ;

VariableIdentifiers
    : VariableIdentifier 'variableIdentifier' ( Comma VariableIdentifier 'variableIdentifier' )*
    ;

VariableIdentifier
    : <Identifier> 'name' IdentifierModifiers {{}}
    ;

ArraySizeInitializationModifier
    : OpenParenthesis BoundList CloseParenthesis ArrayTypeModifiers?
    ;

BoundList
    : Bound 'bound' ( Comma Bound 'bound' )*
    ;

Bound
    : Expression
    | <IntegerLiteral> 'from' ""To"" 'toToken' Expression 'to' {{BoundExpression}}  ###
    ;

PropertyMemberDeclaration
    : RegularPropertyMemberDeclaration
    | MustOverridePropertyMemberDeclaration
    | AutoPropertyMemberDeclaration
    ;

PropertySignature
    : ""Property"" 'propertyToken'
      <Identifier> 'name' ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')?
    ;

RegularPropertyMemberDeclaration
    : Attributes? PropertyModifier 'modifier'* PropertySignature
      ImplementsClause? <LineTerminator>
      PropertyAccessorDeclaration 'declaration'+
      ""End"" 'endToken' ""Property"" 'propertyToken' (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

MustOverridePropertyMemberDeclaration
    : Attributes? MustOverridePropertyModifier 'modifier'+ PropertySignature
      ImplementsClause? (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

AutoPropertyMemberDeclaration
    : Attributes? AutoPropertyModifier 'modifier'* ""Property"" 'propertyToken' <Identifier> 'name'
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ( ""As"" 'asToken' Attributes? TypeName 'type')? ( Equals Expression 'value')?
      ImplementsClause? <LineTerminator> {{AutoPropertyMemberDeclaration}}
    | Attributes? AutoPropertyModifier 'modifier'* ""Property"" 'propertyToken' <Identifier> 'name'
      ( OpenParenthesis ParameterList? CloseParenthesis )?
      ""As"" 'asToken' Attributes? ""New"" 'newToken'
      ( NonArrayTypeName 'type' ( OpenParenthesis ArgumentList? CloseParenthesis )? )?
      ObjectCreationExpressionInitializer 'initializer'?
      ImplementsClause? <LineTerminator> {{AutoPropertyMemberDeclaration}}
    ;

InterfacePropertyMemberDeclaration
    : Attributes? InterfacePropertyModifier 'modifier'* PropertySignature (<LineTerminator> | "":"" 'statementSeparator') {{PropertyMemberDeclaration}}
    ;

AutoPropertyModifier
    : AccessModifier
    | ""Shadows""
    | ""Shared""
    | ""Overridable""
    | ""NotOverridable""
    | ""Overrides""
    | ""Overloads""
    ;

PropertyModifier
    : AutoPropertyModifier
    | ""Default""
    | ""ReadOnly""
    | ""WriteOnly""
    | ""Iterator""
    ;

MustOverridePropertyModifier
    : PropertyModifier
    | ""MustOverride""
    ;

InterfacePropertyModifier
    : ""Shadows""
    | ""Overloads""
    | ""Default""
    | ""ReadOnly""
    | ""WriteOnly""
    ;

PropertyAccessorDeclaration
    : PropertyGetDeclaration
    | PropertySetDeclaration
    ;

PropertyGetDeclaration
    : Attributes? AccessModifier 'modifier'? ""Get"" 'getToken' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Get"" 'getToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

PropertySetDeclaration
    : Attributes? AccessModifier 'modifier'? ""Set"" 'setToken'
      ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Set"" 'setToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

OperatorDeclaration
    : Attributes? OperatorModifier 'modifier'* ""Operator"" 'operatorToken' OverloadableOperator 'operator'
      OpenParenthesis ParameterList CloseParenthesis
      ( ""As"" 'asToken' Attributes? TypeName 'type')? <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Operator"" 'operatorToken' (<LineTerminator> | "":"" 'statementSeparator') {{}}
    ;

OperatorModifier
    : ""Public"" | ""Shared"" | ""Overloads"" | ""Shadows"" | ""Widening"" | ""Narrowing""
    ;

OverloadableOperator
    : ""+"" | ""-"" | ""*"" | ""/"" | ""\"" | ""&"" | ""Like"" | ""Mod"" | ""And"" | ""Or"" | ""Xor""
    | ""^"" | ""<<"" | "">>"" | ""="" | ""<>"" | "">"" | ""<"" | "">="" | ""<=""
    | ""Not"" | ""IsTrue"" | ""IsFalse"" | ""CType""
    ;





# 10. Statements


Statement
    : LabelDeclarationStatement
    | LocalDeclarationStatement
    | WithStatement
    | SyncLockStatement
    | EventStatement
    | AssignmentStatement
    | InvocationStatement
    | ConditionalStatement
    | LoopStatement
    | ErrorHandlingStatement
    | BranchStatement
    | ArrayHandlingStatement
    | UsingStatement
#	| AwaitStatement	### handled by InvocationStatement/OperatorExpression
	| YieldStatement
    ;

Block
    : (Statements 'statement'? <LineTerminator>)*
    ;

LabelDeclarationStatement
    : LabelName 'label' "":"" 'colonToken' {{}}
    ;

LabelName
    : <Identifier>
    | <IntLiteral>
    ;

Statements
    : Statement 
    | Statement 'statement'? ( "":"" 'statementSeparator' Statement 'statement'? )+ {{LineStatement}}	###
    ;

LocalDeclarationStatement
    : LocalModifier 'modifier' VariableDeclarators {{}} ###
    ;

LocalModifier
    : ""Static"" | ""Dim"" | ""Const""
    ;

WithStatement
    : ""With"" 'withToken' Expression 'expression' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""With"" 'withToken' {{}} ###
    ;

SyncLockStatement
    : ""SyncLock"" 'syncLockToken' Expression 'expression' <LineTerminator>
      Block ###
      ""End"" 'endToken' ""SyncLock"" 'syncLockToken' {{}} ###
    ;

EventStatement
    : RaiseEventStatement
    | AddHandlerStatement
    | RemoveHandlerStatement
    ;

RaiseEventStatement
    : ""RaiseEvent"" 'raiseEventToken' <IdentifierOrKeyword> 'name'
      ( OpenParenthesis ArgumentList? CloseParenthesis )? {{}}	###
    ;

AddHandlerStatement
    : ""AddHandler"" 'addHandlerToken' Expression 'event' Comma Expression 'handler' {{}} ###
    ;

RemoveHandlerStatement
    : ""RemoveHandler"" 'removeHandlerToken' Expression 'event' Comma Expression 'handler' {{}} ###
    ;

AssignmentStatement
    : RegularAssignmentStatement
    | CompoundAssignmentStatement
    | MidAssignmentStatement
    ;

RegularAssignmentStatement
    : Expression 'lhs' Equals Expression 'value' {{AssignmentStatement}} ###
    ;

CompoundAssignmentStatement
    : Expression 'lhs' CompoundBinaryOperator 'equals' <LineTerminator>? Expression 'value' {{AssignmentStatement}} ###
    ;

CompoundBinaryOperator
    : ""^="" | ""*="" | ""/="" | ""\="" | ""+="" | ""-=""
    | ""&="" | ""<<="" | "">>=""
    ;

MidAssignmentStatement
    : ""Mid"" 'midToken' ""$"" 'typeCharToken'? OpenParenthesis Expression 'string' Comma Expression 'start'
      ( Comma Expression 'length')? CloseParenthesis Equals Expression 'value' {{}} ###
    ;

InvocationStatement
    : ""Call"" 'callToken'? Expression 'expression' {{}}  ###
    ;

ConditionalStatement
    : IfStatement
    | SelectStatement
    ;

IfStatement
    : BlockIfStatement
    | LineIfThenStatement
    ;

BlockIfStatement
    : ""If"" 'ifToken' Expression 'expression' ""Then"" 'thenToken'? (<LineTerminator> | "":"" 'statementSeparator')	###
      Block ###
      ElseIfStatement 'elseIf'*
      ElseStatement 'else'?
      ""End"" 'endToken' ""If"" 'ifToken' {{IfStatement}} ###
    ;

ElseIfStatement
    : <ElseIf> 'elseIfToken' Expression 'expression' ""Then"" 'thenToken'? (<LineTerminator> | "":"" 'statementSeparator')	###
      Block {{}} ###
    ;

ElseStatement
    : ""Else"" 'elseToken' (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

LineIfThenStatement
    : ""If"" 'ifToken' Expression 'expression' ""Then"" 'thenToken' Statements 'statement' (  LineElseStatement 'else' )? {{IfStatement}} ###
    ;
 LineElseStatement
	: ""Else"" 'elseToken' Statements 'statement' {{ElseStatement}}
	;

SelectStatement
    : ""Select"" 'selectToken' ""Case"" 'caseToken'? Expression 'expression' <LineTerminator>
      CaseStatement 'case'*
      CaseElseStatement 'else'?
      ""End"" 'endToken' ""Select"" 'selectToken' {{}} ###
    ;

CaseStatement
    : ""Case"" 'caseToken' CaseClauses (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

CaseClauses
    : CaseClause 'clause' ( Comma CaseClause 'clause')*
    ;

CaseClause
    : ( ""Is"" 'operator' <LineTerminator>? )? ComparisonOperator <LineTerminator>? Expression 'value' {{}}
    | Expression 'value' ( ""To"" 'toToken' Expression 'to' )? {{}}
    ;

ComparisonOperator
    : ""="" 'operator' | ""<>"" 'operator' | ""<"" 'operator' | "">"" 'operator' | "">="" | ""<="" 'operator'
    ;

CaseElseStatement
    : ""Case"" 'caseToken' ""Else"" 'elseToken' (<LineTerminator> | "":"" 'statementSeparator')
      Block {{}} ###
    ;

LoopStatement
    : WhileStatement
    | DoLoopStatement
    | ForStatement
    | ForEachStatement
    ;

WhileStatement
    : ""While"" 'whileToken' Expression 'expression' <LineTerminator>	###
      Block ###
      ""End"" 'endToken' ""While"" 'whileToken' {{}} ###
    ;

DoLoopStatement
    : DoTopLoopStatement
    | DoBottomLoopStatement
    ;

DoTopLoopStatement
    : ""Do"" 'doToken' ( WhileOrUntil Expression 'expression')? <LineTerminator>	###
      Block ###
      ""Loop"" 'loopToken' {{}} ###
    ;

DoBottomLoopStatement
    : ""Do"" 'doToken' <LineTerminator>
      Block ###
      ""Loop"" 'loopToken' WhileOrUntil Expression 'expression' {{}}	###
    ;

WhileOrUntil
    : ""While"" 'loopToken' | ""Until"" 'loopToken'
    ;

ForStatement
    : ""For"" 'forToken' LoopControlVariable 'variable' Equals Expression 'from' ""To"" 'toToken' Expression 'to'
      ( ""Step"" 'stepToken' Expression 'step')? <LineTerminator>
      Block ###
      ""Next"" 'nextToken' NextExpressionList? {{}}   ###
    ;

LoopControlVariable
    : <Identifier> 'name' ( IdentifierModifiers ""As"" 'asToken' TypeName 'type' )? {{}}
    | Expression
    ;

NextExpressionList
    : Expression 'next' ( Comma Expression 'next')*
    ;

ForEachStatement
    : ""For"" 'forToken' ""Each"" 'eachToken' LoopControlVariable 'variable' ""In"" 'inToken' <LineTerminator>? Expression 'expression' <LineTerminator>
      Block ###
      ""Next"" 'nextToken' NextExpressionList? {{}}  ###
    ;

ErrorHandlingStatement
    : StructuredErrorStatement
    | UnstructuredErrorStatement
    ;

StructuredErrorStatement
    : ThrowStatement
    | TryStatement
    ;

TryStatement
    : ""Try"" 'tryToken' <LineTerminator>
      Block ###
      CatchStatement 'catch'*
      FinallyStatement 'finally'?
      ""End"" 'endToken' ""Try"" 'tryToken' {{}} ###
    ;

FinallyStatement
    : ""Finally"" 'finallyToken' <LineTerminator>
      Block {{}} ###
    ;

CatchStatement
    : ""Catch"" 'catchToken' ( <Identifier> 'name' ( ""As"" 'asToken' NonArrayTypeName 'type' )? )?
	  ( ""When"" 'whenToken' Expression 'when')? <LineTerminator>	###
      Block {{}} ###
    ;

ThrowStatement
    : ""Throw"" 'throwToken' Expression 'value'? {{}} ###
    ;

UnstructuredErrorStatement
    : ErrorStatement
    | OnErrorStatement
    | ResumeStatement
    ;

ErrorStatement
    : ""Error"" 'errorToken' Expression 'value' {{}} ###
    ;

OnErrorStatement
    : ""On"" 'onToken' ""Error"" 'errorToken' ErrorClause 'clause' {{}} ###
    ;

ErrorClause
    : ""GoTo"" 'gotoToken' ""-"" 'minus' <IntegerLiteral> 'location' {{GotoClause}}  ###
    | ""GoTo"" 'gotoToken' <IntegerLiteral> 'location' {{GotoClause}}   ###
    | GoToStatement
    | ""Resume"" 'resumeToken' ""Next"" 'nextToken' {{ResumeClause}}
    ;

ResumeStatement
    : ""Resume"" 'resumeToken' ResumeClause 'resume'? {{}} ###
    ;

ResumeClause
    : ""Next""
    | LabelName
    ;

BranchStatement
    : GoToStatement
    | ExitStatement
    | ContinueStatement
    | StopStatement
    | EndStatement
    | ReturnStatement
    ;

GoToStatement
    : ""GoTo"" 'gotoToken' LabelName 'goto' {{}} ###
    ;

ExitStatement
    : ""Exit"" 'exitToken' ExitKind 'exit' {{}} ###
    ;

ExitKind
    : ""Do"" | ""For"" | ""While"" | ""Select"" | ""Sub"" | ""Function"" | ""Property"" | ""Try""
    ;

ContinueStatement
    : ""Continue"" 'continueToken' ContinueKind 'continue' {{}} 	###
    ;

ContinueKind
    : ""Do"" | ""For"" | ""While""
    ;

StopStatement
    : ""Stop"" 'stopToken' {{}} ###
    ;

EndStatement
    : ""End"" 'endToken' {{}} ###
    ;

ReturnStatement
    : ""Return"" 'returnToken' Expression 'value'? {{}} ###
    ;

ArrayHandlingStatement
    : RedimStatement
    | EraseStatement
    ;

RedimStatement
    : ""ReDim"" 'redimToken' ""Preserve"" 'preserveToken'? RedimClauses {{}} ###
    ;

RedimClauses
    : RedimClause 'redim' ( Comma RedimClause 'redim')*
    ;

RedimClause
    : Expression 'array' ArraySizeInitializationModifier {{}}
    ;

EraseStatement
    : ""Erase"" 'eraseToken' EraseExpressions {{}} ###
    ;

EraseExpressions
    : Expression 'array' ( Comma Expression 'array')*
    ;

UsingStatement
    : ""Using"" 'usingToken' UsingResources <LineTerminator>
      Block ###
      ""End"" 'endToken' ""Using"" 'usingToken' {{}} ###
    ;

UsingResources
    : VariableDeclarators
    | Expression 'variable'
    ;

#AwaitStatement
#    : AwaitOperatorExpression ###
#    ;

YieldStatement
    : ""Yield"" 'yieldToken' Expression 'yield' {{}} ###
    ;



# 11. Expressions

Expression
    : SimpleExpression
    | TypeExpression
    | MemberAccessExpression
    | DictionaryAccessExpression
    | InvocationExpression
#    | IndexExpression	### handled by InvocationExpression
    | NewExpression
    | CastExpression
    | OperatorExpression
    | ConditionalExpression
    | LambdaExpression
    | QueryExpression
#    | XMLLiteralExpression	### not yet implemented
#    | XMLMemberAccessExpression	### not yet implemented
    ;

ConstantExpression
    : Expression
    ;

SimpleExpression
    : LiteralExpression
    | ParenthesizedExpression
    | InstanceExpression
    | SimpleNameExpression
    | AddressOfExpression
    ;

LiteralExpression
    : Literal
    ;

ParenthesizedExpression
    : OpenParenthesis Expression CloseParenthesis {{Expression}}
    ;

InstanceExpression
    : ""Me"" 'meToken' {{}}
    ;

SimpleNameExpression
    : <Identifier> 'name' ( OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis )? {{}}
    ;

AddressOfExpression
    : ""AddressOf"" 'addressOfToken' Expression 'value' {{}}
    ;

TypeExpression
    : GetTypeExpression
    | TypeOfIsExpression
    | IsExpression
#    | GetXmlNamespaceExpression	### not yet implemented
    ;

GetTypeExpression
    : ""GetType"" 'getTypeToken' OpenParenthesis GetTypeTypeName 'type' CloseParenthesis {{}}
    ;

GetTypeTypeName
    : TypeName 
    | QualifiedOpenTypeName
    ;

QualifiedOpenTypeName
    : <Identifier> 'name' TypeArityList? (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArityList?)* {{}}
    | ""Global"" 'globalToken' ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArityList?
      (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' TypeArityList?)* {{}}
    ;

TypeArityList
    : OpenParenthesis ""Of"" 'ofToken' CommaList? CloseParenthesis
    ;

CommaList
    : Comma+    ###
    ;

TypeOfIsExpression
    : ""TypeOf"" 'typeOfToken' Expression 'expression' ""Is"" 'isToken' <LineTerminator>? TypeName 'type' {{}}
    ;

IsExpression
    : Expression 'left' ""Is"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""IsNot"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

#GetXmlNamespaceExpression
#    : ""GetXmlNamespace"" 'getXmlNamespaceToken' OpenParenthesis XMLNamespaceName? CloseParenthesis
#    ;

MemberAccessExpression
    : MemberAccessBase 'base'? ""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name'
      ( OpenParenthesis ""Of"" 'ofToken' TypeArgumentList CloseParenthesis )? {{}}
    ;

MemberAccessBase
    : AccessBase
    | NonArrayTypeName
    | ""Global"" 'globalToken' {{Global}}
    | ""MyClass"" 'myClassToken' {{MyClass}}
    | ""MyBase"" 'myBaseToken' {{MyBase}}
    ;

DictionaryAccessExpression
    : AccessBase 'value'? ""!"" 'bangToken' <IdentifierOrKeyword> 'name' {{}}
    ;
AccessBase
    : LiteralExpression
    | ParenthesizedExpression
    | InstanceExpression
    | SimpleNameExpression
    | GetTypeExpression
    | MemberAccessExpression
    | DictionaryAccessExpression
    | InvocationExpression
    | NewExpression
    | CastExpression
    | ConditionalExpression
    | MultiLineLambda
    ;

InvocationExpression
    : Expression 'receiver' ( OpenParenthesis ArgumentList? CloseParenthesis ) {{}} ###
    ;

ArgumentList
    : PositionalArgumentList
    | PositionalArgumentList Comma NamedArgumentList
    | NamedArgumentList
    ;

PositionalArgumentList
    : Expression 'argument'? ( Comma Expression 'argument'? )*
    ;

NamedArgumentList
    : <IdentifierOrKeyword> 'argumentName' ColonEquals Expression 'namedArgument'
      ( Comma <IdentifierOrKeyword> 'argumentName' ColonEquals Expression 'namedArgument')*
    ;

#IndexExpression
#    : Expression 'value' OpenParenthesis ArgumentList? CloseParenthesis
#    ;

NewExpression
    : ObjectCreationExpression
    | ArrayExpression
    | AnonymousObjectCreationExpression
    ;

ObjectCreationExpression
    : ""New"" 'newToken' NonArrayTypeName 'type' ( OpenParenthesis ArgumentList? CloseParenthesis )?
      ObjectCreationExpressionInitializer 'initializer'? {{ObjectCreationExpression}}
    ;

ObjectCreationExpressionInitializer
    : ObjectMemberInitializer
    | ObjectCollectionInitializer
    ;

ObjectMemberInitializer
    : ""With"" 'withToken' OpenCurlyBrace FieldInitializerList CloseCurlyBrace {{}}
    ;

FieldInitializerList
    : FieldInitializer 'initializer' ( Comma FieldInitializer 'initializer')*
    ;

FieldInitializer
    : ""Key"" 'keyToken'? (""."" 'period' <LineTerminator>? <IdentifierOrKeyword> 'name' Equals )? Expression 'value' {{}} ###
    ;

ObjectCollectionInitializer
    : ""From"" 'fromToken' CollectionInitializer 'initializer' {{}}
    ;

CollectionInitializer
    : OpenCurlyBrace CollectionElementList? CloseCurlyBrace {{}}
    ;

CollectionElementList
    : CollectionElement 'element' ( Comma CollectionElement 'element')*
    ;

CollectionElement
    : Expression
    | CollectionInitializer
    ;

ArrayExpression
    : ArrayCreationExpression
    | ArrayLiteralExpression
    ;

ArrayCreationExpression
    : ""New"" 'newToken' NonArrayTypeName 'type' ArrayNameModifier CollectionInitializer 'initializer' {{ArrayCreationExpression}}
    ;

ArrayLiteralExpression
    : CollectionInitializer
    ;

AnonymousObjectCreationExpression
    : ""New"" 'newToken' ObjectMemberInitializer 'expression' {{AnonymousCreationExpression}}
    ;

CastExpression
    : ""DirectCast"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | ""TryCast"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | ""CType"" 'castType' OpenParenthesis Expression 'value' Comma TypeName 'type' CloseParenthesis {{CastExpression}}
    | CastTarget 'type' OpenParenthesis Expression 'value' CloseParenthesis {{PrimitiveCastExpression}}
    ;

CastTarget
    : ""CBool"" | ""CByte"" | ""CChar""  | ""CDate""  | ""CDec"" | ""CDbl"" | ""CInt""
    | ""CLng""  | ""CObj""  | ""CSByte"" | ""CShort"" | ""CSng"" | ""CStr"" | ""CUInt""
    | ""CULng"" | ""CUShort""
    ;

OperatorExpression
    : ArithmeticOperatorExpression
    | RelationalOperatorExpression
    | LikeOperatorExpression
    | ConcatenationOperatorExpression
    | ShortCircuitLogicalOperatorExpression
    | LogicalOperatorExpression
    | ShiftOperatorExpression
    | AwaitOperatorExpression
    ;

ArithmeticOperatorExpression
    : UnaryPlusExpression
    | UnaryMinusExpression
    | AdditionOperatorExpression
    | SubtractionOperatorExpression
    | MultiplicationOperatorExpression
    | DivisionOperatorExpression
    | ModuloOperatorExpression
    | ExponentOperatorExpression
    ;

UnaryPlusExpression
    : ""+"" 'operator' Expression 'value' {{UnaryExpression}}
    ;

UnaryMinusExpression
    : ""-"" 'operator' Expression 'value' {{UnaryExpression}}
    ;

AdditionOperatorExpression
    : Expression 'left' ""+"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

SubtractionOperatorExpression
    : Expression 'left' ""-"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

MultiplicationOperatorExpression
    : Expression 'left' ""*"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

DivisionOperatorExpression
    : FPDivisionOperatorExpression
    | IntegerDivisionOperatorExpression
    ;

FPDivisionOperatorExpression
    : Expression 'left' ""/"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

IntegerDivisionOperatorExpression
    : Expression 'left' ""\"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ModuloOperatorExpression
    : Expression 'left' ""Mod"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ExponentOperatorExpression
    : Expression 'left' ""^"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

RelationalOperatorExpression
    : Expression 'left' ""="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<>"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""<="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">="" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

LikeOperatorExpression
    : Expression 'left' ""Like"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ConcatenationOperatorExpression
    : Expression 'left' ""&"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

LogicalOperatorExpression
    : ""Not"" 'operator' Expression 'value' {{UnaryExpression}}
    | Expression 'left' ""And"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""Or"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""Xor"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ShortCircuitLogicalOperatorExpression
    : Expression 'left' ""AndAlso"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' ""OrElse"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

ShiftOperatorExpression
    : Expression 'left' ""<<"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    | Expression 'left' "">>"" 'operator' <LineTerminator>? Expression 'right' {{BinaryExpression}}
    ;

#BooleanExpression
#    : Expression
#    ;

LambdaExpression
    : SingleLineLambda
    | MultiLineLambda
    ;

SingleLineLambda
    : LambdaModifier 'modifier'* ""Function"" 'functionToken' ( OpenParenthesis ParameterList? CloseParenthesis )? Expression 'statement' {{FunctionLambdaExpression}}
    | LambdaModifier 'modifier'* ""Sub"" 'subToken' ( OpenParenthesis ParameterList? CloseParenthesis )? Statement 'statement' {{SubLambdaExpression}}	### added LambdaModifier since it also exists for MultiLineSubLambda
    ;

MultiLineLambda
    : MultiLineFunctionLambda
    | MultiLineSubLambda
    ;

MultiLineFunctionLambda
    : LambdaModifier 'modifier'* ""Function"" 'functionToken' ( OpenParenthesis ParameterList? CloseParenthesis )? ( ""As"" 'asToken' TypeName 'type' )? <LineTerminator>
      Block
      ""End"" 'endToken' ""Function"" 'functionToken' {{FunctionLambdaExpression}}
    ;

MultiLineSubLambda
    : LambdaModifier 'modifier'* ""Sub"" 'subToken' ( OpenParenthesis ParameterList? CloseParenthesis )? <LineTerminator>
      Block
      ""End"" 'endToken' ""Sub"" 'subToken' {{SubLambdaExpression}}
    ;

LambdaModifier
    : ""Async"" | ""Iterator""
    ;

QueryExpression
    : FromOrAggregateQueryOperator (<LineTerminator>? QueryOperator)* {{}}
    ;

FromOrAggregateQueryOperator
    : FromQueryOperator
    | AggregateQueryOperator
    ;

QueryOperator
    : FromQueryOperator
    | AggregateQueryOperator
    | SelectQueryOperator
    | DistinctQueryOperator
    | WhereQueryOperator
    | OrderByQueryOperator
    | PartitionQueryOperator
    | LetQueryOperator
    | GroupByQueryOperator
    | JoinOrGroupJoinQueryOperator
    ;

JoinOrGroupJoinQueryOperator
    : JoinQueryOperator
    | GroupJoinQueryOperator
    ;

CollectionRangeVariableDeclarationList
    : CollectionRangeVariableDeclaration ( Comma CollectionRangeVariableDeclaration )*
    ;

CollectionRangeVariableDeclaration
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? ""In"" 'inToken' <LineTerminator>? Expression 'value'
    ;

ExpressionRangeVariableDeclarationList
    : ExpressionRangeVariableDeclaration 'declaration' ( Comma ExpressionRangeVariableDeclaration 'declaration')*
    ;

ExpressionRangeVariableDeclaration
    : <Identifier> 'name' ( ""As"" 'asToken' TypeName 'type' )? Equals Expression 'value' {{}}
    ;

FromQueryOperator
    : ""From"" 'fromToken' <LineTerminator>? CollectionRangeVariableDeclarationList
    ;

JoinQueryOperator
    : ""Join"" 'joinToken' <LineTerminator>? CollectionRangeVariableDeclaration
      JoinOrGroupJoinQueryOperator? <LineTerminator>? ""On"" 'onToken' <LineTerminator>? JoinConditionList
    ;

JoinConditionList
    : JoinCondition ( ""And"" 'andToken' <LineTerminator>? JoinCondition )*
    ;

JoinCondition
    : Expression 'lhs' ""Equals"" 'equalsToken' <LineTerminator>? Expression 'rhs'
    ;

LetQueryOperator
    : ""Let"" 'letToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

SelectQueryOperator
    : ""Select"" 'selectToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

DistinctQueryOperator
    : ""Distinct"" 'distinctToken'
    ;

WhereQueryOperator
    : ""Where"" <LineTerminator>? Expression 'expression'	###
    ;

PartitionQueryOperator
    : ""Take"" 'takeToken' <LineTerminator>? Expression 'expression'
    | ""Take"" 'takeToken' ""While"" 'whileToken' <LineTerminator>? Expression 'expression'	###
    | ""Skip"" 'skipToken' <LineTerminator>? Expression 'expression'
    | ""Skip"" 'skipToken' ""While"" 'whileToken' <LineTerminator>? Expression 'expression'	###
    ;

OrderByQueryOperator
    : ""Order"" 'orderToken' ""By"" 'byToken' <LineTerminator>? OrderExpressionList
    ;

OrderExpressionList
    : OrderExpression 'expression' ( Comma OrderExpression 'expression' )*
    ;

OrderExpression
    : Expression 'value' Ordering 'order'? {{}}
    ;

Ordering
    : ""Ascending"" | ""Descending""
    ;

GroupByQueryOperator
    : ""Group"" 'groupToken' ( <LineTerminator>? ExpressionRangeVariableDeclarationList )?
      <LineTerminator>? ""By"" 'byToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

AggregateQueryOperator
    : ""Aggregate"" 'aggregateToken' <LineTerminator>? CollectionRangeVariableDeclaration QueryOperator*
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

GroupJoinQueryOperator
    : ""Group"" 'groupToken' ""Join"" 'joinToken' <LineTerminator>? CollectionRangeVariableDeclaration
      JoinOrGroupJoinQueryOperator? <LineTerminator>? ""On"" 'onToken' <LineTerminator>? JoinConditionList
      <LineTerminator>? ""Into"" 'intoToken' <LineTerminator>? ExpressionRangeVariableDeclarationList
    ;

ConditionalExpression
    : ""If"" 'ifToken' OpenParenthesis Expression 'booleanValue' Comma Expression 'trueValue' Comma Expression 'falseValue' CloseParenthesis {{}}	###
    | ""If"" 'ifToken' OpenParenthesis Expression 'booleanValue' Comma Expression 'trueValue' CloseParenthesis {{}}
    ;
/*
XMLLiteralExpression
    : XMLDocument
    | XMLElement
    | XMLProcessingInstruction
    | XMLComment
    | XMLCDATASection
    ;

<XMLCharacter>
    : \t
    | \n
    | \r
    | [\x0020-\xD7FF]
    | [\xE000-\xFFFD]
#    | '<Unicode characters 0x10000 - 0x10FFFF>'
    ;

<XMLString>
    : <XMLCharacter>+
    ;

<XMLWhitespace>
    : <XMLWhitespaceCharacter>+
    ;

<XMLWhitespaceCharacter>
    : \r
    | \n
    | \ 
    | \t
    ;

<XMLNameCharacter>
    : <XMLLetter>
    | <XMLDigit>
    | \.
    | \-
    | \_
    | \:
    | <XMLCombiningCharacter>
#    | <XMLExtender>
    ;

<XMLNameStartCharacter>
    : <XMLLetter>
    | \_
    | \:
    ;

<XMLName>
    : <XMLNameStartCharacter> <XMLNameCharacter>*
    ;

<XMLLetter>
    : <isLetter>
    ;

<XMLDigit>
    : <isDigit>
    ;

XMLCombiningCharacter
    : [\x0300-\x036F]
    ;

#<XMLExtender>
#    : '<Unicode character as defined in the Extender production of the XML 1.0 specification>'
#    ;

XMLEmbeddedExpression
    : ""<%="" <LineTerminator>? Expression <LineTerminator>? ""%>""
    ;

XMLDocument
    : XMLDocumentPrologue XMLMisc* XMLDocumentBody XMLMisc*
    ;

XMLDocumentPrologue
    : ""<?xml"" XMLVersion XMLEncoding? XMLStandalone? <XMLWhitespace>? ""?>""
    ;

XMLVersion
    : <XMLWhitespace> ""version"" <XMLWhitespace>? ""="" <XMLWhitespace>? <XMLVersionNumberValue>
    ;

<XMLVersionNumberValue>
    : <SingleQuoteCharacter> 1 \. 0 <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> 1 \. 0 <DoubleQuoteCharacter>
    ;

XMLEncoding
    : <XMLWhitespace> ""encoding"" <XMLWhitespace>? ""="" <XMLWhitespace>? XMLEncodingNameValue
    ;

<XMLEncodingNameValue>
    : <SingleQuoteCharacter> <XMLEncodingName> <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> <XMLEncodingName> <DoubleQuoteCharacter>
    ;

<XMLEncodingName>
    : <XMLLatinAlphaCharacter> <XMLEncodingNameCharacter>*
    ;

<XMLEncodingNameCharacter>
    : <XMLUnderscoreCharacter>
    | <XMLLatinAlphaCharacter>
    | <XMLNumericCharacter>
    | <XMLPeriodCharacter>
    | <XMLDashCharacter>
    ;

<XMLLatinAlphaCharacter>
    : [a-zA-Z]
    ;

<XMLNumericCharacter>
    : \d
    ;

<XMLHexNumericCharacter>
    : <XMLNumericCharacter>
    | [a-fA-F]
    ;

<XMLPeriodCharacter>
    : \.
    ;

<XMLUnderscoreCharacter>
    : _
    ;

<XMLDashCharacter>
    : \x002d
    ;

XMLStandalone
    : <XMLWhitespace> ""standalone"" <XMLWhitespace>? ""="" <XMLWhitespace>? <XMLYesNoValue>
    ;

<XMLYesNoValue>
    : <SingleQuoteCharacter> <XMLYesNo> <SingleQuoteCharacter>
    | <DoubleQuoteCharacter> <XMLYesNo> <DoubleQuoteCharacter>
    ;

<XMLYesNo>
    : yes
    | no
    ;

XMLMisc
    : XMLComment
    | XMLProcessingInstruction
    | XMLWhitespace
    ;

XMLDocumentBody
    : XMLElement
    | XMLEmbeddedExpression
    ;

XMLElement
    : XMLEmptyElement
    | XMLElementStart XMLContent XMLElementEnd
    ;

XMLEmptyElement
    : '<' XMLQualifiedNameOrExpression XMLAttribute* XMLWhitespace? '/' '>'
    ;

XMLElementStart
    : '<' XMLQualifiedNameOrExpression XMLAttribute* XMLWhitespace? '>'
    ;

XMLElementEnd
    : '<' '/' '>'
    | '<' '/' XMLQualifiedName XMLWhitespace? '>'
    ;

XMLContent
    : XMLCharacterData? ( XMLNestedContent XMLCharacterData? )+
    ;

XMLCharacterData
    : '<Any XMLCharacterDataString that does not contain the string ""]]>"">'
    ;

XMLCharacterDataString
    : '<Any Unicode character except < or &>'+
    ;

XMLNestedContent
    : XMLElement
    | XMLReference
    | XMLCDATASection
    | XMLProcessingInstruction
    | XMLComment
    | XMLEmbeddedExpression
    ;
XMLAttribute

    : XMLWhitespace XMLAttributeName XMLWhitespace? '=' XMLWhitespace? XMLAttributeValue
    | XMLWhitespace XMLEmbeddedExpression
    ;

XMLAttributeName
    : XMLQualifiedNameOrExpression
    | XMLNamespaceAttributeName
    ;

XMLAttributeValue
    : <DoubleQuoteCharacter> XMLAttributeDoubleQuoteValueCharacter* <DoubleQuoteCharacter>
    | <SingleQuoteCharacter> XMLAttributeSingleQuoteValueCharacter* <SingleQuoteCharacter>
    | XMLEmbeddedExpression
    ;

XMLAttributeDoubleQuoteValueCharacter
    : '<Any XMLCharacter except <, &, or DoubleQuoteCharacter>'
    | XMLReference
    ;

XMLAttributeSingleQuoteValueCharacter
    : '<Any XMLCharacter except <, &, or SingleQuoteCharacter>'
    | XMLReference
    ;

XMLReference
    : XMLEntityReference
    | XMLCharacterReference
    ;

XMLEntityReference
    : '&' XMLEntityName ';'
    ;

XMLEntityName
    : 'lt' | 'gt' | 'amp' | 'apos' | 'quot'
    ;

XMLCharacterReference
    : '&' '#' XMLNumericCharacter+ ';'
    | '&' '#' 'x' XMLHexNumericCharacter+ ';'
    ;

XMLNamespaceAttributeName
    : XMLPrefixedNamespaceAttributeName
    | XMLDefaultNamespaceAttributeName
    ;

XMLPrefixedNamespaceAttributeName
    : ""xmlns"" "":"" XMLNamespaceName
    ;

XMLDefaultNamespaceAttributeName
    : ""xmlns""
    ;

XMLNamespaceName
    : XMLNamespaceNameStartCharacter XMLNamespaceNameCharacter*
    ;

XMLNamespaceNameStartCharacter
    : '<Any XMLNameCharacter except :>'
    ;

XMLNamespaceNameCharacter
    : XMLLetter
    | '_'
    ;

XMLQualifiedNameOrExpression
    : XMLQualifiedName
    | XMLEmbeddedExpression
    ;

XMLQualifiedName
    : XMLPrefixedName
    | XMLUnprefixedName
    ;

XMLPrefixedName
    : XMLNamespaceName ':' XMLNamespaceName
    ;

XMLUnprefixedName
    : XMLNamespaceName
    ;

XMLProcessingInstruction
    : '<' '?' XMLProcessingTarget ( XMLWhitespace XMLProcessingValue? )? '?' '>'
    ;

XMLProcessingTarget
    : '<Any XMLName except a casing permutation of the string ""xml"">'
    ;

XMLProcessingValue
    : '<Any XMLString that does not contain a question-mark followed by "">"">'
    ;

XMLComment
    : '<' '!' '-' '-' XMLCommentCharacter* '-' '-' '>'
    ;

XMLCommentCharacter
    : '<Any XMLCharacter except dash (0x002D)>'
    | '-' '<Any XMLCharacter except dash (0x002D)>'
    ;

XMLCDATASection
    : '<' '!' ( 'CDATA' '[' XMLCDATASectionString? ']' )? '>'
    ;

XMLCDATASectionString
    : '<Any XMLString that does not contain the string ""]]>"">'
    ;

XMLMemberAccessExpression
    : Expression '.' <LineTerminator>? '<' XMLQualifiedName '>'
    | Expression '.' <LineTerminator>? '@' <LineTerminator>? '<' XMLQualifiedName '>'
    | Expression '.' <LineTerminator>? '@' <LineTerminator>? <IdentifierOrKeyword>
    | Expression '.' '.' '.' <LineTerminator>? '<' XMLQualifiedName '>'
    ;
*/
AwaitOperatorExpression
    : ""Await"" 'awaitToken' Expression 'value' {{AwaitExpression}}
    ;"
]

{ #category : #'file types' }
VBNetParser class >> fileExtensions [
	^ #('.vb')
]

{ #category : #accessing }
VBNetParser class >> keywords [
	^ keywords
		ifNil:
			[ keywords := (#(
            'AddHandler'       'AddressOf'       'Alias'        'And'
            'AndAlso'          'As'              'Boolean'      'ByRef'
            'Byte'             'ByVal'           'Call'         'Case'        
            'Catch'            'CBool'           'CByte'        'CChar'       
            'CDate'            'CDbl'            'CDec'         'Char'        
            'CInt'             'Class'           'CLng'         'CObj'        
            'Const'            'Continue'        'CSByte'       'CShort'      
            'CSng'             'CStr'            'CType'        'CUInt'       
            'CULng'            'CUShort'         'Date'         'Decimal'     
            'Declare'          'Default'         'Delegate'     'Dim'         
            'DirectCast'       'Do'              'Double'       'Each'        
            'Else'             'ElseIf'          'End'          'EndIf'       
            'Enum'             'Erase'           'Error'        'Event'       
            'Exit'             'False'           'Finally'      'For'         
            'Friend'           'Function'        'Get'          'GetType'     
            'GetXmlNamespace'  'Global'          'GoSub'        'GoTo'        
            'Handles'          'If'              'Implements'   'Imports'     
            'In'               'Inherits'        'Integer'      'Interface'   
            'Is'               'IsNot'           'Let'          'Lib'         
            'Like'             'Long'            'Loop'         'Me'          
            'Mod'              'Module'          'MustInherit'  'MustOverride'
            'MyBase'           'MyClass'         'Namespace'    'Narrowing'   
            'New'              'Next'            'Not'          'Nothing'     
            'NotInheritable'   'NotOverridable'  'Object'       'Of'          
            'On'               'Operator'        'Option'       'Optional'    
            'Or'               'OrElse'          'Overloads'    'Overridable' 
            'Overrides'        'ParamArray'      'Partial'      'Private'     
            'Property'         'Protected'       'Public'       'RaiseEvent'  
            'ReadOnly'         'ReDim'           'REM'          'RemoveHandler'
            'Resume'           'Return'          'SByte'        'Select'      
            'Set'              'Shadows'         'Shared'       'Short'       
            'Single'           'Static'          'Step'         'Stop'        
            'String'           'Structure'       'Sub'          'SyncLock'    
            'Then'             'Throw'           'To'           'True'        
            'Try'              'TryCast'         'TypeOf'       'UInteger'    
            'ULong'            'UShort'          'Using'        'Variant'     
            'Wend'             'When'            'While'        'Widening'    
            'With'             'WithEvents'      'WriteOnly'    'Xor' 
			 ) collect: [ :each | each asUppercase ]) asSet ]
]

{ #category : #generated }
VBNetParser class >> reduceTable [
^#(
	#(233 0 #nil 3428353 false ) 
	#(271 0 #reduceActionForOptionStatement__option__1: 14571521 false ) 
	#(233 2 #liftFirstValue: 3428354 false ) 
	#(232 2 #reduceActionForFile1: 3421185 false ) 
	#(272 0 #reduceActionForOptionStatement__option__1: 14598145 false ) 
	#(326 0 #reduceActionForOptionStatement__option__1: 19908609 false ) 
	#(322 0 #reduceActionForOptionStatement__option__1: 19402753 false ) 
	#(333 0 #reduceActionForOptionStatement__option__1: 20804609 false ) 
	#(270 2 #reduceActionForStart2: 14559234 false ) 
	#(271 2 #reduceActionForOptionStatement__option__2: 14571522 false ) 
	#(274 1 #liftFirstValue: 14893057 false ) 
	#(274 1 #liftFirstValue: 14893058 false ) 
	#(274 1 #liftFirstValue: 14893059 false ) 
	#(274 1 #liftFirstValue: 14893060 false ) 
	#(270 3 #reduceActionForStart3: 14559235 false ) 
	#(253 1 #reduceActionForAttributes1: 13308929 false ) 
	#(254 1 #reduceActionForAttributeBlock__attributeBlock__1: 13326337 false ) 
	#(270 3 #reduceActionForStart1: 14559233 false ) 
	#(272 2 #reduceActionForOptionStatement__option__2: 14598146 false ) 
	#(295 1 #reduceActionForAttributesNamespaceDeclaration1: 17313793 false ) 
	#(273 1 #reduceActionForNamespaceMemberDeclaration_1: 14654465 false ) 
	#(294 1 #reduceActionForAttributes1: 17204225 false ) 
	#(294 1 #reduceActionForAttributesNamespaceDeclaration1: 17204226 false ) 
	#(296 1 #liftFirstValue: 17439746 false ) 
	#(297 1 #liftFirstValue: 17515521 false ) 
	#(297 1 #liftFirstValue: 17515524 false ) 
	#(297 1 #liftFirstValue: 17515522 false ) 
	#(296 1 #liftFirstValue: 17439745 false ) 
	#(297 1 #liftFirstValue: 17515523 false ) 
	#(297 1 #liftFirstValue: 17515525 false ) 
	#(279 1 #liftFirstValue: 15571969 false ) 
	#(279 1 #liftFirstValue: 15571970 false ) 
	#(275 3 #reduceActionForOptionExplicitStatement2: 15033346 false ) 
	#(276 1 #liftFirstValue: 15198210 false ) 
	#(276 1 #liftFirstValue: 15198209 false ) 
	#(275 3 #reduceActionForOptionExplicitStatement1: 15033345 false ) 
	#(280 3 #reduceActionForOptionExplicitStatement2: 15618050 false ) 
	#(280 3 #reduceActionForOptionExplicitStatement1: 15618049 false ) 
	#(277 3 #reduceActionForOptionExplicitStatement2: 15241218 false ) 
	#(277 3 #reduceActionForOptionExplicitStatement1: 15241217 false ) 
	#(260 1 #liftFirstValue: 13760513 false ) 
	#(317 1 #liftFirstValue: 18994178 false ) 
	#(319 1 #liftFirstValue: 19192833 false ) 
	#(317 1 #liftFirstValue: 18994180 false ) 
	#(317 1 #liftFirstValue: 18994179 false ) 
	#(318 1 #liftFirstValue: 19100675 false ) 
	#(320 1 #liftFirstValue: 19311618 false ) 
	#(319 1 #liftFirstValue: 19192838 false ) 
	#(319 1 #liftFirstValue: 19192840 false ) 
	#(260 1 #liftFirstValue: 13760514 false ) 
	#(308 1 #reduceActionForBuiltInTypeName1: 18406401 false ) 
	#(319 1 #liftFirstValue: 19192834 false ) 
	#(319 1 #liftFirstValue: 19192836 false ) 
	#(320 1 #liftFirstValue: 19311617 false ) 
	#(317 1 #liftFirstValue: 18994181 false ) 
	#(319 1 #liftFirstValue: 19192837 false ) 
	#(319 1 #liftFirstValue: 19192839 false ) 
	#(319 1 #liftFirstValue: 19192835 false ) 
	#(303 0 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___1: 17948673 false ) 
	#(258 0 #reduceActionFor__Comma_Attribute__attribute____1: 13552641 false ) 
	#(259 1 #reduceActionForAttribute1: 13593601 false ) 
	#(300 1 #liftFirstValue: 17818625 false ) 
	#(300 1 #liftFirstValue: 17818626 false ) 
	#(308 1 #reduceActionForBuiltInTypeName1: 18406402 false ) 
	#(317 1 #liftFirstValue: 18994177 false ) 
	#(318 1 #liftFirstValue: 19100673 false ) 
	#(318 1 #liftFirstValue: 19100674 false ) 
	#(284 0 #reduceActionFor__Comma_Attribute__attribute____1: 15945729 false ) 
	#(285 1 #liftFirstValue: 15987713 false ) 
	#(285 1 #liftFirstValue: 15987714 false ) 
	#(287 1 #reduceActionForMembersImportsClause1: 16205825 false ) 
	#(298 1 #liftFirstValue: 17688578 false ) 
	#(299 1 #liftFirstValue: 17748993 false ) 
	#(299 1 #liftFirstValue: 17748994 false ) 
	#(298 1 #liftFirstValue: 17688577 false ) 
	#(290 1 #reduceActionForNamespaceName2: 16911362 false ) 
	#(293 0 #reduceActionFor__Comma_Attribute__attribute____1: 17131521 false ) 
	#(290 1 #reduceActionForNamespaceName1: 16911361 false ) 
	#(295 2 #reduceActionForAttributesNamespaceDeclaration2: 17313794 false ) 
	#(254 2 #reduceActionForOptionStatement__option__2: 13326338 false ) 
	#(273 2 #reduceActionForNamespaceMemberDeclaration_2: 14654466 false ) 
	#(242 1 #liftFirstValue: 12374019 false ) 
	#(242 1 #liftFirstValue: 12374020 false ) 
	#(242 1 #liftFirstValue: 12374018 false ) 
	#(242 1 #liftFirstValue: 12374017 false ) 
	#(309 1 #liftFirstValue: 18494466 false ) 
	#(309 1 #liftFirstValue: 18494465 false ) 
	#(322 2 #reduceActionForOptionStatement__option__2: 19402754 false ) 
	#(329 1 #liftFirstValue: 20256770 false ) 
	#(329 1 #liftFirstValue: 20256771 false ) 
	#(329 1 #liftFirstValue: 20256772 false ) 
	#(329 1 #liftFirstValue: 20256769 false ) 
	#(326 2 #reduceActionForOptionStatement__option__2: 19908610 false ) 
	#(335 1 #liftFirstValue: 21163010 false ) 
	#(335 1 #liftFirstValue: 21163009 false ) 
	#(333 2 #reduceActionForOptionStatement__option__2: 20804610 false ) 
	#(278 4 #reduceActionForOptionCompareStatement2: 15401986 false ) 
	#(278 4 #reduceActionForOptionCompareStatement1: 15401985 false ) 
	#(275 4 #reduceActionForOptionCompareStatement2: 15033348 false ) 
	#(275 4 #reduceActionForOptionCompareStatement1: 15033347 false ) 
	#(280 4 #reduceActionForOptionCompareStatement2: 15618052 false ) 
	#(280 4 #reduceActionForOptionCompareStatement1: 15618051 false ) 
	#(277 4 #reduceActionForOptionCompareStatement2: 15241220 false ) 
	#(277 4 #reduceActionForOptionCompareStatement1: 15241219 false ) 
	#(235 1 #liftFirstValue: 3808257 false ) 
	#(301 2 #reduceActionForQualifiedTypeName1: 17888257 false ) 
	#(255 3 #reduceActionForAttributeBlock1: 13367297 false ) 
	#(256 2 #reduceActionForAttributeList1: 13509633 false ) 
	#(264 0 #reduceActionFor__Comma_Attribute__attribute____1: 14076929 false ) 
	#(629 0 #reduceActionForOptionStatement__option__1: 55547905 false ) 
	#(239 1 #liftFirstValue: 4068353 false ) 
	#(281 3 #reduceActionForImportsStatement2: 15776770 false ) 
	#(281 3 #reduceActionForImportsStatement1: 15776769 false ) 
	#(282 2 #reduceActionForAttributeList1: 15900673 false ) 
	#(311 2 #reduceActionForNullableTypeName1: 18628609 false ) 
	#(348 2 #reduceActionForArrayTypeName1: 22851585 false ) 
	#(349 1 #reduceActionForAttributes1: 22928385 false ) 
	#(350 1 #reduceActionForAttributeBlock__attributeBlock__1: 22953985 false ) 
	#(291 2 #reduceActionForAttributeList1: 17082369 false ) 
	#(289 0 #reduceActionFor__Comma_Attribute__attribute____1: 16770049 false ) 
	#(356 1 #liftFirstValue: 23436289 false ) 
	#(356 1 #liftFirstValue: 23436290 false ) 
	#(235 2 #liftFirstValue: 3808258 false ) 
	#(303 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___2: 17948674 false ) 
	#(301 3 #reduceActionForQualifiedTypeName2: 17888258 false ) 
	#(255 4 #reduceActionForAttributeBlock3: 13367299 false ) 
	#(255 4 #reduceActionForAttributeBlock1: 13367298 false ) 
	#(255 4 #reduceActionForAttributeBlock4: 13367300 false ) 
	#(234 1 #liftFirstValue: 3702785 false ) 
	#(258 2 #reduceActionFor__Comma_Attribute__attribute____2: 13552642 false ) 
	#(259 3 #reduceActionForAttribute4: 13593604 false ) 
	#(236 1 #liftFirstValue: 3872769 false ) 
	#(608 1 #liftFirstValue: 51559425 false ) 
	#(608 1 #liftFirstValue: 51559426 false ) 
	#(608 1 #liftFirstValue: 51559427 false ) 
	#(608 1 #liftFirstValue: 51559428 false ) 
	#(608 1 #liftFirstValue: 51559430 false ) 
	#(608 1 #liftFirstValue: 51559429 false ) 
	#(608 1 #liftFirstValue: 51559431 false ) 
	#(608 1 #liftFirstValue: 51559432 false ) 
	#(608 1 #liftFirstValue: 51559433 false ) 
	#(608 1 #liftFirstValue: 51559434 false ) 
	#(608 1 #liftFirstValue: 51559435 false ) 
	#(608 1 #liftFirstValue: 51559436 false ) 
	#(608 1 #liftFirstValue: 51559437 false ) 
	#(608 1 #liftFirstValue: 51559438 false ) 
	#(608 1 #liftFirstValue: 51559439 false ) 
	#(608 1 #liftFirstValue: 51559440 false ) 
	#(578 1 #reduceActionForMemberAccessBase3: 48133123 false ) 
	#(564 1 #reduceActionForInstanceExpression1: 46336001 false ) 
	#(578 1 #reduceActionForMemberAccessBase5: 48133125 false ) 
	#(578 1 #reduceActionForMemberAccessBase4: 48133124 false ) 
	#(237 1 #liftFirstValue: 3939329 false ) 
	#(241 1 #reduceActionForLiteral1: 5623809 false ) 
	#(241 1 #reduceActionForLiteral2: 5623810 false ) 
	#(241 1 #reduceActionForLiteral3: 5623811 false ) 
	#(241 1 #reduceActionForLiteral4: 5623812 false ) 
	#(241 1 #reduceActionForLiteral5: 5623813 false ) 
	#(241 1 #reduceActionForLiteral6: 5623814 false ) 
	#(241 1 #reduceActionForLiteral7: 5623815 false ) 
	#(565 1 #reduceActionForSimpleNameExpression1: 46389249 false ) 
	#(259 3 #reduceActionForAttribute2: 13593602 false ) 
	#(562 1 #liftFirstValue: 46197761 false ) 
	#(261 1 #reduceActionForAttributes1: 13814785 false ) 
	#(262 1 #reduceActionForAttributes1: 13997057 false ) 
	#(261 1 #reduceActionForAttributeArguments3: 13814787 false ) 
	#(267 0 #reduceActionFor__Comma_Attribute__attribute____1: 14215169 false ) 
	#(578 1 #liftFirstValue: 48133122 false ) 
	#(560 1 #liftFirstValue: 45993985 false ) 
	#(269 1 #liftFirstValue: 14399489 false ) 
	#(559 1 #liftFirstValue: 45524993 false ) 
	#(580 1 #liftFirstValue: 48436225 false ) 
	#(561 1 #liftFirstValue: 46038017 false ) 
	#(580 1 #liftFirstValue: 48436226 false ) 
	#(561 1 #liftFirstValue: 46038018 false ) 
	#(580 1 #liftFirstValue: 48436227 false ) 
	#(561 1 #liftFirstValue: 46038019 false ) 
	#(580 1 #liftFirstValue: 48436228 false ) 
	#(561 1 #liftFirstValue: 46038020 false ) 
	#(561 1 #liftFirstValue: 46038021 false ) 
	#(559 1 #liftFirstValue: 45524994 false ) 
	#(580 1 #liftFirstValue: 48436229 false ) 
	#(567 1 #liftFirstValue: 46609409 false ) 
	#(567 1 #liftFirstValue: 46609410 false ) 
	#(567 1 #liftFirstValue: 46609411 false ) 
	#(580 1 #liftFirstValue: 48436230 false ) 
	#(559 1 #liftFirstValue: 45524995 false ) 
	#(580 1 #liftFirstValue: 48436231 false ) 
	#(559 1 #liftFirstValue: 45524996 false ) 
	#(578 1 #liftFirstValue: 48133121 false ) 
	#(580 1 #liftFirstValue: 48436232 false ) 
	#(559 1 #liftFirstValue: 45524997 false ) 
	#(580 1 #liftFirstValue: 48436233 false ) 
	#(559 1 #liftFirstValue: 45524998 false ) 
	#(589 1 #liftFirstValue: 49419265 false ) 
	#(605 1 #liftFirstValue: 50865153 false ) 
	#(589 1 #liftFirstValue: 49419266 false ) 
	#(603 1 #liftFirstValue: 50617345 false ) 
	#(603 1 #liftFirstValue: 50617346 false ) 
	#(589 1 #liftFirstValue: 49419267 false ) 
	#(580 1 #liftFirstValue: 48436234 false ) 
	#(559 1 #liftFirstValue: 45524999 false ) 
	#(559 1 #liftFirstValue: 45525000 false ) 
	#(609 1 #liftFirstValue: 51755009 false ) 
	#(610 1 #liftFirstValue: 52061185 false ) 
	#(610 1 #liftFirstValue: 52061186 false ) 
	#(610 1 #liftFirstValue: 52061187 false ) 
	#(610 1 #liftFirstValue: 52061188 false ) 
	#(610 1 #liftFirstValue: 52061189 false ) 
	#(610 1 #liftFirstValue: 52061190 false ) 
	#(616 1 #liftFirstValue: 52953089 false ) 
	#(616 1 #liftFirstValue: 52953090 false ) 
	#(610 1 #liftFirstValue: 52061191 false ) 
	#(610 1 #liftFirstValue: 52061192 false ) 
	#(609 1 #liftFirstValue: 51755010 false ) 
	#(609 1 #liftFirstValue: 51755011 false ) 
	#(609 1 #liftFirstValue: 51755012 false ) 
	#(609 1 #liftFirstValue: 51755014 false ) 
	#(609 1 #liftFirstValue: 51755013 false ) 
	#(609 1 #liftFirstValue: 51755015 false ) 
	#(559 1 #liftFirstValue: 45525002 false ) 
	#(627 1 #liftFirstValue: 55453697 false ) 
	#(580 1 #liftFirstValue: 48436236 false ) 
	#(627 1 #liftFirstValue: 55453698 false ) 
	#(630 1 #liftFirstValue: 55941121 false ) 
	#(630 1 #liftFirstValue: 55941122 false ) 
	#(559 1 #liftFirstValue: 45525003 false ) 
	#(636 0 #reduceActionFor__LineTerminator___QueryOperator__1: 56645633 false ) 
	#(637 1 #reduceActionForFromOrAggregateQueryOperator1: 56693761 false ) 
	#(637 1 #reduceActionForFromOrAggregateQueryOperator2: 56693762 false ) 
	#(580 1 #liftFirstValue: 48436235 false ) 
	#(559 1 #liftFirstValue: 45525001 false ) 
	#(609 1 #liftFirstValue: 51755016 false ) 
	#(239 2 #liftFirstValue: 4068354 false ) 
	#(286 3 #reduceActionForAliasImportsClause1: 16123905 false ) 
	#(284 2 #reduceActionFor__Comma_Attribute__attribute____2: 15945730 false ) 
	#(353 1 #reduceActionForAttributeBlock__attributeBlock__1: 23097345 false ) 
	#(351 2 #reduceActionForArrayTypeModifier1: 23001089 false ) 
	#(352 1 #reduceActionForAttributes1: 23081985 false ) 
	#(350 2 #reduceActionForOptionStatement__option__2: 22953986 false ) 
	#(290 3 #reduceActionForNamespaceName3: 16911363 false ) 
	#(293 2 #reduceActionFor__Comma_Attribute__attribute____2: 17131522 false ) 
	#(367 2 #reduceActionForFunctionSignature1: 24433665 false ) 
	#(366 2 #reduceActionForSubSignature1: 24266753 false ) 
	#(355 4 #reduceActionForDelegateDeclaration2: 23255042 false ) 
	#(355 4 #reduceActionForDelegateDeclaration1: 23255041 false ) 
	#(341 0 #reduceActionForInterfaceBase_1: 22277121 false ) 
	#(338 0 #reduceActionForOptionStatement__option__1: 21664769 false ) 
	#(327 0 #reduceActionForInterfaceBase_1: 20084737 false ) 
	#(301 4 #reduceActionForQualifiedTypeName3: 17888259 false ) 
	#(307 0 #reduceActionFor__Comma_Attribute__attribute____1: 18372609 false ) 
	#(302 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__1: 17948673 false ) 
	#(255 5 #reduceActionForAttributeBlock6: 13367302 false ) 
	#(255 5 #reduceActionForAttributeBlock4: 13367301 false ) 
	#(234 2 #liftFirstValue: 3702786 false ) 
	#(257 2 #reduceActionFor__Comma_Attribute__attribute___1: 13552641 false ) 
	#(579 2 #reduceActionForDictionaryAccessExpression1: 48324609 false ) 
	#(611 2 #reduceActionForUnaryPlusExpression1: 52362241 false ) 
	#(612 2 #reduceActionForUnaryPlusExpression1: 52451329 false ) 
	#(577 2 #reduceActionForMemberAccessExpression1: 47926273 false ) 
	#(566 2 #reduceActionForAddressOfExpression1: 46521345 false ) 
	#(668 0 #reduceActionFor__LineTerminator___QueryOperator__1: 59805697 false ) 
	#(671 2 #reduceActionForAwaitOperatorExpression1: 67081217 false ) 
	#(648 2 #reduceActionForFromQueryOperator1: 57775105 false ) 
	#(642 0 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: 57259009 false ) 
	#(590 2 #reduceActionForObjectCreationExpression1: 49536001 false ) 
	#(606 2 #reduceActionForAnonymousObjectCreationExpression1: 50924545 false ) 
	#(624 2 #reduceActionForUnaryPlusExpression1: 54518785 false ) 
	#(237 2 #liftFirstValue: 3939330 false ) 
	#(236 2 #liftSecondValue: 3872770 false ) 
	#(240 1 #liftFirstValue: 4120577 false ) 
	#(238 1 #liftFirstValue: 4002817 false ) 
	#(598 2 #reduceActionForCollectionInitializer1: 50345985 false ) 
	#(602 1 #liftFirstValue: 50545665 false ) 
	#(602 1 #liftFirstValue: 50545666 false ) 
	#(601 0 #reduceActionFor__Comma_Attribute__attribute____1: 50499585 false ) 
	#(259 4 #reduceActionForAttribute3: 13593603 false ) 
	#(263 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 14076929 false ) 
	#(264 2 #reduceActionFor__Comma_Attribute__attribute____2: 14076930 false ) 
	#(265 2 #reduceActionForAttributeList1: 14136321 false ) 
	#(262 2 #reduceActionForAttributePositionalArgumentList2: 13997058 false ) 
	#(585 0 #reduceActionFor__Comma_Attribute__attribute____1: 49073153 false ) 
	#(633 1 #liftFirstValue: 56543233 false ) 
	#(633 1 #liftFirstValue: 56543234 false ) 
	#(629 2 #reduceActionForOptionStatement__option__2: 55547906 false ) 
	#(634 2 #reduceActionForQueryExpression1: 56593409 false ) 
	#(283 2 #reduceActionFor__Comma_Attribute__attribute___1: 15945729 false ) 
	#(351 3 #reduceActionForArrayTypeModifier2: 23001090 false ) 
	#(353 2 #reduceActionForOptionStatement__option__2: 23097346 false ) 
	#(290 4 #reduceActionForNamespaceName4: 16911364 false ) 
	#(292 2 #reduceActionFor__Comma_Attribute__attribute___1: 17131521 false ) 
	#(289 2 #reduceActionForNamespaceMemberDeclaration_2: 16770050 false ) 
	#(355 5 #reduceActionForDelegateDeclaration4: 23255044 false ) 
	#(355 5 #reduceActionForDelegateDeclaration3: 23255043 false ) 
	#(368 0 #reduceActionForOptionStatement__option__1: 24627201 false ) 
	#(396 0 #reduceActionForOptionStatement__option__1: 27765761 false ) 
	#(367 3 #reduceActionForFunctionSignature7: 24433671 false ) 
	#(366 3 #reduceActionForSubSignature4: 24266756 false ) 
	#(323 1 #reduceActionForAttributeBlock__attributeBlock__1: 19572737 false ) 
	#(342 0 #reduceActionForOptionStatement__option__1: 22298625 false ) 
	#(370 0 #reduceActionForOptionStatement__option__1: 24704001 false ) 
	#(422 0 #reduceActionForOptionStatement__option__1: 31261697 false ) 
	#(409 0 #reduceActionForOptionStatement__option__1: 29174785 false ) 
	#(383 0 #reduceActionForOptionStatement__option__1: 26686465 false ) 
	#(447 0 #reduceActionForOptionStatement__option__1: 33198081 false ) 
	#(405 0 #reduceActionForOptionStatement__option__1: 28695553 false ) 
	#(452 0 #reduceActionForOptionStatement__option__1: 33751041 false ) 
	#(328 0 #reduceActionForOptionStatement__option__1: 20113409 false ) 
	#(334 0 #reduceActionForOptionStatement__option__1: 21010433 false ) 
	#(301 5 #reduceActionForQualifiedTypeName5: 17888261 false ) 
	#(301 5 #reduceActionForQualifiedTypeName4: 17888260 false ) 
	#(305 2 #reduceActionForAttributeList1: 18332673 false ) 
	#(304 4 #reduceActionForTypeArguments1: 18238465 false ) 
	#(302 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__3: 17948675 false ) 
	#(302 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__2: 17948674 false ) 
	#(259 5 #reduceActionForAttribute5: 13593605 false ) 
	#(577 3 #reduceActionForMemberAccessExpression3: 47926275 false ) 
	#(648 3 #reduceActionForFromQueryOperator2: 57775106 false ) 
	#(640 2 #reduceActionForCollectionRangeVariableDeclarationList1: 57177089 false ) 
	#(572 0 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: 47012865 false ) 
	#(569 1 #liftFirstValue: 46879745 false ) 
	#(569 1 #liftFirstValue: 46879746 false ) 
	#(354 1 #reduceActionForArrayNameModifier1: 23164929 false ) 
	#(354 1 #reduceActionForArrayNameModifier2: 23164930 false ) 
	#(590 3 #reduceActionForObjectCreationExpression2: 49536002 false ) 
	#(591 1 #liftFirstValue: 49758209 false ) 
	#(591 1 #liftFirstValue: 49758210 false ) 
	#(240 2 #liftFirstValue: 4120578 false ) 
	#(268 3 #reduceActionForVariablePropertyInitializer1: 14273537 false ) 
	#(563 3 #reduceActionForParenthesizedExpression1: 46237697 false ) 
	#(238 2 #liftSecondValue: 4002818 false ) 
	#(598 3 #reduceActionForCollectionInitializer2: 50345986 false ) 
	#(599 2 #reduceActionForAttributeList1: 50442241 false ) 
	#(261 3 #reduceActionForAttributeArguments2: 13814786 false ) 
	#(263 2 #reduceActionFor__Comma_Attribute__attribute___1: 14076930 false ) 
	#(267 2 #reduceActionFor__Comma_Attribute__attribute____2: 14215170 false ) 
	#(623 3 #reduceActionForConcatenationOperatorExpression1: 54379521 false ) 
	#(615 3 #reduceActionForConcatenationOperatorExpression1: 52812801 false ) 
	#(613 3 #reduceActionForConcatenationOperatorExpression1: 52541441 false ) 
	#(614 3 #reduceActionForConcatenationOperatorExpression1: 52675585 false ) 
	#(617 3 #reduceActionForConcatenationOperatorExpression1: 53064705 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53610501 false ) 
	#(626 3 #reduceActionForConcatenationOperatorExpression1: 55175169 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53610505 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53610499 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53610497 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53610503 false ) 
	#(621 3 #reduceActionForConcatenationOperatorExpression1: 53610507 false ) 
	#(626 3 #reduceActionForConcatenationOperatorExpression1: 55175171 false ) 
	#(624 3 #reduceActionForConcatenationOperatorExpression1: 54518786 false ) 
	#(625 3 #reduceActionForConcatenationOperatorExpression1: 54919169 false ) 
	#(576 3 #reduceActionForConcatenationOperatorExpression1: 47564801 false ) 
	#(576 3 #reduceActionForConcatenationOperatorExpression1: 47564803 false ) 
	#(622 3 #reduceActionForConcatenationOperatorExpression1: 54246401 false ) 
	#(619 3 #reduceActionForConcatenationOperatorExpression1: 53342209 false ) 
	#(624 3 #reduceActionForConcatenationOperatorExpression1: 54518788 false ) 
	#(625 3 #reduceActionForConcatenationOperatorExpression1: 54919171 false ) 
	#(624 3 #reduceActionForConcatenationOperatorExpression1: 54518790 false ) 
	#(618 3 #reduceActionForConcatenationOperatorExpression1: 53200897 false ) 
	#(620 3 #reduceActionForConcatenationOperatorExpression1: 53476353 false ) 
	#(581 3 #reduceActionForInvocationExpression1: 48772097 false ) 
	#(582 1 #reduceActionForArgumentList1: 48890881 false ) 
	#(583 1 #reduceActionForAttributes1: 49019905 false ) 
	#(582 1 #reduceActionForArgumentList3: 48890883 false ) 
	#(577 3 #reduceActionForMemberAccessExpression5: 47926277 false ) 
	#(579 3 #reduceActionForDictionaryAccessExpression2: 48324610 false ) 
	#(475 0 #reduceActionForOptionStatement__option__1: 36972545 false ) 
	#(628 3 #reduceActionForSingleLineLambda1: 55524353 false ) 
	#(482 1 #liftFirstValue: 37399555 false ) 
	#(482 1 #liftFirstValue: 37399554 false ) 
	#(544 1 #reduceActionForEndStatement1: 44504065 false ) 
	#(535 1 #reduceActionForResumeStatement1: 43768833 false ) 
	#(545 1 #reduceActionForReturnStatement1: 44557313 false ) 
	#(482 1 #liftFirstValue: 37399553 false ) 
	#(543 1 #reduceActionForStopStatement1: 44447745 false ) 
	#(530 1 #reduceActionForThrowStatement1: 43140097 false ) 
	#(477 1 #liftFirstValue: 37105666 false ) 
	#(477 1 #liftFirstValue: 37105665 false ) 
	#(628 3 #reduceActionForSingleLineLambda4: 55524356 false ) 
	#(472 1 #liftFirstValue: 36512769 false ) 
	#(472 1 #liftFirstValue: 36512770 false ) 
	#(472 1 #liftFirstValue: 36512771 false ) 
	#(472 1 #liftFirstValue: 36512772 false ) 
	#(472 1 #liftFirstValue: 36512773 false ) 
	#(485 1 #liftFirstValue: 37790721 false ) 
	#(485 1 #liftFirstValue: 37790722 false ) 
	#(485 1 #liftFirstValue: 37790723 false ) 
	#(472 1 #liftFirstValue: 36512774 false ) 
	#(489 1 #liftFirstValue: 38312961 false ) 
	#(489 1 #liftFirstValue: 38312962 false ) 
	#(489 1 #liftFirstValue: 38312963 false ) 
	#(472 1 #liftFirstValue: 36512775 false ) 
	#(472 1 #liftFirstValue: 36512776 false ) 
	#(495 1 #liftFirstValue: 39134209 false ) 
	#(496 1 #liftFirstValue: 39203841 false ) 
	#(496 1 #liftFirstValue: 39203842 false ) 
	#(495 1 #liftFirstValue: 39134210 false ) 
	#(472 1 #liftFirstValue: 36512777 false ) 
	#(512 1 #liftFirstValue: 40994817 false ) 
	#(512 1 #liftFirstValue: 40994818 false ) 
	#(514 1 #liftFirstValue: 41270273 false ) 
	#(514 1 #liftFirstValue: 41270274 false ) 
	#(512 1 #liftFirstValue: 40994819 false ) 
	#(512 1 #liftFirstValue: 40994820 false ) 
	#(472 1 #liftFirstValue: 36512778 false ) 
	#(524 1 #liftFirstValue: 42472449 false ) 
	#(525 1 #liftFirstValue: 42568706 false ) 
	#(525 1 #liftFirstValue: 42568705 false ) 
	#(524 1 #liftFirstValue: 42472450 false ) 
	#(531 1 #liftFirstValue: 43219969 false ) 
	#(531 1 #liftFirstValue: 43219970 false ) 
	#(531 1 #liftFirstValue: 43219971 false ) 
	#(472 1 #liftFirstValue: 36512779 false ) 
	#(537 1 #liftFirstValue: 43905025 false ) 
	#(537 1 #liftFirstValue: 43905026 false ) 
	#(537 1 #liftFirstValue: 43905027 false ) 
	#(537 1 #liftFirstValue: 43905028 false ) 
	#(537 1 #liftFirstValue: 43905029 false ) 
	#(537 1 #liftFirstValue: 43905030 false ) 
	#(472 1 #liftFirstValue: 36512780 false ) 
	#(546 1 #liftFirstValue: 44640257 false ) 
	#(546 1 #liftFirstValue: 44640258 false ) 
	#(472 1 #liftFirstValue: 36512781 false ) 
	#(472 1 #liftFirstValue: 36512782 false ) 
	#(494 1 #reduceActionForInvocationStatement1: 39045121 false ) 
	#(656 1 #liftFirstValue: 58525697 false ) 
	#(636 2 #reduceActionFor__LineTerminator___QueryOperator__2: 56645634 false ) 
	#(635 1 #reduceActionForAttributes1: 56645633 false ) 
	#(638 1 #reduceActionForQueryOperator10: 56784906 false ) 
	#(638 1 #reduceActionForFromOrAggregateQueryOperator1: 56784897 false ) 
	#(639 1 #reduceActionForAttributes1: 57085953 false ) 
	#(638 1 #reduceActionForQueryOperator8: 56784904 false ) 
	#(638 1 #reduceActionForQueryOperator3: 56784899 false ) 
	#(638 1 #reduceActionForQueryOperator4: 56784900 false ) 
	#(638 1 #reduceActionForQueryOperator5: 56784901 false ) 
	#(638 1 #reduceActionForQueryOperator7: 56784903 false ) 
	#(638 1 #reduceActionForQueryOperator6: 56784902 false ) 
	#(638 1 #reduceActionForQueryOperator9: 56784905 false ) 
	#(638 1 #reduceActionForFromOrAggregateQueryOperator2: 56784898 false ) 
	#(639 1 #reduceActionForJoinOrGroupJoinQueryOperator2: 57085954 false ) 
	#(292 3 #reduceActionFor_______period___LineTerminator____IdentifierOrKeyword___name__2: 17131522 false ) 
	#(368 1 #reduceActionForAttributes1: 24627202 false ) 
	#(367 4 #reduceActionForFunctionSignature3: 24433667 false ) 
	#(394 0 #reduceActionFor__Comma_Attribute__attribute____1: 27697153 false ) 
	#(366 4 #reduceActionForSubSignature2: 24266754 false ) 
	#(324 2 #reduceActionForEnumMemberDeclaration2: 19713026 false ) 
	#(324 2 #reduceActionForEnumMemberDeclaration1: 19713025 false ) 
	#(323 2 #reduceActionForOptionStatement__option__2: 19572738 false ) 
	#(460 0 #reduceActionForOptionStatement__option__1: 34552833 false ) 
	#(411 0 #reduceActionForOptionStatement__option__1: 29396993 false ) 
	#(373 0 #reduceActionForOptionStatement__option__1: 25241601 false ) 
	#(341 2 #reduceActionForInterfaceBase_2: 22277122 false ) 
	#(247 1 #liftFirstValue: 12797953 false ) 
	#(247 1 #liftFirstValue: 12797954 false ) 
	#(246 1 #reduceActionForTypeParameter1: 12688385 false ) 
	#(245 0 #reduceActionFor__Comma_Attribute__attribute____1: 12616705 false ) 
	#(462 1 #liftFirstValue: 34857986 false ) 
	#(430 1 #liftFirstValue: 31845382 false ) 
	#(462 1 #liftFirstValue: 34857989 false ) 
	#(463 1 #liftFirstValue: 34979842 false ) 
	#(461 1 #liftFirstValue: 34695173 false ) 
	#(461 1 #liftFirstValue: 34695175 false ) 
	#(461 1 #liftFirstValue: 34695172 false ) 
	#(461 1 #liftFirstValue: 34695174 false ) 
	#(462 1 #liftFirstValue: 34857987 false ) 
	#(430 1 #liftFirstValue: 31845380 false ) 
	#(461 1 #liftFirstValue: 34695170 false ) 
	#(430 1 #liftFirstValue: 31845378 false ) 
	#(461 1 #liftFirstValue: 34695171 false ) 
	#(430 1 #liftFirstValue: 31845379 false ) 
	#(430 1 #liftFirstValue: 31845381 false ) 
	#(462 1 #liftFirstValue: 34857988 false ) 
	#(461 1 #liftFirstValue: 34695169 false ) 
	#(430 1 #liftFirstValue: 31845377 false ) 
	#(339 1 #liftFirstValue: 21811201 false ) 
	#(338 2 #reduceActionForOptionStatement__option__2: 21664770 false ) 
	#(339 1 #liftFirstValue: 21811205 false ) 
	#(362 1 #liftFirstValue: 23855105 false ) 
	#(364 1 #liftFirstValue: 24018945 false ) 
	#(364 1 #liftFirstValue: 24018946 false ) 
	#(364 1 #liftFirstValue: 24018947 false ) 
	#(364 1 #liftFirstValue: 24018948 false ) 
	#(362 1 #liftFirstValue: 23855106 false ) 
	#(381 1 #liftFirstValue: 26546177 false ) 
	#(381 1 #liftFirstValue: 26546178 false ) 
	#(339 1 #liftFirstValue: 21811207 false ) 
	#(339 1 #liftFirstValue: 21811204 false ) 
	#(407 1 #liftFirstValue: 29022209 false ) 
	#(407 1 #liftFirstValue: 29022210 false ) 
	#(339 1 #liftFirstValue: 21811203 false ) 
	#(339 1 #liftFirstValue: 21811202 false ) 
	#(429 1 #reduceActionForAttributeBlock__attributeBlock__1: 31735809 false ) 
	#(339 1 #liftFirstValue: 21811206 false ) 
	#(444 1 #liftFirstValue: 32795649 false ) 
	#(444 1 #liftFirstValue: 32795650 false ) 
	#(444 1 #liftFirstValue: 32795651 false ) 
	#(462 1 #liftFirstValue: 34857985 false ) 
	#(463 1 #liftFirstValue: 34979841 false ) 
	#(450 1 #reduceActionForAttributeBlock__attributeBlock__1: 33531905 false ) 
	#(327 2 #reduceActionForInterfaceBase_2: 20084738 false ) 
	#(469 0 #reduceActionForOptionStatement__option__1: 35819521 false ) 
	#(301 6 #reduceActionForQualifiedTypeName6: 17888262 false ) 
	#(307 2 #reduceActionFor__Comma_Attribute__attribute____2: 18372610 false ) 
	#(302 4 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__4: 17948676 false ) 
	#(259 6 #reduceActionForAttribute6: 13593606 false ) 
	#(643 3 #reduceActionForCollectionRangeVariableDeclaration1: 57313281 false ) 
	#(668 2 #reduceActionFor__LineTerminator___QueryOperator__2: 59805698 false ) 
	#(642 2 #reduceActionFor__Comma_CollectionRangeVariableDeclaration___2: 57259010 false ) 
	#(570 2 #reduceActionForQualifiedOpenTypeName1: 46948353 false ) 
	#(568 4 #reduceActionForGetTypeExpression1: 46759937 false ) 
	#(596 1 #reduceActionForFieldInitializer1: 50092033 false ) 
	#(595 0 #reduceActionFor__Comma_Attribute__attribute____1: 50042881 false ) 
	#(597 2 #reduceActionForObjectCollectionInitializer1: 50242561 false ) 
	#(590 4 #reduceActionForObjectCreationExpression3: 49536003 false ) 
	#(442 0 #reduceActionFor__Comma_Attribute__attribute____1: 32644097 false ) 
	#(443 1 #liftFirstValue: 32676865 false ) 
	#(604 4 #reduceActionForArrayCreationExpression1: 50701313 false ) 
	#(575 4 #reduceActionForTypeOfIsExpression1: 47428609 false ) 
	#(601 2 #reduceActionFor__Comma_Attribute__attribute____2: 50499586 false ) 
	#(266 2 #reduceActionFor__Comma_Attribute__attribute___1: 14215169 false ) 
	#(623 4 #reduceActionForConcatenationOperatorExpression2: 54379522 false ) 
	#(615 4 #reduceActionForConcatenationOperatorExpression2: 52812802 false ) 
	#(613 4 #reduceActionForConcatenationOperatorExpression2: 52541442 false ) 
	#(614 4 #reduceActionForConcatenationOperatorExpression2: 52675586 false ) 
	#(617 4 #reduceActionForConcatenationOperatorExpression2: 53064706 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53610502 false ) 
	#(626 4 #reduceActionForConcatenationOperatorExpression2: 55175170 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53610506 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53610500 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53610498 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53610504 false ) 
	#(621 4 #reduceActionForConcatenationOperatorExpression2: 53610508 false ) 
	#(626 4 #reduceActionForConcatenationOperatorExpression2: 55175172 false ) 
	#(624 4 #reduceActionForConcatenationOperatorExpression2: 54518787 false ) 
	#(625 4 #reduceActionForConcatenationOperatorExpression2: 54919170 false ) 
	#(576 4 #reduceActionForConcatenationOperatorExpression2: 47564802 false ) 
	#(576 4 #reduceActionForConcatenationOperatorExpression2: 47564804 false ) 
	#(622 4 #reduceActionForConcatenationOperatorExpression2: 54246402 false ) 
	#(619 4 #reduceActionForConcatenationOperatorExpression2: 53342210 false ) 
	#(624 4 #reduceActionForConcatenationOperatorExpression2: 54518789 false ) 
	#(625 4 #reduceActionForConcatenationOperatorExpression2: 54919172 false ) 
	#(624 4 #reduceActionForConcatenationOperatorExpression2: 54518791 false ) 
	#(618 4 #reduceActionForConcatenationOperatorExpression2: 53200898 false ) 
	#(620 4 #reduceActionForConcatenationOperatorExpression2: 53476354 false ) 
	#(583 2 #reduceActionForAttributePositionalArgumentList2: 49019906 false ) 
	#(581 4 #reduceActionForInvocationExpression2: 48772098 false ) 
	#(584 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 49073153 false ) 
	#(585 2 #reduceActionFor__Comma_Attribute__attribute____2: 49073154 false ) 
	#(577 4 #reduceActionForMemberAccessExpression7: 47926279 false ) 
	#(607 4 #reduceActionForCastExpression4: 51060740 false ) 
	#(473 1 #reduceActionForAttributes1: 36960257 false ) 
	#(494 2 #reduceActionForInvocationStatement2: 39045122 false ) 
	#(542 1 #liftFirstValue: 44397569 false ) 
	#(542 1 #liftFirstValue: 44397570 false ) 
	#(542 1 #liftFirstValue: 44397571 false ) 
	#(541 2 #reduceActionForContinueStatement1: 44303361 false ) 
	#(517 1 #liftFirstValue: 41668610 false ) 
	#(517 1 #liftFirstValue: 41668609 false ) 
	#(552 2 #reduceActionForEraseStatement1: 44976129 false ) 
	#(555 0 #reduceActionFor__Comma_Attribute__attribute____1: 45095937 false ) 
	#(532 2 #reduceActionForErrorStatement1: 43322369 false ) 
	#(540 1 #liftFirstValue: 44203009 false ) 
	#(540 1 #liftFirstValue: 44203010 false ) 
	#(540 1 #liftFirstValue: 44203014 false ) 
	#(540 1 #liftFirstValue: 44203015 false ) 
	#(540 1 #liftFirstValue: 44203012 false ) 
	#(540 1 #liftFirstValue: 44203013 false ) 
	#(540 1 #liftFirstValue: 44203016 false ) 
	#(540 1 #liftFirstValue: 44203011 false ) 
	#(539 2 #reduceActionForExitStatement1: 44130305 false ) 
	#(519 1 #reduceActionForLoopControlVariable1: 42010625 false ) 
	#(310 0 #reduceActionForIdentifierModifiers1: 18552833 false ) 
	#(519 1 #liftFirstValue: 42010627 false ) 
	#(538 2 #reduceActionForGoToStatement1: 44056577 false ) 
	#(486 2 #reduceActionForRaiseEventStatement1: 37896193 false ) 
	#(547 2 #reduceActionForRedimStatement1: 44713985 false ) 
	#(550 0 #reduceActionFor__Comma_Attribute__attribute____1: 44855297 false ) 
	#(536 1 #liftFirstValue: 43854849 false ) 
	#(536 1 #liftFirstValue: 43854850 false ) 
	#(535 2 #reduceActionForResumeStatement2: 43768834 false ) 
	#(545 2 #reduceActionForReturnStatement2: 44557314 false ) 
	#(530 2 #reduceActionForThrowStatement2: 43140098 false ) 
	#(557 1 #reduceActionForAttributes1: 45286401 false ) 
	#(433 0 #reduceActionFor__Comma_Attribute__attribute____1: 32040961 false ) 
	#(434 1 #reduceActionForVariableDeclarator2: 32089090 false ) 
	#(437 0 #reduceActionFor__Comma_Attribute__attribute____1: 32364545 false ) 
	#(557 1 #reduceActionForUsingResources2: 45286402 false ) 
	#(558 2 #reduceActionForYieldStatement1: 45424641 false ) 
	#(476 2 #reduceActionForLabelDeclarationStatement1: 37024769 false ) 
	#(481 2 #reduceActionForLocalDeclarationStatement1: 37304321 false ) 
	#(492 1 #liftFirstValue: 38711303 false ) 
	#(492 1 #liftFirstValue: 38711298 false ) 
	#(492 1 #liftFirstValue: 38711301 false ) 
	#(492 1 #liftFirstValue: 38711302 false ) 
	#(492 1 #liftFirstValue: 38711299 false ) 
	#(492 1 #liftFirstValue: 38711304 false ) 
	#(492 1 #liftFirstValue: 38711305 false ) 
	#(492 1 #liftFirstValue: 38711300 false ) 
	#(492 1 #liftFirstValue: 38711297 false ) 
	#(646 0 #reduceActionFor__Comma_Attribute__attribute____1: 57569281 false ) 
	#(654 2 #reduceActionForLetQueryOperator1: 58303489 false ) 
	#(655 2 #reduceActionForLetQueryOperator1: 58409985 false ) 
	#(658 2 #reduceActionForPartitionQueryOperator5: 58677253 false ) 
	#(658 2 #reduceActionForPartitionQueryOperator1: 58677249 false ) 
	#(657 2 #liftSecondValue: 58589185 false ) 
	#(635 2 #reduceActionFor__LineTerminator___QueryOperator_2: 56645634 false ) 
	#(288 7 #reduceActionForNamespaceDeclaration4: 16645124 false ) 
	#(288 7 #reduceActionForNamespaceDeclaration3: 16645123 false ) 
	#(288 7 #reduceActionForNamespaceDeclaration2: 16645122 false ) 
	#(288 7 #reduceActionForNamespaceDeclaration1: 16645121 false ) 
	#(367 5 #reduceActionForFunctionSignature2: 24433666 false ) 
	#(367 5 #reduceActionForFunctionSignature5: 24433669 false ) 
	#(392 2 #reduceActionForAttributeList1: 27654145 false ) 
	#(397 1 #liftFirstValue: 27924482 false ) 
	#(397 1 #liftFirstValue: 27924481 false ) 
	#(397 1 #liftFirstValue: 27924483 false ) 
	#(397 1 #liftFirstValue: 27924484 false ) 
	#(396 2 #reduceActionForOptionStatement__option__2: 27765762 false ) 
	#(395 2 #reduceActionForParameter1: 27737089 false ) 
	#(367 5 #reduceActionForFunctionSignature9: 24433673 false ) 
	#(366 5 #reduceActionForSubSignature3: 24266755 false ) 
	#(366 5 #reduceActionForSubSignature5: 24266757 false ) 
	#(324 3 #reduceActionForEnumMemberDeclaration6: 19713030 false ) 
	#(324 3 #reduceActionForEnumMemberDeclaration5: 19713029 false ) 
	#(346 0 #reduceActionFor__Comma_Attribute__attribute____1: 22622209 false ) 
	#(347 1 #liftFirstValue: 22668289 false ) 
	#(342 2 #reduceActionForOptionStatement__option__2: 22298626 false ) 
	#(347 1 #liftFirstValue: 22668291 false ) 
	#(363 1 #liftFirstValue: 23944193 false ) 
	#(365 1 #liftFirstValue: 24165377 false ) 
	#(365 1 #liftFirstValue: 24165378 false ) 
	#(347 1 #liftFirstValue: 22668290 false ) 
	#(347 1 #liftFirstValue: 22668292 false ) 
	#(246 2 #reduceActionForTypeParameter2: 12688386 false ) 
	#(246 2 #reduceActionForTypeParameter3: 12688387 false ) 
	#(377 1 #liftFirstValue: 26142730 false ) 
	#(377 1 #liftFirstValue: 26142729 false ) 
	#(378 1 #liftFirstValue: 26317825 false ) 
	#(377 1 #liftFirstValue: 26142725 false ) 
	#(377 1 #liftFirstValue: 26142727 false ) 
	#(377 1 #liftFirstValue: 26142724 false ) 
	#(377 1 #liftFirstValue: 26142726 false ) 
	#(377 1 #liftFirstValue: 26142728 false ) 
	#(377 1 #liftFirstValue: 26142722 false ) 
	#(377 1 #liftFirstValue: 26142723 false ) 
	#(377 1 #liftFirstValue: 26142721 false ) 
	#(370 2 #reduceActionForOptionStatement__option__2: 24704002 false ) 
	#(388 1 #liftFirstValue: 27365379 false ) 
	#(388 1 #liftFirstValue: 27365378 false ) 
	#(388 1 #liftFirstValue: 27365377 false ) 
	#(383 2 #reduceActionForOptionStatement__option__2: 26686466 false ) 
	#(406 1 #liftFirstValue: 28957698 false ) 
	#(406 1 #liftFirstValue: 28957697 false ) 
	#(405 2 #reduceActionForOptionStatement__option__2: 28695554 false ) 
	#(413 1 #liftFirstValue: 29719554 false ) 
	#(413 1 #liftFirstValue: 29719555 false ) 
	#(413 1 #liftFirstValue: 29719553 false ) 
	#(409 2 #reduceActionForOptionStatement__option__2: 29174786 false ) 
	#(423 1 #liftFirstValue: 31392770 false ) 
	#(423 1 #liftFirstValue: 31392769 false ) 
	#(422 2 #reduceActionForOptionStatement__option__2: 31261698 false ) 
	#(429 2 #reduceActionForOptionStatement__option__2: 31735810 false ) 
	#(447 2 #reduceActionForOptionStatement__option__2: 33198082 false ) 
	#(450 2 #reduceActionForOptionStatement__option__2: 33531906 false ) 
	#(452 2 #reduceActionForOptionStatement__option__2: 33751042 false ) 
	#(330 3 #reduceActionForClassBase2: 20358146 false ) 
	#(330 3 #reduceActionForClassBase1: 20358145 false ) 
	#(316 0 #reduceActionFor__Comma_Attribute__attribute____1: 18946049 false ) 
	#(331 1 #liftFirstValue: 20485121 false ) 
	#(328 2 #reduceActionForOptionStatement__option__2: 20113410 false ) 
	#(331 1 #liftFirstValue: 20485125 false ) 
	#(331 1 #liftFirstValue: 20485127 false ) 
	#(331 1 #liftFirstValue: 20485122 false ) 
	#(331 1 #liftFirstValue: 20485124 false ) 
	#(331 1 #liftFirstValue: 20485123 false ) 
	#(331 1 #liftFirstValue: 20485126 false ) 
	#(331 1 #liftFirstValue: 20485128 false ) 
	#(336 1 #liftFirstValue: 21224449 false ) 
	#(334 2 #reduceActionForOptionStatement__option__2: 21010434 false ) 
	#(336 1 #liftFirstValue: 21224453 false ) 
	#(336 1 #liftFirstValue: 21224455 false ) 
	#(336 1 #liftFirstValue: 21224452 false ) 
	#(336 1 #liftFirstValue: 21224451 false ) 
	#(336 1 #liftFirstValue: 21224450 false ) 
	#(336 1 #liftFirstValue: 21224454 false ) 
	#(336 1 #liftFirstValue: 21224456 false ) 
	#(306 2 #reduceActionFor__Comma_Attribute__attribute___1: 18372609 false ) 
	#(643 4 #reduceActionForCollectionRangeVariableDeclaration2: 57313282 false ) 
	#(667 5 #reduceActionForAggregateQueryOperator1: 59692033 false ) 
	#(641 2 #reduceActionFor__Comma_CollectionRangeVariableDeclaration__1: 57259009 false ) 
	#(572 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList___2: 47012866 false ) 
	#(570 3 #reduceActionForQualifiedOpenTypeName2: 46948354 false ) 
	#(596 2 #reduceActionForFieldInitializer4: 50092036 false ) 
	#(592 4 #reduceActionForObjectMemberInitializer1: 49867777 false ) 
	#(593 2 #reduceActionForAttributeList1: 49983489 false ) 
	#(590 5 #reduceActionForObjectCreationExpression4: 49536004 false ) 
	#(439 3 #reduceActionForArraySizeInitializationModifier1: 32502785 false ) 
	#(440 2 #reduceActionForAttributeList1: 32613377 false ) 
	#(590 5 #reduceActionForObjectCreationExpression5: 49536005 false ) 
	#(575 5 #reduceActionForTypeOfIsExpression2: 47428610 false ) 
	#(565 5 #reduceActionForSimpleNameExpression2: 46389250 false ) 
	#(600 2 #reduceActionFor__Comma_Attribute__attribute___1: 50499585 false ) 
	#(588 0 #reduceActionForInterfaceBase_1: 49223681 false ) 
	#(582 3 #reduceActionForArgumentList2: 48890882 false ) 
	#(584 2 #reduceActionFor__Comma_Attribute__attribute___1: 49073154 false ) 
	#(479 1 #reduceActionFor__Comma_AttributeArgumentExpression__argument____1: 37220353 false ) 
	#(474 1 #nil 36972545 false ) 
	#(478 1 #liftFirstValue: 37161985 false ) 
	#(475 2 #reduceActionForOptionStatement__option__2: 36972546 false ) 
	#(480 1 #reduceActionFor_______statementSeparator__Statement__statement_____1: 37220353 false ) 
	#(478 1 #reduceActionForStatements2: 37161986 false ) 
	#(628 5 #reduceActionForSingleLineLambda2: 55524354 false ) 
	#(553 2 #reduceActionForAttributeList1: 45052929 false ) 
	#(312 1 #liftFirstValue: 18709505 false ) 
	#(310 1 #reduceActionForIdentifierModifiers3: 18552835 false ) 
	#(310 1 #reduceActionForIdentifierModifiers2: 18552834 false ) 
	#(533 3 #reduceActionForOnErrorStatement1: 43401217 false ) 
	#(534 1 #liftFirstValue: 43499523 false ) 
	#(547 3 #reduceActionForRedimStatement2: 44713986 false ) 
	#(548 2 #reduceActionForAttributeList1: 44815361 false ) 
	#(551 2 #reduceActionForRedimClause1: 44893185 false ) 
	#(504 0 #reduceActionForOptionStatement__option__1: 40210433 false ) 
	#(527 0 #reduceActionForOptionStatement__option__1: 42719233 false ) 
	#(438 2 #reduceActionForVariableIdentifier1: 32423937 false ) 
	#(431 2 #reduceActionForAttributeList1: 31983617 false ) 
	#(435 2 #reduceActionForAttributeList1: 32296961 false ) 
	#(628 5 #reduceActionForSingleLineLambda5: 55524357 false ) 
	#(490 3 #reduceActionForRegularAssignmentStatement1: 38438913 false ) 
	#(491 3 #reduceActionForRegularAssignmentStatement1: 38552577 false ) 
	#(666 0 #nil 59588609 false ) 
	#(644 2 #reduceActionForAttributeList1: 57473025 false ) 
	#(654 3 #reduceActionForLetQueryOperator2: 58303490 false ) 
	#(663 1 #reduceActionForOrderExpression1: 59248641 false ) 
	#(659 3 #reduceActionForOrderByQueryOperator1: 59033601 false ) 
	#(662 0 #reduceActionFor__Comma_Attribute__attribute____1: 59200513 false ) 
	#(655 3 #reduceActionForLetQueryOperator2: 58409986 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator7: 58677255 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator6: 58677254 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator3: 58677251 false ) 
	#(658 3 #reduceActionForPartitionQueryOperator2: 58677250 false ) 
	#(657 3 #reduceActionForWhereQueryOperator2: 58589186 false ) 
	#(395 3 #reduceActionForParameter5: 27737093 false ) 
	#(394 2 #reduceActionFor__Comma_Attribute__attribute____2: 27697154 false ) 
	#(398 2 #reduceActionForParameterIdentifier1: 28003329 false ) 
	#(367 6 #reduceActionForFunctionSignature8: 24433672 false ) 
	#(367 6 #reduceActionForFunctionSignature11: 24433675 false ) 
	#(366 6 #reduceActionForSubSignature6: 24266758 false ) 
	#(324 4 #reduceActionForEnumMemberDeclaration4: 19713028 false ) 
	#(324 4 #reduceActionForEnumMemberDeclaration3: 19713027 false ) 
	#(321 8 #reduceActionForEnumDeclaration4: 19367940 false ) 
	#(321 8 #reduceActionForEnumDeclaration3: 19367939 false ) 
	#(321 8 #reduceActionForEnumDeclaration2: 19367938 false ) 
	#(321 8 #reduceActionForEnumDeclaration1: 19367937 false ) 
	#(344 2 #reduceActionForAttributeList1: 22572033 false ) 
	#(343 3 #reduceActionForInterfaceBase2: 22454274 false ) 
	#(343 3 #reduceActionForInterfaceBase1: 22454273 false ) 
	#(379 1 #liftFirstValue: 26408962 false ) 
	#(379 1 #liftFirstValue: 26408961 false ) 
	#(373 2 #reduceActionForOptionStatement__option__2: 25241602 false ) 
	#(414 1 #liftFirstValue: 29795329 false ) 
	#(411 2 #reduceActionForOptionStatement__option__2: 29396994 false ) 
	#(464 1 #liftFirstValue: 35061763 false ) 
	#(464 1 #liftFirstValue: 35061762 false ) 
	#(464 1 #liftFirstValue: 35061764 false ) 
	#(464 1 #liftFirstValue: 35061761 false ) 
	#(464 1 #liftFirstValue: 35061765 false ) 
	#(460 2 #reduceActionForOptionStatement__option__2: 34552834 false ) 
	#(252 1 #reduceActionForConstraint4: 13078532 false ) 
	#(252 1 #reduceActionForConstraint2: 13078530 false ) 
	#(252 1 #reduceActionForConstraint3: 13078531 false ) 
	#(248 2 #reduceActionForTypeParameterConstraints1: 12841985 false ) 
	#(252 1 #reduceActionForConstraint1: 13078529 false ) 
	#(243 5 #reduceActionForTypeParameterList1: 12538881 false ) 
	#(245 2 #reduceActionFor__Comma_Attribute__attribute____2: 12616706 false ) 
	#(246 3 #reduceActionForTypeParameter4: 12688388 false ) 
	#(337 8 #reduceActionForModuleDeclaration4: 21505028 false ) 
	#(337 8 #reduceActionForModuleDeclaration3: 21505027 false ) 
	#(380 1 #reduceActionForHandlesOrImplements2: 26474498 false ) 
	#(380 1 #reduceActionForHandlesOrImplements1: 26474497 false ) 
	#(389 1 #liftFirstValue: 27452417 false ) 
	#(389 1 #liftFirstValue: 27452419 false ) 
	#(389 1 #liftFirstValue: 27452418 false ) 
	#(412 0 #reduceActionForParametersOrType1: 29588481 false ) 
	#(426 0 #reduceActionFor__Comma_Attribute__attribute____1: 31512577 false ) 
	#(428 3 #reduceActionForVariableMemberDeclaration2: 31690754 false ) 
	#(428 3 #reduceActionForVariableMemberDeclaration1: 31690753 false ) 
	#(445 2 #reduceActionForPropertySignature1: 32951297 false ) 
	#(449 3 #reduceActionForMustOverridePropertyMemberDeclaration2: 33474562 false ) 
	#(449 3 #reduceActionForMustOverridePropertyMemberDeclaration1: 33474561 false ) 
	#(454 0 #reduceActionFor__Equals_Expression__value___1: 33947649 false ) 
	#(337 8 #reduceActionForModuleDeclaration2: 21505026 false ) 
	#(337 8 #reduceActionForModuleDeclaration1: 21505025 false ) 
	#(314 2 #reduceActionForAttributeList1: 18893825 false ) 
	#(313 3 #reduceActionForInterfaceBase2: 18764802 false ) 
	#(313 3 #reduceActionForInterfaceBase1: 18764801 false ) 
	#(470 1 #liftFirstValue: 36162566 false ) 
	#(470 1 #liftFirstValue: 36162563 false ) 
	#(470 1 #liftFirstValue: 36162561 false ) 
	#(470 1 #liftFirstValue: 36162564 false ) 
	#(470 1 #liftFirstValue: 36162562 false ) 
	#(470 1 #liftFirstValue: 36162565 false ) 
	#(469 2 #reduceActionForOptionStatement__option__2: 35819522 false ) 
	#(577 6 #reduceActionForMemberAccessExpression2: 47926274 false ) 
	#(667 6 #reduceActionForAggregateQueryOperator5: 59692037 false ) 
	#(643 5 #reduceActionForCollectionRangeVariableDeclaration3: 57313283 false ) 
	#(667 6 #reduceActionForAggregateQueryOperator2: 59692034 false ) 
	#(667 6 #reduceActionForAggregateQueryOperator3: 59692035 false ) 
	#(607 6 #reduceActionForCastExpression3: 51060739 false ) 
	#(607 6 #reduceActionForCastExpression3: 51060737 false ) 
	#(570 4 #reduceActionForQualifiedOpenTypeName3: 46948355 false ) 
	#(573 3 #reduceActionForTypeArityList1: 47302657 false ) 
	#(574 1 #reduceActionForAttributes1: 47390721 false ) 
	#(571 2 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__1: 47012865 false ) 
	#(670 6 #reduceActionForConditionalExpression2: 60272642 false ) 
	#(595 2 #reduceActionFor__Comma_Attribute__attribute____2: 50042882 false ) 
	#(443 3 #reduceActionForBound2: 32676866 false ) 
	#(439 4 #reduceActionForArraySizeInitializationModifier2: 32502786 false ) 
	#(442 2 #reduceActionFor__Comma_Attribute__attribute____2: 32644098 false ) 
	#(590 6 #reduceActionForObjectCreationExpression6: 49536006 false ) 
	#(607 6 #reduceActionForCastExpression3: 51060738 false ) 
	#(586 4 #reduceActionForNamedArgumentList1: 49115137 false ) 
	#(631 6 #reduceActionForMultiLineFunctionLambda1: 56020993 false ) 
	#(479 2 #reduceActionFor__Comma_Attribute__attribute___1: 37220354 false ) 
	#(478 2 #reduceActionForStatements3: 37161987 false ) 
	#(474 2 #liftFirstValue: 36972546 false ) 
	#(480 2 #reduceActionFor__Comma_Attribute__attribute____2: 37220354 false ) 
	#(628 6 #reduceActionForSingleLineLambda3: 55524355 false ) 
	#(487 4 #reduceActionForAddHandlerStatement1: 38060033 false ) 
	#(515 4 #reduceActionForDoTopLoopStatement1: 41348097 false ) 
	#(555 2 #reduceActionFor__Comma_Attribute__attribute____2: 45095938 false ) 
	#(310 2 #reduceActionForIdentifierModifiers4: 18552836 false ) 
	#(498 0 #reduceActionForOptionStatement__option__1: 39431169 false ) 
	#(501 4 #reduceActionForLineIfThenStatement1: 39839745 false ) 
	#(534 2 #reduceActionForErrorClause2: 43499522 false ) 
	#(534 2 #reduceActionForErrorClause4: 43499524 false ) 
	#(486 4 #reduceActionForRaiseEventStatement2: 37896194 false ) 
	#(550 2 #reduceActionFor__Comma_Attribute__attribute____2: 44855298 false ) 
	#(488 4 #reduceActionForRemoveHandlerStatement1: 38181889 false ) 
	#(433 2 #reduceActionFor__Comma_Attribute__attribute____2: 32040962 false ) 
	#(434 3 #reduceActionForVariableDeclarator4: 32089092 false ) 
	#(434 3 #reduceActionForVariableDeclarator1: 32089089 false ) 
	#(434 3 #reduceActionForVariableDeclarator3: 32089091 false ) 
	#(437 2 #reduceActionFor__Comma_Attribute__attribute____2: 32364546 false ) 
	#(632 6 #reduceActionForMultiLineSubLambda1: 56315905 false ) 
	#(628 6 #reduceActionForSingleLineLambda6: 55524358 false ) 
	#(491 4 #reduceActionForCompoundAssignmentStatement2: 38552578 false ) 
	#(666 1 #liftFirstValue: 59588610 false ) 
	#(647 3 #reduceActionForExpressionRangeVariableDeclaration1: 57636865 false ) 
	#(646 2 #reduceActionFor__Comma_Attribute__attribute____2: 57569282 false ) 
	#(649 4 #reduceActionForJoinQueryOperator1: 57884673 false ) 
	#(652 0 #reduceActionForInterfaceBase_1: 58136577 false ) 
	#(659 4 #reduceActionForOrderByQueryOperator2: 59033602 false ) 
	#(664 1 #liftFirstValue: 59321345 false ) 
	#(664 1 #liftFirstValue: 59321346 false ) 
	#(663 2 #reduceActionForOrderExpression2: 59248642 false ) 
	#(660 2 #reduceActionForAttributeList1: 59144193 false ) 
	#(658 4 #reduceActionForPartitionQueryOperator8: 58677256 false ) 
	#(658 4 #reduceActionForPartitionQueryOperator4: 58677252 false ) 
	#(321 9 #reduceActionForEnumDeclaration12: 19367948 false ) 
	#(321 9 #reduceActionForEnumDeclaration11: 19367947 false ) 
	#(321 9 #reduceActionForEnumDeclaration10: 19367946 false ) 
	#(321 9 #reduceActionForEnumDeclaration9: 19367945 false ) 
	#(337 9 #reduceActionForModuleDeclaration8: 21505032 false ) 
	#(337 9 #reduceActionForModuleDeclaration7: 21505031 false ) 
	#(337 9 #reduceActionForModuleDeclaration6: 21505030 false ) 
	#(337 9 #reduceActionForModuleDeclaration5: 21505029 false ) 
	#(367 7 #reduceActionForFunctionSignature4: 24433668 false ) 
	#(393 2 #reduceActionFor__Comma_Attribute__attribute___1: 27697153 false ) 
	#(395 4 #reduceActionForParameter3: 27737091 false ) 
	#(395 4 #reduceActionForParameter2: 27737090 false ) 
	#(324 5 #reduceActionForEnumMemberDeclaration8: 19713032 false ) 
	#(324 5 #reduceActionForEnumMemberDeclaration7: 19713031 false ) 
	#(346 2 #reduceActionFor__Comma_Attribute__attribute____2: 22622210 false ) 
	#(340 9 #reduceActionForInterfaceDeclaration4: 22065156 false ) 
	#(340 9 #reduceActionForInterfaceDeclaration3: 22065155 false ) 
	#(372 3 #reduceActionForInterfaceSubDeclaration2: 25198594 false ) 
	#(372 3 #reduceActionForInterfaceSubDeclaration1: 25198593 false ) 
	#(376 3 #reduceActionForInterfaceFunctionDeclaration2: 25945090 false ) 
	#(376 3 #reduceActionForInterfaceFunctionDeclaration1: 25945089 false ) 
	#(459 3 #reduceActionForMustOverridePropertyMemberDeclaration2: 34498562 false ) 
	#(459 3 #reduceActionForMustOverridePropertyMemberDeclaration1: 34498561 false ) 
	#(340 9 #reduceActionForInterfaceDeclaration2: 22065154 false ) 
	#(340 9 #reduceActionForInterfaceDeclaration1: 22065153 false ) 
	#(251 0 #reduceActionFor__Comma_Attribute__attribute____1: 13035521 false ) 
	#(244 2 #reduceActionFor__Comma_Attribute__attribute___1: 12616705 false ) 
	#(428 4 #reduceActionForVariableMemberDeclaration4: 31690756 false ) 
	#(428 4 #reduceActionForVariableMemberDeclaration3: 31690755 false ) 
	#(449 4 #reduceActionForMustOverridePropertyMemberDeclaration6: 33474566 false ) 
	#(449 4 #reduceActionForMustOverridePropertyMemberDeclaration5: 33474565 false ) 
	#(399 2 #reduceActionForLetQueryOperator1: 28083201 false ) 
	#(402 0 #reduceActionFor__Comma_Attribute__attribute____1: 28213249 false ) 
	#(357 2 #reduceActionForLetQueryOperator1: 23526401 false ) 
	#(360 0 #reduceActionFor__Comma_Attribute__attribute____1: 23669761 false ) 
	#(421 4 #reduceActionForConstantMemberDeclaration2: 31216642 false ) 
	#(421 4 #reduceActionForConstantMemberDeclaration1: 31216641 false ) 
	#(424 2 #reduceActionForAttributeList1: 31455233 false ) 
	#(448 1 #reduceActionForAttributeBlock__attributeBlock__1: 33294337 false ) 
	#(465 1 #liftFirstValue: 35182593 false ) 
	#(465 1 #liftFirstValue: 35182594 false ) 
	#(449 4 #reduceActionForMustOverridePropertyMemberDeclaration4: 33474564 false ) 
	#(449 4 #reduceActionForMustOverridePropertyMemberDeclaration3: 33474563 false ) 
	#(454 1 #reduceActionForAttributes1: 33947650 false ) 
	#(455 0 #reduceActionForImplementsClause_1: 33984513 false ) 
	#(316 2 #reduceActionFor__Comma_Attribute__attribute____2: 18946050 false ) 
	#(325 9 #reduceActionForClassDeclaration6: 19872774 false ) 
	#(325 9 #reduceActionForClassDeclaration5: 19872773 false ) 
	#(471 1 #liftFirstValue: 36268038 false ) 
	#(471 1 #liftFirstValue: 36268035 false ) 
	#(471 1 #liftFirstValue: 36268033 false ) 
	#(471 1 #liftFirstValue: 36268034 false ) 
	#(471 1 #liftFirstValue: 36268036 false ) 
	#(471 1 #liftFirstValue: 36268050 false ) 
	#(471 1 #liftFirstValue: 36268045 false ) 
	#(471 1 #liftFirstValue: 36268052 false ) 
	#(471 1 #liftFirstValue: 36268048 false ) 
	#(471 1 #liftFirstValue: 36268047 false ) 
	#(471 1 #liftFirstValue: 36268049 false ) 
	#(471 1 #liftFirstValue: 36268051 false ) 
	#(471 1 #liftFirstValue: 36268046 false ) 
	#(471 1 #liftFirstValue: 36268041 false ) 
	#(471 1 #liftFirstValue: 36268056 false ) 
	#(471 1 #liftFirstValue: 36268055 false ) 
	#(471 1 #liftFirstValue: 36268054 false ) 
	#(471 1 #liftFirstValue: 36268039 false ) 
	#(471 1 #liftFirstValue: 36268040 false ) 
	#(471 1 #liftFirstValue: 36268053 false ) 
	#(471 1 #liftFirstValue: 36268042 false ) 
	#(471 1 #liftFirstValue: 36268043 false ) 
	#(471 1 #liftFirstValue: 36268037 false ) 
	#(471 1 #liftFirstValue: 36268044 false ) 
	#(325 9 #reduceActionForClassDeclaration2: 19872770 false ) 
	#(325 9 #reduceActionForClassDeclaration1: 19872769 false ) 
	#(332 9 #reduceActionForStructureDeclaration4: 20764676 false ) 
	#(332 9 #reduceActionForStructureDeclaration3: 20764675 false ) 
	#(332 9 #reduceActionForStructureDeclaration2: 20764674 false ) 
	#(332 9 #reduceActionForStructureDeclaration1: 20764673 false ) 
	#(577 7 #reduceActionForMemberAccessExpression4: 47926276 false ) 
	#(667 7 #reduceActionForAggregateQueryOperator6: 59692038 false ) 
	#(667 7 #reduceActionForAggregateQueryOperator7: 59692039 false ) 
	#(643 6 #reduceActionForCollectionRangeVariableDeclaration4: 57313284 false ) 
	#(667 7 #reduceActionForAggregateQueryOperator4: 59692036 false ) 
	#(570 5 #reduceActionForQualifiedOpenTypeName5: 46948357 false ) 
	#(570 5 #reduceActionForQualifiedOpenTypeName4: 46948356 false ) 
	#(573 4 #reduceActionForTypeArityList2: 47302658 false ) 
	#(571 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__3: 47012867 false ) 
	#(571 3 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__2: 47012866 false ) 
	#(596 4 #reduceActionForFieldInitializer2: 50092034 false ) 
	#(594 2 #reduceActionFor__Comma_Attribute__attribute___1: 50042881 false ) 
	#(441 2 #reduceActionFor__Comma_Attribute__attribute___1: 32644097 false ) 
	#(588 2 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: 49223682 false ) 
	#(577 7 #reduceActionForMemberAccessExpression6: 47926278 false ) 
	#(554 2 #reduceActionFor__Comma_Attribute__attribute___1: 45095937 false ) 
	#(519 4 #reduceActionForLoopControlVariable2: 42010626 false ) 
	#(501 5 #reduceActionForLineIfThenStatement2: 39839746 false ) 
	#(534 3 #reduceActionForErrorClause1: 43499521 false ) 
	#(486 5 #reduceActionForRaiseEventStatement3: 37896195 false ) 
	#(549 2 #reduceActionFor__Comma_Attribute__attribute___1: 44855297 false ) 
	#(504 2 #reduceActionForOptionStatement__option__2: 40210434 false ) 
	#(527 2 #reduceActionForOptionStatement__option__2: 42719234 false ) 
	#(432 2 #reduceActionFor__Comma_Attribute__attribute___1: 32040961 false ) 
	#(436 2 #reduceActionFor__Comma_Attribute__attribute___1: 32364545 false ) 
	#(645 2 #reduceActionFor__Comma_Attribute__attribute___1: 57569281 false ) 
	#(649 5 #reduceActionForJoinQueryOperator9: 57884681 false ) 
	#(649 5 #reduceActionForJoinQueryOperator2: 57884674 false ) 
	#(650 2 #reduceActionForJoinConditionList1: 58097665 false ) 
	#(649 5 #reduceActionForJoinQueryOperator3: 57884675 false ) 
	#(649 5 #reduceActionForJoinQueryOperator5: 57884677 false ) 
	#(662 2 #reduceActionFor__Comma_Attribute__attribute____2: 59200514 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration12: 22065164 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration11: 22065163 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration10: 22065162 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration9: 22065161 false ) 
	#(325 10 #reduceActionForClassDeclaration22: 19872790 false ) 
	#(325 10 #reduceActionForClassDeclaration21: 19872789 false ) 
	#(325 10 #reduceActionForClassDeclaration18: 19872786 false ) 
	#(325 10 #reduceActionForClassDeclaration17: 19872785 false ) 
	#(332 10 #reduceActionForStructureDeclaration12: 20764684 false ) 
	#(332 10 #reduceActionForStructureDeclaration11: 20764683 false ) 
	#(332 10 #reduceActionForStructureDeclaration10: 20764682 false ) 
	#(332 10 #reduceActionForStructureDeclaration9: 20764681 false ) 
	#(395 5 #reduceActionForParameter7: 27737095 false ) 
	#(395 5 #reduceActionForParameter6: 27737094 false ) 
	#(367 8 #reduceActionForFunctionSignature6: 24433670 false ) 
	#(367 8 #reduceActionForFunctionSignature10: 24433674 false ) 
	#(321 10 #reduceActionForEnumDeclaration8: 19367944 false ) 
	#(321 10 #reduceActionForEnumDeclaration7: 19367943 false ) 
	#(321 10 #reduceActionForEnumDeclaration6: 19367942 false ) 
	#(321 10 #reduceActionForEnumDeclaration5: 19367941 false ) 
	#(345 2 #reduceActionFor__Comma_Attribute__attribute___1: 22622209 false ) 
	#(372 4 #reduceActionForInterfaceSubDeclaration4: 25198596 false ) 
	#(372 4 #reduceActionForInterfaceSubDeclaration3: 25198595 false ) 
	#(376 4 #reduceActionForInterfaceFunctionDeclaration4: 25945092 false ) 
	#(376 4 #reduceActionForInterfaceFunctionDeclaration3: 25945091 false ) 
	#(459 4 #reduceActionForMustOverridePropertyMemberDeclaration6: 34498564 false ) 
	#(459 4 #reduceActionForMustOverridePropertyMemberDeclaration5: 34498563 false ) 
	#(248 4 #reduceActionForTypeParameterConstraints2: 12841986 false ) 
	#(249 2 #reduceActionForAttributeList1: 12989441 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration8: 22065160 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration7: 22065159 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration6: 22065158 false ) 
	#(340 10 #reduceActionForInterfaceDeclaration5: 22065157 false ) 
	#(421 5 #reduceActionForConstantMemberDeclaration4: 31216644 false ) 
	#(421 5 #reduceActionForConstantMemberDeclaration3: 31216643 false ) 
	#(449 5 #reduceActionForMustOverridePropertyMemberDeclaration8: 33474568 false ) 
	#(449 5 #reduceActionForMustOverridePropertyMemberDeclaration7: 33474567 false ) 
	#(400 2 #reduceActionForAttributeList1: 28158977 false ) 
	#(358 2 #reduceActionForAttributeList1: 23610369 false ) 
	#(371 5 #reduceActionForMustOverrideSubDeclaration2: 24918018 false ) 
	#(371 5 #reduceActionForMustOverrideSubDeclaration1: 24918017 false ) 
	#(375 5 #reduceActionForMustOverrideFunctionDeclaration2: 25649154 false ) 
	#(375 5 #reduceActionForMustOverrideFunctionDeclaration1: 25649153 false ) 
	#(387 0 #reduceActionFor___As___asToken__Attributes__TypeName__type___1: 27251713 false ) 
	#(412 2 #reduceActionForParametersOrType4: 29588484 false ) 
	#(412 2 #reduceActionForParametersOrType2: 29588482 false ) 
	#(408 5 #reduceActionForRegularEventMemberDeclaration2: 29125634 false ) 
	#(408 5 #reduceActionForRegularEventMemberDeclaration1: 29125633 false ) 
	#(427 3 #reduceActionForConstantDeclarator1: 31560705 false ) 
	#(426 2 #reduceActionFor__Comma_Attribute__attribute____2: 31512578 false ) 
	#(445 4 #reduceActionForPropertySignature2: 32951298 false ) 
	#(445 4 #reduceActionForPropertySignature4: 32951300 false ) 
	#(448 2 #reduceActionForOptionStatement__option__2: 33294338 false ) 
	#(457 0 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis______1: 34273281 false ) 
	#(453 2 #reduceActionFor__Comma_Attribute__attribute___1: 33947649 false ) 
	#(455 1 #reduceActionForAttributes1: 33984514 false ) 
	#(315 2 #reduceActionFor__Comma_Attribute__attribute___1: 18946049 false ) 
	#(325 10 #reduceActionForClassDeclaration8: 19872776 false ) 
	#(325 10 #reduceActionForClassDeclaration7: 19872775 false ) 
	#(325 10 #reduceActionForClassDeclaration4: 19872772 false ) 
	#(325 10 #reduceActionForClassDeclaration3: 19872771 false ) 
	#(325 10 #reduceActionForClassDeclaration14: 19872782 false ) 
	#(325 10 #reduceActionForClassDeclaration13: 19872781 false ) 
	#(325 10 #reduceActionForClassDeclaration10: 19872778 false ) 
	#(325 10 #reduceActionForClassDeclaration9: 19872777 false ) 
	#(332 10 #reduceActionForStructureDeclaration8: 20764680 false ) 
	#(332 10 #reduceActionForStructureDeclaration7: 20764679 false ) 
	#(332 10 #reduceActionForStructureDeclaration6: 20764678 false ) 
	#(332 10 #reduceActionForStructureDeclaration5: 20764677 false ) 
	#(667 8 #reduceActionForAggregateQueryOperator8: 59692040 false ) 
	#(570 6 #reduceActionForQualifiedOpenTypeName6: 46948358 false ) 
	#(571 4 #reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__4: 47012868 false ) 
	#(670 8 #reduceActionForConditionalExpression1: 60272641 false ) 
	#(596 5 #reduceActionForFieldInitializer3: 50092035 false ) 
	#(596 5 #reduceActionForFieldInitializer5: 50092037 false ) 
	#(577 8 #reduceActionForMemberAccessExpression8: 47926280 false ) 
	#(631 8 #reduceActionForMultiLineFunctionLambda2: 56020994 false ) 
	#(631 8 #reduceActionForMultiLineFunctionLambda3: 56020995 false ) 
	#(516 6 #reduceActionForDoBottomLoopStatement1: 41510913 false ) 
	#(515 6 #reduceActionForDoTopLoopStatement2: 41348098 false ) 
	#(498 2 #reduceActionForOptionStatement__option__2: 39431170 false ) 
	#(502 2 #reduceActionForLineElseStatement1: 40008705 false ) 
	#(510 1 #liftFirstValue: 40728579 false ) 
	#(510 1 #liftFirstValue: 40728582 false ) 
	#(510 1 #liftFirstValue: 40728578 false ) 
	#(510 1 #liftFirstValue: 40728577 false ) 
	#(510 1 #liftFirstValue: 40728580 false ) 
	#(510 1 #nil 40728581 false ) 
	#(508 0 #reduceActionFor__Comma_Attribute__attribute____1: 40496129 false ) 
	#(509 1 #reduceActionForCaseClause7: 40534023 false ) 
	#(503 6 #reduceActionForSelectStatement1: 40095745 false ) 
	#(484 6 #reduceActionForSyncLockStatement1: 37612545 false ) 
	#(526 6 #reduceActionForTryStatement1: 42642433 false ) 
	#(434 5 #reduceActionForVariableDeclarator5: 32089093 false ) 
	#(556 6 #reduceActionForUsingStatement1: 45132801 false ) 
	#(513 6 #reduceActionForWhileStatement1: 41103361 false ) 
	#(483 6 #reduceActionForWithStatement1: 37454849 false ) 
	#(632 8 #reduceActionForMultiLineSubLambda2: 56315906 false ) 
	#(647 5 #reduceActionForExpressionRangeVariableDeclaration2: 57636866 false ) 
	#(649 6 #reduceActionForJoinQueryOperator10: 57884682 false ) 
	#(649 6 #reduceActionForJoinQueryOperator11: 57884683 false ) 
	#(649 6 #reduceActionForJoinQueryOperator13: 57884685 false ) 
	#(653 3 #reduceActionForClassBase2: 58199041 false ) 
	#(652 2 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: 58136578 false ) 
	#(649 6 #reduceActionForJoinQueryOperator4: 57884676 false ) 
	#(649 6 #reduceActionForJoinQueryOperator6: 57884678 false ) 
	#(649 6 #reduceActionForJoinQueryOperator7: 57884679 false ) 
	#(661 2 #reduceActionFor__Comma_Attribute__attribute___1: 59200513 false ) 
	#(321 11 #reduceActionForEnumDeclaration16: 19367952 false ) 
	#(321 11 #reduceActionForEnumDeclaration15: 19367951 false ) 
	#(321 11 #reduceActionForEnumDeclaration14: 19367950 false ) 
	#(321 11 #reduceActionForEnumDeclaration13: 19367949 false ) 
	#(340 11 #reduceActionForInterfaceDeclaration16: 22065168 false ) 
	#(340 11 #reduceActionForInterfaceDeclaration15: 22065167 false ) 
	#(340 11 #reduceActionForInterfaceDeclaration14: 22065166 false ) 
	#(340 11 #reduceActionForInterfaceDeclaration13: 22065165 false ) 
	#(325 11 #reduceActionForClassDeclaration24: 19872792 false ) 
	#(325 11 #reduceActionForClassDeclaration23: 19872791 false ) 
	#(325 11 #reduceActionForClassDeclaration20: 19872788 false ) 
	#(325 11 #reduceActionForClassDeclaration19: 19872787 false ) 
	#(325 11 #reduceActionForClassDeclaration30: 19872798 false ) 
	#(325 11 #reduceActionForClassDeclaration29: 19872797 false ) 
	#(325 11 #reduceActionForClassDeclaration26: 19872794 false ) 
	#(325 11 #reduceActionForClassDeclaration25: 19872793 false ) 
	#(332 11 #reduceActionForStructureDeclaration16: 20764688 false ) 
	#(332 11 #reduceActionForStructureDeclaration15: 20764687 false ) 
	#(332 11 #reduceActionForStructureDeclaration14: 20764686 false ) 
	#(332 11 #reduceActionForStructureDeclaration13: 20764685 false ) 
	#(395 6 #reduceActionForParameter4: 27737092 false ) 
	#(367 9 #reduceActionForFunctionSignature12: 24433676 false ) 
	#(410 5 #reduceActionForRegularEventMemberDeclaration2: 29345794 false ) 
	#(410 5 #reduceActionForRegularEventMemberDeclaration1: 29345793 false ) 
	#(251 2 #reduceActionFor__Comma_Attribute__attribute____2: 13035522 false ) 
	#(371 6 #reduceActionForMustOverrideSubDeclaration6: 24918022 false ) 
	#(371 6 #reduceActionForMustOverrideSubDeclaration5: 24918021 false ) 
	#(375 6 #reduceActionForMustOverrideFunctionDeclaration6: 25649158 false ) 
	#(375 6 #reduceActionForMustOverrideFunctionDeclaration5: 25649157 false ) 
	#(408 6 #reduceActionForRegularEventMemberDeclaration6: 29125638 false ) 
	#(408 6 #reduceActionForRegularEventMemberDeclaration5: 29125637 false ) 
	#(403 3 #reduceActionForEventMemberSpecifier7: 28261383 false ) 
	#(403 3 #reduceActionForEventMemberSpecifier7: 28261379 false ) 
	#(403 3 #reduceActionForEventMemberSpecifier7: 28261381 false ) 
	#(403 3 #reduceActionForEventMemberSpecifier7: 28261377 false ) 
	#(402 2 #reduceActionFor__Comma_Attribute__attribute____2: 28213250 false ) 
	#(361 3 #reduceActionForInterfaceMemberSpecifier1: 23725057 false ) 
	#(360 2 #reduceActionFor__Comma_Attribute__attribute____2: 23669762 false ) 
	#(371 6 #reduceActionForMustOverrideSubDeclaration4: 24918020 false ) 
	#(371 6 #reduceActionForMustOverrideSubDeclaration3: 24918019 false ) 
	#(375 6 #reduceActionForMustOverrideFunctionDeclaration4: 25649156 false ) 
	#(375 6 #reduceActionForMustOverrideFunctionDeclaration3: 25649155 false ) 
	#(390 2 #reduceActionFor__Comma_Attribute__attribute___1: 27510785 false ) 
	#(384 0 #reduceActionFor__Comma_Attribute__attribute____1: 26871809 false ) 
	#(387 1 #reduceActionForAttributes1: 27251714 false ) 
	#(382 6 #reduceActionForExternalSubDeclaration2: 26644482 false ) 
	#(382 6 #reduceActionForExternalSubDeclaration1: 26644481 false ) 
	#(412 3 #reduceActionForParametersOrType3: 29588483 false ) 
	#(408 6 #reduceActionForRegularEventMemberDeclaration4: 29125636 false ) 
	#(408 6 #reduceActionForRegularEventMemberDeclaration3: 29125635 false ) 
	#(425 2 #reduceActionFor__Comma_Attribute__attribute___1: 31512577 false ) 
	#(445 5 #reduceActionForPropertySignature3: 32951299 false ) 
	#(445 5 #reduceActionForPropertySignature7: 32951303 false ) 
	#(456 1 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____1: 34273281 false ) 
	#(457 1 #reduceActionForAttributes1: 34273282 false ) 
	#(458 0 #nil 34362369 false ) 
	#(451 6 #reduceActionForAutoPropertyMemberDeclaration1: 33701889 false ) 
	#(325 11 #reduceActionForClassDeclaration16: 19872784 false ) 
	#(325 11 #reduceActionForClassDeclaration15: 19872783 false ) 
	#(325 11 #reduceActionForClassDeclaration12: 19872780 false ) 
	#(325 11 #reduceActionForClassDeclaration11: 19872779 false ) 
	#(596 6 #reduceActionForFieldInitializer6: 50092038 false ) 
	#(631 9 #reduceActionForMultiLineFunctionLambda5: 56020997 false ) 
	#(497 7 #reduceActionForBlockIfStatement3: 39273475 false ) 
	#(497 7 #reduceActionForBlockIfStatement1: 39273473 false ) 
	#(503 7 #reduceActionForSelectStatement3: 40095747 false ) 
	#(506 2 #reduceActionForAttributeList1: 40457217 false ) 
	#(509 2 #reduceActionForCaseClause1: 40534017 false ) 
	#(503 7 #reduceActionForSelectStatement2: 40095746 false ) 
	#(529 3 #reduceActionForCatchStatement1: 42931201 false ) 
	#(528 3 #reduceActionForFinallyStatement1: 42835969 false ) 
	#(526 7 #reduceActionForTryStatement2: 42642434 false ) 
	#(632 9 #reduceActionForMultiLineSubLambda3: 56315907 false ) 
	#(665 7 #reduceActionForGroupByQueryOperator1: 59371521 false ) 
	#(649 7 #reduceActionForJoinQueryOperator12: 57884684 false ) 
	#(649 7 #reduceActionForJoinQueryOperator14: 57884686 false ) 
	#(649 7 #reduceActionForJoinQueryOperator15: 57884687 false ) 
	#(653 4 #reduceActionForJoinCondition2: 58199042 false ) 
	#(651 2 #reduceActionFor___And___andToken___LineTerminator___JoinCondition__1: 58136577 false ) 
	#(649 7 #reduceActionForJoinQueryOperator8: 57884680 false ) 
	#(325 12 #reduceActionForClassDeclaration32: 19872800 false ) 
	#(325 12 #reduceActionForClassDeclaration31: 19872799 false ) 
	#(325 12 #reduceActionForClassDeclaration28: 19872796 false ) 
	#(325 12 #reduceActionForClassDeclaration27: 19872795 false ) 
	#(395 7 #reduceActionForParameter8: 27737096 false ) 
	#(410 6 #reduceActionForRegularEventMemberDeclaration6: 29345796 false ) 
	#(410 6 #reduceActionForRegularEventMemberDeclaration5: 29345795 false ) 
	#(250 2 #reduceActionFor__Comma_Attribute__attribute___1: 13035521 false ) 
	#(371 7 #reduceActionForMustOverrideSubDeclaration8: 24918024 false ) 
	#(371 7 #reduceActionForMustOverrideSubDeclaration7: 24918023 false ) 
	#(375 7 #reduceActionForMustOverrideFunctionDeclaration8: 25649160 false ) 
	#(375 7 #reduceActionForMustOverrideFunctionDeclaration7: 25649159 false ) 
	#(382 7 #reduceActionForExternalSubDeclaration18: 26644498 false ) 
	#(382 7 #reduceActionForExternalSubDeclaration17: 26644497 false ) 
	#(408 7 #reduceActionForRegularEventMemberDeclaration8: 29125640 false ) 
	#(408 7 #reduceActionForRegularEventMemberDeclaration7: 29125639 false ) 
	#(451 7 #reduceActionForAutoPropertyMemberDeclaration7: 33701895 false ) 
	#(403 4 #reduceActionForEventMemberSpecifier8: 28261384 false ) 
	#(403 4 #reduceActionForEventMemberSpecifier8: 28261380 false ) 
	#(403 4 #reduceActionForEventMemberSpecifier8: 28261382 false ) 
	#(403 4 #reduceActionForEventMemberSpecifier8: 28261378 false ) 
	#(401 2 #reduceActionFor__Comma_Attribute__attribute___1: 28213249 false ) 
	#(361 4 #reduceActionForInterfaceMemberSpecifier2: 23725058 false ) 
	#(359 2 #reduceActionFor__Comma_Attribute__attribute___1: 23669761 false ) 
	#(369 7 #reduceActionForSubDeclaration2: 24670210 false ) 
	#(369 7 #reduceActionForSubDeclaration1: 24670209 false ) 
	#(374 7 #reduceActionForFunctionDeclaration2: 25380866 false ) 
	#(374 7 #reduceActionForFunctionDeclaration1: 25380865 false ) 
	#(391 2 #reduceActionFor__Comma_Attribute__attribute___1: 27582465 false ) 
	#(386 2 #reduceActionFor___As___asToken__Attributes__TypeName__type__1: 27251713 false ) 
	#(384 1 #reduceActionForAttributes1: 26871810 false ) 
	#(385 7 #reduceActionForExternalFunctionDeclaration2: 26967042 false ) 
	#(385 7 #reduceActionForExternalFunctionDeclaration1: 26967041 false ) 
	#(382 7 #reduceActionForExternalSubDeclaration6: 26644486 false ) 
	#(382 7 #reduceActionForExternalSubDeclaration5: 26644485 false ) 
	#(382 7 #reduceActionForExternalSubDeclaration10: 26644490 false ) 
	#(382 7 #reduceActionForExternalSubDeclaration9: 26644489 false ) 
	#(427 5 #reduceActionForConstantDeclarator2: 31560706 false ) 
	#(445 6 #reduceActionForPropertySignature5: 32951301 false ) 
	#(446 7 #reduceActionForRegularPropertyMemberDeclaration2: 33145858 false ) 
	#(446 7 #reduceActionForRegularPropertyMemberDeclaration1: 33145857 false ) 
	#(458 1 #liftFirstValue: 34362370 false ) 
	#(587 4 #reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument__1: 49223681 false ) 
	#(631 10 #reduceActionForMultiLineFunctionLambda4: 56020996 false ) 
	#(523 8 #reduceActionForForEachStatement1: 42224641 false ) 
	#(500 3 #reduceActionForElseStatement2: 39724034 false ) 
	#(500 3 #reduceActionForElseStatement1: 39724033 false ) 
	#(497 8 #reduceActionForBlockIfStatement4: 39273476 false ) 
	#(497 8 #reduceActionForBlockIfStatement7: 39273479 false ) 
	#(497 8 #reduceActionForBlockIfStatement5: 39273477 false ) 
	#(497 8 #reduceActionForBlockIfStatement2: 39273474 false ) 
	#(493 8 #reduceActionForMidAssignmentStatement1: 38816769 false ) 
	#(503 8 #reduceActionForSelectStatement4: 40095748 false ) 
	#(511 4 #reduceActionForCaseElseStatement2: 40855554 false ) 
	#(511 4 #reduceActionForCaseElseStatement1: 40855553 false ) 
	#(509 3 #reduceActionForCaseClause3: 40534019 false ) 
	#(505 4 #reduceActionForCaseStatement2: 40329218 false ) 
	#(505 4 #reduceActionForCaseStatement1: 40329217 false ) 
	#(508 2 #reduceActionFor__Comma_Attribute__attribute____2: 40496130 false ) 
	#(509 3 #reduceActionForCaseClause2: 40534018 false ) 
	#(509 3 #reduceActionForCaseClause8: 40534024 false ) 
	#(529 4 #reduceActionForCatchStatement3: 42931203 false ) 
	#(665 8 #reduceActionForGroupByQueryOperator2: 59371522 false ) 
	#(665 8 #reduceActionForGroupByQueryOperator3: 59371523 false ) 
	#(665 8 #reduceActionForGroupByQueryOperator5: 59371525 false ) 
	#(649 8 #reduceActionForJoinQueryOperator16: 57884688 false ) 
	#(651 3 #reduceActionFor___And___andToken___LineTerminator___JoinCondition__2: 58136578 false ) 
	#(369 8 #reduceActionForSubDeclaration6: 24670214 false ) 
	#(369 8 #reduceActionForSubDeclaration5: 24670213 false ) 
	#(374 8 #reduceActionForFunctionDeclaration6: 25380870 false ) 
	#(374 8 #reduceActionForFunctionDeclaration5: 25380869 false ) 
	#(385 8 #reduceActionForExternalFunctionDeclaration18: 26967058 false ) 
	#(385 8 #reduceActionForExternalFunctionDeclaration17: 26967057 false ) 
	#(382 8 #reduceActionForExternalSubDeclaration22: 26644502 false ) 
	#(382 8 #reduceActionForExternalSubDeclaration21: 26644501 false ) 
	#(382 8 #reduceActionForExternalSubDeclaration26: 26644506 false ) 
	#(382 8 #reduceActionForExternalSubDeclaration25: 26644505 false ) 
	#(446 8 #reduceActionForRegularPropertyMemberDeclaration6: 33145862 false ) 
	#(446 8 #reduceActionForRegularPropertyMemberDeclaration5: 33145861 false ) 
	#(369 8 #reduceActionForSubDeclaration4: 24670212 false ) 
	#(369 8 #reduceActionForSubDeclaration3: 24670211 false ) 
	#(374 8 #reduceActionForFunctionDeclaration4: 25380868 false ) 
	#(374 8 #reduceActionForFunctionDeclaration3: 25380867 false ) 
	#(386 3 #reduceActionFor___As___asToken__Attributes__TypeName__type__2: 27251714 false ) 
	#(385 8 #reduceActionForExternalFunctionDeclaration6: 26967046 false ) 
	#(385 8 #reduceActionForExternalFunctionDeclaration5: 26967045 false ) 
	#(385 8 #reduceActionForExternalFunctionDeclaration10: 26967050 false ) 
	#(385 8 #reduceActionForExternalFunctionDeclaration9: 26967049 false ) 
	#(382 8 #reduceActionForExternalSubDeclaration14: 26644494 false ) 
	#(382 8 #reduceActionForExternalSubDeclaration13: 26644493 false ) 
	#(404 8 #reduceActionForConstructorMemberDeclaration2: 28647426 false ) 
	#(404 8 #reduceActionForConstructorMemberDeclaration1: 28647425 false ) 
	#(416 1 #reduceActionForAttributeBlock__attributeBlock__1: 30094337 false ) 
	#(417 1 #liftFirstValue: 30253057 false ) 
	#(417 1 #liftFirstValue: 30253058 false ) 
	#(417 1 #liftFirstValue: 30253059 false ) 
	#(445 7 #reduceActionForPropertySignature6: 32951302 false ) 
	#(445 7 #reduceActionForPropertySignature8: 32951304 false ) 
	#(446 8 #reduceActionForRegularPropertyMemberDeclaration4: 33145860 false ) 
	#(446 8 #reduceActionForRegularPropertyMemberDeclaration3: 33145859 false ) 
	#(456 3 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____2: 34273282 false ) 
	#(451 8 #reduceActionForAutoPropertyMemberDeclaration3: 33701891 false ) 
	#(631 11 #reduceActionForMultiLineFunctionLambda6: 56020998 false ) 
	#(523 9 #reduceActionForForEachStatement3: 42224643 false ) 
	#(523 9 #reduceActionForForEachStatement2: 42224642 false ) 
	#(522 0 #reduceActionFor__Comma_Attribute__attribute____1: 42188801 false ) 
	#(518 9 #reduceActionForForStatement1: 41738241 false ) 
	#(499 4 #reduceActionForElseIfStatement2: 39553026 false ) 
	#(499 4 #reduceActionForElseIfStatement1: 39553025 false ) 
	#(497 9 #reduceActionForBlockIfStatement8: 39273480 false ) 
	#(497 9 #reduceActionForBlockIfStatement6: 39273478 false ) 
	#(493 9 #reduceActionForMidAssignmentStatement3: 38816771 false ) 
	#(509 4 #reduceActionForCaseClause5: 40534021 false ) 
	#(509 4 #reduceActionForCaseClause4: 40534020 false ) 
	#(507 2 #reduceActionFor__Comma_Attribute__attribute___1: 40496129 false ) 
	#(529 5 #reduceActionForCatchStatement2: 42931202 false ) 
	#(669 9 #reduceActionForGroupJoinQueryOperator1: 59930625 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator4: 59371524 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator9: 59371529 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator6: 59371526 false ) 
	#(665 9 #reduceActionForGroupByQueryOperator7: 59371527 false ) 
	#(369 9 #reduceActionForSubDeclaration8: 24670216 false ) 
	#(369 9 #reduceActionForSubDeclaration7: 24670215 false ) 
	#(374 9 #reduceActionForFunctionDeclaration8: 25380872 false ) 
	#(374 9 #reduceActionForFunctionDeclaration7: 25380871 false ) 
	#(385 9 #reduceActionForExternalFunctionDeclaration22: 26967062 false ) 
	#(385 9 #reduceActionForExternalFunctionDeclaration21: 26967061 false ) 
	#(385 9 #reduceActionForExternalFunctionDeclaration26: 26967066 false ) 
	#(385 9 #reduceActionForExternalFunctionDeclaration25: 26967065 false ) 
	#(382 9 #reduceActionForExternalSubDeclaration30: 26644510 false ) 
	#(382 9 #reduceActionForExternalSubDeclaration29: 26644509 false ) 
	#(404 9 #reduceActionForConstructorMemberDeclaration8: 28647432 false ) 
	#(404 9 #reduceActionForConstructorMemberDeclaration7: 28647431 false ) 
	#(446 9 #reduceActionForRegularPropertyMemberDeclaration8: 33145864 false ) 
	#(446 9 #reduceActionForRegularPropertyMemberDeclaration7: 33145863 false ) 
	#(451 9 #reduceActionForAutoPropertyMemberDeclaration9: 33701897 false ) 
	#(382 9 #reduceActionForExternalSubDeclaration4: 26644484 false ) 
	#(382 9 #reduceActionForExternalSubDeclaration3: 26644483 false ) 
	#(385 9 #reduceActionForExternalFunctionDeclaration14: 26967054 false ) 
	#(385 9 #reduceActionForExternalFunctionDeclaration13: 26967053 false ) 
	#(416 2 #reduceActionForOptionStatement__option__2: 30094338 false ) 
	#(445 8 #reduceActionForPropertySignature9: 32951305 false ) 
	#(466 6 #reduceActionForPropertyGetDeclaration2: 35277826 false ) 
	#(466 6 #reduceActionForPropertyGetDeclaration1: 35277825 false ) 
	#(467 6 #reduceActionForPropertySetDeclaration2: 35499010 false ) 
	#(467 6 #reduceActionForPropertySetDeclaration1: 35499009 false ) 
	#(456 4 #reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____3: 34273283 false ) 
	#(451 9 #reduceActionForAutoPropertyMemberDeclaration13: 33701901 false ) 
	#(451 9 #reduceActionForAutoPropertyMemberDeclaration2: 33701890 false ) 
	#(451 9 #reduceActionForAutoPropertyMemberDeclaration5: 33701893 false ) 
	#(523 10 #reduceActionForForEachStatement4: 42224644 false ) 
	#(520 2 #reduceActionForAttributeList1: 42144769 false ) 
	#(518 10 #reduceActionForForStatement2: 41738242 false ) 
	#(499 5 #reduceActionForElseIfStatement4: 39553028 false ) 
	#(499 5 #reduceActionForElseIfStatement3: 39553027 false ) 
	#(493 10 #reduceActionForMidAssignmentStatement2: 38816770 false ) 
	#(509 5 #reduceActionForCaseClause6: 40534022 false ) 
	#(529 6 #reduceActionForCatchStatement5: 42931205 false ) 
	#(529 6 #reduceActionForCatchStatement4: 42931204 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator9: 59930633 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator2: 59930626 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator3: 59930627 false ) 
	#(669 10 #reduceActionForGroupJoinQueryOperator5: 59930629 false ) 
	#(665 10 #reduceActionForGroupByQueryOperator10: 59371530 false ) 
	#(665 10 #reduceActionForGroupByQueryOperator11: 59371531 false ) 
	#(665 10 #reduceActionForGroupByQueryOperator8: 59371528 false ) 
	#(382 10 #reduceActionForExternalSubDeclaration20: 26644500 false ) 
	#(382 10 #reduceActionForExternalSubDeclaration19: 26644499 false ) 
	#(385 10 #reduceActionForExternalFunctionDeclaration30: 26967070 false ) 
	#(385 10 #reduceActionForExternalFunctionDeclaration29: 26967069 false ) 
	#(451 10 #reduceActionForAutoPropertyMemberDeclaration19: 33701907 false ) 
	#(451 10 #reduceActionForAutoPropertyMemberDeclaration8: 33701896 false ) 
	#(451 10 #reduceActionForAutoPropertyMemberDeclaration11: 33701899 false ) 
	#(385 10 #reduceActionForExternalFunctionDeclaration4: 26967044 false ) 
	#(385 10 #reduceActionForExternalFunctionDeclaration3: 26967043 false ) 
	#(382 10 #reduceActionForExternalSubDeclaration8: 26644488 false ) 
	#(382 10 #reduceActionForExternalSubDeclaration7: 26644487 false ) 
	#(382 10 #reduceActionForExternalSubDeclaration12: 26644492 false ) 
	#(382 10 #reduceActionForExternalSubDeclaration11: 26644491 false ) 
	#(404 10 #reduceActionForConstructorMemberDeclaration4: 28647428 false ) 
	#(404 10 #reduceActionForConstructorMemberDeclaration3: 28647427 false ) 
	#(466 7 #reduceActionForPropertyGetDeclaration4: 35277828 false ) 
	#(466 7 #reduceActionForPropertyGetDeclaration3: 35277827 false ) 
	#(467 7 #reduceActionForPropertySetDeclaration8: 35499016 false ) 
	#(467 7 #reduceActionForPropertySetDeclaration7: 35499015 false ) 
	#(466 7 #reduceActionForPropertyGetDeclaration6: 35277830 false ) 
	#(466 7 #reduceActionForPropertyGetDeclaration5: 35277829 false ) 
	#(467 7 #reduceActionForPropertySetDeclaration14: 35499022 false ) 
	#(467 7 #reduceActionForPropertySetDeclaration13: 35499021 false ) 
	#(451 10 #reduceActionForAutoPropertyMemberDeclaration14: 33701902 false ) 
	#(522 2 #reduceActionFor__Comma_Attribute__attribute____2: 42188802 false ) 
	#(518 11 #reduceActionForForStatement3: 41738243 false ) 
	#(493 11 #reduceActionForMidAssignmentStatement4: 38816772 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator10: 59930634 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator11: 59930635 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator13: 59930637 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator4: 59930628 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator6: 59930630 false ) 
	#(669 11 #reduceActionForGroupJoinQueryOperator7: 59930631 false ) 
	#(665 11 #reduceActionForGroupByQueryOperator12: 59371532 false ) 
	#(385 11 #reduceActionForExternalFunctionDeclaration20: 26967060 false ) 
	#(385 11 #reduceActionForExternalFunctionDeclaration19: 26967059 false ) 
	#(382 11 #reduceActionForExternalSubDeclaration24: 26644504 false ) 
	#(382 11 #reduceActionForExternalSubDeclaration23: 26644503 false ) 
	#(382 11 #reduceActionForExternalSubDeclaration28: 26644508 false ) 
	#(382 11 #reduceActionForExternalSubDeclaration27: 26644507 false ) 
	#(404 11 #reduceActionForConstructorMemberDeclaration10: 28647434 false ) 
	#(404 11 #reduceActionForConstructorMemberDeclaration9: 28647433 false ) 
	#(451 11 #reduceActionForAutoPropertyMemberDeclaration20: 33701908 false ) 
	#(385 11 #reduceActionForExternalFunctionDeclaration8: 26967048 false ) 
	#(385 11 #reduceActionForExternalFunctionDeclaration7: 26967047 false ) 
	#(385 11 #reduceActionForExternalFunctionDeclaration12: 26967052 false ) 
	#(385 11 #reduceActionForExternalFunctionDeclaration11: 26967051 false ) 
	#(382 11 #reduceActionForExternalSubDeclaration16: 26644496 false ) 
	#(382 11 #reduceActionForExternalSubDeclaration15: 26644495 false ) 
	#(404 11 #reduceActionForConstructorMemberDeclaration6: 28647430 false ) 
	#(404 11 #reduceActionForConstructorMemberDeclaration5: 28647429 false ) 
	#(415 11 #reduceActionForCustomEventMemberDeclaration4: 29843460 false ) 
	#(415 11 #reduceActionForCustomEventMemberDeclaration3: 29843459 false ) 
	#(415 11 #reduceActionForCustomEventMemberDeclaration2: 29843458 false ) 
	#(415 11 #reduceActionForCustomEventMemberDeclaration1: 29843457 false ) 
	#(467 8 #reduceActionForPropertySetDeclaration4: 35499012 false ) 
	#(467 8 #reduceActionForPropertySetDeclaration3: 35499011 false ) 
	#(466 8 #reduceActionForPropertyGetDeclaration8: 35277832 false ) 
	#(466 8 #reduceActionForPropertyGetDeclaration7: 35277831 false ) 
	#(467 8 #reduceActionForPropertySetDeclaration20: 35499028 false ) 
	#(467 8 #reduceActionForPropertySetDeclaration19: 35499027 false ) 
	#(451 11 #reduceActionForAutoPropertyMemberDeclaration15: 33701903 false ) 
	#(451 11 #reduceActionForAutoPropertyMemberDeclaration4: 33701892 false ) 
	#(521 2 #reduceActionFor__Comma_Attribute__attribute___1: 42188801 false ) 
	#(518 12 #reduceActionForForStatement4: 41738244 false ) 
	#(529 8 #reduceActionForCatchStatement6: 42931206 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator12: 59930636 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator14: 59930638 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator15: 59930639 false ) 
	#(669 12 #reduceActionForGroupJoinQueryOperator8: 59930632 false ) 
	#(385 12 #reduceActionForExternalFunctionDeclaration24: 26967064 false ) 
	#(385 12 #reduceActionForExternalFunctionDeclaration23: 26967063 false ) 
	#(385 12 #reduceActionForExternalFunctionDeclaration28: 26967068 false ) 
	#(385 12 #reduceActionForExternalFunctionDeclaration27: 26967067 false ) 
	#(382 12 #reduceActionForExternalSubDeclaration32: 26644512 false ) 
	#(382 12 #reduceActionForExternalSubDeclaration31: 26644511 false ) 
	#(404 12 #reduceActionForConstructorMemberDeclaration12: 28647436 false ) 
	#(404 12 #reduceActionForConstructorMemberDeclaration11: 28647435 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration12: 29843468 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration11: 29843467 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration10: 29843466 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration9: 29843465 false ) 
	#(451 12 #reduceActionForAutoPropertyMemberDeclaration21: 33701909 false ) 
	#(451 12 #reduceActionForAutoPropertyMemberDeclaration10: 33701898 false ) 
	#(385 12 #reduceActionForExternalFunctionDeclaration16: 26967056 false ) 
	#(385 12 #reduceActionForExternalFunctionDeclaration15: 26967055 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration8: 29843464 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration7: 29843463 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration6: 29843462 false ) 
	#(415 12 #reduceActionForCustomEventMemberDeclaration5: 29843461 false ) 
	#(467 9 #reduceActionForPropertySetDeclaration6: 35499014 false ) 
	#(467 9 #reduceActionForPropertySetDeclaration5: 35499013 false ) 
	#(467 9 #reduceActionForPropertySetDeclaration10: 35499018 false ) 
	#(467 9 #reduceActionForPropertySetDeclaration9: 35499017 false ) 
	#(467 9 #reduceActionForPropertySetDeclaration16: 35499024 false ) 
	#(467 9 #reduceActionForPropertySetDeclaration15: 35499023 false ) 
	#(451 12 #reduceActionForAutoPropertyMemberDeclaration16: 33701904 false ) 
	#(451 12 #reduceActionForAutoPropertyMemberDeclaration17: 33701905 false ) 
	#(451 12 #reduceActionForAutoPropertyMemberDeclaration6: 33701894 false ) 
	#(468 11 #reduceActionForOperatorDeclaration2: 35780610 false ) 
	#(468 11 #reduceActionForOperatorDeclaration1: 35780609 false ) 
	#(669 13 #reduceActionForGroupJoinQueryOperator16: 59930640 false ) 
	#(385 13 #reduceActionForExternalFunctionDeclaration32: 26967072 false ) 
	#(385 13 #reduceActionForExternalFunctionDeclaration31: 26967071 false ) 
	#(415 13 #reduceActionForCustomEventMemberDeclaration16: 29843472 false ) 
	#(415 13 #reduceActionForCustomEventMemberDeclaration15: 29843471 false ) 
	#(415 13 #reduceActionForCustomEventMemberDeclaration14: 29843470 false ) 
	#(415 13 #reduceActionForCustomEventMemberDeclaration13: 29843469 false ) 
	#(451 13 #reduceActionForAutoPropertyMemberDeclaration22: 33701910 false ) 
	#(451 13 #reduceActionForAutoPropertyMemberDeclaration23: 33701911 false ) 
	#(451 13 #reduceActionForAutoPropertyMemberDeclaration12: 33701900 false ) 
	#(467 10 #reduceActionForPropertySetDeclaration12: 35499020 false ) 
	#(467 10 #reduceActionForPropertySetDeclaration11: 35499019 false ) 
	#(467 10 #reduceActionForPropertySetDeclaration18: 35499026 false ) 
	#(467 10 #reduceActionForPropertySetDeclaration17: 35499025 false ) 
	#(467 10 #reduceActionForPropertySetDeclaration22: 35499030 false ) 
	#(467 10 #reduceActionForPropertySetDeclaration21: 35499029 false ) 
	#(451 13 #reduceActionForAutoPropertyMemberDeclaration18: 33701906 false ) 
	#(468 12 #reduceActionForOperatorDeclaration8: 35780616 false ) 
	#(468 12 #reduceActionForOperatorDeclaration7: 35780615 false ) 
	#(451 14 #reduceActionForAutoPropertyMemberDeclaration24: 33701912 false ) 
	#(467 11 #reduceActionForPropertySetDeclaration24: 35499032 false ) 
	#(467 11 #reduceActionForPropertySetDeclaration23: 35499031 false ) 
	#(468 13 #reduceActionForOperatorDeclaration4: 35780612 false ) 
	#(468 13 #reduceActionForOperatorDeclaration3: 35780611 false ) 
	#(468 14 #reduceActionForOperatorDeclaration10: 35780618 false ) 
	#(468 14 #reduceActionForOperatorDeclaration9: 35780617 false ) 
	#(468 14 #reduceActionForOperatorDeclaration6: 35780614 false ) 
	#(468 14 #reduceActionForOperatorDeclaration5: 35780613 false ) 
	#(418 9 #reduceActionForAddHandlerDeclaration2: 30374914 false ) 
	#(418 9 #reduceActionForAddHandlerDeclaration1: 30374913 false ) 
	#(420 9 #reduceActionForRaiseEventDeclaration2: 30941186 false ) 
	#(420 9 #reduceActionForRaiseEventDeclaration1: 30941185 false ) 
	#(419 9 #reduceActionForRemoveHandlerDeclaration2: 30650370 false ) 
	#(419 9 #reduceActionForRemoveHandlerDeclaration1: 30650369 false ) 
	#(468 15 #reduceActionForOperatorDeclaration12: 35780620 false ) 
	#(468 15 #reduceActionForOperatorDeclaration11: 35780619 false ) 
	#(418 10 #reduceActionForAddHandlerDeclaration4: 30374916 false ) 
	#(418 10 #reduceActionForAddHandlerDeclaration3: 30374915 false ) 
	#(420 10 #reduceActionForRaiseEventDeclaration4: 30941188 false ) 
	#(420 10 #reduceActionForRaiseEventDeclaration3: 30941187 false ) 
	#(419 10 #reduceActionForRemoveHandlerDeclaration4: 30650372 false ) 
	#(419 10 #reduceActionForRemoveHandlerDeclaration3: 30650371 false )
	).
]

{ #category : #'generated-accessing' }
VBNetParser class >> scannerClass [
	^VBNetScanner
]

{ #category : #generated }
VBNetParser class >> startingStateForFile [
	^ 1
]

{ #category : #generated }
VBNetParser class >> symbolNames [
	^ #('"!"' '"$"' '"&"' '"&="' '"("' '")"' '"*"' '"*="' '"+"' '"+="' '","' '"-"' '"-="' '"."' '"/"' '"/="' '":"' '":="' '"<"' '"<<"' '"<<="' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '">>="' '"?"' '"AddHandler"' '"AddressOf"' '"Aggregate"' '"Alias"' '"And"' '"AndAlso"' '"Ansi"' '"As"' '"Ascending"' '"Assembly"' '"Async"' '"Auto"' '"Await"' '"Binary"' '"Boolean"' '"By"' '"ByRef"' '"ByVal"' '"Byte"' '"CBool"' '"CByte"' '"CChar"' '"CDate"' '"CDbl"' '"CDec"' '"CInt"' '"CLng"' '"CObj"' '"CSByte"' '"CShort"' '"CSng"' '"CStr"' '"CType"' '"CUInt"' '"CULng"' '"CUShort"' '"Call"' '"Case"' '"Catch"' '"Char"' '"Class"' '"Compare"' '"Const"' '"Continue"' '"Custom"' '"Date"' '"Decimal"' '"Declare"' '"Default"' '"Delegate"' '"Descending"' '"Dim"' '"DirectCast"' '"Distinct"' '"Do"' '"Double"' '"Each"' '"Else"' '"End"' '"Enum"' '"Equals"' '"Erase"' '"Error"' '"Event"' '"Exit"' '"Explicit"' '"Finally"' '"For"' '"Friend"' '"From"' '"Function"' '"Get"' '"GetType"' '"Global"' '"GoTo"' '"Group"' '"Handles"' '"If"' '"Implements"' '"Imports"' '"In"' '"Infer"' '"Inherits"' '"Integer"' '"Interface"' '"Into"' '"Is"' '"IsFalse"' '"IsNot"' '"IsTrue"' '"Iterator"' '"Join"' '"Key"' '"Let"' '"Lib"' '"Like"' '"Long"' '"Loop"' '"Me"' '"Mid"' '"Mod"' '"Module"' '"MustInherit"' '"MustOverride"' '"MyBase"' '"MyClass"' '"Namespace"' '"Narrowing"' '"New"' '"Next"' '"Not"' '"NotInheritable"' '"NotOverridable"' '"Object"' '"Of"' '"Off"' '"On"' '"Operator"' '"Option"' '"Optional"' '"Or"' '"OrElse"' '"Order"' '"Out"' '"Overloads"' '"Overridable"' '"Overrides"' '"ParamArray"' '"Partial"' '"Preserve"' '"Private"' '"Property"' '"Protected"' '"Public"' '"RaiseEvent"' '"ReDim"' '"ReadOnly"' '"RemoveHandler"' '"Resume"' '"Return"' '"SByte"' '"Select"' '"Set"' '"Shadows"' '"Shared"' '"Short"' '"Single"' '"Skip"' '"Static"' '"Step"' '"Stop"' '"Strict"' '"String"' '"Structure"' '"Sub"' '"SyncLock"' '"Take"' '"Text"' '"Then"' '"Throw"' '"To"' '"Try"' '"TryCast"' '"TypeOf"' '"UInteger"' '"ULong"' '"UShort"' '"Unicode"' '"Until"' '"Using"' '"When"' '"Where"' '"While"' '"Widening"' '"With"' '"WithEvents"' '"WriteOnly"' '"Xor"' '"Yield"' '"\"' '"\="' '"^"' '"^="' '"{"' '"}"' '<LineTerminator>' '<LineContinuation>' '<whitespace>' '<comment>' '<BooleanLiteral>' '<IntegerLiteral>' '<IntLiteral>' '<FloatingPointLiteral>' '<StringLiteral>' '<CharacterLiteral>' '<DateLiteral>' '<ElseIf>' '<Nothing>' '<IdentifierOrKeyword>' '<Identifier>' '<preprocessorDirective>' 'B e g i n' 'File' '<LineTerminator>*' 'Comma' 'OpenParenthesis' 'CloseParenthesis' 'OpenCurlyBrace' 'CloseCurlyBrace' 'Equals' 'ColonEquals' 'Literal' 'AccessModifier' 'TypeParameterList' '( Comma TypeParameter ''typeParameter'' )' '( Comma TypeParameter ''typeParameter'' )*' 'TypeParameter' 'VarianceModifier' 'TypeParameterConstraints' 'ConstraintList' '( Comma Constraint ''constraint'' )' '( Comma Constraint ''constraint'' )*' 'Constraint' 'Attributes' 'AttributeBlock ''attributeBlock''+' 'AttributeBlock' 'AttributeList' '( Comma Attribute ''attribute'' )' '( Comma Attribute ''attribute'' )*' 'Attribute' 'AttributeModifier' 'AttributeArguments' 'AttributePositionalArgumentList' '( Comma AttributeArgumentExpression ''argument''? )' '( Comma AttributeArgumentExpression ''argument''? )*' 'VariablePropertyInitializerList' '( Comma VariablePropertyInitializer ''argument'' )' '( Comma VariablePropertyInitializer ''argument'' )*' 'VariablePropertyInitializer' 'AttributeArgumentExpression' 'Start' 'OptionStatement ''option''*' 'ImportsStatement ''import''*' 'NamespaceMemberDeclaration+' 'OptionStatement' 'OptionExplicitStatement' 'OnOff' 'OptionStrictStatement' 'OptionCompareStatement' 'CompareOption' 'OptionInferStatement' 'ImportsStatement' 'ImportsClauses' '( Comma ImportsClause ''import'' )' '( Comma ImportsClause ''import'' )*' 'ImportsClause' 'AliasImportsClause' 'MembersImportsClause' 'NamespaceDeclaration' 'NamespaceMemberDeclaration*' 'NamespaceName' 'RelativeNamespaceName' '( "." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'')' '( "." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'')*' 'NamespaceMemberDeclaration' 'AttributesNamespaceDeclaration' 'TypeDeclaration' 'NonModuleDeclaration' 'TypeName' 'NonArrayTypeName' 'SimpleTypeName' 'QualifiedTypeName' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArguments?)' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArguments?)*' 'TypeArguments' 'TypeArgumentList' '( Comma TypeName ''type'')' '( Comma TypeName ''type'')*' 'BuiltInTypeName' 'TypeModifier' 'IdentifierModifiers' 'NullableTypeName' 'NullableNameModifier' 'TypeImplementsClause' 'TypeImplements' '( Comma NonArrayTypeName ''implements'')' '( Comma NonArrayTypeName ''implements'')*' 'PrimitiveTypeName' 'NumericTypeName' 'IntegralTypeName' 'FloatingPointTypeName' 'EnumDeclaration' 'TypeModifier ''modifier''*' 'EnumMemberDeclaration ''declaration''+' 'EnumMemberDeclaration' 'ClassDeclaration' 'ClassModifier ''modifier''*' 'TypeImplementsClause*' 'ClassMemberDeclaration ''declaration''*' 'ClassModifier' 'ClassBase' 'ClassMemberDeclaration' 'StructureDeclaration' 'StructureModifier ''modifier''*' 'StructMemberDeclaration ''declaration''*' 'StructureModifier' 'StructMemberDeclaration' 'ModuleDeclaration' 'ModuleMemberDeclaration ''declaration''*' 'ModuleMemberDeclaration' 'InterfaceDeclaration' 'InterfaceBase*' 'InterfaceMemberDeclaration ''declaration''*' 'InterfaceBase' 'InterfaceBases' '( Comma NonArrayTypeName ''inherits'')' '( Comma NonArrayTypeName ''inherits'')*' 'InterfaceMemberDeclaration' 'ArrayTypeName' 'ArrayTypeModifiers' 'ArrayTypeModifier ''arrayTypeModifier''+' 'ArrayTypeModifier' 'RankList' 'Comma+' 'ArrayNameModifier' 'DelegateDeclaration' 'MethodSignature' 'ImplementsClause' 'ImplementsList' '( Comma InterfaceMemberSpecifier ''implement'')' '( Comma InterfaceMemberSpecifier ''implement'')*' 'InterfaceMemberSpecifier' 'MethodMemberDeclaration' 'InterfaceMethodMemberDeclaration' 'MethodDeclaration' 'InterfaceMethodDeclaration' 'SubSignature' 'FunctionSignature' 'Attributes?' 'SubDeclaration' 'ProcedureModifier ''modifier''*' 'MustOverrideSubDeclaration' 'InterfaceSubDeclaration' 'InterfaceProcedureModifier ''modifier''*' 'FunctionDeclaration' 'MustOverrideFunctionDeclaration' 'InterfaceFunctionDeclaration' 'ProcedureModifier' 'MustOverrideProcedureModifier' 'InterfaceProcedureModifier' 'HandlesOrImplements' 'ExternalMethodDeclaration' 'ExternalSubDeclaration' 'ExternalMethodModifier ''modifier''*' 'ParameterList?' 'ExternalFunctionDeclaration' '( "As" ''asToken'' Attributes? TypeName ''type'')' '( "As" ''asToken'' Attributes? TypeName ''type'')?' 'ExternalMethodModifier' 'CharsetModifier' 'LibraryClause' 'AliasClause' 'ParameterList' '( Comma Parameter ''parameter'')' '( Comma Parameter ''parameter'')*' 'Parameter' 'ParameterModifier ''modifier''*' 'ParameterModifier' 'ParameterIdentifier' 'HandlesClause' 'EventHandlesList' '( Comma EventMemberSpecifier ''handle'')' '( Comma EventMemberSpecifier ''handle'')*' 'EventMemberSpecifier' 'ConstructorMemberDeclaration' 'ConstructorModifier ''modifier''*' 'ConstructorModifier' 'EventMemberDeclaration' 'RegularEventMemberDeclaration' 'EventModifiers ''modifier''*' 'InterfaceEventMemberDeclaration' 'InterfaceEventModifiers ''modifier''*' 'ParametersOrType' 'EventModifiers' 'InterfaceEventModifiers' 'CustomEventMemberDeclaration' 'EventAccessorDeclaration ''eventAccessorDeclaration''+' 'EventAccessorDeclaration' 'AddHandlerDeclaration' 'RemoveHandlerDeclaration' 'RaiseEventDeclaration' 'ConstantMemberDeclaration' 'ConstantModifier ''modifier''*' 'ConstantModifier' 'ConstantDeclarators' '( Comma ConstantDeclarator ''constant'')' '( Comma ConstantDeclarator ''constant'')*' 'ConstantDeclarator' 'VariableMemberDeclaration' 'VariableModifier ''modifier''+' 'VariableModifier' 'VariableDeclarators' '( Comma VariableDeclarator ''variable'')' '( Comma VariableDeclarator ''variable'')*' 'VariableDeclarator' 'VariableIdentifiers' '( Comma VariableIdentifier ''variableIdentifier'' )' '( Comma VariableIdentifier ''variableIdentifier'' )*' 'VariableIdentifier' 'ArraySizeInitializationModifier' 'BoundList' '( Comma Bound ''bound'' )' '( Comma Bound ''bound'' )*' 'Bound' 'PropertyMemberDeclaration' 'PropertySignature' 'RegularPropertyMemberDeclaration' 'PropertyModifier ''modifier''*' 'PropertyAccessorDeclaration ''declaration''+' 'MustOverridePropertyMemberDeclaration' 'MustOverridePropertyModifier ''modifier''+' 'AutoPropertyMemberDeclaration' 'AutoPropertyModifier ''modifier''*' '( Equals Expression ''value'')' '( Equals Expression ''value'')?' 'ImplementsClause?' '( NonArrayTypeName ''type'' ( OpenParenthesis ArgumentList? CloseParenthesis )? )' '( NonArrayTypeName ''type'' ( OpenParenthesis ArgumentList? CloseParenthesis )? )?' 'ObjectCreationExpressionInitializer ''initializer''?' 'InterfacePropertyMemberDeclaration' 'InterfacePropertyModifier ''modifier''*' 'AutoPropertyModifier' 'PropertyModifier' 'MustOverridePropertyModifier' 'InterfacePropertyModifier' 'PropertyAccessorDeclaration' 'PropertyGetDeclaration' 'PropertySetDeclaration' 'OperatorDeclaration' 'OperatorModifier ''modifier''*' 'OperatorModifier' 'OverloadableOperator' 'Statement' 'Block' '(Statements ''statement''? <LineTerminator>)' '(Statements ''statement''? <LineTerminator>)*' 'LabelDeclarationStatement' 'LabelName' 'Statements' '( ":" ''statementSeparator'' Statement ''statement''? )' '( ":" ''statementSeparator'' Statement ''statement''? )+' 'LocalDeclarationStatement' 'LocalModifier' 'WithStatement' 'SyncLockStatement' 'EventStatement' 'RaiseEventStatement' 'AddHandlerStatement' 'RemoveHandlerStatement' 'AssignmentStatement' 'RegularAssignmentStatement' 'CompoundAssignmentStatement' 'CompoundBinaryOperator' 'MidAssignmentStatement' 'InvocationStatement' 'ConditionalStatement' 'IfStatement' 'BlockIfStatement' 'ElseIfStatement ''elseIf''*' 'ElseIfStatement' 'ElseStatement' 'LineIfThenStatement' 'LineElseStatement' 'SelectStatement' 'CaseStatement ''case''*' 'CaseStatement' 'CaseClauses' '( Comma CaseClause ''clause'')' '( Comma CaseClause ''clause'')*' 'CaseClause' 'ComparisonOperator' 'CaseElseStatement' 'LoopStatement' 'WhileStatement' 'DoLoopStatement' 'DoTopLoopStatement' 'DoBottomLoopStatement' 'WhileOrUntil' 'ForStatement' 'LoopControlVariable' 'NextExpressionList' '( Comma Expression ''next'')' '( Comma Expression ''next'')*' 'ForEachStatement' 'ErrorHandlingStatement' 'StructuredErrorStatement' 'TryStatement' 'CatchStatement ''catch''*' 'FinallyStatement' 'CatchStatement' 'ThrowStatement' 'UnstructuredErrorStatement' 'ErrorStatement' 'OnErrorStatement' 'ErrorClause' 'ResumeStatement' 'ResumeClause' 'BranchStatement' 'GoToStatement' 'ExitStatement' 'ExitKind' 'ContinueStatement' 'ContinueKind' 'StopStatement' 'EndStatement' 'ReturnStatement' 'ArrayHandlingStatement' 'RedimStatement' 'RedimClauses' '( Comma RedimClause ''redim'')' '( Comma RedimClause ''redim'')*' 'RedimClause' 'EraseStatement' 'EraseExpressions' '( Comma Expression ''array'')' '( Comma Expression ''array'')*' 'UsingStatement' 'UsingResources' 'YieldStatement' 'Expression' 'ConstantExpression' 'SimpleExpression' 'LiteralExpression' 'ParenthesizedExpression' 'InstanceExpression' 'SimpleNameExpression' 'AddressOfExpression' 'TypeExpression' 'GetTypeExpression' 'GetTypeTypeName' 'QualifiedOpenTypeName' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArityList?)' '("." ''period'' <LineTerminator>? <IdentifierOrKeyword> ''name'' TypeArityList?)*' 'TypeArityList' 'CommaList' 'TypeOfIsExpression' 'IsExpression' 'MemberAccessExpression' 'MemberAccessBase' 'DictionaryAccessExpression' 'AccessBase' 'InvocationExpression' 'ArgumentList' 'PositionalArgumentList' '( Comma Expression ''argument''? )' '( Comma Expression ''argument''? )*' 'NamedArgumentList' '( Comma <IdentifierOrKeyword> ''argumentName'' ColonEquals Expression ''namedArgument'')' '( Comma <IdentifierOrKeyword> ''argumentName'' ColonEquals Expression ''namedArgument'')*' 'NewExpression' 'ObjectCreationExpression' 'ObjectCreationExpressionInitializer' 'ObjectMemberInitializer' 'FieldInitializerList' '( Comma FieldInitializer ''initializer'')' '( Comma FieldInitializer ''initializer'')*' 'FieldInitializer' 'ObjectCollectionInitializer' 'CollectionInitializer' 'CollectionElementList' '( Comma CollectionElement ''element'')' '( Comma CollectionElement ''element'')*' 'CollectionElement' 'ArrayExpression' 'ArrayCreationExpression' 'ArrayLiteralExpression' 'AnonymousObjectCreationExpression' 'CastExpression' 'CastTarget' 'OperatorExpression' 'ArithmeticOperatorExpression' 'UnaryPlusExpression' 'UnaryMinusExpression' 'AdditionOperatorExpression' 'SubtractionOperatorExpression' 'MultiplicationOperatorExpression' 'DivisionOperatorExpression' 'FPDivisionOperatorExpression' 'IntegerDivisionOperatorExpression' 'ModuloOperatorExpression' 'ExponentOperatorExpression' 'RelationalOperatorExpression' 'LikeOperatorExpression' 'ConcatenationOperatorExpression' 'LogicalOperatorExpression' 'ShortCircuitLogicalOperatorExpression' 'ShiftOperatorExpression' 'LambdaExpression' 'SingleLineLambda' 'LambdaModifier ''modifier''*' 'MultiLineLambda' 'MultiLineFunctionLambda' 'MultiLineSubLambda' 'LambdaModifier' 'QueryExpression' '(<LineTerminator>? QueryOperator)' '(<LineTerminator>? QueryOperator)*' 'FromOrAggregateQueryOperator' 'QueryOperator' 'JoinOrGroupJoinQueryOperator' 'CollectionRangeVariableDeclarationList' '( Comma CollectionRangeVariableDeclaration )' '( Comma CollectionRangeVariableDeclaration )*' 'CollectionRangeVariableDeclaration' 'ExpressionRangeVariableDeclarationList' '( Comma ExpressionRangeVariableDeclaration ''declaration'')' '( Comma ExpressionRangeVariableDeclaration ''declaration'')*' 'ExpressionRangeVariableDeclaration' 'FromQueryOperator' 'JoinQueryOperator' 'JoinConditionList' '( "And" ''andToken'' <LineTerminator>? JoinCondition )' '( "And" ''andToken'' <LineTerminator>? JoinCondition )*' 'JoinCondition' 'LetQueryOperator' 'SelectQueryOperator' 'DistinctQueryOperator' 'WhereQueryOperator' 'PartitionQueryOperator' 'OrderByQueryOperator' 'OrderExpressionList' '( Comma OrderExpression ''expression'' )' '( Comma OrderExpression ''expression'' )*' 'OrderExpression' 'Ordering' 'GroupByQueryOperator' '<LineTerminator>?' 'AggregateQueryOperator' 'QueryOperator*' 'GroupJoinQueryOperator' 'ConditionalExpression' 'AwaitOperatorExpression' 'E O F' 'error')
]

{ #category : #generated }
VBNetParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetFileNode #VBNetFileNode nil #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetLiteralNode #SmaCCToken #VBNetTypeParameterListNode #OrderedCollection #OrderedCollection #VBNetTypeParameterNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #OrderedCollection #OrderedCollection #VBNetAttributeBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetAttributeNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariablePropertyInitializerNode #VBNetExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetOptionStatementNode #VBNetOptionStatementNode #SmaCCToken #VBNetOptionStatementNode #VBNetOptionStatementNode #SmaCCToken #VBNetOptionStatementNode #VBNetImportsStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetAliasImportsClauseNode #VBNetMembersImportsClauseNode #VBNetNamespaceDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetQualifiedTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetBuiltInTypeNameNode #SmaCCToken #OrderedCollection #VBNetNullableTypeNameNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetEnumDeclarationNode #OrderedCollection #OrderedCollection #VBNetEnumMemberDeclarationNode #VBNetClassDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #VBNetProgramNode #VBNetStructureDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #VBNetProgramNode #VBNetModuleDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetInterfaceDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetArrayTypeNameNode #OrderedCollection #OrderedCollection #VBNetArrayTypeModifierNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetDelegateDeclarationNode #VBNetProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetInterfaceMemberSpecifierNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetProgramNode #VBNetSubSignatureNode #VBNetFunctionSignatureNode #OrderedCollection #VBNetSubDeclarationNode #OrderedCollection #VBNetSubDeclarationNode #VBNetSubDeclarationNode #OrderedCollection #VBNetFunctionDeclarationNode #VBNetFunctionDeclarationNode #VBNetFunctionDeclarationNode #SmaCCToken #SmaCCToken #SmaCCToken #OrderedCollection #VBNetProgramNode #VBNetExternalSubDeclarationNode #OrderedCollection #OrderedCollection #VBNetExternalFunctionDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetParameterNode #OrderedCollection #SmaCCToken #VBNetParameterIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetEventMemberSpecifierNode #VBNetConstructorMemberDeclarationNode #OrderedCollection #SmaCCToken #VBNetProgramNode #VBNetRegularEventMemberDeclarationNode #OrderedCollection #VBNetRegularEventMemberDeclarationNode #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #VBNetCustomEventMemberDeclarationNode #OrderedCollection #VBNetProgramNode #VBNetAddHandlerDeclarationNode #VBNetRemoveHandlerDeclarationNode #VBNetRaiseEventDeclarationNode #VBNetConstantMemberDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetConstantDeclaratorNode #VBNetVariableMemberDeclarationNode #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariableDeclaratorNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetVariableIdentifierNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetProgramNode #OrderedCollection #VBNetPropertyMemberDeclarationNode #OrderedCollection #OrderedCollection #VBNetPropertyMemberDeclarationNode #OrderedCollection #VBNetAutoPropertyMemberDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetProgramNode #VBNetPropertyMemberDeclarationNode #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBNetProgramNode #VBNetPropertyGetDeclarationNode #VBNetPropertySetDeclarationNode #VBNetOperatorDeclarationNode #OrderedCollection #SmaCCToken #SmaCCToken #VBNetStatementNode #OrderedCollection #VBNetProgramNode #OrderedCollection #VBNetLabelDeclarationStatementNode #SmaCCToken #VBNetProgramNode #OrderedCollection #OrderedCollection #VBNetLocalDeclarationStatementNode #SmaCCToken #VBNetWithStatementNode #VBNetSyncLockStatementNode #VBNetStatementNode #VBNetRaiseEventStatementNode #VBNetAddHandlerStatementNode #VBNetRemoveHandlerStatementNode #VBNetStatementNode #VBNetAssignmentStatementNode #VBNetAssignmentStatementNode #SmaCCToken #VBNetMidAssignmentStatementNode #VBNetInvocationStatementNode #VBNetStatementNode #VBNetIfStatementNode #VBNetIfStatementNode #OrderedCollection #VBNetElseIfStatementNode #VBNetElseStatementNode #VBNetIfStatementNode #VBNetElseStatementNode #VBNetSelectStatementNode #OrderedCollection #VBNetCaseStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetCaseClauseNode #SmaCCToken #VBNetCaseElseStatementNode #VBNetStatementNode #VBNetWhileStatementNode #VBNetDoLoopStatementNode #VBNetDoTopLoopStatementNode #VBNetDoBottomLoopStatementNode #SmaCCToken #VBNetForStatementNode #VBNetProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetForEachStatementNode #VBNetStatementNode #VBNetStatementNode #VBNetTryStatementNode #OrderedCollection #VBNetFinallyStatementNode #VBNetCatchStatementNode #VBNetThrowStatementNode #VBNetStatementNode #VBNetErrorStatementNode #VBNetOnErrorStatementNode #VBNetProgramNode #VBNetResumeStatementNode #SmaCCToken #VBNetStatementNode #VBNetGoToStatementNode #VBNetExitStatementNode #SmaCCToken #VBNetContinueStatementNode #SmaCCToken #VBNetStopStatementNode #VBNetEndStatementNode #VBNetReturnStatementNode #VBNetStatementNode #VBNetRedimStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetRedimClauseNode #VBNetEraseStatementNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetUsingStatementNode #OrderedCollection #VBNetYieldStatementNode #VBNetExpressionNode #VBNetExpressionNode #VBNetExpressionNode #VBNetLiteralNode #VBNetExpressionNode #VBNetInstanceExpressionNode #VBNetSimpleNameExpressionNode #VBNetAddressOfExpressionNode #VBNetExpressionNode #VBNetGetTypeExpressionNode #VBNetProgramNode #VBNetQualifiedOpenTypeNameNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetTypeOfIsExpressionNode #VBNetBinaryExpressionNode #VBNetMemberAccessExpressionNode #VBNetProgramNode #VBNetDictionaryAccessExpressionNode #VBNetExpressionNode #VBNetInvocationExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionNode #VBNetObjectCreationExpressionNode #VBNetProgramNode #VBNetObjectMemberInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetFieldInitializerNode #VBNetObjectCollectionInitializerNode #VBNetCollectionInitializerNode #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionNode #VBNetExpressionNode #VBNetArrayCreationExpressionNode #VBNetCollectionInitializerNode #VBNetAnonymousCreationExpressionNode #VBNetExpressionNode #SmaCCToken #VBNetExpressionNode #VBNetExpressionNode #VBNetUnaryExpressionNode #VBNetUnaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetExpressionNode #VBNetBinaryExpressionNode #VBNetBinaryExpressionNode #VBNetLambdaExpressionNode #VBNetLambdaExpressionNode #OrderedCollection #VBNetLambdaExpressionNode #VBNetFunctionLambdaExpressionNode #VBNetSubLambdaExpressionNode #SmaCCToken #VBNetQueryExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetExpressionRangeVariableDeclarationNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #VBNetExpressionNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBNetOrderExpressionNode #SmaCCToken #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #VBNetConditionalExpressionNode #VBNetAwaitExpressionNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBNetParser class >> transitionTable [
^#(
#[1 0 6 0 19 0 6 0 70 0 6 0 79 0 6 0 89 0 6 0 98 0 6 0 109 0 6 0 114 0 6 0 131 0 6 0 132 0 6 0 136 0 6 0 141 0 6 0 148 0 6 0 158 0 6 0 160 0 6 0 162 0 6 0 163 0 6 0 173 0 6 0 183 0 6 0 215 0 9 0 232 0 13 0 233 0 6 2 160] 
#[0 0 0 2 160] 
#[1 0 10 0 19 0 10 0 70 0 10 0 79 0 10 0 89 0 10 0 98 0 10 0 109 0 10 0 114 0 10 0 131 0 10 0 132 0 10 0 136 0 10 0 141 0 10 0 148 0 10 0 158 0 10 0 160 0 10 0 162 0 10 0 163 0 10 0 173 0 10 0 183 0 17 0 215 0 21 1 14 0 25 1 15 0 10 2 160] 
#[0 0 14 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 0 215 2 160] 
#[0 0 18 2 160] 
#[1 0 22 0 19 0 22 0 70 0 22 0 79 0 22 0 89 0 22 0 98 0 22 0 109 0 22 0 114 0 22 0 131 0 22 0 132 0 22 0 136 0 22 0 141 0 29 0 148 0 22 0 158 0 22 0 160 0 22 0 162 0 22 0 163 0 22 0 173 0 22 0 183 0 33 1 16 0 37 1 18 0 37 1 19 0 37 1 21 0 37 1 22 0 37 1 24 0 22 2 160] 
#[1 0 57 0 71 0 61 0 95 0 65 0 111 0 69 0 181] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 77 0 109 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 0 85 0 253 0 89 0 254 0 93 0 255 0 97 1 17 0 101 1 25 0 105 1 32 0 109 1 38 0 113 1 39 0 117 1 40 0 117 1 41 0 117 1 65 0 129 1 66 0 117 1 69 0 137 1 70 0 117 1 76 0 145 1 77 0 117 1 81 0 117 1 84 0 117 1 99 0 38 2 160] 
#[0 0 42 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 46 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 50 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 54 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 58 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 169 0 43 0 187 1 23] 
#[1 0 173 0 17 0 189 0 145 0 189 0 146 0 185 0 215 0 189 1 20] 
#[1 0 193 0 17 0 201 0 145 0 201 0 146 0 197 0 215 0 201 1 20] 
#[1 0 205 0 17 0 213 0 145 0 213 0 146 0 209 0 215 0 213 1 20] 
#[1 1 49 0 39 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 49 0 131 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 1 41 1 0 1 45 1 3 1 49 1 4 1 53 1 44 1 53 1 45 1 53 1 52 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 81 0 229 1 85 1 26 1 89 1 29 1 89 1 30 1 89 1 31 1 101 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 1 101 1 92] 
#[1 1 121 0 103 1 125 0 229 1 129 1 34 1 133 1 35] 
#[1 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 137 1 32 1 141 1 66 1 145 1 70 1 149 1 77 0 62 2 160] 
#[1 0 73 0 19 0 66 0 30 0 66 0 40 0 66 0 44 0 66 0 46 0 66 0 47 0 66 0 48 0 66 0 69 0 66 0 70 0 66 0 72 0 66 0 74 0 66 0 75 0 66 0 76 0 66 0 77 0 66 0 78 0 66 0 79 0 66 0 81 0 66 0 85 0 66 0 89 0 66 0 93 0 66 0 98 0 66 0 100 0 66 0 101 0 66 0 103 0 66 0 113 0 66 0 114 0 66 0 120 0 66 0 126 0 66 0 131 0 66 0 132 0 66 0 133 0 66 0 136 0 66 0 137 0 66 0 138 0 66 0 141 0 66 0 142 0 66 0 143 0 66 0 147 0 66 0 149 0 66 0 154 0 66 0 155 0 66 0 156 0 66 0 157 0 66 0 158 0 66 0 160 0 66 0 161 0 66 0 162 0 66 0 163 0 66 0 164 0 66 0 166 0 66 0 167 0 66 0 170 0 66 0 172 0 66 0 173 0 66 0 174 0 66 0 175 0 66 0 176 0 66 0 182 0 66 0 183 0 66 0 184 0 66 0 194 0 66 0 195 0 66 0 196 0 66 0 203 0 66 0 205 0 66 0 206 0 66 0 229 1 153 0 255 0 66 2 160] 
#[0 0 70 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 157 0 253 0 89 0 254 0 93 0 255 0 105 1 32 1 161 1 38 0 113 1 39 0 117 1 40 0 117 1 41 0 117 1 65 0 129 1 66 0 117 1 69 0 137 1 70 0 117 1 76 0 145 1 77 0 117 1 81 0 117 1 84 0 117 1 99 0 74 2 160] 
#[0 0 78 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 82 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 86 0 19 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 90 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 94 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 98 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 1 165 0 79 1 169 0 89 1 205 0 98 1 177 0 114 1 181 0 131 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 242 1 205 1 53] 
#[0 0 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 1 209 0 70 1 229 0 98 1 229 0 132 1 229 0 141 1 229 0 158 1 229 0 160 1 229 0 162 1 229 0 163 1 229 0 173 1 229 0 242 1 229 1 53 1 229 1 73] 
#[0 0 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 1 245 0 98 1 245 0 158 1 245 0 160 1 245 0 162 1 245 0 163 1 245 0 173 1 237 0 183 1 245 0 242 1 245 1 53 1 245 1 79] 
#[0 0 114 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 0 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 0 126 0 17 0 215] 
#[0 0 130 0 17 0 215] 
#[1 1 249 0 17 1 253 0 215] 
#[0 0 134 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 138 0 17 0 215] 
#[0 0 142 0 17 0 215] 
#[0 0 146 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 1 0 17 2 5 0 215] 
#[0 0 150 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 154 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 9 0 17 2 13 0 215] 
#[0 0 158 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 0 162 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 17 0 17 2 21 0 215] 
#[0 0 166 0 17] 
#[0 0 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 178 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 182 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 190 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 25 0 14] 
#[0 0 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 198 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 202 0 17] 
#[0 0 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 214 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 234 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 15 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 33 0 235 2 37 1 47 2 41 1 48] 
#[1 2 45 0 25 2 49 0 215] 
#[1 0 242 0 11 0 242 0 25 0 242 0 215 2 53 1 2] 
#[0 2 57 0 17] 
#[1 2 29 0 5 0 246 0 11 0 246 0 25 0 246 0 215 2 61 0 235] 
#[0 0 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 0 254 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 2 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 10 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 15 0 5 0 238 0 11 0 238 0 14 0 238 0 17 2 65 0 24 0 238 0 29 0 238 0 215 2 33 0 235 2 69 0 239 2 37 1 47 2 41 1 48] 
#[1 2 73 0 17 2 77 0 215] 
#[1 1 18 0 11 1 18 0 17 1 18 0 215 2 81 1 28] 
#[0 1 22 0 11 0 17 0 215] 
#[0 1 26 0 11 0 17 0 215] 
#[0 1 30 0 11 0 17 0 215] 
#[1 1 34 0 3 1 34 0 4 0 19 0 5 1 34 0 6 1 34 0 7 1 34 0 8 1 34 0 9 1 34 0 10 1 34 0 11 1 34 0 12 1 34 0 13 1 34 0 15 1 34 0 16 1 34 0 17 1 34 0 19 1 34 0 20 1 34 0 21 1 34 0 22 1 34 0 23 1 34 0 24 1 34 0 25 1 34 0 26 1 34 0 27 1 34 0 28 2 85 0 29 1 34 0 32 1 34 0 34 1 34 0 35 1 34 0 38 1 34 0 45 1 34 0 80 1 34 0 83 1 34 0 87 1 34 0 90 1 34 0 99 1 34 0 105 1 34 0 106 1 34 0 108 1 34 0 110 1 34 0 115 1 34 0 116 1 34 0 118 1 34 0 121 1 34 0 123 1 34 0 125 1 34 0 130 1 34 0 146 1 34 0 150 1 34 0 151 1 34 0 152 1 34 0 171 1 34 0 177 1 34 0 179 1 34 0 186 1 34 0 188 1 34 0 190 1 34 0 201 1 34 0 207 1 34 0 209 1 34 0 210 1 34 0 211 1 34 0 212 1 34 0 214 1 34 0 215 2 89 0 235 2 93 1 93 2 97 1 94 2 101 1 95] 
#[0 1 38 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 1 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 105 0 14 1 50 0 17 1 50 0 215] 
#[1 1 54 0 14 1 54 0 17 1 54 0 215 2 109 1 37] 
#[1 2 113 0 17 2 117 0 215] 
#[0 1 58 0 17 0 215] 
#[0 1 62 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 121 0 79 2 125 0 89 1 205 0 98 2 129 0 114 2 133 0 131 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 242 1 205 1 53] 
#[1 2 137 0 70 1 229 0 98 1 229 0 132 1 229 0 141 1 229 0 158 1 229 0 160 1 229 0 162 1 229 0 163 1 229 0 173 1 229 0 242 1 229 1 53 1 229 1 73] 
#[1 1 245 0 98 1 245 0 158 1 245 0 160 1 245 0 162 1 245 0 163 1 245 0 173 2 141 0 183 1 245 0 242 1 245 1 53 1 245 1 79] 
#[0 1 66 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[1 0 26 0 70 0 30 0 79 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 137 1 32 1 141 1 66 1 145 1 70 1 149 1 77] 
#[0 1 70 0 19 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 145 0 100 2 149 0 184 2 153 1 100 2 153 1 110 2 153 1 111] 
#[0 2 165 0 229] 
#[0 1 74 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 2 169 0 229] 
#[0 2 173 0 229] 
#[0 1 78 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 1 82 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 1 86 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 89 0 93 0 98 0 100 0 101 0 114 0 120 0 131 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 172 0 173 0 174 0 183 0 184 0 205 0 206 0 229] 
#[0 1 90 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 141 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 94 0 70 0 79 0 89 0 98 0 114 0 131 0 132 0 141 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 98 0 79 0 89 0 98 0 114 0 131 0 160 0 162 0 163 0 173] 
#[0 2 177 0 229] 
#[0 1 102 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 106 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 110 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 114 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 118 0 70 0 98 0 132 0 141 0 158 0 160 0 162 0 163 0 173] 
#[0 1 122 0 98 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 2 181 0 229] 
#[0 1 126 0 98 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 130 0 98 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 1 134 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 138 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 142 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 146 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 150 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 154 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 158 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 162 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 148 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 185 0 215 2 189 0 228] 
#[1 1 166 0 1 1 166 0 5 1 166 0 6 1 166 0 9 1 166 0 11 1 166 0 12 1 166 0 14 1 166 0 19 1 166 0 31 1 166 0 32 1 166 0 40 1 166 0 42 1 166 0 44 1 166 0 46 1 166 0 47 1 166 0 48 1 166 0 49 1 166 0 50 1 166 0 51 1 166 0 52 1 166 0 53 1 166 0 54 1 166 0 55 1 166 0 56 1 166 0 57 1 166 0 58 1 166 0 59 1 166 0 60 1 166 0 61 1 166 0 62 1 166 0 63 1 166 0 64 1 166 0 65 1 166 0 69 1 166 0 75 1 166 0 76 1 166 0 82 1 166 0 85 1 166 0 99 1 166 0 100 1 166 0 102 1 166 0 103 1 166 0 107 1 166 0 113 1 166 0 120 1 166 0 126 1 166 0 128 1 166 0 134 1 166 0 135 1 166 0 138 1 166 0 140 1 166 0 143 1 166 0 144 1 166 0 149 1 166 0 157 1 166 0 170 1 166 0 175 1 166 0 176 1 166 0 182 1 166 0 184 1 166 0 192 1 166 0 193 1 166 0 194 1 166 0 195 1 166 0 196 1 166 0 213 0 23 0 215 1 166 0 219 1 166 0 220 1 166 0 222 1 166 0 223 1 166 0 224 1 166 0 225 1 166 0 227 1 166 0 228 1 166 0 229] 
#[0 2 197 0 144] 
#[1 1 170 0 1 1 170 0 3 1 170 0 4 1 170 0 5 1 170 0 6 1 170 0 7 1 170 0 8 1 170 0 9 1 170 0 10 1 170 0 11 1 170 0 12 1 170 0 13 0 27 0 14 1 170 0 15 1 170 0 16 1 170 0 17 1 170 0 19 1 170 0 20 1 170 0 21 1 170 0 22 1 170 0 23 1 170 0 24 1 170 0 25 1 170 0 26 1 170 0 27 1 170 0 28 1 170 0 29 1 170 0 32 1 170 0 34 1 170 0 35 1 170 0 38 1 170 0 45 1 170 0 80 1 170 0 83 1 170 0 87 1 170 0 90 1 170 0 99 1 170 0 105 1 170 0 106 1 170 0 108 1 170 0 110 1 170 0 115 1 170 0 116 1 170 0 118 1 170 0 121 1 170 0 123 1 170 0 125 1 170 0 130 1 170 0 146 1 170 0 150 1 170 0 151 1 170 0 152 1 170 0 171 1 170 0 177 1 170 0 179 1 170 0 186 1 170 0 188 1 170 0 190 1 170 0 200 1 170 0 201 1 170 0 204 1 170 0 207 1 170 0 209 1 170 0 210 1 170 0 211 1 170 0 212 1 170 0 214 1 170 0 215 2 205 1 46] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 209 1 47] 
#[1 2 213 0 17 1 174 0 19 1 174 0 30 1 174 0 40 1 174 0 44 1 174 0 46 1 174 0 47 1 174 0 48 1 174 0 69 1 174 0 70 1 174 0 72 1 174 0 74 1 174 0 75 1 174 0 76 1 174 0 77 1 174 0 78 1 174 0 79 1 174 0 81 1 174 0 85 1 174 0 89 1 174 0 93 1 174 0 98 1 174 0 100 1 174 0 101 1 174 0 103 1 174 0 113 1 174 0 114 1 174 0 120 1 174 0 126 1 174 0 131 1 174 0 132 1 174 0 133 1 174 0 136 1 174 0 137 1 174 0 138 1 174 0 141 1 174 0 142 1 174 0 143 1 174 0 147 1 174 0 149 1 174 0 154 1 174 0 155 1 174 0 156 1 174 0 157 1 174 0 158 1 174 0 160 1 174 0 161 1 174 0 162 1 174 0 163 1 174 0 164 1 174 0 166 1 174 0 167 1 174 0 170 1 174 0 172 1 174 0 173 1 174 0 174 1 174 0 175 1 174 0 176 1 174 0 182 1 174 0 183 1 174 0 184 1 174 0 194 1 174 0 195 1 174 0 196 1 174 0 203 1 174 0 205 1 174 0 206 2 217 0 215 1 174 0 229 1 174 2 160] 
#[0 2 221 0 25] 
#[1 2 225 0 11 1 178 0 25 1 178 0 215 2 229 0 234 2 233 1 1] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 2 237 1 44 2 237 1 45 2 237 1 52 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 2 241 0 1 2 29 0 5 0 31 0 6 2 249 0 9 1 182 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 35 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 169 0 228 3 173 0 229 3 177 0 235 3 181 0 236 3 185 0 237 3 233 0 241 3 193 1 5 3 197 1 6 3 201 1 8 3 205 1 9 3 209 1 12 3 213 1 13 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 3 213 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[1 1 190 0 1 1 190 0 5 1 190 0 9 1 190 0 12 1 190 0 14 1 190 0 31 1 190 0 32 1 190 0 40 1 190 0 42 1 190 0 44 1 190 0 48 1 190 0 49 1 190 0 50 1 190 0 51 1 190 0 52 1 190 0 53 1 190 0 54 1 190 0 55 1 190 0 56 1 190 0 57 1 190 0 58 1 190 0 59 1 190 0 60 1 190 0 61 1 190 0 62 1 190 0 63 1 190 0 64 1 190 0 65 1 190 0 69 1 190 0 75 1 190 0 76 1 190 0 82 1 190 0 85 1 190 0 99 1 190 0 100 1 190 0 102 1 190 0 103 1 190 0 107 1 190 0 113 1 190 0 120 1 190 0 126 1 190 0 128 1 190 0 134 1 190 0 135 1 190 0 138 1 190 0 140 1 190 0 143 1 190 0 170 1 190 0 175 1 190 0 176 1 190 0 182 1 190 0 184 1 190 0 192 1 190 0 193 1 190 0 194 1 190 0 195 1 190 0 196 1 190 0 213 4 189 0 215 1 190 0 219 1 190 0 220 1 190 0 222 1 190 0 223 1 190 0 224 1 190 0 225 1 190 0 227 1 190 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 4 193 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 4 193 1 92] 
#[0 1 194 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 1 198 0 19 0 70 0 79 0 89 0 98 0 109 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 225 0 11 1 202 0 17 1 202 0 215 4 197 0 234 4 201 1 27] 
#[0 1 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 209 0 6 2 225 0 11 3 137 0 215 4 205 0 234 4 209 0 236 4 213 1 96 4 217 1 97] 
#[0 1 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 214 0 3 1 214 0 4 0 39 0 5 1 214 0 6 1 214 0 7 1 214 0 8 1 214 0 9 1 214 0 10 1 214 0 11 1 214 0 12 1 214 0 13 1 214 0 15 1 214 0 16 1 214 0 17 1 214 0 19 1 214 0 20 1 214 0 21 1 214 0 22 1 214 0 23 1 214 0 24 1 214 0 25 1 214 0 26 1 214 0 27 1 214 0 28 1 214 0 32 1 214 0 34 1 214 0 35 1 214 0 37 1 214 0 38 1 214 0 45 1 214 0 80 1 214 0 83 1 214 0 87 1 214 0 90 1 214 0 99 1 214 0 105 1 214 0 106 1 214 0 108 1 214 0 110 1 214 0 115 1 214 0 116 1 214 0 118 1 214 0 121 1 214 0 123 1 214 0 125 1 214 0 130 1 214 0 146 1 214 0 150 1 214 0 151 1 214 0 152 1 214 0 171 1 214 0 177 1 214 0 179 1 214 0 186 1 214 0 188 1 214 0 190 1 214 0 201 1 214 0 207 1 214 0 209 1 214 0 210 1 214 0 211 1 214 0 212 1 214 0 213 1 214 0 214 1 214 0 215 2 89 0 235 4 221 1 95] 
#[0 1 218 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 4 225 0 215 1 125 0 229 4 229 1 35] 
#[1 4 233 0 14 1 222 0 17 1 222 0 215 4 237 1 36] 
#[1 1 226 0 19 1 226 0 70 1 226 0 79 1 226 0 88 1 226 0 89 1 226 0 98 1 226 0 114 1 226 0 131 1 226 0 132 1 226 0 136 1 226 0 141 1 226 0 158 1 226 0 160 1 226 0 162 1 226 0 163 1 226 0 173 1 226 0 183 4 241 1 33] 
#[1 1 226 0 19 1 226 0 70 1 226 0 79 1 226 0 88 1 226 0 89 1 226 0 98 1 226 0 114 1 226 0 131 1 226 0 132 1 226 0 136 1 226 0 141 1 226 0 158 1 226 0 160 1 226 0 162 1 226 0 163 1 226 0 173 1 226 0 183 4 245 1 33] 
#[1 2 145 0 100 2 149 0 184 4 249 1 100 4 249 1 110 4 249 1 111] 
#[0 4 253 0 229] 
#[0 5 1 0 229] 
#[0 5 5 0 229] 
#[0 5 9 0 229] 
#[0 5 13 0 229] 
#[0 5 17 0 229] 
#[0 5 21 0 229] 
#[1 5 25 0 17 5 29 0 215] 
#[0 1 230 0 17 0 215] 
#[0 1 234 0 17 0 215] 
#[1 5 33 0 17 5 37 0 37 5 41 0 215] 
#[1 2 29 0 5 5 45 0 17 5 49 0 215 5 53 0 235 5 57 0 243] 
#[1 5 61 0 17 5 65 0 215] 
#[1 2 29 0 5 5 69 0 17 5 73 0 215 5 53 0 235 5 77 0 243] 
#[1 2 29 0 5 5 81 0 17 5 85 0 215 5 53 0 235 5 89 0 243] 
#[0 5 93 0 228] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 15 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 33 0 235 5 97 1 47 5 101 1 48] 
#[0 1 238 0 1 0 5 0 6 0 9 0 11 0 12 0 14 0 19 0 31 0 32 0 40 0 42 0 44 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 144 0 149 0 157 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 228 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 5 109 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92] 
#[1 5 113 0 215 5 117 0 228] 
#[0 1 242 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 246 0 1 1 246 0 3 1 246 0 4 1 246 0 5 1 246 0 6 1 246 0 7 1 246 0 8 1 246 0 9 1 246 0 10 1 246 0 11 1 246 0 12 1 246 0 13 0 43 0 14 1 246 0 15 1 246 0 16 1 246 0 17 1 246 0 19 1 246 0 20 1 246 0 21 1 246 0 22 1 246 0 23 1 246 0 24 1 246 0 25 1 246 0 26 1 246 0 27 1 246 0 28 1 246 0 29 1 246 0 32 1 246 0 34 1 246 0 35 1 246 0 38 1 246 0 45 1 246 0 80 1 246 0 83 1 246 0 87 1 246 0 90 1 246 0 99 1 246 0 105 1 246 0 106 1 246 0 108 1 246 0 110 1 246 0 115 1 246 0 116 1 246 0 118 1 246 0 121 1 246 0 123 1 246 0 125 1 246 0 130 1 246 0 146 1 246 0 150 1 246 0 151 1 246 0 152 1 246 0 171 1 246 0 177 1 246 0 179 1 246 0 186 1 246 0 188 1 246 0 190 1 246 0 200 1 246 0 201 1 246 0 204 1 246 0 207 1 246 0 209 1 246 0 210 1 246 0 211 1 246 0 212 1 246 0 214 1 246 0 215 2 205 1 46] 
#[0 1 250 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[0 1 254 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[1 5 121 0 17 2 2 0 19 2 2 0 30 2 2 0 40 2 2 0 44 2 2 0 46 2 2 0 47 2 2 0 48 2 2 0 69 2 2 0 70 2 2 0 72 2 2 0 74 2 2 0 75 2 2 0 76 2 2 0 77 2 2 0 78 2 2 0 79 2 2 0 81 2 2 0 85 2 2 0 89 2 2 0 93 2 2 0 98 2 2 0 100 2 2 0 101 2 2 0 103 2 2 0 113 2 2 0 114 2 2 0 120 2 2 0 126 2 2 0 131 2 2 0 132 2 2 0 133 2 2 0 136 2 2 0 137 2 2 0 138 2 2 0 141 2 2 0 142 2 2 0 143 2 2 0 147 2 2 0 149 2 2 0 154 2 2 0 155 2 2 0 156 2 2 0 157 2 2 0 158 2 2 0 160 2 2 0 161 2 2 0 162 2 2 0 163 2 2 0 164 2 2 0 166 2 2 0 167 2 2 0 170 2 2 0 172 2 2 0 173 2 2 0 174 2 2 0 175 2 2 0 176 2 2 0 182 2 2 0 183 2 2 0 184 2 2 0 194 2 2 0 195 2 2 0 196 2 2 0 203 2 2 0 205 2 2 0 206 5 125 0 215 2 2 0 229 2 2 2 160] 
#[1 2 6 0 1 2 6 0 5 2 6 0 6 2 6 0 9 2 6 0 11 2 6 0 12 2 6 0 14 2 6 0 19 2 6 0 22 2 6 0 23 2 6 0 24 2 6 0 25 2 6 0 26 2 6 0 31 2 6 0 32 2 6 0 39 2 6 0 40 2 6 0 42 2 6 0 44 2 6 0 46 2 6 0 47 2 6 0 48 2 6 0 49 2 6 0 50 2 6 0 51 2 6 0 52 2 6 0 53 2 6 0 54 2 6 0 55 2 6 0 56 2 6 0 57 2 6 0 58 2 6 0 59 2 6 0 60 2 6 0 61 2 6 0 62 2 6 0 63 2 6 0 64 2 6 0 65 2 6 0 69 2 6 0 70 2 6 0 75 2 6 0 76 2 6 0 82 2 6 0 85 2 6 0 99 2 6 0 100 2 6 0 102 2 6 0 103 2 6 0 107 2 6 0 110 2 6 0 113 2 6 0 116 2 6 0 120 2 6 0 122 2 6 0 126 2 6 0 128 2 6 0 131 2 6 0 134 2 6 0 135 2 6 0 138 2 6 0 140 2 6 0 143 2 6 0 149 2 6 0 153 2 6 0 157 2 6 0 170 2 6 0 175 2 6 0 176 2 6 0 182 2 6 0 183 2 6 0 184 2 6 0 192 2 6 0 193 2 6 0 194 2 6 0 195 2 6 0 196 2 6 0 213 0 47 0 215 2 6 0 219 2 6 0 220 2 6 0 222 2 6 0 223 2 6 0 224 2 6 0 225 2 6 0 227 2 6 0 228 2 6 0 229] 
#[1 1 49 0 39 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 49 0 131 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 133 1 3 1 49 1 4 1 53 1 44 1 53 1 45 1 53 1 52 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[0 2 10 0 11 0 25 0 215] 
#[1 2 29 0 5 2 14 0 11 2 14 0 25 2 14 0 215 5 137 0 235] 
#[0 5 141 0 228] 
#[0 2 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 37 0 38 0 40 0 42 0 44 0 45 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 69 0 72 0 73 0 75 0 76 0 80 0 81 0 82 0 83 0 84 0 85 0 87 0 88 0 90 0 91 0 92 0 94 0 97 0 99 0 100 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 110 0 113 0 115 0 116 0 118 0 120 0 121 0 123 0 125 0 126 0 128 0 129 0 130 0 134 0 135 0 138 0 140 0 143 0 146 0 150 0 151 0 152 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 177 0 178 0 179 0 180 0 182 0 184 0 185 0 186 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 200 0 201 0 202 0 204 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 145 2 47 5 145 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 145 2 54 5 145 2 55 4 1 2 56 5 145 2 63 5 145 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 145 2 97 5 145 2 98 5 145 2 99 5 145 2 100 5 145 2 101 5 145 2 102 5 145 2 103 5 145 2 104 5 145 2 105 5 145 2 106 5 145 2 107 5 145 2 108 5 145 2 109 5 145 2 110 5 145 2 111 5 145 2 112 5 145 2 113 5 145 2 114 5 145 2 115 5 145 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 145 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 149 2 47 5 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 149 2 54 5 149 2 55 4 1 2 56 5 149 2 63 5 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 149 2 97 5 149 2 98 5 149 2 99 5 149 2 100 5 149 2 101 5 149 2 102 5 149 2 103 5 149 2 104 5 149 2 105 5 149 2 106 5 149 2 107 5 149 2 108 5 149 2 109 5 149 2 110 5 149 2 111 5 149 2 112 5 149 2 113 5 149 2 114 5 149 2 115 5 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 149 2 159] 
#[1 5 153 0 215 5 157 0 228] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 161 2 47 5 161 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 161 2 54 5 161 2 55 4 1 2 56 5 161 2 63 5 161 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 161 2 97 5 161 2 98 5 161 2 99 5 161 2 100 5 161 2 101 5 161 2 102 5 161 2 103 5 161 2 104 5 161 2 105 5 161 2 106 5 161 2 107 5 161 2 108 5 161 2 109 5 161 2 110 5 161 2 111 5 161 2 112 5 161 2 113 5 161 2 114 5 161 2 115 5 161 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 161 2 159] 
#[1 5 165 0 215 5 169 0 229 5 173 2 131] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 177 2 47 5 177 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 177 2 54 5 177 2 55 4 1 2 56 5 177 2 63 5 177 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 177 2 97 5 177 2 98 5 177 2 99 5 177 2 100 5 177 2 101 5 177 2 102 5 177 2 103 5 177 2 104 5 177 2 105 5 177 2 106 5 177 2 107 5 177 2 108 5 177 2 109 5 177 2 110 5 177 2 111 5 177 2 112 5 177 2 113 5 177 2 114 5 177 2 115 5 177 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 177 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 177 2 159] 
#[0 2 22 0 5] 
#[0 2 26 0 5] 
#[0 2 30 0 5] 
#[0 2 34 0 5] 
#[0 2 38 0 5] 
#[0 2 42 0 5] 
#[0 2 46 0 5] 
#[0 2 50 0 5] 
#[0 2 54 0 5] 
#[0 2 58 0 5] 
#[0 2 62 0 5] 
#[0 2 66 0 5] 
#[0 2 70 0 5] 
#[1 2 29 0 5 5 181 0 235] 
#[0 2 74 0 5] 
#[0 2 78 0 5] 
#[0 2 82 0 5] 
#[1 2 29 0 5 5 185 0 235] 
#[1 5 189 0 215 5 169 0 229 5 193 2 128 5 197 2 131] 
#[1 2 29 0 5 5 201 0 235] 
#[0 0 51 0 14] 
#[1 2 29 0 5 5 205 0 235] 
#[0 2 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 94 0 14] 
#[0 2 98 0 14] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 5 209 0 204 1 37 0 229 5 213 1 43 5 213 1 44 5 213 1 45 5 213 1 52 5 213 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 217 2 80] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 221 2 47 5 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 221 2 54 5 221 2 55 4 1 2 56 5 221 2 63 5 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 221 2 97 5 221 2 98 5 221 2 99 5 221 2 100 5 221 2 101 5 221 2 102 5 221 2 103 5 221 2 104 5 221 2 105 5 221 2 106 5 221 2 107 5 221 2 108 5 221 2 109 5 221 2 110 5 221 2 111 5 221 2 112 5 221 2 113 5 221 2 114 5 221 2 115 5 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 221 2 159] 
#[1 2 29 0 5 5 225 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 229 2 47 5 229 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 229 2 54 5 229 2 55 4 1 2 56 5 229 2 63 5 229 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 229 2 97 5 229 2 98 5 229 2 99 5 229 2 100 5 229 2 101 5 229 2 102 5 229 2 103 5 229 2 104 5 229 2 105 5 229 2 106 5 229 2 107 5 229 2 108 5 229 2 109 5 229 2 110 5 229 2 111 5 229 2 112 5 229 2 113 5 229 2 114 5 229 2 115 5 229 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 229 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 229 2 159] 
#[1 2 102 0 1 2 102 0 5 2 102 0 9 2 102 0 12 2 102 0 14 2 102 0 31 2 102 0 32 2 102 0 40 2 102 0 42 2 102 0 44 2 102 0 48 2 102 0 49 2 102 0 50 2 102 0 51 2 102 0 52 2 102 0 53 2 102 0 54 2 102 0 55 2 102 0 56 2 102 0 57 2 102 0 58 2 102 0 59 2 102 0 60 2 102 0 61 2 102 0 62 2 102 0 63 2 102 0 64 2 102 0 65 2 102 0 69 2 102 0 70 2 102 0 75 2 102 0 76 2 102 0 82 2 102 0 85 2 102 0 99 2 102 0 100 2 102 0 102 2 102 0 103 2 102 0 107 2 102 0 113 2 102 0 120 2 102 0 122 2 102 0 126 2 102 0 128 2 102 0 134 2 102 0 135 2 102 0 138 2 102 0 140 2 102 0 143 2 102 0 170 2 102 0 175 2 102 0 176 2 102 0 182 2 102 0 183 2 102 0 184 2 102 0 192 2 102 0 193 2 102 0 194 2 102 0 195 2 102 0 196 2 102 0 213 2 102 0 214 0 55 0 215 2 102 0 219 2 102 0 220 2 102 0 222 2 102 0 223 2 102 0 224 2 102 0 225 2 102 0 227 2 102 0 229] 
#[0 5 237 0 6] 
#[0 2 106 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 110 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 114 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 118 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 122 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 126 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 130 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 241 0 18 5 245 0 240] 
#[1 2 134 0 1 0 59 0 3 0 59 0 4 0 63 0 5 0 59 0 6 0 59 0 7 0 59 0 8 0 59 0 9 0 59 0 10 0 59 0 11 0 59 0 12 0 59 0 13 0 59 0 14 0 59 0 15 0 59 0 16 0 59 0 17 0 59 0 19 0 59 0 20 0 59 0 21 0 59 0 22 0 59 0 23 0 59 0 24 0 59 0 25 0 59 0 26 0 59 0 27 0 59 0 28 0 238 0 29 0 59 0 32 0 59 0 34 0 59 0 35 0 59 0 38 0 59 0 45 0 59 0 80 0 59 0 83 0 59 0 87 0 59 0 90 0 59 0 99 0 59 0 105 0 59 0 108 0 59 0 110 0 59 0 115 0 59 0 116 0 59 0 118 0 59 0 121 0 59 0 123 0 59 0 125 0 59 0 130 0 59 0 146 0 59 0 150 0 59 0 151 0 59 0 152 0 59 0 171 0 59 0 177 0 59 0 179 0 59 0 186 0 59 0 188 0 59 0 190 0 59 0 201 0 59 0 207 0 59 0 209 0 59 0 210 0 59 0 211 0 59 0 212 0 59 0 214 0 59 0 215 5 249 0 235 2 37 1 47 2 41 1 48] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 253 2 47 5 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 253 2 54 5 253 2 55 4 1 2 56 5 253 2 63 5 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 253 2 97 5 253 2 98 5 253 2 99 5 253 2 100 5 253 2 101 5 253 2 102 5 253 2 103 5 253 2 104 5 253 2 105 5 253 2 106 5 253 2 107 5 253 2 108 5 253 2 109 5 253 2 110 5 253 2 111 5 253 2 112 5 253 2 113 5 253 2 114 5 253 2 115 5 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 253 2 159] 
#[0 2 138 0 11 0 25 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 6 9 0 214 6 5 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 6 9 0 238 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 6 13 2 47 6 13 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 6 13 2 54 6 13 2 55 4 1 2 56 6 13 2 63 6 13 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 6 17 2 86 6 21 2 87 6 25 2 90 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 6 13 2 97 6 13 2 98 6 13 2 99 6 13 2 100 6 13 2 101 6 13 2 102 6 13 2 103 6 13 2 104 6 13 2 105 6 13 2 106 6 13 2 107 6 13 2 108 6 13 2 109 6 13 2 110 6 13 2 111 6 13 2 112 6 13 2 113 6 13 2 114 6 13 2 115 6 13 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 6 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 6 13 2 159] 
#[0 2 142 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 29 0 6 3 137 0 215 6 29 0 236] 
#[1 2 146 0 6 2 225 0 11 2 146 0 215 6 33 0 234] 
#[1 2 150 0 6 0 67 0 11 2 150 0 215 6 37 0 234 6 41 1 7] 
#[0 2 154 0 6 0 215] 
#[1 2 158 0 6 2 158 0 11 2 158 0 215 6 45 1 11] 
#[1 1 182 0 6 1 182 0 11 1 182 0 215 6 49 1 8] 
#[1 2 162 0 14 2 85 0 29] 
#[1 6 53 0 3 2 29 0 5 2 166 0 6 6 57 0 7 6 61 0 9 2 166 0 11 6 65 0 12 6 69 0 15 2 166 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 2 166 0 215 6 149 0 235] 
#[0 2 170 0 6 0 11 0 215] 
#[0 2 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 178 0 1 2 182 0 3 2 182 0 4 2 182 0 5 2 182 0 6 2 182 0 7 2 182 0 8 2 182 0 9 2 182 0 10 2 182 0 11 2 182 0 12 2 182 0 13 2 178 0 14 2 182 0 15 2 182 0 16 2 182 0 17 2 182 0 19 2 182 0 20 2 182 0 21 2 182 0 22 2 182 0 23 2 182 0 24 2 182 0 25 2 182 0 26 2 182 0 27 2 182 0 28 2 182 0 32 2 182 0 34 2 182 0 35 2 182 0 38 2 182 0 45 2 182 0 80 2 182 0 83 2 182 0 87 2 182 0 90 2 182 0 99 2 182 0 105 2 182 0 108 2 182 0 110 2 182 0 115 2 182 0 116 2 182 0 118 2 182 0 121 2 182 0 123 2 182 0 125 2 182 0 130 2 182 0 146 2 182 0 150 2 182 0 151 2 182 0 152 2 182 0 171 2 182 0 177 2 182 0 179 2 182 0 186 2 182 0 188 2 182 0 190 2 182 0 201 2 182 0 207 2 182 0 209 2 182 0 210 2 182 0 211 2 182 0 212 2 182 0 214 2 182 0 215] 
#[1 2 186 0 1 2 190 0 3 2 190 0 4 2 190 0 5 2 190 0 6 2 190 0 7 2 190 0 8 2 190 0 9 2 190 0 10 2 190 0 11 2 190 0 12 2 190 0 13 2 186 0 14 2 190 0 15 2 190 0 16 2 190 0 17 2 190 0 19 2 190 0 20 2 190 0 21 2 190 0 22 2 190 0 23 2 190 0 24 2 190 0 25 2 190 0 26 2 190 0 27 2 190 0 28 2 190 0 32 2 190 0 34 2 190 0 35 2 190 0 38 2 190 0 45 2 190 0 80 2 190 0 83 2 190 0 87 2 190 0 90 2 190 0 99 2 190 0 105 2 190 0 108 2 190 0 110 2 190 0 115 2 190 0 116 2 190 0 118 2 190 0 121 2 190 0 123 2 190 0 125 2 190 0 130 2 190 0 146 2 190 0 150 2 190 0 151 2 190 0 152 2 190 0 171 2 190 0 177 2 190 0 179 2 190 0 186 2 190 0 188 2 190 0 190 2 190 0 201 2 190 0 207 2 190 0 209 2 190 0 210 2 190 0 211 2 190 0 212 2 190 0 214 2 190 0 215] 
#[1 2 194 0 1 2 198 0 3 2 198 0 4 2 198 0 5 2 198 0 6 2 198 0 7 2 198 0 8 2 198 0 9 2 198 0 10 2 198 0 11 2 198 0 12 2 198 0 13 2 194 0 14 2 198 0 15 2 198 0 16 2 198 0 17 2 198 0 19 2 198 0 20 2 198 0 21 2 198 0 22 2 198 0 23 2 198 0 24 2 198 0 25 2 198 0 26 2 198 0 27 2 198 0 28 2 198 0 32 2 198 0 34 2 198 0 35 2 198 0 38 2 198 0 45 2 198 0 80 2 198 0 83 2 198 0 87 2 198 0 90 2 198 0 99 2 198 0 105 2 198 0 108 2 198 0 110 2 198 0 115 2 198 0 116 2 198 0 118 2 198 0 121 2 198 0 123 2 198 0 125 2 198 0 130 2 198 0 146 2 198 0 150 2 198 0 151 2 198 0 152 2 198 0 171 2 198 0 177 2 198 0 179 2 198 0 186 2 198 0 188 2 198 0 190 2 198 0 201 2 198 0 207 2 198 0 209 2 198 0 210 2 198 0 211 2 198 0 212 2 198 0 214 2 198 0 215] 
#[1 2 202 0 1 2 206 0 3 2 206 0 4 2 206 0 5 2 206 0 6 2 206 0 7 2 206 0 8 2 206 0 9 2 206 0 10 2 206 0 11 2 206 0 12 2 206 0 13 2 202 0 14 2 206 0 15 2 206 0 16 2 206 0 17 2 206 0 19 2 206 0 20 2 206 0 21 2 206 0 22 2 206 0 23 2 206 0 24 2 206 0 25 2 206 0 26 2 206 0 27 2 206 0 28 2 206 0 32 2 206 0 34 2 206 0 35 2 206 0 38 2 206 0 45 2 206 0 80 2 206 0 83 2 206 0 87 2 206 0 90 2 206 0 99 2 206 0 105 2 206 0 108 2 206 0 110 2 206 0 115 2 206 0 116 2 206 0 118 2 206 0 121 2 206 0 123 2 206 0 125 2 206 0 130 2 206 0 146 2 206 0 150 2 206 0 151 2 206 0 152 2 206 0 171 2 206 0 177 2 206 0 179 2 206 0 186 2 206 0 188 2 206 0 190 2 206 0 201 2 206 0 207 2 206 0 209 2 206 0 210 2 206 0 211 2 206 0 212 2 206 0 214 2 206 0 215] 
#[0 2 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 218 0 1 2 222 0 3 2 222 0 4 2 222 0 5 2 222 0 6 2 222 0 7 2 222 0 8 2 222 0 9 2 222 0 10 2 222 0 11 2 222 0 12 2 222 0 13 2 218 0 14 2 222 0 15 2 222 0 16 2 222 0 17 2 222 0 19 2 222 0 20 2 222 0 21 2 222 0 22 2 222 0 23 2 222 0 24 2 222 0 25 2 222 0 26 2 222 0 27 2 222 0 28 2 222 0 32 2 222 0 34 2 222 0 35 2 222 0 38 2 222 0 45 2 222 0 80 2 222 0 83 2 222 0 87 2 222 0 90 2 222 0 99 2 222 0 105 2 222 0 108 2 222 0 110 2 222 0 115 2 222 0 116 2 222 0 118 2 222 0 121 2 222 0 123 2 222 0 125 2 222 0 130 2 222 0 146 2 222 0 150 2 222 0 151 2 222 0 152 2 222 0 171 2 222 0 177 2 222 0 179 2 222 0 186 2 222 0 188 2 222 0 190 2 222 0 201 2 222 0 207 2 222 0 209 2 222 0 210 2 222 0 211 2 222 0 212 2 222 0 214 2 222 0 215] 
#[0 2 226 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 2 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 234 0 1 2 238 0 3 2 238 0 4 2 238 0 5 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 10 2 238 0 11 2 238 0 12 2 238 0 13 2 234 0 14 2 238 0 15 2 238 0 16 2 238 0 17 2 238 0 19 2 238 0 20 2 238 0 21 2 238 0 22 2 238 0 23 2 238 0 24 2 238 0 25 2 238 0 26 2 238 0 27 2 238 0 28 2 238 0 32 2 238 0 34 2 238 0 35 2 238 0 38 2 238 0 45 2 238 0 80 2 238 0 83 2 238 0 87 2 238 0 90 2 238 0 99 2 238 0 105 2 238 0 108 2 238 0 110 2 238 0 115 2 238 0 116 2 238 0 118 2 238 0 121 2 238 0 123 2 238 0 125 2 238 0 130 2 238 0 146 2 238 0 150 2 238 0 151 2 238 0 152 2 238 0 171 2 238 0 177 2 238 0 179 2 238 0 186 2 238 0 188 2 238 0 190 2 238 0 201 2 238 0 207 2 238 0 209 2 238 0 210 2 238 0 211 2 238 0 212 2 238 0 214 2 238 0 215] 
#[0 6 153 0 14] 
#[1 2 242 0 1 2 246 0 3 2 246 0 4 2 246 0 5 2 246 0 6 2 246 0 7 2 246 0 8 2 246 0 9 2 246 0 10 2 246 0 11 2 246 0 12 2 246 0 13 2 242 0 14 2 246 0 15 2 246 0 16 2 246 0 17 2 246 0 19 2 246 0 20 2 246 0 21 2 246 0 22 2 246 0 23 2 246 0 24 2 246 0 25 2 246 0 26 2 246 0 27 2 246 0 28 2 246 0 32 2 246 0 34 2 246 0 35 2 246 0 38 2 246 0 45 2 246 0 80 2 246 0 83 2 246 0 87 2 246 0 90 2 246 0 99 2 246 0 105 2 246 0 108 2 246 0 110 2 246 0 115 2 246 0 116 2 246 0 118 2 246 0 121 2 246 0 123 2 246 0 125 2 246 0 130 2 246 0 146 2 246 0 150 2 246 0 151 2 246 0 152 2 246 0 171 2 246 0 177 2 246 0 179 2 246 0 186 2 246 0 188 2 246 0 190 2 246 0 201 2 246 0 207 2 246 0 209 2 246 0 210 2 246 0 211 2 246 0 212 2 246 0 214 2 246 0 215] 
#[1 6 157 0 1 2 250 0 14] 
#[1 2 254 0 1 3 2 0 3 3 2 0 4 3 2 0 5 3 2 0 6 3 2 0 7 3 2 0 8 3 2 0 9 3 2 0 10 3 2 0 11 3 2 0 12 3 2 0 13 2 254 0 14 3 2 0 15 3 2 0 16 3 2 0 17 3 2 0 19 3 2 0 20 3 2 0 21 3 2 0 22 3 2 0 23 3 2 0 24 3 2 0 25 3 2 0 26 3 2 0 27 3 2 0 28 3 2 0 32 3 2 0 34 3 2 0 35 3 2 0 38 3 2 0 45 3 2 0 80 3 2 0 83 3 2 0 87 3 2 0 90 3 2 0 99 3 2 0 105 3 2 0 108 3 2 0 110 3 2 0 115 3 2 0 116 3 2 0 118 3 2 0 121 3 2 0 123 3 2 0 125 3 2 0 130 3 2 0 146 3 2 0 150 3 2 0 151 3 2 0 152 3 2 0 171 3 2 0 177 3 2 0 179 3 2 0 186 3 2 0 188 3 2 0 190 3 2 0 201 3 2 0 207 3 2 0 209 3 2 0 210 3 2 0 211 3 2 0 212 3 2 0 214 3 2 0 215] 
#[1 3 6 0 1 3 10 0 3 3 10 0 4 3 10 0 5 3 10 0 6 3 10 0 7 3 10 0 8 3 10 0 9 3 10 0 10 3 10 0 11 3 10 0 12 3 10 0 13 3 6 0 14 3 10 0 15 3 10 0 16 3 10 0 17 3 10 0 19 3 10 0 20 3 10 0 21 3 10 0 22 3 10 0 23 3 10 0 24 3 10 0 25 3 10 0 26 3 10 0 27 3 10 0 28 3 10 0 32 3 10 0 34 3 10 0 35 3 10 0 38 3 10 0 45 3 10 0 80 3 10 0 83 3 10 0 87 3 10 0 90 3 10 0 99 3 10 0 105 3 10 0 108 3 10 0 110 3 10 0 115 3 10 0 116 3 10 0 118 3 10 0 121 3 10 0 123 3 10 0 125 3 10 0 130 3 10 0 146 3 10 0 150 3 10 0 151 3 10 0 152 3 10 0 171 3 10 0 177 3 10 0 179 3 10 0 186 3 10 0 188 3 10 0 190 3 10 0 201 3 10 0 207 3 10 0 209 3 10 0 210 3 10 0 211 3 10 0 212 3 10 0 214 3 10 0 215] 
#[0 3 14 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 18 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 34 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 38 0 1 3 42 0 3 3 42 0 4 3 42 0 5 3 42 0 6 3 42 0 7 3 42 0 8 3 42 0 9 3 42 0 10 3 42 0 11 3 42 0 12 3 42 0 13 3 38 0 14 3 42 0 15 3 42 0 16 3 42 0 17 3 42 0 19 3 42 0 20 3 42 0 21 3 42 0 22 3 42 0 23 3 42 0 24 3 42 0 25 3 42 0 26 3 42 0 27 3 42 0 28 3 42 0 32 3 42 0 34 3 42 0 35 3 42 0 38 3 42 0 45 3 42 0 80 3 42 0 83 3 42 0 87 3 42 0 90 3 42 0 99 3 42 0 105 3 42 0 108 3 42 0 110 3 42 0 115 3 42 0 116 3 42 0 118 3 42 0 121 3 42 0 123 3 42 0 125 3 42 0 130 3 42 0 146 3 42 0 150 3 42 0 151 3 42 0 152 3 42 0 171 3 42 0 177 3 42 0 179 3 42 0 186 3 42 0 188 3 42 0 190 3 42 0 201 3 42 0 207 3 42 0 209 3 42 0 210 3 42 0 211 3 42 0 212 3 42 0 214 3 42 0 215] 
#[1 2 29 0 5 6 161 0 235] 
#[0 3 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 62 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 74 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 78 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 90 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 110 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 118 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 181 0 40 6 169 0 100 6 181 0 120 6 177 0 184 6 181 2 121] 
#[1 3 126 0 1 3 130 0 3 3 130 0 4 3 130 0 5 3 130 0 6 3 130 0 7 3 130 0 8 3 130 0 9 3 130 0 10 3 130 0 11 3 130 0 12 3 130 0 13 3 126 0 14 3 130 0 15 3 130 0 16 3 130 0 17 3 130 0 19 3 130 0 20 3 130 0 21 3 130 0 22 3 130 0 23 3 130 0 24 3 130 0 25 3 130 0 26 3 130 0 27 3 130 0 28 3 130 0 32 3 130 0 34 3 130 0 35 3 130 0 38 3 130 0 45 3 130 0 80 3 130 0 83 3 130 0 87 3 130 0 90 3 130 0 99 3 130 0 105 3 130 0 108 3 130 0 110 3 130 0 115 3 130 0 116 3 130 0 118 3 130 0 121 3 130 0 123 3 130 0 125 3 130 0 130 3 130 0 146 3 130 0 150 3 130 0 151 3 130 0 152 3 130 0 171 3 130 0 177 3 130 0 179 3 130 0 186 3 130 0 188 3 130 0 190 3 130 0 201 3 130 0 207 3 130 0 209 3 130 0 210 3 130 0 211 3 130 0 212 3 130 0 214 3 130 0 215] 
#[0 3 134 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 146 0 3 3 146 0 4 3 146 0 5 3 146 0 6 3 146 0 7 3 146 0 8 3 146 0 9 3 146 0 10 3 146 0 11 3 146 0 12 3 146 0 13 3 146 0 15 3 146 0 16 3 146 0 17 3 146 0 19 3 146 0 20 3 146 0 21 3 146 0 22 3 146 0 23 3 146 0 24 3 146 0 25 3 146 0 26 3 146 0 27 3 146 0 28 3 146 0 32 3 146 0 34 3 146 0 35 3 146 0 38 3 146 0 45 3 146 0 80 3 146 0 83 3 146 0 87 3 146 0 90 3 146 0 99 3 146 0 105 3 146 0 108 3 146 0 110 3 146 0 115 3 146 0 116 3 146 0 118 3 146 0 121 3 146 0 123 3 146 0 125 3 146 0 130 3 146 0 146 3 146 0 150 3 146 0 151 3 146 0 152 3 146 0 171 3 146 0 177 3 146 0 179 3 146 0 186 3 146 0 188 3 146 0 190 3 146 0 201 3 146 0 207 3 146 0 209 3 146 0 210 3 146 0 211 3 146 0 212 3 146 0 214 3 146 0 215 6 185 2 124] 
#[0 3 150 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 3 158 0 1 3 162 0 3 3 162 0 4 3 162 0 5 3 162 0 6 3 162 0 7 3 162 0 8 3 162 0 9 3 162 0 10 3 162 0 11 3 162 0 12 3 162 0 13 3 158 0 14 3 162 0 15 3 162 0 16 3 162 0 17 3 162 0 19 3 162 0 20 3 162 0 21 3 162 0 22 3 162 0 23 3 162 0 24 3 162 0 25 3 162 0 26 3 162 0 27 3 162 0 28 3 162 0 32 3 162 0 34 3 162 0 35 3 162 0 38 3 162 0 45 3 162 0 80 3 162 0 83 3 162 0 87 3 162 0 90 3 162 0 99 3 162 0 105 3 162 0 108 3 162 0 110 3 162 0 115 3 162 0 116 3 162 0 118 3 162 0 121 3 162 0 123 3 162 0 125 3 162 0 130 3 162 0 146 3 162 0 150 3 162 0 151 3 162 0 152 3 162 0 171 3 162 0 177 3 162 0 179 3 162 0 186 3 162 0 188 3 162 0 190 3 162 0 201 3 162 0 207 3 162 0 209 3 162 0 210 3 162 0 211 3 162 0 212 3 162 0 214 3 162 0 215] 
#[0 3 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 3 170 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 3 174 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 81 0 229 6 189 1 29 6 189 1 30 6 189 1 31 1 101 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 1 101 1 92] 
#[0 3 178 0 11 0 17 0 215] 
#[0 3 182 0 6 0 11 0 215] 
#[0 3 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 6 193 0 6 3 137 0 215 6 193 0 236] 
#[1 3 190 0 6 2 225 0 11 3 190 0 215 6 197 0 234] 
#[0 3 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 1 125 0 229 6 201 1 35] 
#[0 3 198 0 17 0 215] 
#[1 6 205 0 215 6 209 0 228] 
#[0 3 202 0 14 0 17 0 215] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 6 213 0 88 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 157 0 253 0 89 0 254 0 93 0 255 0 105 1 32 6 217 1 38 0 113 1 39 0 117 1 40 0 117 1 41 0 117 1 65 0 129 1 66 0 117 1 69 0 137 1 70 0 117 1 76 0 145 1 77 0 117 1 81 0 117 1 84 0 117 1 99] 
#[1 0 73 0 19 0 26 0 70 0 30 0 79 6 221 0 88 0 30 0 89 0 7 0 98 0 30 0 114 0 30 0 131 0 26 0 132 0 81 0 136 0 26 0 141 0 11 0 158 0 7 0 160 0 7 0 162 0 7 0 163 0 7 0 173 0 34 0 183 1 157 0 253 0 89 0 254 0 93 0 255 0 105 1 32 6 217 1 38 0 113 1 39 0 117 1 40 0 117 1 41 0 117 1 65 0 129 1 66 0 117 1 69 0 137 1 70 0 117 1 76 0 145 1 77 0 117 1 81 0 117 1 84 0 117 1 99] 
#[1 6 225 0 17 6 229 0 215] 
#[1 6 233 0 17 6 237 0 37 6 241 0 215] 
#[1 2 29 0 5 6 245 0 17 6 249 0 215 5 53 0 235 6 253 0 243] 
#[1 7 1 0 17 7 5 0 215] 
#[1 2 29 0 5 7 9 0 17 7 13 0 215 5 53 0 235 7 17 0 243] 
#[1 2 29 0 5 7 21 0 17 7 25 0 215 5 53 0 235 7 29 0 243] 
#[1 2 29 0 5 3 206 0 17 7 33 0 37 3 206 0 106 3 206 0 108 3 206 0 215 7 37 0 235 7 41 0 243] 
#[1 2 29 0 5 3 210 0 17 3 210 0 106 3 210 0 108 3 210 0 215 7 45 0 235 7 49 0 243] 
#[0 3 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 3 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 7 61 1 67 7 65 1 68] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 7 69 1 43 7 69 1 44 7 69 1 45 7 69 1 52 7 69 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 7 73 1 67 7 65 1 68] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 7 77 1 85] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 7 81 1 85] 
#[0 7 85 0 144] 
#[1 7 89 0 17 7 93 0 215] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 141 3 226 0 142 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 205 3 226 0 206 7 97 1 82] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 141 3 226 0 142 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 205 3 226 0 206 7 101 1 82] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 7 109 1 71 7 113 1 74] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 7 117 1 71 7 121 1 74] 
#[1 7 125 0 17 7 129 0 215] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 7 133 1 71] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 7 137 1 71] 
#[1 7 141 0 17 7 145 0 215] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 15 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 2 33 0 235 7 149 1 47 7 153 1 48] 
#[1 3 234 0 1 3 234 0 3 3 234 0 4 3 234 0 5 3 234 0 6 3 234 0 7 3 234 0 8 3 234 0 9 3 234 0 10 3 234 0 11 3 234 0 12 3 234 0 13 0 71 0 14 3 234 0 15 3 234 0 16 3 234 0 17 3 234 0 19 3 234 0 20 3 234 0 21 3 234 0 22 3 234 0 23 3 234 0 24 3 234 0 25 3 234 0 26 3 234 0 27 3 234 0 28 3 234 0 29 3 234 0 32 3 234 0 34 3 234 0 35 3 234 0 38 3 234 0 45 3 234 0 80 3 234 0 83 3 234 0 87 3 234 0 90 3 234 0 99 3 234 0 105 3 234 0 106 3 234 0 108 3 234 0 110 3 234 0 115 3 234 0 116 3 234 0 118 3 234 0 121 3 234 0 123 3 234 0 125 3 234 0 130 3 234 0 146 3 234 0 150 3 234 0 151 3 234 0 152 3 234 0 171 3 234 0 177 3 234 0 179 3 234 0 186 3 234 0 188 3 234 0 190 3 234 0 200 3 234 0 201 3 234 0 204 3 234 0 207 3 234 0 209 3 234 0 210 3 234 0 211 3 234 0 212 3 234 0 214 3 234 0 215 2 205 1 46] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 7 157 1 47] 
#[1 3 238 0 6 3 238 0 11 3 238 0 215 7 161 1 51] 
#[1 7 165 0 6 3 137 0 215 7 165 0 236] 
#[0 7 169 0 228] 
#[1 3 242 0 1 3 242 0 3 3 242 0 4 0 75 0 5 3 242 0 6 3 242 0 7 3 242 0 8 3 242 0 9 3 242 0 10 3 242 0 11 3 242 0 12 3 242 0 13 3 242 0 14 3 242 0 15 3 242 0 16 3 242 0 17 3 242 0 19 3 242 0 20 3 242 0 21 3 242 0 22 3 242 0 23 3 242 0 24 3 242 0 25 3 242 0 26 3 242 0 27 3 242 0 28 3 242 0 29 3 242 0 32 3 242 0 34 3 242 0 35 3 242 0 38 3 242 0 45 3 242 0 80 3 242 0 83 3 242 0 87 3 242 0 90 3 242 0 99 3 242 0 105 3 242 0 106 3 242 0 108 3 242 0 110 3 242 0 115 3 242 0 116 3 242 0 118 3 242 0 121 3 242 0 123 3 242 0 125 3 242 0 130 3 242 0 146 3 242 0 150 3 242 0 151 3 242 0 152 3 242 0 171 3 242 0 177 3 242 0 179 3 242 0 186 3 242 0 188 3 242 0 190 3 242 0 200 3 242 0 201 3 242 0 204 3 242 0 207 3 242 0 209 3 242 0 210 3 242 0 211 3 242 0 212 3 242 0 214 3 242 0 215 2 33 0 235 7 173 1 48] 
#[0 3 246 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[0 3 250 0 19 0 30 0 40 0 44 0 46 0 47 0 48 0 69 0 70 0 72 0 74 0 75 0 76 0 77 0 78 0 79 0 81 0 85 0 89 0 93 0 98 0 100 0 101 0 103 0 113 0 114 0 120 0 126 0 131 0 132 0 133 0 136 0 137 0 138 0 141 0 142 0 143 0 147 0 149 0 154 0 155 0 156 0 157 0 158 0 160 0 161 0 162 0 163 0 164 0 166 0 167 0 170 0 172 0 173 0 174 0 175 0 176 0 182 0 183 0 184 0 194 0 195 0 196 0 203 0 205 0 206 0 229 2 160] 
#[0 3 254 0 1 0 5 0 6 0 9 0 11 0 12 0 14 0 19 0 22 0 23 0 24 0 25 0 26 0 31 0 32 0 39 0 40 0 42 0 44 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 70 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 110 0 113 0 116 0 120 0 122 0 126 0 128 0 131 0 134 0 135 0 138 0 140 0 143 0 149 0 153 0 157 0 170 0 175 0 176 0 182 0 183 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 228 0 229] 
#[0 4 2 0 11 0 25 0 215] 
#[1 2 241 0 1 2 29 0 5 0 31 0 6 2 249 0 9 1 182 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 35 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 169 0 228 3 173 0 229 3 177 0 235 7 177 0 236 3 185 0 237 3 233 0 241 7 181 1 5 3 197 1 6 3 201 1 8 3 205 1 9 3 209 1 12 3 213 1 13 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 3 213 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 4 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 10 0 3 4 10 0 4 0 79 0 5 4 10 0 6 6 57 0 7 4 10 0 8 4 10 0 9 4 10 0 10 4 10 0 11 4 10 0 12 4 10 0 13 6 69 0 15 4 10 0 16 4 10 0 17 4 10 0 19 4 10 0 20 4 10 0 21 4 10 0 22 4 10 0 23 4 10 0 24 4 10 0 25 4 10 0 26 4 10 0 27 4 10 0 28 4 10 0 32 4 10 0 34 4 10 0 35 4 10 0 38 4 10 0 45 4 10 0 80 4 10 0 83 4 10 0 87 4 10 0 90 4 10 0 99 4 10 0 105 4 10 0 108 4 10 0 110 4 10 0 115 4 10 0 116 4 10 0 118 4 10 0 121 4 10 0 123 4 10 0 125 6 125 0 130 4 10 0 146 4 10 0 150 4 10 0 151 4 10 0 152 4 10 0 171 4 10 0 177 4 10 0 179 4 10 0 186 4 10 0 188 4 10 0 190 4 10 0 201 4 10 0 207 6 141 0 209 4 10 0 210 6 145 0 211 4 10 0 212 4 10 0 214 4 10 0 215 6 149 0 235] 
#[1 4 14 0 3 4 14 0 4 0 83 0 5 4 14 0 6 6 57 0 7 4 14 0 8 4 14 0 9 4 14 0 10 4 14 0 11 4 14 0 12 4 14 0 13 6 69 0 15 4 14 0 16 4 14 0 17 4 14 0 19 4 14 0 20 4 14 0 21 4 14 0 22 4 14 0 23 4 14 0 24 4 14 0 25 4 14 0 26 4 14 0 27 4 14 0 28 4 14 0 32 4 14 0 34 4 14 0 35 4 14 0 38 4 14 0 45 4 14 0 80 4 14 0 83 4 14 0 87 4 14 0 90 4 14 0 99 4 14 0 105 4 14 0 108 4 14 0 110 4 14 0 115 4 14 0 116 4 14 0 118 4 14 0 121 4 14 0 123 4 14 0 125 6 125 0 130 4 14 0 146 4 14 0 150 4 14 0 151 4 14 0 152 4 14 0 171 4 14 0 177 4 14 0 179 4 14 0 186 4 14 0 188 4 14 0 190 4 14 0 201 4 14 0 207 6 141 0 209 4 14 0 210 6 145 0 211 4 14 0 212 4 14 0 214 4 14 0 215 6 149 0 235] 
#[0 7 185 0 228] 
#[1 4 18 0 1 4 18 0 3 4 18 0 4 0 87 0 5 4 18 0 6 4 18 0 7 4 18 0 8 4 18 0 9 4 18 0 10 4 18 0 11 4 18 0 12 4 18 0 13 4 18 0 14 4 18 0 15 4 18 0 16 4 18 0 17 4 18 0 19 4 18 0 20 4 18 0 21 4 18 0 22 4 18 0 23 4 18 0 24 4 18 0 25 4 18 0 26 4 18 0 27 4 18 0 28 4 18 0 32 4 18 0 34 4 18 0 35 4 18 0 38 4 18 0 45 4 18 0 80 4 18 0 83 4 18 0 87 4 18 0 90 4 18 0 99 4 18 0 105 4 18 0 108 4 18 0 110 4 18 0 115 4 18 0 116 4 18 0 118 4 18 0 121 4 18 0 123 4 18 0 125 4 18 0 130 4 18 0 146 4 18 0 150 4 18 0 151 4 18 0 152 4 18 0 171 4 18 0 177 4 18 0 179 4 18 0 186 4 18 0 188 4 18 0 190 4 18 0 201 4 18 0 207 4 18 0 209 4 18 0 210 4 18 0 211 4 18 0 212 4 18 0 214 4 18 0 215 7 189 0 235] 
#[1 6 53 0 3 4 22 0 4 0 91 0 5 4 22 0 6 6 57 0 7 4 22 0 8 6 61 0 9 4 22 0 10 4 22 0 11 6 65 0 12 4 22 0 13 6 69 0 15 4 22 0 16 4 22 0 17 6 73 0 19 6 77 0 20 4 22 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 4 22 0 28 4 22 0 32 6 105 0 34 6 109 0 35 4 22 0 38 4 22 0 45 4 22 0 80 4 22 0 83 4 22 0 87 4 22 0 90 4 22 0 99 4 22 0 105 4 22 0 108 4 22 0 110 4 22 0 115 6 113 0 116 6 117 0 118 4 22 0 121 4 22 0 123 6 121 0 125 6 125 0 130 4 22 0 146 6 129 0 150 6 133 0 151 4 22 0 152 4 22 0 171 4 22 0 177 4 22 0 179 4 22 0 186 4 22 0 188 4 22 0 190 4 22 0 201 6 137 0 207 6 141 0 209 4 22 0 210 6 145 0 211 4 22 0 212 4 22 0 214 4 22 0 215 6 149 0 235] 
#[1 5 169 0 229 7 193 2 131] 
#[1 7 197 0 37 7 201 0 110] 
#[1 4 26 0 32 4 26 0 83 4 26 0 99 4 26 0 105 4 26 0 115 4 26 0 121 4 26 0 123 4 26 0 152 4 26 0 171 4 26 0 177 4 26 0 186 4 26 0 201 4 26 0 215 7 205 2 156] 
#[1 4 30 0 3 4 30 0 4 0 95 0 5 4 30 0 6 4 30 0 7 4 30 0 8 4 30 0 9 4 30 0 10 4 30 0 11 4 30 0 12 4 30 0 13 4 30 0 15 4 30 0 16 4 30 0 17 4 30 0 19 4 30 0 20 4 30 0 21 4 30 0 22 4 30 0 23 4 30 0 24 4 30 0 25 4 30 0 26 4 30 0 27 4 30 0 28 4 30 0 32 4 30 0 34 4 30 0 35 4 30 0 38 4 30 0 45 4 30 0 80 4 30 0 83 4 30 0 87 4 30 0 90 4 30 0 99 4 30 0 105 4 30 0 108 4 30 0 110 4 30 0 115 4 30 0 116 4 30 0 118 4 30 0 121 4 30 0 123 4 30 0 125 4 30 0 130 4 30 0 146 4 30 0 150 4 30 0 151 4 30 0 152 4 30 0 171 4 30 0 177 4 30 0 179 4 30 0 186 4 30 0 188 4 30 0 190 4 30 0 201 4 30 0 207 4 30 0 209 4 30 0 210 4 30 0 211 4 30 0 212 4 30 0 214 4 30 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 7 209 2 47 7 209 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 7 209 2 54 7 209 2 55 4 1 2 56 7 209 2 63 7 209 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 7 209 2 97 7 209 2 98 7 209 2 99 7 209 2 100 7 209 2 101 7 209 2 102 7 209 2 103 7 209 2 104 7 209 2 105 7 209 2 106 7 209 2 107 7 209 2 108 7 209 2 109 7 209 2 110 7 209 2 111 7 209 2 112 7 209 2 113 7 209 2 114 7 209 2 115 7 209 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 7 209 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 7 209 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 7 213 2 47 7 213 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 7 213 2 54 7 213 2 55 4 1 2 56 7 213 2 63 7 213 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 7 213 2 97 7 213 2 98 7 213 2 99 7 213 2 100 7 213 2 101 7 213 2 102 7 213 2 103 7 213 2 104 7 213 2 105 7 213 2 106 7 213 2 107 7 213 2 108 7 213 2 109 7 213 2 110 7 213 2 111 7 213 2 112 7 213 2 113 7 213 2 114 7 213 2 115 7 213 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 7 213 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 7 213 2 159] 
#[1 5 169 0 229 7 217 2 128 5 197 2 131] 
#[0 4 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 38 0 3 4 38 0 4 4 38 0 5 4 38 0 6 4 38 0 7 4 38 0 8 4 38 0 9 4 38 0 10 4 38 0 11 4 38 0 12 4 38 0 13 4 38 0 15 4 38 0 16 4 38 0 17 4 38 0 19 4 38 0 20 4 38 0 21 4 38 0 22 4 38 0 23 4 38 0 24 4 38 0 25 4 38 0 26 4 38 0 27 4 38 0 28 4 38 0 32 4 38 0 34 4 38 0 35 4 38 0 38 4 38 0 45 4 38 0 80 4 38 0 83 4 38 0 87 4 38 0 90 4 38 0 99 4 38 0 105 4 38 0 108 4 38 0 110 4 38 0 115 4 38 0 116 4 38 0 118 4 38 0 121 4 38 0 123 4 38 0 125 4 38 0 130 4 38 0 146 4 38 0 150 4 38 0 151 4 38 0 152 4 38 0 171 4 38 0 177 4 38 0 179 4 38 0 186 4 38 0 188 4 38 0 190 4 38 0 201 4 38 0 207 4 38 0 209 4 38 0 210 4 38 0 211 4 38 0 212 4 38 0 214 4 38 0 215 7 221 2 130] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 7 225 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 7 229 0 229 7 237 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 7 237 1 92 7 237 2 57 7 237 2 58] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 7 245 2 47 7 245 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 7 245 2 54 7 245 2 55 4 1 2 56 7 245 2 63 7 245 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 7 245 2 97 7 245 2 98 7 245 2 99 7 245 2 100 7 245 2 101 7 245 2 102 7 245 2 103 7 245 2 104 7 245 2 105 7 245 2 106 7 245 2 107 7 245 2 108 7 245 2 109 7 245 2 110 7 245 2 111 7 245 2 112 7 245 2 113 7 245 2 114 7 245 2 115 7 245 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 7 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 7 245 2 159] 
#[1 3 133 0 213 7 249 0 237] 
#[1 4 42 0 1 4 42 0 3 4 42 0 4 0 99 0 5 4 42 0 6 4 42 0 7 4 42 0 8 4 42 0 9 4 42 0 10 4 42 0 11 4 42 0 12 4 42 0 13 4 42 0 14 4 42 0 15 4 42 0 16 4 42 0 17 4 42 0 19 4 42 0 20 4 42 0 21 4 42 0 22 4 42 0 23 4 42 0 24 4 42 0 25 4 42 0 26 4 42 0 27 4 42 0 28 2 85 0 29 4 42 0 32 4 42 0 34 4 42 0 35 4 42 0 38 4 42 0 45 4 42 0 80 4 42 0 83 4 42 0 87 4 42 0 90 0 103 0 99 4 42 0 105 4 42 0 108 4 42 0 110 4 42 0 115 4 42 0 116 4 42 0 118 4 42 0 121 4 42 0 123 4 42 0 125 4 42 0 130 4 42 0 146 4 42 0 150 4 42 0 151 4 42 0 152 4 42 0 171 4 42 0 177 4 42 0 179 4 42 0 186 4 42 0 188 4 42 0 190 4 42 0 201 5 209 0 204 4 42 0 207 4 42 0 209 4 42 0 210 4 42 0 211 4 42 0 212 4 42 0 214 4 42 0 215 8 1 0 235 8 5 1 93 2 97 1 94 2 101 1 95 8 9 1 98 8 13 1 183 8 17 2 79 8 17 2 80 8 17 2 85] 
#[0 4 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 4 50 0 4 0 107 0 5 4 50 0 6 6 57 0 7 4 50 0 8 6 61 0 9 4 50 0 10 4 50 0 11 6 65 0 12 4 50 0 13 6 69 0 15 4 50 0 16 4 50 0 17 6 73 0 19 6 77 0 20 4 50 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 4 50 0 28 4 50 0 32 4 50 0 34 4 50 0 35 4 50 0 38 4 50 0 45 4 50 0 80 4 50 0 83 4 50 0 87 4 50 0 90 4 50 0 99 4 50 0 105 4 50 0 108 4 50 0 110 4 50 0 115 6 113 0 116 6 117 0 118 4 50 0 121 4 50 0 123 6 121 0 125 6 125 0 130 4 50 0 146 4 50 0 150 4 50 0 151 4 50 0 152 4 50 0 171 4 50 0 177 4 50 0 179 4 50 0 186 4 50 0 188 4 50 0 190 4 50 0 201 4 50 0 207 6 141 0 209 4 50 0 210 6 145 0 211 4 50 0 212 4 50 0 214 4 50 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 29 2 47 8 29 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 29 2 54 8 29 2 55 4 1 2 56 8 29 2 63 8 29 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 29 2 97 8 29 2 98 8 29 2 99 8 29 2 100 8 29 2 101 8 29 2 102 8 29 2 103 8 29 2 104 8 29 2 105 8 29 2 106 8 29 2 107 8 29 2 108 8 29 2 109 8 29 2 110 8 29 2 111 8 29 2 112 8 29 2 113 8 29 2 114 8 29 2 115 8 29 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 29 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 29 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 8 33 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 6 149 0 235] 
#[0 4 54 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 70 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 122 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 183 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 214 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 4 58 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 37 0 38 0 40 0 42 0 44 0 45 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 69 0 72 0 73 0 75 0 76 0 80 0 81 0 82 0 83 0 84 0 85 0 87 0 88 0 90 0 91 0 92 0 94 0 97 0 99 0 100 0 102 0 103 0 104 0 105 0 106 0 107 0 108 0 110 0 113 0 115 0 116 0 118 0 120 0 121 0 123 0 125 0 126 0 128 0 129 0 130 0 134 0 135 0 138 0 140 0 143 0 146 0 150 0 151 0 152 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 177 0 178 0 179 0 180 0 182 0 184 0 185 0 186 0 188 0 189 0 190 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 200 0 201 0 202 0 204 0 207 0 208 0 209 0 210 0 211 0 212 0 213 0 214 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 4 62 0 1 4 62 0 5 4 62 0 9 4 62 0 12 4 62 0 14 4 62 0 31 4 62 0 32 4 62 0 40 4 62 0 42 4 62 0 44 4 62 0 48 4 62 0 49 4 62 0 50 4 62 0 51 4 62 0 52 4 62 0 53 4 62 0 54 4 62 0 55 4 62 0 56 4 62 0 57 4 62 0 58 4 62 0 59 4 62 0 60 4 62 0 61 4 62 0 62 4 62 0 63 4 62 0 64 4 62 0 65 4 62 0 69 4 62 0 75 4 62 0 76 4 62 0 82 4 62 0 85 4 62 0 99 4 62 0 100 4 62 0 102 4 62 0 103 4 62 0 107 4 62 0 113 4 62 0 120 4 62 0 126 4 62 0 128 4 62 0 134 4 62 0 135 4 62 0 138 4 62 0 140 4 62 0 143 4 62 0 170 4 62 0 175 4 62 0 176 4 62 0 182 4 62 0 184 4 62 0 192 4 62 0 193 4 62 0 194 4 62 0 195 4 62 0 196 4 62 0 213 8 37 0 215 4 62 0 219 4 62 0 220 4 62 0 222 4 62 0 223 4 62 0 224 4 62 0 225 4 62 0 227 4 62 0 229] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 8 41 1 13 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 8 41 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 8 45 0 144] 
#[1 6 53 0 3 2 29 0 5 8 49 0 6 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 6 149 0 235 8 49 0 236] 
#[0 4 66 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 53 0 214] 
#[0 4 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 4 74 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 4 74 0 214 4 74 0 215 6 149 0 235] 
#[1 3 18 0 1 3 18 0 3 3 18 0 5 3 18 0 7 3 18 0 9 0 111 0 11 3 18 0 12 3 18 0 14 3 18 0 15 3 18 0 19 3 18 0 20 3 18 0 22 3 18 0 23 3 18 0 24 3 18 0 25 3 18 0 26 3 18 0 27 3 18 0 34 3 18 0 35 3 18 0 116 3 18 0 118 3 18 0 125 3 18 0 130 3 18 0 150 3 18 0 151 3 18 0 207 3 18 0 209 3 18 0 211 0 111 0 214 0 111 0 215] 
#[1 8 57 0 214 6 5 0 215 8 57 0 238] 
#[1 4 82 0 11 4 82 0 214 4 82 0 215 8 61 2 89] 
#[0 4 86 0 11 0 25 0 215] 
#[1 3 169 0 228 8 65 1 9 3 209 1 12] 
#[1 2 241 0 1 2 29 0 5 4 90 0 6 2 249 0 9 4 90 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 4 90 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 8 69 1 13 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 8 69 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 4 94 0 6 0 11 0 215] 
#[1 4 98 0 6 2 225 0 11 4 98 0 215 8 73 0 234 8 77 1 10] 
#[1 4 102 0 6 0 115 0 11 4 102 0 215 6 37 0 234 6 41 1 7] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 81 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 85 2 47 8 85 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 85 2 54 8 85 2 55 4 1 2 56 8 85 2 63 8 85 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 85 2 97 8 85 2 98 8 85 2 99 8 85 2 100 8 85 2 101 8 85 2 102 8 85 2 103 8 85 2 104 8 85 2 105 8 85 2 106 8 85 2 107 8 85 2 108 8 85 2 109 8 85 2 110 8 85 2 111 8 85 2 112 8 85 2 113 8 85 2 114 8 85 2 115 8 85 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 85 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 89 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 93 2 47 8 93 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 93 2 54 8 93 2 55 4 1 2 56 8 93 2 63 8 93 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 93 2 97 8 93 2 98 8 93 2 99 8 93 2 100 8 93 2 101 8 93 2 102 8 93 2 103 8 93 2 104 8 93 2 105 8 93 2 106 8 93 2 107 8 93 2 108 8 93 2 109 8 93 2 110 8 93 2 111 8 93 2 112 8 93 2 113 8 93 2 114 8 93 2 115 8 93 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 93 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 97 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 101 2 47 8 101 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 101 2 54 8 101 2 55 4 1 2 56 8 101 2 63 8 101 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 101 2 97 8 101 2 98 8 101 2 99 8 101 2 100 8 101 2 101 8 101 2 102 8 101 2 103 8 101 2 104 8 101 2 105 8 101 2 106 8 101 2 107 8 101 2 108 8 101 2 109 8 101 2 110 8 101 2 111 8 101 2 112 8 101 2 113 8 101 2 114 8 101 2 115 8 101 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 101 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 105 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 109 2 47 8 109 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 109 2 54 8 109 2 55 4 1 2 56 8 109 2 63 8 109 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 109 2 97 8 109 2 98 8 109 2 99 8 109 2 100 8 109 2 101 8 109 2 102 8 109 2 103 8 109 2 104 8 109 2 105 8 109 2 106 8 109 2 107 8 109 2 108 8 109 2 109 8 109 2 110 8 109 2 111 8 109 2 112 8 109 2 113 8 109 2 114 8 109 2 115 8 109 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 109 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 109 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 113 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 117 2 47 8 117 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 117 2 54 8 117 2 55 4 1 2 56 8 117 2 63 8 117 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 117 2 97 8 117 2 98 8 117 2 99 8 117 2 100 8 117 2 101 8 117 2 102 8 117 2 103 8 117 2 104 8 117 2 105 8 117 2 106 8 117 2 107 8 117 2 108 8 117 2 109 8 117 2 110 8 117 2 111 8 117 2 112 8 117 2 113 8 117 2 114 8 117 2 115 8 117 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 117 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 117 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 121 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 125 2 47 8 125 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 125 2 54 8 125 2 55 4 1 2 56 8 125 2 63 8 125 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 125 2 97 8 125 2 98 8 125 2 99 8 125 2 100 8 125 2 101 8 125 2 102 8 125 2 103 8 125 2 104 8 125 2 105 8 125 2 106 8 125 2 107 8 125 2 108 8 125 2 109 8 125 2 110 8 125 2 111 8 125 2 112 8 125 2 113 8 125 2 114 8 125 2 115 8 125 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 125 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 129 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 133 2 47 8 133 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 133 2 54 8 133 2 55 4 1 2 56 8 133 2 63 8 133 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 133 2 97 8 133 2 98 8 133 2 99 8 133 2 100 8 133 2 101 8 133 2 102 8 133 2 103 8 133 2 104 8 133 2 105 8 133 2 106 8 133 2 107 8 133 2 108 8 133 2 109 8 133 2 110 8 133 2 111 8 133 2 112 8 133 2 113 8 133 2 114 8 133 2 115 8 133 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 133 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 133 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 137 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 141 2 47 8 141 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 141 2 54 8 141 2 55 4 1 2 56 8 141 2 63 8 141 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 141 2 97 8 141 2 98 8 141 2 99 8 141 2 100 8 141 2 101 8 141 2 102 8 141 2 103 8 141 2 104 8 141 2 105 8 141 2 106 8 141 2 107 8 141 2 108 8 141 2 109 8 141 2 110 8 141 2 111 8 141 2 112 8 141 2 113 8 141 2 114 8 141 2 115 8 141 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 141 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 141 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 145 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 149 2 47 8 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 149 2 54 8 149 2 55 4 1 2 56 8 149 2 63 8 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 149 2 97 8 149 2 98 8 149 2 99 8 149 2 100 8 149 2 101 8 149 2 102 8 149 2 103 8 149 2 104 8 149 2 105 8 149 2 106 8 149 2 107 8 149 2 108 8 149 2 109 8 149 2 110 8 149 2 111 8 149 2 112 8 149 2 113 8 149 2 114 8 149 2 115 8 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 149 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 153 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 157 2 47 8 157 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 157 2 54 8 157 2 55 4 1 2 56 8 157 2 63 8 157 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 157 2 97 8 157 2 98 8 157 2 99 8 157 2 100 8 157 2 101 8 157 2 102 8 157 2 103 8 157 2 104 8 157 2 105 8 157 2 106 8 157 2 107 8 157 2 108 8 157 2 109 8 157 2 110 8 157 2 111 8 157 2 112 8 157 2 113 8 157 2 114 8 157 2 115 8 157 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 157 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 161 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 165 2 47 8 165 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 165 2 54 8 165 2 55 4 1 2 56 8 165 2 63 8 165 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 165 2 97 8 165 2 98 8 165 2 99 8 165 2 100 8 165 2 101 8 165 2 102 8 165 2 103 8 165 2 104 8 165 2 105 8 165 2 106 8 165 2 107 8 165 2 108 8 165 2 109 8 165 2 110 8 165 2 111 8 165 2 112 8 165 2 113 8 165 2 114 8 165 2 115 8 165 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 165 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 169 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 173 2 47 8 173 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 173 2 54 8 173 2 55 4 1 2 56 8 173 2 63 8 173 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 173 2 97 8 173 2 98 8 173 2 99 8 173 2 100 8 173 2 101 8 173 2 102 8 173 2 103 8 173 2 104 8 173 2 105 8 173 2 106 8 173 2 107 8 173 2 108 8 173 2 109 8 173 2 110 8 173 2 111 8 173 2 112 8 173 2 113 8 173 2 114 8 173 2 115 8 173 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 173 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 177 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 181 2 47 8 181 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 181 2 54 8 181 2 55 4 1 2 56 8 181 2 63 8 181 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 181 2 97 8 181 2 98 8 181 2 99 8 181 2 100 8 181 2 101 8 181 2 102 8 181 2 103 8 181 2 104 8 181 2 105 8 181 2 106 8 181 2 107 8 181 2 108 8 181 2 109 8 181 2 110 8 181 2 111 8 181 2 112 8 181 2 113 8 181 2 114 8 181 2 115 8 181 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 181 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 181 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 185 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 189 2 47 8 189 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 189 2 54 8 189 2 55 4 1 2 56 8 189 2 63 8 189 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 189 2 97 8 189 2 98 8 189 2 99 8 189 2 100 8 189 2 101 8 189 2 102 8 189 2 103 8 189 2 104 8 189 2 105 8 189 2 106 8 189 2 107 8 189 2 108 8 189 2 109 8 189 2 110 8 189 2 111 8 189 2 112 8 189 2 113 8 189 2 114 8 189 2 115 8 189 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 189 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 189 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 193 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 197 2 47 8 197 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 197 2 54 8 197 2 55 4 1 2 56 8 197 2 63 8 197 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 197 2 97 8 197 2 98 8 197 2 99 8 197 2 100 8 197 2 101 8 197 2 102 8 197 2 103 8 197 2 104 8 197 2 105 8 197 2 106 8 197 2 107 8 197 2 108 8 197 2 109 8 197 2 110 8 197 2 111 8 197 2 112 8 197 2 113 8 197 2 114 8 197 2 115 8 197 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 197 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 201 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 205 2 47 8 205 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 205 2 54 8 205 2 55 4 1 2 56 8 205 2 63 8 205 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 205 2 97 8 205 2 98 8 205 2 99 8 205 2 100 8 205 2 101 8 205 2 102 8 205 2 103 8 205 2 104 8 205 2 105 8 205 2 106 8 205 2 107 8 205 2 108 8 205 2 109 8 205 2 110 8 205 2 111 8 205 2 112 8 205 2 113 8 205 2 114 8 205 2 115 8 205 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 205 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 205 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 209 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 213 2 47 8 213 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 213 2 54 8 213 2 55 4 1 2 56 8 213 2 63 8 213 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 213 2 97 8 213 2 98 8 213 2 99 8 213 2 100 8 213 2 101 8 213 2 102 8 213 2 103 8 213 2 104 8 213 2 105 8 213 2 106 8 213 2 107 8 213 2 108 8 213 2 109 8 213 2 110 8 213 2 111 8 213 2 112 8 213 2 113 8 213 2 114 8 213 2 115 8 213 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 213 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 213 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 217 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 221 2 47 8 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 221 2 54 8 221 2 55 4 1 2 56 8 221 2 63 8 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 221 2 97 8 221 2 98 8 221 2 99 8 221 2 100 8 221 2 101 8 221 2 102 8 221 2 103 8 221 2 104 8 221 2 105 8 221 2 106 8 221 2 107 8 221 2 108 8 221 2 109 8 221 2 110 8 221 2 111 8 221 2 112 8 221 2 113 8 221 2 114 8 221 2 115 8 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 221 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 225 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 229 2 47 8 229 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 229 2 54 8 229 2 55 4 1 2 56 8 229 2 63 8 229 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 229 2 97 8 229 2 98 8 229 2 99 8 229 2 100 8 229 2 101 8 229 2 102 8 229 2 103 8 229 2 104 8 229 2 105 8 229 2 106 8 229 2 107 8 229 2 108 8 229 2 109 8 229 2 110 8 229 2 111 8 229 2 112 8 229 2 113 8 229 2 114 8 229 2 115 8 229 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 229 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 229 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 233 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 237 2 47 8 237 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 237 2 54 8 237 2 55 4 1 2 56 8 237 2 63 8 237 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 237 2 97 8 237 2 98 8 237 2 99 8 237 2 100 8 237 2 101 8 237 2 102 8 237 2 103 8 237 2 104 8 237 2 105 8 237 2 106 8 237 2 107 8 237 2 108 8 237 2 109 8 237 2 110 8 237 2 111 8 237 2 112 8 237 2 113 8 237 2 114 8 237 2 115 8 237 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 237 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 241 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 245 2 47 8 245 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 245 2 54 8 245 2 55 4 1 2 56 8 245 2 63 8 245 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 245 2 97 8 245 2 98 8 245 2 99 8 245 2 100 8 245 2 101 8 245 2 102 8 245 2 103 8 245 2 104 8 245 2 105 8 245 2 106 8 245 2 107 8 245 2 108 8 245 2 109 8 245 2 110 8 245 2 111 8 245 2 112 8 245 2 113 8 245 2 114 8 245 2 115 8 245 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 245 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 249 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 253 2 47 8 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 253 2 54 8 253 2 55 4 1 2 56 8 253 2 63 8 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 253 2 97 8 253 2 98 8 253 2 99 8 253 2 100 8 253 2 101 8 253 2 102 8 253 2 103 8 253 2 104 8 253 2 105 8 253 2 106 8 253 2 107 8 253 2 108 8 253 2 109 8 253 2 110 8 253 2 111 8 253 2 112 8 253 2 113 8 253 2 114 8 253 2 115 8 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 253 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 9 1 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 5 2 47 9 5 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 5 2 54 9 5 2 55 4 1 2 56 9 5 2 63 9 5 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 5 2 97 9 5 2 98 9 5 2 99 9 5 2 100 9 5 2 101 9 5 2 102 9 5 2 103 9 5 2 104 9 5 2 105 9 5 2 106 9 5 2 107 9 5 2 108 9 5 2 109 9 5 2 110 9 5 2 111 9 5 2 112 9 5 2 113 9 5 2 114 9 5 2 115 9 5 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 5 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 9 9 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 13 2 47 9 13 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 13 2 54 9 13 2 55 4 1 2 56 9 13 2 63 9 13 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 13 2 97 9 13 2 98 9 13 2 99 9 13 2 100 9 13 2 101 9 13 2 102 9 13 2 103 9 13 2 104 9 13 2 105 9 13 2 106 9 13 2 107 9 13 2 108 9 13 2 109 9 13 2 110 9 13 2 111 9 13 2 112 9 13 2 113 9 13 2 114 9 13 2 115 9 13 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 13 2 159] 
#[1 2 241 0 1 2 29 0 5 0 119 0 6 2 249 0 9 4 106 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 123 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 17 0 228 3 173 0 229 3 177 0 235 9 21 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 25 2 47 9 25 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 25 2 54 9 25 2 55 4 1 2 56 9 25 2 63 9 25 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 9 29 2 70 9 33 2 71 9 37 2 73 9 41 2 74 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 25 2 97 9 25 2 98 9 25 2 99 9 25 2 100 9 25 2 101 9 25 2 102 9 25 2 103 9 25 2 104 9 25 2 105 9 25 2 106 9 25 2 107 9 25 2 108 9 25 2 109 9 25 2 110 9 25 2 111 9 25 2 112 9 25 2 113 9 25 2 114 9 25 2 115 9 25 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 25 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 25 2 159] 
#[1 9 45 0 215 9 49 0 228] 
#[0 9 53 0 228] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 57 2 47 9 57 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 57 2 54 9 57 2 55 4 1 2 56 9 57 2 63 9 57 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 57 2 97 9 57 2 98 9 57 2 99 9 57 2 100 9 57 2 101 9 57 2 102 9 57 2 103 9 57 2 104 9 57 2 105 9 57 2 106 9 57 2 107 9 57 2 108 9 57 2 109 9 57 2 110 9 57 2 111 9 57 2 112 9 57 2 113 9 57 2 114 9 57 2 115 9 57 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 57 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 57 2 159] 
#[0 4 110 0 40 0 100 0 120 0 184] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 9 61 0 37 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 9 65 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 9 69 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 73 2 47 9 73 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 73 2 54 9 73 2 55 4 1 2 56 9 73 2 63 9 73 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 73 2 97 9 73 2 98 9 73 2 99 9 73 2 100 9 73 2 101 9 73 2 102 9 73 2 103 9 73 2 104 9 73 2 105 9 73 2 106 9 73 2 107 9 73 2 108 9 73 2 109 9 73 2 110 9 73 2 111 9 73 2 112 9 73 2 113 9 73 2 114 9 73 2 115 9 73 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 73 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 73 2 159] 
#[0 4 114 0 40 0 100 0 120 0 184] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 9 77 0 30 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 9 229 0 81 3 85 0 82 9 97 0 84 1 65 0 85 9 101 0 88 9 105 0 91 9 109 0 92 9 113 0 94 9 117 0 97 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 9 125 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 9 129 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 133 0 146 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 9 157 0 171 1 65 0 175 1 65 0 176 9 229 0 178 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 9 173 0 189 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 9 185 0 202 9 189 0 204 9 193 0 208 3 133 0 213 9 197 0 215 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 205 0 229 9 209 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 213 1 216 9 213 1 220 9 221 1 221 9 213 1 225 9 229 1 226 9 213 1 227 9 213 1 228 9 213 1 229 9 213 1 230 9 213 1 231 9 213 1 232 9 213 1 233 9 213 1 234 9 213 1 235 9 213 1 237 9 213 1 238 9 213 1 239 9 213 1 240 9 213 1 241 9 213 1 245 9 213 1 247 9 213 2 0 9 213 2 1 9 213 2 2 9 213 2 3 9 213 2 4 9 213 2 6 9 213 2 11 9 213 2 12 9 213 2 13 9 213 2 14 9 213 2 18 9 213 2 19 9 213 2 20 9 213 2 21 9 213 2 23 9 213 2 25 9 213 2 26 9 213 2 27 9 213 2 29 9 213 2 31 9 213 2 32 9 213 2 33 9 213 2 34 9 213 2 35 9 213 2 40 9 213 2 44 9 213 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[0 4 118 0 40 0 100 0 120 0 184] 
#[1 4 122 0 3 4 122 0 4 4 122 0 5 4 122 0 6 4 122 0 7 4 122 0 8 4 122 0 9 4 122 0 10 4 122 0 11 4 122 0 12 4 122 0 13 4 122 0 15 4 122 0 16 4 122 0 17 4 122 0 19 4 122 0 20 4 122 0 21 4 122 0 22 4 122 0 23 4 122 0 24 4 122 0 25 4 122 0 26 4 122 0 27 4 122 0 28 0 127 0 32 4 122 0 34 4 122 0 35 4 122 0 38 4 122 0 45 4 122 0 80 0 131 0 83 4 122 0 87 4 122 0 90 0 135 0 99 0 139 0 105 4 122 0 108 4 122 0 110 4 122 0 115 4 122 0 116 4 122 0 118 0 143 0 121 0 147 0 123 4 122 0 125 4 122 0 130 4 122 0 146 4 122 0 150 4 122 0 151 0 151 0 152 0 155 0 171 0 159 0 177 4 122 0 179 0 163 0 186 4 122 0 188 4 122 0 190 0 167 0 201 4 122 0 207 4 122 0 209 4 122 0 210 4 122 0 211 4 122 0 212 4 122 0 214 0 171 0 215 10 193 2 123 10 197 2 126 10 201 2 127 10 205 2 136 10 209 2 137 10 213 2 142 10 217 2 143 10 221 2 144 10 225 2 145 10 229 2 146 10 233 2 147 10 237 2 153 10 241 2 155 10 245 2 157] 
#[0 4 126 0 11 0 17 0 215] 
#[0 4 130 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 4 134 0 6 0 11 0 215] 
#[0 4 138 0 17 0 215] 
#[0 10 249 0 228] 
#[0 4 142 0 14 0 17 0 215] 
#[0 10 253 0 136] 
#[0 4 146 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183] 
#[0 11 1 0 136] 
#[0 4 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 4 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 5 1 67 7 65 1 68] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 11 9 1 43 11 9 1 44 11 9 1 45 11 9 1 52 11 9 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 13 1 67 7 65 1 68] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 11 17 1 85] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 11 21 1 85] 
#[1 11 25 0 17 11 29 0 215] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 141 3 226 0 142 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 205 3 226 0 206 11 33 1 82] 
#[1 3 226 0 19 3 226 0 40 3 226 0 70 3 226 0 72 3 226 0 74 3 226 0 77 3 226 0 78 3 226 0 79 3 226 0 81 3 226 0 88 3 226 0 89 3 226 0 93 3 226 0 98 3 226 0 100 3 226 0 114 3 226 0 120 3 226 0 132 3 226 0 133 3 226 0 141 3 226 0 142 3 226 0 154 3 226 0 155 3 226 0 156 3 226 0 158 3 226 0 160 3 226 0 161 3 226 0 162 3 226 0 163 3 226 0 166 3 226 0 173 3 226 0 174 3 226 0 183 3 226 0 184 3 226 0 205 3 226 0 206 11 37 1 82] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 11 41 1 71 11 45 1 74] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 11 49 1 71 11 53 1 74] 
#[1 11 57 0 17 11 61 0 215] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 11 65 1 71] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 11 69 1 71] 
#[1 11 73 0 17 11 77 0 215] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 11 81 0 253 0 89 0 254 0 93 0 255 11 85 1 112] 
#[1 11 89 0 6 0 73 0 19 4 162 0 46 4 162 0 47 7 85 0 144 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 11 89 0 236 11 93 0 253 0 89 0 254 0 93 0 255 11 97 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 4 166 0 17 11 109 0 37 4 166 0 106 4 166 0 108 4 166 0 215 11 113 0 235] 
#[1 11 117 0 6 0 73 0 19 4 162 0 46 4 162 0 47 7 85 0 144 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 11 117 0 236 11 93 0 253 0 89 0 254 0 93 0 255 11 121 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 4 170 0 17 4 170 0 106 4 170 0 108 4 170 0 215 11 125 0 235] 
#[1 11 129 0 17 2 65 0 24 11 133 0 215 11 137 0 239] 
#[0 11 141 0 229] 
#[1 0 73 0 19 11 145 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[0 4 174 0 19 0 88 0 229] 
#[1 11 153 0 17 2 85 0 29 11 157 0 215] 
#[1 0 73 0 19 11 161 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 11 169 1 86 11 173 1 87] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 11 177 1 86 11 173 1 87] 
#[1 11 197 0 110 11 197 0 153 11 189 0 229 11 193 0 246 11 197 0 247] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 11 201 1 85] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 11 205 1 85] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 11 217 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 0 26 0 141 0 191 0 142 0 195 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 0 223 0 163 0 227 0 166 0 231 0 173 0 235 0 174 0 34 0 183 0 239 0 184 12 113 0 205 0 243 0 206 12 9 0 242 12 13 0 253 0 89 0 254 0 93 0 255 12 25 1 41 12 25 1 65 12 21 1 66 12 25 1 69 0 137 1 70 12 25 1 76 0 145 1 77 12 25 1 83 12 25 1 84 12 25 1 99 12 25 1 106 12 25 1 108 12 25 1 113 12 41 1 114 12 25 1 115 12 25 1 118 12 25 1 119 12 25 1 125 12 25 1 126 12 65 1 127 12 25 1 129 12 25 1 148 12 77 1 149 12 25 1 151 12 25 1 152 12 89 1 153 12 25 1 159 12 25 1 165 12 101 1 166 12 25 1 172 12 109 1 173 12 113 1 174 12 25 1 188 12 25 1 190 12 125 1 191 12 25 1 193 12 133 1 194 12 25 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 12 157 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 0 26 0 141 0 191 0 142 0 195 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 0 223 0 163 0 227 0 166 0 231 0 173 0 235 0 174 0 34 0 183 0 239 0 184 12 113 0 205 0 243 0 206 12 9 0 242 12 13 0 253 0 89 0 254 0 93 0 255 12 25 1 41 12 25 1 65 12 21 1 66 12 25 1 69 0 137 1 70 12 25 1 76 0 145 1 77 12 25 1 83 12 25 1 84 12 25 1 99 12 25 1 106 12 25 1 108 12 25 1 113 12 41 1 114 12 25 1 115 12 25 1 118 12 25 1 119 12 25 1 125 12 25 1 126 12 65 1 127 12 25 1 129 12 25 1 148 12 77 1 149 12 25 1 151 12 25 1 152 12 89 1 153 12 25 1 159 12 25 1 165 12 101 1 166 12 25 1 172 12 109 1 173 12 113 1 174 12 25 1 188 12 25 1 190 12 125 1 191 12 25 1 193 12 133 1 194 12 25 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 12 161 1 43 12 161 1 44 12 161 1 45 12 161 1 52 12 161 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 12 173 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 12 177 1 71] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 12 181 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 12 185 1 71] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 12 189 1 71 12 193 1 74] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 12 197 1 71 12 201 1 74] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 12 205 1 78] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 12 209 1 78] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 12 213 1 71] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 12 217 1 71] 
#[1 4 218 0 1 4 218 0 3 4 218 0 4 4 218 0 5 4 218 0 6 4 218 0 7 4 218 0 8 4 218 0 9 4 218 0 10 4 218 0 11 4 218 0 12 4 218 0 13 0 247 0 14 4 218 0 15 4 218 0 16 4 218 0 17 4 218 0 19 4 218 0 20 4 218 0 21 4 218 0 22 4 218 0 23 4 218 0 24 4 218 0 25 4 218 0 26 4 218 0 27 4 218 0 28 4 218 0 29 4 218 0 32 4 218 0 34 4 218 0 35 4 218 0 38 4 218 0 45 4 218 0 80 4 218 0 83 4 218 0 87 4 218 0 90 4 218 0 99 4 218 0 105 4 218 0 106 4 218 0 108 4 218 0 110 4 218 0 115 4 218 0 116 4 218 0 118 4 218 0 121 4 218 0 123 4 218 0 125 4 218 0 130 4 218 0 146 4 218 0 150 4 218 0 151 4 218 0 152 4 218 0 171 4 218 0 177 4 218 0 179 4 218 0 186 4 218 0 188 4 218 0 190 4 218 0 200 4 218 0 201 4 218 0 204 4 218 0 207 4 218 0 209 4 218 0 210 4 218 0 211 4 218 0 212 4 218 0 214 4 218 0 215 2 205 1 46] 
#[1 0 238 0 1 0 238 0 3 0 238 0 4 0 238 0 5 0 238 0 6 0 238 0 7 0 238 0 8 0 238 0 9 0 238 0 10 0 238 0 11 0 238 0 12 0 238 0 13 0 238 0 14 0 238 0 15 0 238 0 16 0 238 0 17 0 238 0 19 0 238 0 20 0 238 0 21 0 238 0 22 0 238 0 23 0 238 0 24 0 238 0 25 0 238 0 26 0 238 0 27 0 238 0 28 0 238 0 29 0 238 0 32 0 238 0 34 0 238 0 35 0 238 0 38 0 238 0 45 0 238 0 80 0 238 0 83 0 238 0 87 0 238 0 90 0 238 0 99 0 238 0 105 0 238 0 106 0 238 0 108 0 238 0 110 0 238 0 115 0 238 0 116 0 238 0 118 0 238 0 121 0 238 0 123 0 238 0 125 0 238 0 130 0 238 0 146 0 238 0 150 0 238 0 151 0 238 0 152 0 238 0 171 0 238 0 177 0 238 0 179 0 238 0 186 0 238 0 188 0 238 0 190 0 238 0 200 0 238 0 201 0 238 0 204 0 238 0 207 0 238 0 209 0 238 0 210 0 238 0 211 0 238 0 212 0 238 0 214 0 238 0 215 12 221 1 47] 
#[1 4 222 0 1 4 222 0 3 4 222 0 4 4 222 0 5 4 222 0 6 4 222 0 7 4 222 0 8 4 222 0 9 4 222 0 10 4 222 0 11 4 222 0 12 4 222 0 13 0 251 0 14 4 222 0 15 4 222 0 16 4 222 0 17 4 222 0 19 4 222 0 20 4 222 0 21 4 222 0 22 4 222 0 23 4 222 0 24 4 222 0 25 4 222 0 26 4 222 0 27 4 222 0 28 4 222 0 29 4 222 0 32 4 222 0 34 4 222 0 35 4 222 0 38 4 222 0 45 4 222 0 80 4 222 0 83 4 222 0 87 4 222 0 90 4 222 0 99 4 222 0 105 4 222 0 106 4 222 0 108 4 222 0 110 4 222 0 115 4 222 0 116 4 222 0 118 4 222 0 121 4 222 0 123 4 222 0 125 4 222 0 130 4 222 0 146 4 222 0 150 4 222 0 151 4 222 0 152 4 222 0 171 4 222 0 177 4 222 0 179 4 222 0 186 4 222 0 188 4 222 0 190 4 222 0 200 4 222 0 201 4 222 0 204 4 222 0 207 4 222 0 209 4 222 0 210 4 222 0 211 4 222 0 212 4 222 0 214 4 222 0 215 2 205 1 46] 
#[1 4 226 0 6 2 225 0 11 4 226 0 215 12 225 0 234 12 229 1 50] 
#[0 4 230 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 234 0 1 4 234 0 3 4 234 0 4 0 255 0 5 4 234 0 6 4 234 0 7 4 234 0 8 4 234 0 9 4 234 0 10 4 234 0 11 4 234 0 12 4 234 0 13 4 234 0 14 4 234 0 15 4 234 0 16 4 234 0 17 4 234 0 19 4 234 0 20 4 234 0 21 4 234 0 22 4 234 0 23 4 234 0 24 4 234 0 25 4 234 0 26 4 234 0 27 4 234 0 28 4 234 0 29 4 234 0 32 4 234 0 34 4 234 0 35 4 234 0 38 4 234 0 45 4 234 0 80 4 234 0 83 4 234 0 87 4 234 0 90 4 234 0 99 4 234 0 105 4 234 0 106 4 234 0 108 4 234 0 110 4 234 0 115 4 234 0 116 4 234 0 118 4 234 0 121 4 234 0 123 4 234 0 125 4 234 0 130 4 234 0 146 4 234 0 150 4 234 0 151 4 234 0 152 4 234 0 171 4 234 0 177 4 234 0 179 4 234 0 186 4 234 0 188 4 234 0 190 4 234 0 200 4 234 0 201 4 234 0 204 4 234 0 207 4 234 0 209 4 234 0 210 4 234 0 211 4 234 0 212 4 234 0 214 4 234 0 215 2 33 0 235 12 233 1 48] 
#[0 4 238 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 4 242 0 11 0 25 0 215] 
#[1 12 237 0 6 3 137 0 215 12 237 0 236] 
#[1 4 246 0 1 4 246 0 3 4 246 0 4 1 3 0 5 4 246 0 6 4 246 0 7 4 246 0 8 4 246 0 9 4 246 0 10 4 246 0 11 4 246 0 12 4 246 0 13 4 246 0 14 4 246 0 15 4 246 0 16 4 246 0 17 4 246 0 19 4 246 0 20 4 246 0 21 4 246 0 22 4 246 0 23 4 246 0 24 4 246 0 25 4 246 0 26 4 246 0 27 4 246 0 28 4 246 0 32 4 246 0 34 4 246 0 35 4 246 0 38 4 246 0 45 4 246 0 80 4 246 0 83 4 246 0 87 4 246 0 90 4 246 0 99 4 246 0 105 4 246 0 108 4 246 0 110 4 246 0 115 4 246 0 116 4 246 0 118 4 246 0 121 4 246 0 123 4 246 0 125 4 246 0 130 4 246 0 146 4 246 0 150 4 246 0 151 4 246 0 152 4 246 0 171 4 246 0 177 4 246 0 179 4 246 0 186 4 246 0 188 4 246 0 190 4 246 0 201 4 246 0 207 4 246 0 209 4 246 0 210 4 246 0 211 4 246 0 212 4 246 0 214 4 246 0 215 12 241 0 235] 
#[0 12 245 0 144] 
#[1 4 26 0 32 4 26 0 83 4 26 0 99 4 26 0 105 4 26 0 115 4 26 0 121 4 26 0 123 4 26 0 152 4 26 0 171 4 26 0 177 4 26 0 186 4 26 0 201 4 26 0 215 12 249 2 156] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 12 253 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 12 253 1 92] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 13 1 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 5 2 47 13 5 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 5 2 54 13 5 2 55 4 1 2 56 13 5 2 63 13 5 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 5 2 97 13 5 2 98 13 5 2 99 13 5 2 100 13 5 2 101 13 5 2 102 13 5 2 103 13 5 2 104 13 5 2 105 13 5 2 106 13 5 2 107 13 5 2 108 13 5 2 109 13 5 2 110 13 5 2 111 13 5 2 112 13 5 2 113 13 5 2 114 13 5 2 115 13 5 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 5 2 159] 
#[1 3 9 0 32 10 221 0 83 3 89 0 99 10 157 0 105 13 9 0 115 10 161 0 121 10 165 0 123 10 169 0 152 10 173 0 171 10 177 0 177 10 181 0 186 10 185 0 201 13 13 0 215 13 17 2 126 10 201 2 127 10 205 2 136 10 209 2 137 10 213 2 142 10 217 2 143 10 221 2 144 10 225 2 145 10 229 2 146 10 233 2 147 10 237 2 153 10 241 2 155 10 245 2 157] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 13 21 0 234 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 13 25 0 234 6 149 0 235] 
#[0 4 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 254 0 3 4 254 0 4 4 254 0 5 4 254 0 6 4 254 0 7 4 254 0 8 4 254 0 9 4 254 0 10 1 7 0 11 4 254 0 12 4 254 0 13 4 254 0 15 4 254 0 16 4 254 0 17 4 254 0 19 4 254 0 20 4 254 0 21 4 254 0 22 4 254 0 23 4 254 0 24 4 254 0 25 4 254 0 26 4 254 0 27 4 254 0 28 4 254 0 32 4 254 0 34 4 254 0 35 4 254 0 38 4 254 0 45 4 254 0 80 4 254 0 83 4 254 0 87 4 254 0 90 4 254 0 99 4 254 0 105 4 254 0 108 4 254 0 110 4 254 0 115 4 254 0 116 4 254 0 118 4 254 0 121 4 254 0 123 4 254 0 125 4 254 0 130 4 254 0 146 4 254 0 150 4 254 0 151 4 254 0 152 4 254 0 171 4 254 0 177 4 254 0 179 4 254 0 186 4 254 0 188 4 254 0 190 4 254 0 201 4 254 0 207 4 254 0 209 4 254 0 210 4 254 0 211 4 254 0 212 4 254 0 214 4 254 0 215 13 29 0 234 13 33 2 129] 
#[0 13 37 0 14] 
#[1 0 15 0 5 1 11 0 6 1 11 0 14 0 238 0 29 1 11 0 215 13 41 0 235 2 37 1 47 2 41 1 48 13 45 2 60 13 49 2 61] 
#[0 5 6 0 6 0 215] 
#[1 13 53 0 6 3 137 0 215 13 53 0 236] 
#[0 5 10 0 6 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 13 57 0 234 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 13 61 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 13 65 0 122 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 69 2 47 13 69 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 69 2 54 13 69 2 55 4 1 2 56 13 69 2 63 13 69 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 13 73 2 81 13 77 2 84 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 69 2 97 13 69 2 98 13 69 2 99 13 69 2 100 13 69 2 101 13 69 2 102 13 69 2 103 13 69 2 104 13 69 2 105 13 69 2 106 13 69 2 107 13 69 2 108 13 69 2 109 13 69 2 110 13 69 2 111 13 69 2 112 13 69 2 113 13 69 2 114 13 69 2 115 13 69 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 69 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 69 2 159] 
#[1 3 133 0 213 3 185 0 237 13 81 2 86] 
#[1 2 241 0 1 2 29 0 5 0 119 0 6 2 249 0 9 1 15 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 123 0 215 3 141 0 219 13 85 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 17 0 228 3 173 0 229 4 205 0 234 3 177 0 235 13 89 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 4 213 1 96 4 217 1 97 13 93 1 184 13 97 1 187 13 101 2 47 13 101 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 101 2 54 13 101 2 55 4 1 2 56 13 101 2 63 13 101 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 13 105 2 70 9 33 2 71 9 37 2 73 9 41 2 74 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 101 2 97 13 101 2 98 13 101 2 99 13 101 2 100 13 101 2 101 13 101 2 102 13 101 2 103 13 101 2 104 13 101 2 105 13 101 2 106 13 101 2 107 13 101 2 108 13 101 2 109 13 101 2 110 13 101 2 111 13 101 2 112 13 101 2 113 13 101 2 114 13 101 2 115 13 101 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 101 2 159] 
#[0 5 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 3 133 0 213 3 185 0 237 13 109 2 86] 
#[0 5 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[0 5 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 26 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 30 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 13 113 0 234 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 13 117 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 13 121 1 42 13 125 1 43 13 125 1 44 13 125 1 45 13 125 1 52 13 125 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 121 1 92 8 205 2 47 8 205 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 205 2 54 8 205 2 55 4 1 2 56 8 205 2 63 8 205 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 205 2 97 8 205 2 98 8 205 2 99 8 205 2 100 8 205 2 101 8 205 2 102 8 205 2 103 8 205 2 104 8 205 2 105 8 205 2 106 8 205 2 107 8 205 2 108 8 205 2 109 8 205 2 110 8 205 2 111 8 205 2 112 8 205 2 113 8 205 2 114 8 205 2 115 8 205 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 205 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 205 2 159] 
#[0 5 34 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 5 38 0 6 0 11 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 13 129 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92] 
#[0 5 42 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 46 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 225 0 11 5 54 0 214 5 54 0 215 13 133 0 234 13 137 2 88] 
#[0 5 58 0 6 0 215] 
#[0 5 62 0 6 0 11 0 215] 
#[1 3 169 0 228 13 141 1 12] 
#[0 5 66 0 6 0 11 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 145 2 47 13 145 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 145 2 54 13 145 2 55 4 1 2 56 13 145 2 63 13 145 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 145 2 97 13 145 2 98 13 145 2 99 13 145 2 100 13 145 2 101 13 145 2 102 13 145 2 103 13 145 2 104 13 145 2 105 13 145 2 106 13 145 2 107 13 145 2 108 13 145 2 109 13 145 2 110 13 145 2 111 13 145 2 112 13 145 2 113 13 145 2 114 13 145 2 115 13 145 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 145 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 145 2 159] 
#[1 5 70 0 3 5 70 0 4 1 19 0 5 5 70 0 6 6 57 0 7 5 70 0 8 6 61 0 9 5 70 0 10 5 70 0 11 6 65 0 12 5 70 0 13 6 69 0 15 5 70 0 16 5 70 0 17 5 70 0 19 5 70 0 20 5 70 0 21 5 70 0 22 5 70 0 23 5 70 0 24 5 70 0 25 5 70 0 26 5 70 0 27 5 70 0 28 5 70 0 32 5 70 0 34 5 70 0 35 5 70 0 38 5 70 0 45 5 70 0 80 5 70 0 83 5 70 0 87 5 70 0 90 5 70 0 99 5 70 0 105 5 70 0 108 5 70 0 110 5 70 0 115 5 70 0 116 5 70 0 118 5 70 0 121 5 70 0 123 5 70 0 125 6 125 0 130 5 70 0 146 5 70 0 150 5 70 0 151 5 70 0 152 5 70 0 171 5 70 0 177 5 70 0 179 5 70 0 186 5 70 0 188 5 70 0 190 5 70 0 201 5 70 0 207 6 141 0 209 5 70 0 210 6 145 0 211 5 70 0 212 5 70 0 214 5 70 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 149 2 47 13 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 149 2 54 13 149 2 55 4 1 2 56 13 149 2 63 13 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 149 2 97 13 149 2 98 13 149 2 99 13 149 2 100 13 149 2 101 13 149 2 102 13 149 2 103 13 149 2 104 13 149 2 105 13 149 2 106 13 149 2 107 13 149 2 108 13 149 2 109 13 149 2 110 13 149 2 111 13 149 2 112 13 149 2 113 13 149 2 114 13 149 2 115 13 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 149 2 159] 
#[1 5 74 0 3 5 74 0 4 1 23 0 5 5 74 0 6 5 74 0 7 5 74 0 8 5 74 0 9 5 74 0 10 5 74 0 11 5 74 0 12 5 74 0 13 5 74 0 15 5 74 0 16 5 74 0 17 5 74 0 19 5 74 0 20 5 74 0 21 5 74 0 22 5 74 0 23 5 74 0 24 5 74 0 25 5 74 0 26 5 74 0 27 5 74 0 28 5 74 0 32 5 74 0 34 5 74 0 35 5 74 0 38 5 74 0 45 5 74 0 80 5 74 0 83 5 74 0 87 5 74 0 90 5 74 0 99 5 74 0 105 5 74 0 108 5 74 0 110 5 74 0 115 5 74 0 116 5 74 0 118 5 74 0 121 5 74 0 123 5 74 0 125 5 74 0 130 5 74 0 146 5 74 0 150 5 74 0 151 5 74 0 152 5 74 0 171 5 74 0 177 5 74 0 179 5 74 0 186 5 74 0 188 5 74 0 190 5 74 0 201 5 74 0 207 5 74 0 209 5 74 0 210 6 145 0 211 5 74 0 212 5 74 0 214 5 74 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 153 2 47 13 153 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 153 2 54 13 153 2 55 4 1 2 56 13 153 2 63 13 153 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 153 2 97 13 153 2 98 13 153 2 99 13 153 2 100 13 153 2 101 13 153 2 102 13 153 2 103 13 153 2 104 13 153 2 105 13 153 2 106 13 153 2 107 13 153 2 108 13 153 2 109 13 153 2 110 13 153 2 111 13 153 2 112 13 153 2 113 13 153 2 114 13 153 2 115 13 153 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 153 2 159] 
#[1 5 78 0 3 5 78 0 4 1 27 0 5 5 78 0 6 6 57 0 7 5 78 0 8 5 78 0 9 5 78 0 10 5 78 0 11 5 78 0 12 5 78 0 13 6 69 0 15 5 78 0 16 5 78 0 17 5 78 0 19 5 78 0 20 5 78 0 21 5 78 0 22 5 78 0 23 5 78 0 24 5 78 0 25 5 78 0 26 5 78 0 27 5 78 0 28 5 78 0 32 5 78 0 34 5 78 0 35 5 78 0 38 5 78 0 45 5 78 0 80 5 78 0 83 5 78 0 87 5 78 0 90 5 78 0 99 5 78 0 105 5 78 0 108 5 78 0 110 5 78 0 115 5 78 0 116 5 78 0 118 5 78 0 121 5 78 0 123 5 78 0 125 6 125 0 130 5 78 0 146 5 78 0 150 5 78 0 151 5 78 0 152 5 78 0 171 5 78 0 177 5 78 0 179 5 78 0 186 5 78 0 188 5 78 0 190 5 78 0 201 5 78 0 207 6 141 0 209 5 78 0 210 6 145 0 211 5 78 0 212 5 78 0 214 5 78 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 157 2 47 13 157 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 157 2 54 13 157 2 55 4 1 2 56 13 157 2 63 13 157 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 157 2 97 13 157 2 98 13 157 2 99 13 157 2 100 13 157 2 101 13 157 2 102 13 157 2 103 13 157 2 104 13 157 2 105 13 157 2 106 13 157 2 107 13 157 2 108 13 157 2 109 13 157 2 110 13 157 2 111 13 157 2 112 13 157 2 113 13 157 2 114 13 157 2 115 13 157 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 157 2 159] 
#[1 5 82 0 3 5 82 0 4 1 31 0 5 5 82 0 6 6 57 0 7 5 82 0 8 5 82 0 9 5 82 0 10 5 82 0 11 5 82 0 12 5 82 0 13 6 69 0 15 5 82 0 16 5 82 0 17 5 82 0 19 5 82 0 20 5 82 0 21 5 82 0 22 5 82 0 23 5 82 0 24 5 82 0 25 5 82 0 26 5 82 0 27 5 82 0 28 5 82 0 32 5 82 0 34 5 82 0 35 5 82 0 38 5 82 0 45 5 82 0 80 5 82 0 83 5 82 0 87 5 82 0 90 5 82 0 99 5 82 0 105 5 82 0 108 5 82 0 110 5 82 0 115 5 82 0 116 5 82 0 118 5 82 0 121 5 82 0 123 5 82 0 125 6 125 0 130 5 82 0 146 5 82 0 150 5 82 0 151 5 82 0 152 5 82 0 171 5 82 0 177 5 82 0 179 5 82 0 186 5 82 0 188 5 82 0 190 5 82 0 201 5 82 0 207 6 141 0 209 5 82 0 210 6 145 0 211 5 82 0 212 5 82 0 214 5 82 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 161 2 47 13 161 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 161 2 54 13 161 2 55 4 1 2 56 13 161 2 63 13 161 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 161 2 97 13 161 2 98 13 161 2 99 13 161 2 100 13 161 2 101 13 161 2 102 13 161 2 103 13 161 2 104 13 161 2 105 13 161 2 106 13 161 2 107 13 161 2 108 13 161 2 109 13 161 2 110 13 161 2 111 13 161 2 112 13 161 2 113 13 161 2 114 13 161 2 115 13 161 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 161 2 159] 
#[1 5 86 0 3 5 86 0 4 1 35 0 5 5 86 0 6 5 86 0 7 5 86 0 8 5 86 0 9 5 86 0 10 5 86 0 11 5 86 0 12 5 86 0 13 5 86 0 15 5 86 0 16 5 86 0 17 5 86 0 19 5 86 0 20 5 86 0 21 5 86 0 22 5 86 0 23 5 86 0 24 5 86 0 25 5 86 0 26 5 86 0 27 5 86 0 28 5 86 0 32 5 86 0 34 5 86 0 35 5 86 0 38 5 86 0 45 5 86 0 80 5 86 0 83 5 86 0 87 5 86 0 90 5 86 0 99 5 86 0 105 5 86 0 108 5 86 0 110 5 86 0 115 5 86 0 116 5 86 0 118 5 86 0 121 5 86 0 123 5 86 0 125 5 86 0 130 5 86 0 146 5 86 0 150 5 86 0 151 5 86 0 152 5 86 0 171 5 86 0 177 5 86 0 179 5 86 0 186 5 86 0 188 5 86 0 190 5 86 0 201 5 86 0 207 5 86 0 209 5 86 0 210 6 145 0 211 5 86 0 212 5 86 0 214 5 86 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 165 2 47 13 165 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 165 2 54 13 165 2 55 4 1 2 56 13 165 2 63 13 165 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 165 2 97 13 165 2 98 13 165 2 99 13 165 2 100 13 165 2 101 13 165 2 102 13 165 2 103 13 165 2 104 13 165 2 105 13 165 2 106 13 165 2 107 13 165 2 108 13 165 2 109 13 165 2 110 13 165 2 111 13 165 2 112 13 165 2 113 13 165 2 114 13 165 2 115 13 165 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 165 2 159] 
#[1 6 53 0 3 5 90 0 4 1 39 0 5 5 90 0 6 6 57 0 7 5 90 0 8 6 61 0 9 5 90 0 10 5 90 0 11 6 65 0 12 5 90 0 13 6 69 0 15 5 90 0 16 5 90 0 17 6 77 0 20 5 90 0 21 6 101 0 27 5 90 0 28 5 90 0 32 5 90 0 34 5 90 0 35 5 90 0 38 5 90 0 45 5 90 0 80 5 90 0 83 5 90 0 87 5 90 0 90 5 90 0 99 5 90 0 105 5 90 0 108 5 90 0 110 5 90 0 115 5 90 0 121 5 90 0 123 6 125 0 130 5 90 0 146 5 90 0 150 5 90 0 151 5 90 0 152 5 90 0 171 5 90 0 177 5 90 0 179 5 90 0 186 5 90 0 188 5 90 0 190 5 90 0 201 5 90 0 207 6 141 0 209 5 90 0 210 6 145 0 211 5 90 0 212 5 90 0 214 5 90 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 169 2 47 13 169 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 169 2 54 13 169 2 55 4 1 2 56 13 169 2 63 13 169 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 169 2 97 13 169 2 98 13 169 2 99 13 169 2 100 13 169 2 101 13 169 2 102 13 169 2 103 13 169 2 104 13 169 2 105 13 169 2 106 13 169 2 107 13 169 2 108 13 169 2 109 13 169 2 110 13 169 2 111 13 169 2 112 13 169 2 113 13 169 2 114 13 169 2 115 13 169 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 169 2 159] 
#[1 6 53 0 3 5 94 0 4 1 43 0 5 5 94 0 6 6 57 0 7 5 94 0 8 6 61 0 9 5 94 0 10 5 94 0 11 6 65 0 12 5 94 0 13 6 69 0 15 5 94 0 16 5 94 0 17 5 94 0 19 5 94 0 20 5 94 0 21 5 94 0 22 5 94 0 23 5 94 0 24 5 94 0 25 5 94 0 26 5 94 0 27 5 94 0 28 5 94 0 32 5 94 0 34 5 94 0 35 5 94 0 38 5 94 0 45 5 94 0 80 5 94 0 83 5 94 0 87 5 94 0 90 5 94 0 99 5 94 0 105 5 94 0 108 5 94 0 110 5 94 0 115 5 94 0 116 5 94 0 118 5 94 0 121 5 94 0 123 5 94 0 125 6 125 0 130 5 94 0 146 5 94 0 150 5 94 0 151 5 94 0 152 5 94 0 171 5 94 0 177 5 94 0 179 5 94 0 186 5 94 0 188 5 94 0 190 5 94 0 201 5 94 0 207 6 141 0 209 5 94 0 210 6 145 0 211 5 94 0 212 5 94 0 214 5 94 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 173 2 47 13 173 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 173 2 54 13 173 2 55 4 1 2 56 13 173 2 63 13 173 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 173 2 97 13 173 2 98 13 173 2 99 13 173 2 100 13 173 2 101 13 173 2 102 13 173 2 103 13 173 2 104 13 173 2 105 13 173 2 106 13 173 2 107 13 173 2 108 13 173 2 109 13 173 2 110 13 173 2 111 13 173 2 112 13 173 2 113 13 173 2 114 13 173 2 115 13 173 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 173 2 159] 
#[1 6 53 0 3 5 98 0 4 1 47 0 5 5 98 0 6 6 57 0 7 5 98 0 8 6 61 0 9 5 98 0 10 5 98 0 11 6 65 0 12 5 98 0 13 6 69 0 15 5 98 0 16 5 98 0 17 6 77 0 20 5 98 0 21 6 101 0 27 5 98 0 28 5 98 0 32 5 98 0 34 5 98 0 35 5 98 0 38 5 98 0 45 5 98 0 80 5 98 0 83 5 98 0 87 5 98 0 90 5 98 0 99 5 98 0 105 5 98 0 108 5 98 0 110 5 98 0 115 5 98 0 121 5 98 0 123 6 125 0 130 5 98 0 146 5 98 0 150 5 98 0 151 5 98 0 152 5 98 0 171 5 98 0 177 5 98 0 179 5 98 0 186 5 98 0 188 5 98 0 190 5 98 0 201 5 98 0 207 6 141 0 209 5 98 0 210 6 145 0 211 5 98 0 212 5 98 0 214 5 98 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 177 2 47 13 177 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 177 2 54 13 177 2 55 4 1 2 56 13 177 2 63 13 177 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 177 2 97 13 177 2 98 13 177 2 99 13 177 2 100 13 177 2 101 13 177 2 102 13 177 2 103 13 177 2 104 13 177 2 105 13 177 2 106 13 177 2 107 13 177 2 108 13 177 2 109 13 177 2 110 13 177 2 111 13 177 2 112 13 177 2 113 13 177 2 114 13 177 2 115 13 177 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 177 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 177 2 159] 
#[1 6 53 0 3 5 102 0 4 1 51 0 5 5 102 0 6 6 57 0 7 5 102 0 8 6 61 0 9 5 102 0 10 5 102 0 11 6 65 0 12 5 102 0 13 6 69 0 15 5 102 0 16 5 102 0 17 6 77 0 20 5 102 0 21 6 101 0 27 5 102 0 28 5 102 0 32 5 102 0 34 5 102 0 35 5 102 0 38 5 102 0 45 5 102 0 80 5 102 0 83 5 102 0 87 5 102 0 90 5 102 0 99 5 102 0 105 5 102 0 108 5 102 0 110 5 102 0 115 5 102 0 121 5 102 0 123 6 125 0 130 5 102 0 146 5 102 0 150 5 102 0 151 5 102 0 152 5 102 0 171 5 102 0 177 5 102 0 179 5 102 0 186 5 102 0 188 5 102 0 190 5 102 0 201 5 102 0 207 6 141 0 209 5 102 0 210 6 145 0 211 5 102 0 212 5 102 0 214 5 102 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 181 2 47 13 181 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 181 2 54 13 181 2 55 4 1 2 56 13 181 2 63 13 181 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 181 2 97 13 181 2 98 13 181 2 99 13 181 2 100 13 181 2 101 13 181 2 102 13 181 2 103 13 181 2 104 13 181 2 105 13 181 2 106 13 181 2 107 13 181 2 108 13 181 2 109 13 181 2 110 13 181 2 111 13 181 2 112 13 181 2 113 13 181 2 114 13 181 2 115 13 181 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 181 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 181 2 159] 
#[1 6 53 0 3 5 106 0 4 1 55 0 5 5 106 0 6 6 57 0 7 5 106 0 8 6 61 0 9 5 106 0 10 5 106 0 11 6 65 0 12 5 106 0 13 6 69 0 15 5 106 0 16 5 106 0 17 6 77 0 20 5 106 0 21 6 101 0 27 5 106 0 28 5 106 0 32 5 106 0 34 5 106 0 35 5 106 0 38 5 106 0 45 5 106 0 80 5 106 0 83 5 106 0 87 5 106 0 90 5 106 0 99 5 106 0 105 5 106 0 108 5 106 0 110 5 106 0 115 5 106 0 121 5 106 0 123 6 125 0 130 5 106 0 146 5 106 0 150 5 106 0 151 5 106 0 152 5 106 0 171 5 106 0 177 5 106 0 179 5 106 0 186 5 106 0 188 5 106 0 190 5 106 0 201 5 106 0 207 6 141 0 209 5 106 0 210 6 145 0 211 5 106 0 212 5 106 0 214 5 106 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 185 2 47 13 185 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 185 2 54 13 185 2 55 4 1 2 56 13 185 2 63 13 185 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 185 2 97 13 185 2 98 13 185 2 99 13 185 2 100 13 185 2 101 13 185 2 102 13 185 2 103 13 185 2 104 13 185 2 105 13 185 2 106 13 185 2 107 13 185 2 108 13 185 2 109 13 185 2 110 13 185 2 111 13 185 2 112 13 185 2 113 13 185 2 114 13 185 2 115 13 185 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 185 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 185 2 159] 
#[1 6 53 0 3 5 110 0 4 1 59 0 5 5 110 0 6 6 57 0 7 5 110 0 8 6 61 0 9 5 110 0 10 5 110 0 11 6 65 0 12 5 110 0 13 6 69 0 15 5 110 0 16 5 110 0 17 6 77 0 20 5 110 0 21 6 101 0 27 5 110 0 28 5 110 0 32 5 110 0 34 5 110 0 35 5 110 0 38 5 110 0 45 5 110 0 80 5 110 0 83 5 110 0 87 5 110 0 90 5 110 0 99 5 110 0 105 5 110 0 108 5 110 0 110 5 110 0 115 5 110 0 121 5 110 0 123 6 125 0 130 5 110 0 146 5 110 0 150 5 110 0 151 5 110 0 152 5 110 0 171 5 110 0 177 5 110 0 179 5 110 0 186 5 110 0 188 5 110 0 190 5 110 0 201 5 110 0 207 6 141 0 209 5 110 0 210 6 145 0 211 5 110 0 212 5 110 0 214 5 110 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 189 2 47 13 189 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 189 2 54 13 189 2 55 4 1 2 56 13 189 2 63 13 189 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 189 2 97 13 189 2 98 13 189 2 99 13 189 2 100 13 189 2 101 13 189 2 102 13 189 2 103 13 189 2 104 13 189 2 105 13 189 2 106 13 189 2 107 13 189 2 108 13 189 2 109 13 189 2 110 13 189 2 111 13 189 2 112 13 189 2 113 13 189 2 114 13 189 2 115 13 189 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 189 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 189 2 159] 
#[1 6 53 0 3 5 114 0 4 1 63 0 5 5 114 0 6 6 57 0 7 5 114 0 8 6 61 0 9 5 114 0 10 5 114 0 11 6 65 0 12 5 114 0 13 6 69 0 15 5 114 0 16 5 114 0 17 6 77 0 20 5 114 0 21 6 101 0 27 5 114 0 28 5 114 0 32 5 114 0 34 5 114 0 35 5 114 0 38 5 114 0 45 5 114 0 80 5 114 0 83 5 114 0 87 5 114 0 90 5 114 0 99 5 114 0 105 5 114 0 108 5 114 0 110 5 114 0 115 5 114 0 121 5 114 0 123 6 125 0 130 5 114 0 146 5 114 0 150 5 114 0 151 5 114 0 152 5 114 0 171 5 114 0 177 5 114 0 179 5 114 0 186 5 114 0 188 5 114 0 190 5 114 0 201 5 114 0 207 6 141 0 209 5 114 0 210 6 145 0 211 5 114 0 212 5 114 0 214 5 114 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 193 2 47 13 193 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 193 2 54 13 193 2 55 4 1 2 56 13 193 2 63 13 193 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 193 2 97 13 193 2 98 13 193 2 99 13 193 2 100 13 193 2 101 13 193 2 102 13 193 2 103 13 193 2 104 13 193 2 105 13 193 2 106 13 193 2 107 13 193 2 108 13 193 2 109 13 193 2 110 13 193 2 111 13 193 2 112 13 193 2 113 13 193 2 114 13 193 2 115 13 193 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 193 2 159] 
#[1 6 53 0 3 5 118 0 4 1 67 0 5 5 118 0 6 6 57 0 7 5 118 0 8 6 61 0 9 5 118 0 10 5 118 0 11 6 65 0 12 5 118 0 13 6 69 0 15 5 118 0 16 5 118 0 17 5 118 0 19 5 118 0 20 5 118 0 21 5 118 0 22 5 118 0 23 5 118 0 24 5 118 0 25 5 118 0 26 5 118 0 27 5 118 0 28 5 118 0 32 5 118 0 34 5 118 0 35 5 118 0 38 5 118 0 45 5 118 0 80 5 118 0 83 5 118 0 87 5 118 0 90 5 118 0 99 5 118 0 105 5 118 0 108 5 118 0 110 5 118 0 115 5 118 0 116 5 118 0 118 5 118 0 121 5 118 0 123 5 118 0 125 6 125 0 130 5 118 0 146 5 118 0 150 5 118 0 151 5 118 0 152 5 118 0 171 5 118 0 177 5 118 0 179 5 118 0 186 5 118 0 188 5 118 0 190 5 118 0 201 5 118 0 207 6 141 0 209 5 118 0 210 6 145 0 211 5 118 0 212 5 118 0 214 5 118 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 197 2 47 13 197 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 197 2 54 13 197 2 55 4 1 2 56 13 197 2 63 13 197 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 197 2 97 13 197 2 98 13 197 2 99 13 197 2 100 13 197 2 101 13 197 2 102 13 197 2 103 13 197 2 104 13 197 2 105 13 197 2 106 13 197 2 107 13 197 2 108 13 197 2 109 13 197 2 110 13 197 2 111 13 197 2 112 13 197 2 113 13 197 2 114 13 197 2 115 13 197 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 197 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 197 2 159] 
#[1 6 53 0 3 5 122 0 4 1 71 0 5 5 122 0 6 6 57 0 7 5 122 0 8 6 61 0 9 5 122 0 10 5 122 0 11 6 65 0 12 5 122 0 13 6 69 0 15 5 122 0 16 5 122 0 17 6 73 0 19 6 77 0 20 5 122 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 5 122 0 28 5 122 0 32 5 122 0 34 5 122 0 35 5 122 0 38 5 122 0 45 5 122 0 80 5 122 0 83 5 122 0 87 5 122 0 90 5 122 0 99 5 122 0 105 5 122 0 108 5 122 0 110 5 122 0 115 6 113 0 116 6 117 0 118 5 122 0 121 5 122 0 123 6 121 0 125 6 125 0 130 5 122 0 146 5 122 0 150 5 122 0 151 5 122 0 152 5 122 0 171 5 122 0 177 5 122 0 179 5 122 0 186 5 122 0 188 5 122 0 190 5 122 0 201 5 122 0 207 6 141 0 209 5 122 0 210 6 145 0 211 5 122 0 212 5 122 0 214 5 122 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 201 2 47 13 201 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 201 2 54 13 201 2 55 4 1 2 56 13 201 2 63 13 201 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 201 2 97 13 201 2 98 13 201 2 99 13 201 2 100 13 201 2 101 13 201 2 102 13 201 2 103 13 201 2 104 13 201 2 105 13 201 2 106 13 201 2 107 13 201 2 108 13 201 2 109 13 201 2 110 13 201 2 111 13 201 2 112 13 201 2 113 13 201 2 114 13 201 2 115 13 201 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 201 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 201 2 159] 
#[1 6 53 0 3 5 126 0 4 1 75 0 5 5 126 0 6 6 57 0 7 5 126 0 8 6 61 0 9 5 126 0 10 5 126 0 11 6 65 0 12 5 126 0 13 6 69 0 15 5 126 0 16 5 126 0 17 6 73 0 19 6 77 0 20 5 126 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 5 126 0 28 5 126 0 32 5 126 0 34 5 126 0 35 5 126 0 38 5 126 0 45 5 126 0 80 5 126 0 83 5 126 0 87 5 126 0 90 5 126 0 99 5 126 0 105 5 126 0 108 5 126 0 110 5 126 0 115 6 113 0 116 6 117 0 118 5 126 0 121 5 126 0 123 6 121 0 125 6 125 0 130 5 126 0 146 5 126 0 150 5 126 0 151 5 126 0 152 5 126 0 171 5 126 0 177 5 126 0 179 5 126 0 186 5 126 0 188 5 126 0 190 5 126 0 201 5 126 0 207 6 141 0 209 5 126 0 210 6 145 0 211 5 126 0 212 5 126 0 214 5 126 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 205 2 47 13 205 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 205 2 54 13 205 2 55 4 1 2 56 13 205 2 63 13 205 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 205 2 97 13 205 2 98 13 205 2 99 13 205 2 100 13 205 2 101 13 205 2 102 13 205 2 103 13 205 2 104 13 205 2 105 13 205 2 106 13 205 2 107 13 205 2 108 13 205 2 109 13 205 2 110 13 205 2 111 13 205 2 112 13 205 2 113 13 205 2 114 13 205 2 115 13 205 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 205 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 205 2 159] 
#[1 6 53 0 3 5 130 0 4 1 79 0 5 5 130 0 6 6 57 0 7 5 130 0 8 6 61 0 9 5 130 0 10 5 130 0 11 6 65 0 12 5 130 0 13 6 69 0 15 5 130 0 16 5 130 0 17 6 77 0 20 5 130 0 21 6 101 0 27 5 130 0 28 5 130 0 32 5 130 0 34 5 130 0 35 5 130 0 38 5 130 0 45 5 130 0 80 5 130 0 83 5 130 0 87 5 130 0 90 5 130 0 99 5 130 0 105 5 130 0 108 5 130 0 110 5 130 0 115 5 130 0 121 5 130 0 123 6 125 0 130 5 130 0 146 5 130 0 150 5 130 0 151 5 130 0 152 5 130 0 171 5 130 0 177 5 130 0 179 5 130 0 186 5 130 0 188 5 130 0 190 5 130 0 201 5 130 0 207 6 141 0 209 5 130 0 210 6 145 0 211 5 130 0 212 5 130 0 214 5 130 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 209 2 47 13 209 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 209 2 54 13 209 2 55 4 1 2 56 13 209 2 63 13 209 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 209 2 97 13 209 2 98 13 209 2 99 13 209 2 100 13 209 2 101 13 209 2 102 13 209 2 103 13 209 2 104 13 209 2 105 13 209 2 106 13 209 2 107 13 209 2 108 13 209 2 109 13 209 2 110 13 209 2 111 13 209 2 112 13 209 2 113 13 209 2 114 13 209 2 115 13 209 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 209 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 209 2 159] 
#[1 6 53 0 3 5 134 0 4 1 83 0 5 5 134 0 6 6 57 0 7 5 134 0 8 6 61 0 9 5 134 0 10 5 134 0 11 6 65 0 12 5 134 0 13 6 69 0 15 5 134 0 16 5 134 0 17 6 77 0 20 5 134 0 21 6 101 0 27 5 134 0 28 5 134 0 32 5 134 0 34 5 134 0 35 5 134 0 38 5 134 0 45 5 134 0 80 5 134 0 83 5 134 0 87 5 134 0 90 5 134 0 99 5 134 0 105 5 134 0 108 5 134 0 110 5 134 0 115 5 134 0 121 5 134 0 123 6 125 0 130 5 134 0 146 5 134 0 150 5 134 0 151 5 134 0 152 5 134 0 171 5 134 0 177 5 134 0 179 5 134 0 186 5 134 0 188 5 134 0 190 5 134 0 201 5 134 0 207 6 141 0 209 5 134 0 210 6 145 0 211 5 134 0 212 5 134 0 214 5 134 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 213 2 47 13 213 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 213 2 54 13 213 2 55 4 1 2 56 13 213 2 63 13 213 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 213 2 97 13 213 2 98 13 213 2 99 13 213 2 100 13 213 2 101 13 213 2 102 13 213 2 103 13 213 2 104 13 213 2 105 13 213 2 106 13 213 2 107 13 213 2 108 13 213 2 109 13 213 2 110 13 213 2 111 13 213 2 112 13 213 2 113 13 213 2 114 13 213 2 115 13 213 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 213 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 213 2 159] 
#[1 6 53 0 3 5 138 0 4 1 87 0 5 5 138 0 6 6 57 0 7 5 138 0 8 6 61 0 9 5 138 0 10 5 138 0 11 6 65 0 12 5 138 0 13 6 69 0 15 5 138 0 16 5 138 0 17 6 77 0 20 5 138 0 21 6 101 0 27 5 138 0 28 5 138 0 32 5 138 0 34 5 138 0 35 5 138 0 38 5 138 0 45 5 138 0 80 5 138 0 83 5 138 0 87 5 138 0 90 5 138 0 99 5 138 0 105 5 138 0 108 5 138 0 110 5 138 0 115 5 138 0 121 5 138 0 123 6 125 0 130 5 138 0 146 5 138 0 150 5 138 0 151 5 138 0 152 5 138 0 171 5 138 0 177 5 138 0 179 5 138 0 186 5 138 0 188 5 138 0 190 5 138 0 201 5 138 0 207 6 141 0 209 5 138 0 210 6 145 0 211 5 138 0 212 5 138 0 214 5 138 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 217 2 47 13 217 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 217 2 54 13 217 2 55 4 1 2 56 13 217 2 63 13 217 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 217 2 97 13 217 2 98 13 217 2 99 13 217 2 100 13 217 2 101 13 217 2 102 13 217 2 103 13 217 2 104 13 217 2 105 13 217 2 106 13 217 2 107 13 217 2 108 13 217 2 109 13 217 2 110 13 217 2 111 13 217 2 112 13 217 2 113 13 217 2 114 13 217 2 115 13 217 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 217 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 217 2 159] 
#[1 5 142 0 3 5 142 0 4 1 91 0 5 5 142 0 6 6 57 0 7 5 142 0 8 5 142 0 9 5 142 0 10 5 142 0 11 5 142 0 12 5 142 0 13 6 69 0 15 5 142 0 16 5 142 0 17 5 142 0 19 5 142 0 20 5 142 0 21 5 142 0 22 5 142 0 23 5 142 0 24 5 142 0 25 5 142 0 26 5 142 0 27 5 142 0 28 5 142 0 32 5 142 0 34 5 142 0 35 5 142 0 38 5 142 0 45 5 142 0 80 5 142 0 83 5 142 0 87 5 142 0 90 5 142 0 99 5 142 0 105 5 142 0 108 5 142 0 110 5 142 0 115 5 142 0 116 5 142 0 118 5 142 0 121 5 142 0 123 5 142 0 125 5 142 0 130 5 142 0 146 5 142 0 150 5 142 0 151 5 142 0 152 5 142 0 171 5 142 0 177 5 142 0 179 5 142 0 186 5 142 0 188 5 142 0 190 5 142 0 201 5 142 0 207 6 141 0 209 5 142 0 210 6 145 0 211 5 142 0 212 5 142 0 214 5 142 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 221 2 47 13 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 221 2 54 13 221 2 55 4 1 2 56 13 221 2 63 13 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 221 2 97 13 221 2 98 13 221 2 99 13 221 2 100 13 221 2 101 13 221 2 102 13 221 2 103 13 221 2 104 13 221 2 105 13 221 2 106 13 221 2 107 13 221 2 108 13 221 2 109 13 221 2 110 13 221 2 111 13 221 2 112 13 221 2 113 13 221 2 114 13 221 2 115 13 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 221 2 159] 
#[1 6 53 0 3 5 146 0 4 1 95 0 5 5 146 0 6 6 57 0 7 5 146 0 8 6 61 0 9 5 146 0 10 5 146 0 11 6 65 0 12 5 146 0 13 6 69 0 15 5 146 0 16 5 146 0 17 6 73 0 19 6 77 0 20 5 146 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 5 146 0 28 5 146 0 32 6 105 0 34 6 109 0 35 5 146 0 38 5 146 0 45 5 146 0 80 5 146 0 83 5 146 0 87 5 146 0 90 5 146 0 99 5 146 0 105 5 146 0 108 5 146 0 110 5 146 0 115 6 113 0 116 6 117 0 118 5 146 0 121 5 146 0 123 6 121 0 125 6 125 0 130 5 146 0 146 5 146 0 150 5 146 0 151 5 146 0 152 5 146 0 171 5 146 0 177 5 146 0 179 5 146 0 186 5 146 0 188 5 146 0 190 5 146 0 201 5 146 0 207 6 141 0 209 5 146 0 210 6 145 0 211 5 146 0 212 5 146 0 214 5 146 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 225 2 47 13 225 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 225 2 54 13 225 2 55 4 1 2 56 13 225 2 63 13 225 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 225 2 97 13 225 2 98 13 225 2 99 13 225 2 100 13 225 2 101 13 225 2 102 13 225 2 103 13 225 2 104 13 225 2 105 13 225 2 106 13 225 2 107 13 225 2 108 13 225 2 109 13 225 2 110 13 225 2 111 13 225 2 112 13 225 2 113 13 225 2 114 13 225 2 115 13 225 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 225 2 159] 
#[1 6 53 0 3 5 150 0 4 1 99 0 5 5 150 0 6 6 57 0 7 5 150 0 8 6 61 0 9 5 150 0 10 5 150 0 11 6 65 0 12 5 150 0 13 6 69 0 15 5 150 0 16 5 150 0 17 6 73 0 19 6 77 0 20 5 150 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 5 150 0 28 5 150 0 32 6 105 0 34 6 109 0 35 5 150 0 38 5 150 0 45 5 150 0 80 5 150 0 83 5 150 0 87 5 150 0 90 5 150 0 99 5 150 0 105 5 150 0 108 5 150 0 110 5 150 0 115 6 113 0 116 6 117 0 118 5 150 0 121 5 150 0 123 6 121 0 125 6 125 0 130 5 150 0 146 5 150 0 150 5 150 0 151 5 150 0 152 5 150 0 171 5 150 0 177 5 150 0 179 5 150 0 186 5 150 0 188 5 150 0 190 5 150 0 201 5 150 0 207 6 141 0 209 5 150 0 210 6 145 0 211 5 150 0 212 5 150 0 214 5 150 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 229 2 47 13 229 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 229 2 54 13 229 2 55 4 1 2 56 13 229 2 63 13 229 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 229 2 97 13 229 2 98 13 229 2 99 13 229 2 100 13 229 2 101 13 229 2 102 13 229 2 103 13 229 2 104 13 229 2 105 13 229 2 106 13 229 2 107 13 229 2 108 13 229 2 109 13 229 2 110 13 229 2 111 13 229 2 112 13 229 2 113 13 229 2 114 13 229 2 115 13 229 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 229 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 229 2 159] 
#[1 6 53 0 3 5 154 0 4 1 103 0 5 5 154 0 6 6 57 0 7 5 154 0 8 6 61 0 9 5 154 0 10 5 154 0 11 6 65 0 12 5 154 0 13 6 69 0 15 5 154 0 16 5 154 0 17 6 73 0 19 6 77 0 20 5 154 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 5 154 0 28 5 154 0 32 6 105 0 34 6 109 0 35 5 154 0 38 5 154 0 45 5 154 0 80 5 154 0 83 5 154 0 87 5 154 0 90 5 154 0 99 5 154 0 105 5 154 0 108 5 154 0 110 5 154 0 115 6 113 0 116 6 117 0 118 5 154 0 121 5 154 0 123 6 121 0 125 6 125 0 130 5 154 0 146 6 129 0 150 6 133 0 151 5 154 0 152 5 154 0 171 5 154 0 177 5 154 0 179 5 154 0 186 5 154 0 188 5 154 0 190 5 154 0 201 5 154 0 207 6 141 0 209 5 154 0 210 6 145 0 211 5 154 0 212 5 154 0 214 5 154 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 233 2 47 13 233 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 233 2 54 13 233 2 55 4 1 2 56 13 233 2 63 13 233 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 233 2 97 13 233 2 98 13 233 2 99 13 233 2 100 13 233 2 101 13 233 2 102 13 233 2 103 13 233 2 104 13 233 2 105 13 233 2 106 13 233 2 107 13 233 2 108 13 233 2 109 13 233 2 110 13 233 2 111 13 233 2 112 13 233 2 113 13 233 2 114 13 233 2 115 13 233 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 233 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 233 2 159] 
#[1 5 158 0 3 5 158 0 4 1 107 0 5 5 158 0 6 6 57 0 7 5 158 0 8 5 158 0 9 5 158 0 10 5 158 0 11 5 158 0 12 5 158 0 13 6 69 0 15 5 158 0 16 5 158 0 17 5 158 0 19 5 158 0 20 5 158 0 21 5 158 0 22 5 158 0 23 5 158 0 24 5 158 0 25 5 158 0 26 5 158 0 27 5 158 0 28 5 158 0 32 5 158 0 34 5 158 0 35 5 158 0 38 5 158 0 45 5 158 0 80 5 158 0 83 5 158 0 87 5 158 0 90 5 158 0 99 5 158 0 105 5 158 0 108 5 158 0 110 5 158 0 115 5 158 0 116 5 158 0 118 5 158 0 121 5 158 0 123 5 158 0 125 5 158 0 130 5 158 0 146 5 158 0 150 5 158 0 151 5 158 0 152 5 158 0 171 5 158 0 177 5 158 0 179 5 158 0 186 5 158 0 188 5 158 0 190 5 158 0 201 5 158 0 207 5 158 0 209 5 158 0 210 6 145 0 211 5 158 0 212 5 158 0 214 5 158 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 237 2 47 13 237 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 237 2 54 13 237 2 55 4 1 2 56 13 237 2 63 13 237 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 237 2 97 13 237 2 98 13 237 2 99 13 237 2 100 13 237 2 101 13 237 2 102 13 237 2 103 13 237 2 104 13 237 2 105 13 237 2 106 13 237 2 107 13 237 2 108 13 237 2 109 13 237 2 110 13 237 2 111 13 237 2 112 13 237 2 113 13 237 2 114 13 237 2 115 13 237 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 237 2 159] 
#[1 5 162 0 3 5 162 0 4 1 111 0 5 5 162 0 6 5 162 0 7 5 162 0 8 5 162 0 9 5 162 0 10 5 162 0 11 5 162 0 12 5 162 0 13 5 162 0 15 5 162 0 16 5 162 0 17 5 162 0 19 5 162 0 20 5 162 0 21 5 162 0 22 5 162 0 23 5 162 0 24 5 162 0 25 5 162 0 26 5 162 0 27 5 162 0 28 5 162 0 32 5 162 0 34 5 162 0 35 5 162 0 38 5 162 0 45 5 162 0 80 5 162 0 83 5 162 0 87 5 162 0 90 5 162 0 99 5 162 0 105 5 162 0 108 5 162 0 110 5 162 0 115 5 162 0 116 5 162 0 118 5 162 0 121 5 162 0 123 5 162 0 125 5 162 0 130 5 162 0 146 5 162 0 150 5 162 0 151 5 162 0 152 5 162 0 171 5 162 0 177 5 162 0 179 5 162 0 186 5 162 0 188 5 162 0 190 5 162 0 201 5 162 0 207 5 162 0 209 5 162 0 210 6 145 0 211 5 162 0 212 5 162 0 214 5 162 0 215 6 149 0 235] 
#[1 5 241 0 18 13 241 0 240] 
#[0 5 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 4 106 0 6 6 57 0 7 6 61 0 9 4 106 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 4 106 0 215 6 149 0 235 13 245 2 73] 
#[1 13 249 0 6 3 137 0 215 13 249 0 236] 
#[1 5 170 0 6 2 225 0 11 5 170 0 215 13 253 0 234] 
#[1 5 174 0 6 1 115 0 11 5 174 0 215 14 1 0 234 14 5 2 72] 
#[0 5 178 0 6 0 215] 
#[0 14 9 0 228] 
#[1 5 182 0 1 5 182 0 3 5 182 0 4 1 119 0 5 5 182 0 6 5 182 0 7 5 182 0 8 5 182 0 9 5 182 0 10 5 182 0 11 5 182 0 12 5 182 0 13 5 182 0 14 5 182 0 15 5 182 0 16 5 182 0 17 5 182 0 19 5 182 0 20 5 182 0 21 5 182 0 22 5 182 0 23 5 182 0 24 5 182 0 25 5 182 0 26 5 182 0 27 5 182 0 28 5 182 0 32 5 182 0 34 5 182 0 35 5 182 0 38 5 182 0 45 5 182 0 80 5 182 0 83 5 182 0 87 5 182 0 90 5 182 0 99 5 182 0 105 5 182 0 108 5 182 0 110 5 182 0 115 5 182 0 116 5 182 0 118 5 182 0 121 5 182 0 123 5 182 0 125 5 182 0 130 5 182 0 146 5 182 0 150 5 182 0 151 5 182 0 152 5 182 0 171 5 182 0 177 5 182 0 179 5 182 0 186 5 182 0 188 5 182 0 190 5 182 0 201 5 182 0 207 5 182 0 209 5 182 0 210 5 182 0 211 5 182 0 212 5 182 0 214 5 182 0 215 14 13 0 235] 
#[0 5 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 14 17 0 6 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 6 149 0 235 14 17 0 236] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 14 21 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 21 1 92] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 14 25 1 217 14 29 1 219] 
#[1 2 241 0 1 2 29 0 5 14 33 0 6 2 249 0 9 2 253 0 12 3 1 0 14 0 73 0 19 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 4 162 0 46 4 162 0 47 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 4 162 0 149 4 162 0 157 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 1 123 0 229 3 177 0 235 14 33 0 236 3 185 0 237 3 233 0 241 11 93 0 253 0 89 0 254 0 93 0 255 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 37 1 136 11 101 1 139 11 105 1 140 5 253 2 47 5 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 253 2 54 5 253 2 55 4 1 2 56 5 253 2 63 5 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 253 2 97 5 253 2 98 5 253 2 99 5 253 2 100 5 253 2 101 5 253 2 102 5 253 2 103 5 253 2 104 5 253 2 105 5 253 2 106 5 253 2 107 5 253 2 108 5 253 2 109 5 253 2 110 5 253 2 111 5 253 2 112 5 253 2 113 5 253 2 114 5 253 2 115 5 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 253 2 159] 
#[1 6 53 0 3 5 194 0 4 1 127 0 5 5 194 0 6 6 57 0 7 5 194 0 8 6 61 0 9 5 194 0 10 5 194 0 11 6 65 0 12 5 194 0 13 6 69 0 15 5 194 0 16 5 194 0 17 6 73 0 19 6 77 0 20 5 194 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 5 194 0 28 5 194 0 32 6 105 0 34 6 109 0 35 5 194 0 38 5 194 0 45 5 194 0 80 5 194 0 83 5 194 0 87 5 194 0 90 5 194 0 99 5 194 0 105 5 194 0 108 5 194 0 110 5 194 0 115 6 113 0 116 6 117 0 118 5 194 0 121 5 194 0 123 6 121 0 125 6 125 0 130 5 194 0 146 6 129 0 150 6 133 0 151 5 194 0 152 5 194 0 171 5 194 0 177 5 194 0 179 5 194 0 186 5 194 0 188 5 194 0 190 5 194 0 201 6 137 0 207 6 141 0 209 5 194 0 210 6 145 0 211 5 194 0 212 5 194 0 214 5 194 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 41 2 47 14 41 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 41 2 54 14 41 2 55 4 1 2 56 14 41 2 63 14 41 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 41 2 97 14 41 2 98 14 41 2 99 14 41 2 100 14 41 2 101 14 41 2 102 14 41 2 103 14 41 2 104 14 41 2 105 14 41 2 106 14 41 2 107 14 41 2 108 14 41 2 109 14 41 2 110 14 41 2 111 14 41 2 112 14 41 2 113 14 41 2 114 14 41 2 115 14 41 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 41 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 41 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 45 2 47 14 45 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 45 2 54 14 45 2 55 4 1 2 56 14 45 2 63 14 45 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 45 2 97 14 45 2 98 14 45 2 99 14 45 2 100 14 45 2 101 14 45 2 102 14 45 2 103 14 45 2 104 14 45 2 105 14 45 2 106 14 45 2 107 14 45 2 108 14 45 2 109 14 45 2 110 14 45 2 111 14 45 2 112 14 45 2 113 14 45 2 114 14 45 2 115 14 45 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 45 2 159] 
#[0 5 198 0 229] 
#[0 14 61 0 84 0 97 0 202 2 30] 
#[0 5 202 0 229] 
#[1 14 77 0 198 14 77 0 202 14 73 0 215 14 77 2 5] 
#[0 5 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 81 2 41 14 85 2 47 14 85 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 85 2 54 14 85 2 55 4 1 2 56 14 85 2 63 14 85 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 85 2 97 14 85 2 98 14 85 2 99 14 85 2 100 14 85 2 101 14 85 2 102 14 85 2 103 14 85 2 104 14 85 2 105 14 85 2 106 14 85 2 107 14 85 2 108 14 85 2 109 14 85 2 110 14 85 2 111 14 85 2 112 14 85 2 113 14 85 2 114 14 85 2 115 14 85 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 85 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 89 2 47 14 89 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 89 2 54 14 89 2 55 4 1 2 56 14 89 2 63 14 89 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 89 2 97 14 89 2 98 14 89 2 99 14 89 2 100 14 89 2 101 14 89 2 102 14 89 2 103 14 89 2 104 14 89 2 105 14 89 2 106 14 89 2 107 14 89 2 108 14 89 2 109 14 89 2 110 14 89 2 111 14 89 2 112 14 89 2 113 14 89 2 114 14 89 2 115 14 89 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 89 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 89 2 159] 
#[0 14 125 0 84 0 97 0 100 0 161 0 171 0 184 0 191 0 202 2 28] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 14 129 0 86 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 14 133 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 137 2 7 14 141 2 47 14 141 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 141 2 54 14 141 2 55 4 1 2 56 14 141 2 63 14 141 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 141 2 97 14 141 2 98 14 141 2 99 14 141 2 100 14 141 2 101 14 141 2 102 14 141 2 103 14 141 2 104 14 141 2 105 14 141 2 106 14 141 2 107 14 141 2 108 14 141 2 109 14 141 2 110 14 141 2 111 14 141 2 112 14 141 2 113 14 141 2 114 14 141 2 115 14 141 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 141 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 141 2 159] 
#[0 14 149 0 221 0 229 1 221] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 14 153 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 157 2 47 14 157 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 157 2 54 14 157 2 55 4 1 2 56 14 157 2 63 14 157 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 157 2 97 14 157 2 98 14 157 2 99 14 157 2 100 14 157 2 101 14 157 2 102 14 157 2 103 14 157 2 104 14 157 2 105 14 157 2 106 14 157 2 107 14 157 2 108 14 157 2 109 14 157 2 110 14 157 2 111 14 157 2 112 14 157 2 113 14 157 2 114 14 157 2 115 14 157 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 157 2 159] 
#[1 14 161 0 2 2 29 0 5 14 165 0 235] 
#[0 14 169 0 92] 
#[0 14 173 0 228] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 14 177 0 159 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 181 2 36 14 185 2 39 14 189 2 47 14 189 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 189 2 54 14 189 2 55 4 1 2 56 14 189 2 63 14 189 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 189 2 97 14 189 2 98 14 189 2 99 14 189 2 100 14 189 2 101 14 189 2 102 14 189 2 103 14 189 2 104 14 189 2 105 14 189 2 106 14 189 2 107 14 189 2 108 14 189 2 109 14 189 2 110 14 189 2 111 14 189 2 112 14 189 2 113 14 189 2 114 14 189 2 115 14 189 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 189 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 189 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 193 2 47 14 193 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 193 2 54 14 193 2 55 4 1 2 56 14 193 2 63 14 193 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 193 2 97 14 193 2 98 14 193 2 99 14 193 2 100 14 193 2 101 14 193 2 102 14 193 2 103 14 193 2 104 14 193 2 105 14 193 2 106 14 193 2 107 14 193 2 108 14 193 2 109 14 193 2 110 14 193 2 111 14 193 2 112 14 193 2 113 14 193 2 114 14 193 2 115 14 193 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 193 2 159] 
#[1 5 210 0 3 5 210 0 4 5 210 0 5 5 210 0 6 5 210 0 7 5 210 0 8 5 210 0 9 5 210 0 10 5 210 0 11 5 210 0 12 5 210 0 13 5 210 0 15 5 210 0 16 5 210 0 17 5 210 0 19 5 210 0 20 5 210 0 21 5 210 0 22 5 210 0 23 5 210 0 24 5 210 0 25 5 210 0 26 5 210 0 27 5 210 0 28 5 210 0 32 5 210 0 34 5 210 0 35 5 210 0 38 5 210 0 45 5 210 0 80 5 210 0 83 5 210 0 87 5 210 0 90 5 210 0 99 5 210 0 105 5 210 0 108 5 210 0 110 5 210 0 115 5 210 0 116 5 210 0 118 5 210 0 121 5 210 0 123 5 210 0 125 5 210 0 130 14 205 0 139 5 210 0 146 5 210 0 150 5 210 0 151 5 210 0 152 5 210 0 171 5 210 0 177 5 210 0 179 5 210 0 186 5 210 0 188 5 210 0 190 5 210 0 201 5 210 0 207 5 210 0 209 5 210 0 210 5 210 0 211 5 210 0 212 5 210 0 214 5 210 0 215 14 205 0 221 14 205 0 229 14 205 1 221 14 205 2 24] 
#[1 2 241 0 1 5 214 0 3 5 214 0 4 1 131 0 5 5 214 0 6 5 214 0 7 5 214 0 8 2 249 0 9 5 214 0 10 5 214 0 11 2 253 0 12 5 214 0 13 3 1 0 14 5 214 0 15 5 214 0 16 5 214 0 17 5 214 0 19 5 214 0 20 5 214 0 21 5 214 0 22 5 214 0 23 5 214 0 24 5 214 0 25 5 214 0 26 5 214 0 27 5 214 0 28 3 5 0 31 1 135 0 32 5 214 0 34 5 214 0 35 5 214 0 38 1 186 0 40 3 13 0 42 1 65 0 44 5 214 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 5 214 0 80 3 85 0 82 5 214 0 83 1 65 0 85 5 214 0 87 5 214 0 90 1 139 0 99 1 186 0 100 3 93 0 102 3 97 0 103 5 214 0 105 3 101 0 107 5 214 0 108 5 214 0 110 1 65 0 113 5 214 0 115 5 214 0 116 5 214 0 118 1 186 0 120 5 214 0 121 5 214 0 123 5 214 0 125 1 65 0 126 3 105 0 128 5 214 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 5 214 0 146 5 214 0 150 5 214 0 151 5 214 0 152 1 65 0 170 5 214 0 171 1 65 0 175 1 65 0 176 5 214 0 177 5 214 0 179 1 65 0 182 1 186 0 184 5 214 0 186 5 214 0 188 5 214 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 5 214 0 201 5 214 0 207 5 214 0 209 5 214 0 210 5 214 0 211 5 214 0 212 3 133 0 213 5 214 0 214 5 214 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 209 2 47 14 209 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 209 2 54 14 209 2 55 4 1 2 56 14 209 2 63 14 209 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 209 2 97 14 209 2 98 14 209 2 99 14 209 2 100 14 209 2 101 14 209 2 102 14 209 2 103 14 209 2 104 14 209 2 105 14 209 2 106 14 209 2 107 14 209 2 108 14 209 2 109 14 209 2 110 14 209 2 111 14 209 2 112 14 209 2 113 14 209 2 114 14 209 2 115 14 209 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 209 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 209 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 14 213 0 67 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 217 2 47 14 217 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 217 2 54 14 217 2 55 4 1 2 56 14 217 2 63 14 217 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 217 2 97 14 217 2 98 14 217 2 99 14 217 2 100 14 217 2 101 14 217 2 102 14 217 2 103 14 217 2 104 14 217 2 105 14 217 2 106 14 217 2 107 14 217 2 108 14 217 2 109 14 217 2 110 14 217 2 111 14 217 2 112 14 217 2 113 14 217 2 114 14 217 2 115 14 217 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 217 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 217 2 159] 
#[0 5 218 0 229] 
#[0 5 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 221 2 47 14 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 221 2 54 14 221 2 55 4 1 2 56 14 221 2 63 14 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 221 2 97 14 221 2 98 14 221 2 99 14 221 2 100 14 221 2 101 14 221 2 102 14 221 2 103 14 221 2 104 14 221 2 105 14 221 2 106 14 221 2 107 14 221 2 108 14 221 2 109 14 221 2 110 14 221 2 111 14 221 2 112 14 221 2 113 14 221 2 114 14 221 2 115 14 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 221 2 159] 
#[1 2 241 0 1 5 226 0 3 5 226 0 4 1 143 0 5 5 226 0 6 5 226 0 7 5 226 0 8 2 249 0 9 5 226 0 10 5 226 0 11 2 253 0 12 5 226 0 13 3 1 0 14 5 226 0 15 5 226 0 16 5 226 0 17 5 226 0 19 5 226 0 20 5 226 0 21 5 226 0 22 5 226 0 23 5 226 0 24 5 226 0 25 5 226 0 26 5 226 0 27 5 226 0 28 3 5 0 31 1 147 0 32 5 226 0 34 5 226 0 35 5 226 0 38 1 186 0 40 3 13 0 42 1 65 0 44 5 226 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 5 226 0 80 3 85 0 82 5 226 0 83 1 65 0 85 5 226 0 87 5 226 0 90 1 151 0 99 1 186 0 100 3 93 0 102 3 97 0 103 5 226 0 105 3 101 0 107 5 226 0 108 5 226 0 110 1 65 0 113 5 226 0 115 5 226 0 116 5 226 0 118 1 186 0 120 5 226 0 121 5 226 0 123 5 226 0 125 1 65 0 126 3 105 0 128 5 226 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 5 226 0 146 5 226 0 150 5 226 0 151 5 226 0 152 1 65 0 170 5 226 0 171 1 65 0 175 1 65 0 176 5 226 0 177 5 226 0 179 1 65 0 182 1 186 0 184 5 226 0 186 5 226 0 188 5 226 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 5 226 0 201 5 226 0 207 5 226 0 209 5 226 0 210 5 226 0 211 5 226 0 212 3 133 0 213 5 226 0 214 5 226 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 225 2 47 14 225 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 225 2 54 14 225 2 55 4 1 2 56 14 225 2 63 14 225 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 225 2 97 14 225 2 98 14 225 2 99 14 225 2 100 14 225 2 101 14 225 2 102 14 225 2 103 14 225 2 104 14 225 2 105 14 225 2 106 14 225 2 107 14 225 2 108 14 225 2 109 14 225 2 110 14 225 2 111 14 225 2 112 14 225 2 113 14 225 2 114 14 225 2 115 14 225 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 225 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 225 2 159] 
#[0 14 229 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 14 233 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 14 237 1 175 14 241 1 178 14 245 1 179 14 249 1 182 14 253 2 45 15 1 2 47 15 1 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 1 2 54 15 1 2 55 4 1 2 56 15 1 2 63 15 1 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 1 2 97 15 1 2 98 15 1 2 99 15 1 2 100 15 1 2 101 15 1 2 102 15 1 2 103 15 1 2 104 15 1 2 105 15 1 2 106 15 1 2 107 15 1 2 108 15 1 2 109 15 1 2 110 15 1 2 111 15 1 2 112 15 1 2 113 15 1 2 114 15 1 2 115 15 1 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 1 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 1 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 5 2 47 15 5 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 5 2 54 15 5 2 55 4 1 2 56 15 5 2 63 15 5 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 5 2 97 15 5 2 98 15 5 2 99 15 5 2 100 15 5 2 101 15 5 2 102 15 5 2 103 15 5 2 104 15 5 2 105 15 5 2 106 15 5 2 107 15 5 2 108 15 5 2 109 15 5 2 110 15 5 2 111 15 5 2 112 15 5 2 113 15 5 2 114 15 5 2 115 15 5 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 5 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 9 2 47 15 9 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 9 2 54 15 9 2 55 4 1 2 56 15 9 2 63 15 9 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 9 2 97 15 9 2 98 15 9 2 99 15 9 2 100 15 9 2 101 15 9 2 102 15 9 2 103 15 9 2 104 15 9 2 105 15 9 2 106 15 9 2 107 15 9 2 108 15 9 2 109 15 9 2 110 15 9 2 111 15 9 2 112 15 9 2 113 15 9 2 114 15 9 2 115 15 9 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 9 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 9 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 13 2 47 15 13 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 13 2 54 15 13 2 55 4 1 2 56 15 13 2 63 15 13 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 13 2 97 15 13 2 98 15 13 2 99 15 13 2 100 15 13 2 101 15 13 2 102 15 13 2 103 15 13 2 104 15 13 2 105 15 13 2 106 15 13 2 107 15 13 2 108 15 13 2 109 15 13 2 110 15 13 2 111 15 13 2 112 15 13 2 113 15 13 2 114 15 13 2 115 15 13 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 13 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 15 17 1 217 14 29 1 219] 
#[0 5 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 134 0 1 2 134 0 3 2 134 0 4 1 155 0 5 2 134 0 6 2 134 0 7 2 134 0 8 2 134 0 9 2 134 0 10 2 134 0 11 2 134 0 12 2 134 0 13 0 59 0 14 2 134 0 15 2 134 0 16 1 159 0 17 2 134 0 19 2 134 0 20 2 134 0 21 2 134 0 22 2 134 0 23 2 134 0 24 2 134 0 25 2 134 0 26 2 134 0 27 2 134 0 28 0 238 0 29 2 134 0 32 2 134 0 34 2 134 0 35 2 134 0 38 2 134 0 45 2 134 0 80 2 134 0 83 2 134 0 87 2 134 0 90 2 134 0 99 2 134 0 105 2 134 0 108 2 134 0 110 2 134 0 115 2 134 0 116 2 134 0 118 2 134 0 121 2 134 0 123 2 134 0 125 2 134 0 130 2 134 0 146 2 134 0 150 2 134 0 151 2 134 0 152 2 134 0 171 2 134 0 177 2 134 0 179 2 134 0 186 2 134 0 188 2 134 0 190 2 134 0 201 2 134 0 207 2 134 0 209 2 134 0 210 2 134 0 211 2 134 0 212 2 134 0 214 2 134 0 215 5 249 0 235 2 37 1 47 2 41 1 48] 
#[1 2 241 0 1 2 29 0 5 15 21 0 6 2 249 0 9 2 253 0 12 3 1 0 14 0 73 0 19 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 4 162 0 46 4 162 0 47 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 4 162 0 149 4 162 0 157 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 1 123 0 229 3 177 0 235 15 21 0 236 3 185 0 237 3 233 0 241 11 93 0 253 0 89 0 254 0 93 0 255 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 25 1 136 11 101 1 139 11 105 1 140 5 253 2 47 5 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 5 253 2 54 5 253 2 55 4 1 2 56 5 253 2 63 5 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 5 253 2 97 5 253 2 98 5 253 2 99 5 253 2 100 5 253 2 101 5 253 2 102 5 253 2 103 5 253 2 104 5 253 2 105 5 253 2 106 5 253 2 107 5 253 2 108 5 253 2 109 5 253 2 110 5 253 2 111 5 253 2 112 5 253 2 113 5 253 2 114 5 253 2 115 5 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 5 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 5 253 2 159] 
#[0 5 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 15 29 0 17] 
#[0 5 246 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 33 0 229 15 37 1 175 14 241 1 178 14 245 1 179 14 249 1 182] 
#[0 5 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 5 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 22 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 38 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 42 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 62 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 74 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 78 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 90 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 110 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 118 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 126 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 130 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 134 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 138 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 146 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 150 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 1 163 0 4 1 167 0 5 6 166 0 6 6 57 0 7 1 171 0 8 6 61 0 9 1 175 0 10 6 166 0 11 6 65 0 12 1 179 0 13 6 69 0 15 1 183 0 16 6 166 0 17 6 73 0 19 6 77 0 20 1 187 0 21 6 81 0 22 6 85 0 23 15 65 0 24 6 93 0 25 6 97 0 26 6 101 0 27 1 191 0 28 6 166 0 32 6 105 0 34 6 109 0 35 6 166 0 38 6 166 0 45 6 166 0 80 6 166 0 83 6 166 0 87 6 166 0 90 6 166 0 99 6 166 0 105 6 166 0 108 6 166 0 110 6 166 0 115 6 113 0 116 6 117 0 118 6 166 0 121 6 166 0 123 6 121 0 125 6 125 0 130 6 166 0 146 6 129 0 150 6 133 0 151 6 166 0 152 6 166 0 171 6 166 0 177 6 166 0 179 6 166 0 186 6 166 0 188 6 166 0 190 6 166 0 201 6 137 0 207 6 141 0 209 1 195 0 210 6 145 0 211 1 199 0 212 6 166 0 214 6 166 0 215 6 149 0 235 15 81 0 239 15 85 1 236] 
#[0 6 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 89 0 45 15 93 0 121 15 97 0 215 15 101 0 229 15 105 2 132 15 109 2 135] 
#[1 15 113 0 215 5 169 0 229 15 117 2 131] 
#[1 15 121 0 215 15 101 0 229 15 125 2 132 15 109 2 135] 
#[0 15 129 0 45] 
#[1 15 133 0 215 15 101 0 229 15 137 2 132 15 109 2 135] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 15 141 0 202 3 133 0 213 15 145 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 149 2 47 15 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 149 2 54 15 149 2 55 4 1 2 56 15 149 2 63 15 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 149 2 97 15 149 2 98 15 149 2 99 15 149 2 100 15 149 2 101 15 149 2 102 15 149 2 103 15 149 2 104 15 149 2 105 15 149 2 106 15 149 2 107 15 149 2 108 15 149 2 109 15 149 2 110 15 149 2 111 15 149 2 112 15 149 2 113 15 149 2 114 15 149 2 115 15 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 149 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 15 153 0 202 3 133 0 213 15 157 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 161 2 47 15 161 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 161 2 54 15 161 2 55 4 1 2 56 15 161 2 63 15 161 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 161 2 97 15 161 2 98 15 161 2 99 15 161 2 100 15 161 2 101 15 161 2 102 15 161 2 103 15 161 2 104 15 161 2 105 15 161 2 106 15 161 2 107 15 161 2 108 15 161 2 109 15 161 2 110 15 161 2 111 15 161 2 112 15 161 2 113 15 161 2 114 15 161 2 115 15 161 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 161 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 15 165 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 15 169 2 47 15 169 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 15 169 2 54 15 169 2 55 4 1 2 56 15 169 2 63 15 169 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 15 169 2 97 15 169 2 98 15 169 2 99 15 169 2 100 15 169 2 101 15 169 2 102 15 169 2 103 15 169 2 104 15 169 2 105 15 169 2 106 15 169 2 107 15 169 2 108 15 169 2 109 15 169 2 110 15 169 2 111 15 169 2 112 15 169 2 113 15 169 2 114 15 169 2 115 15 169 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 15 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 15 169 2 159] 
#[1 3 9 0 32 10 221 0 83 3 89 0 99 10 157 0 105 10 161 0 121 10 165 0 123 10 169 0 152 10 173 0 171 10 177 0 177 10 181 0 186 10 185 0 201 15 173 2 126 10 201 2 127 10 205 2 136 10 209 2 137 10 213 2 142 10 217 2 143 10 221 2 144 10 225 2 145 10 229 2 146 10 233 2 147 10 237 2 153 10 241 2 155 10 245 2 157] 
#[0 6 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 198 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 218 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 226 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 6 230 0 14 0 17 0 215] 
#[1 15 177 0 17 15 181 0 215] 
#[1 15 185 0 17 15 189 0 215] 
#[1 0 73 0 19 15 193 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 15 197 0 17 2 85 0 29 15 201 0 215] 
#[1 0 73 0 19 15 205 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 15 209 1 86 11 173 1 87] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 15 213 1 86 11 173 1 87] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 15 217 1 85] 
#[1 3 222 0 19 3 222 0 70 3 222 0 78 3 222 0 79 3 222 0 88 3 222 0 89 3 222 0 93 3 222 0 98 3 222 0 100 3 222 0 112 3 222 0 114 3 222 0 132 3 222 0 141 3 222 0 154 3 222 0 158 3 222 0 160 3 222 0 161 3 222 0 162 3 222 0 163 3 222 0 166 3 222 0 173 3 222 0 183 3 222 0 184 3 222 0 206 15 221 1 85] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 15 225 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 0 26 0 141 0 191 0 142 0 195 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 0 223 0 163 0 227 0 166 0 231 0 173 0 235 0 174 0 34 0 183 0 239 0 184 12 113 0 205 0 243 0 206 12 9 0 242 12 13 0 253 0 89 0 254 0 93 0 255 12 25 1 41 12 25 1 65 12 21 1 66 12 25 1 69 0 137 1 70 12 25 1 76 0 145 1 77 12 25 1 83 12 25 1 84 12 25 1 99 12 25 1 106 12 25 1 108 12 25 1 113 12 41 1 114 12 25 1 115 12 25 1 118 12 25 1 119 12 25 1 125 12 25 1 126 12 65 1 127 12 25 1 129 12 25 1 148 12 77 1 149 12 25 1 151 12 25 1 152 12 89 1 153 12 25 1 159 12 25 1 165 12 101 1 166 12 25 1 172 12 109 1 173 12 113 1 174 12 25 1 188 12 25 1 190 12 125 1 191 12 25 1 193 12 133 1 194 12 25 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 15 229 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 0 26 0 141 0 191 0 142 0 195 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 0 223 0 163 0 227 0 166 0 231 0 173 0 235 0 174 0 34 0 183 0 239 0 184 12 113 0 205 0 243 0 206 12 9 0 242 12 13 0 253 0 89 0 254 0 93 0 255 12 25 1 41 12 25 1 65 12 21 1 66 12 25 1 69 0 137 1 70 12 25 1 76 0 145 1 77 12 25 1 83 12 25 1 84 12 25 1 99 12 25 1 106 12 25 1 108 12 25 1 113 12 41 1 114 12 25 1 115 12 25 1 118 12 25 1 119 12 25 1 125 12 25 1 126 12 65 1 127 12 25 1 129 12 25 1 148 12 77 1 149 12 25 1 151 12 25 1 152 12 89 1 153 12 25 1 159 12 25 1 165 12 101 1 166 12 25 1 172 12 109 1 173 12 113 1 174 12 25 1 188 12 25 1 190 12 125 1 191 12 25 1 193 12 133 1 194 12 25 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 15 233 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 15 237 1 71] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 15 241 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 15 245 1 71] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 15 249 1 71 15 253 1 74] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 7 105 0 112 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 16 1 1 71 16 5 1 74] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 16 9 1 78] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 16 13 1 78] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 16 17 1 71] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 16 21 1 71] 
#[0 6 234 0 44 0 48 0 69 0 75 0 76 0 85 0 103 0 113 0 126 0 143 0 170 0 175 0 176 0 182 0 194 0 195 0 196 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 16 25 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 16 25 1 92] 
#[1 6 238 0 17 16 29 0 37 6 238 0 106 6 238 0 108 6 238 0 215] 
#[1 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 16 33 1 140] 
#[1 16 37 0 6 3 137 0 215 16 37 0 236] 
#[1 6 242 0 6 6 242 0 11 6 242 0 215 16 41 1 138] 
#[1 16 65 0 46 16 65 0 47 16 65 0 149 16 65 0 157 16 61 0 229 16 65 1 141 16 69 1 142] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 11 81 0 253 0 89 0 254 0 93 0 255 16 73 1 112] 
#[1 16 77 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 16 77 0 236 11 93 0 253 0 89 0 254 0 93 0 255 16 81 1 136 11 101 1 139 11 105 1 140] 
#[0 6 246 0 17 0 106 0 108 0 215] 
#[1 16 85 0 6 3 137 0 215 16 85 0 236] 
#[1 16 89 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 16 89 0 236 11 93 0 253 0 89 0 254 0 93 0 255 16 93 1 136 11 101 1 139 11 105 1 140] 
#[0 6 250 0 19 0 88 0 229] 
#[0 6 254 0 19 0 88 0 229] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 16 97 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[1 16 101 0 17 2 65 0 24 16 105 0 215 16 109 0 239] 
#[0 16 113 0 89] 
#[0 7 2 0 19 0 88 0 229] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 16 117 1 67 7 65 1 68] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 16 121 1 67 7 65 1 68] 
#[0 16 125 0 89] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 16 129 1 43 16 129 1 44 16 129 1 45 16 129 1 52 16 129 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 16 133 1 88] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 16 137 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[0 7 18 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 16 189 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[0 7 22 0 229] 
#[0 7 26 0 229] 
#[1 7 30 0 6 7 30 0 11 16 193 0 37 7 30 0 215 16 197 0 248] 
#[1 7 34 0 6 7 34 0 11 7 34 0 215 16 201 0 245] 
#[0 16 205 0 229] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 16 209 1 86 11 173 1 87] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 16 213 1 86 11 173 1 87] 
#[0 7 38 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 42 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 16 217 0 131] 
#[0 7 46 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 50 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 54 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 58 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 62 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 66 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 7 70 0 78 7 74 0 81 1 211 0 98 7 70 0 120 7 70 0 133 7 70 0 142 7 70 0 154 7 70 0 155 7 70 0 156 1 211 0 160 7 70 0 161 1 211 0 162 1 211 0 163 1 211 0 166 1 211 0 173 1 211 0 174 7 74 0 205 7 70 0 206 7 74 0 229] 
#[1 7 78 0 78 7 82 0 81 1 215 0 98 7 78 0 120 7 78 0 133 7 78 0 142 7 78 0 154 7 78 0 155 7 78 0 156 1 215 0 160 7 78 0 161 1 215 0 162 1 215 0 163 1 215 0 166 1 215 0 173 1 215 0 174 7 82 0 205 7 78 0 206 7 82 0 229] 
#[1 7 86 0 78 7 90 0 81 1 219 0 98 7 86 0 120 7 86 0 133 7 86 0 142 7 86 0 154 7 86 0 155 7 86 0 156 1 219 0 160 7 86 0 161 1 219 0 162 1 219 0 163 1 219 0 166 1 219 0 173 1 219 0 174 7 90 0 205 7 86 0 206 7 90 0 229] 
#[0 7 94 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 98 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 7 102 0 78 7 106 0 81 1 223 0 98 7 102 0 120 7 102 0 133 7 102 0 142 7 102 0 154 7 102 0 155 7 102 0 156 1 223 0 160 7 102 0 161 1 223 0 162 1 223 0 163 1 223 0 166 1 223 0 173 1 223 0 174 7 106 0 205 7 102 0 206 7 106 0 229] 
#[1 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 0 26 0 141 0 191 0 142 0 195 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 0 223 0 163 0 227 0 166 0 231 0 173 0 235 0 174 0 34 0 183 0 239 0 184 12 113 0 205 0 243 0 206 12 9 0 242 16 221 1 66 1 145 1 70 1 149 1 77 16 225 1 114 16 229 1 127 16 233 1 149 16 237 1 153 16 241 1 166 16 245 1 173 12 113 1 174 16 249 1 191 16 253 1 194 17 1 1 196 12 153 1 205 12 153 1 206 12 153 1 207] 
#[0 7 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 1 165 0 79 1 169 0 89 1 205 0 98 1 177 0 114 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 242 1 205 1 53] 
#[0 7 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 57 0 40 17 57 0 98 2 145 0 100 17 57 0 120 17 61 0 133 17 57 0 142 17 57 0 154 17 57 0 155 17 57 0 156 17 57 0 158 17 57 0 160 17 57 0 162 17 57 0 163 17 57 0 173 17 57 0 174 2 149 0 184 17 57 0 242 17 49 1 110 17 53 1 111 17 57 1 121 17 61 1 122] 
#[0 7 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 65 0 77 17 81 0 98 17 81 0 154 17 81 0 160 17 81 0 162 17 81 0 163 17 81 0 173 17 81 0 242 17 81 1 132] 
#[0 7 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 17 97 0 98 17 97 0 160 17 97 0 162 17 97 0 163 17 97 0 174 17 89 0 184 17 97 0 242 17 97 1 150] 
#[0 7 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 101 0 74 17 105 0 93 17 121 0 98 17 121 0 160 17 121 0 162 17 121 0 163 17 121 0 173 17 121 0 174 17 121 0 242 17 121 1 157] 
#[0 7 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 7 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 17 125 0 72 17 137 0 98 17 137 0 160 17 137 0 162 17 137 0 163 17 137 0 173 17 137 0 242 17 137 1 167] 
#[0 7 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[1 17 157 0 81 17 157 0 98 17 157 0 160 17 157 0 162 17 157 0 163 17 157 0 166 17 157 0 173 17 157 0 174 17 157 0 205 15 33 0 229 17 157 0 242 17 157 1 174 17 161 1 175 14 241 1 178 14 245 1 179 14 249 1 182] 
#[0 7 178 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 141 0 142 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 205 0 206] 
#[0 7 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 189 0 78 17 189 0 98 17 189 0 120 17 189 0 142 17 189 0 154 17 189 0 155 17 189 0 156 17 189 0 160 17 165 0 161 17 189 0 162 17 189 0 163 17 189 0 166 17 189 0 173 17 189 0 174 17 189 0 206 17 189 0 242 17 185 1 189 17 189 1 205 17 189 1 206] 
#[0 7 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 197 0 78 17 197 0 98 17 197 0 120 17 197 0 133 17 197 0 142 17 197 0 154 17 197 0 155 17 197 0 156 17 197 0 160 17 165 0 161 17 197 0 162 17 197 0 163 17 197 0 166 17 197 0 173 17 197 0 174 17 197 0 206 17 197 0 242 17 193 1 189 17 197 1 205 17 197 1 206 17 197 1 207] 
#[0 7 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 205 0 98 17 205 0 142 17 205 0 154 17 205 0 155 17 205 0 156 17 205 0 160 17 201 0 161 17 205 0 162 17 205 0 163 17 205 0 173 17 205 0 174 17 205 0 242 17 205 1 205] 
#[0 7 198 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 202 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 206 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 17 209 0 131] 
#[1 17 213 0 17 2 85 0 29 17 217 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 17 221 1 43 17 221 1 44 17 221 1 45 17 221 1 52 17 221 1 55 17 225 1 58 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[0 7 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 17 229 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 18 21 1 72] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 18 25 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 18 29 1 72] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 18 33 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 18 37 1 71] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 18 41 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 18 45 1 71] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 18 49 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 18 89 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 18 93 1 78] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 18 97 1 78] 
#[1 7 218 0 1 7 218 0 3 7 218 0 4 7 218 0 5 7 218 0 6 7 218 0 7 7 218 0 8 7 218 0 9 7 218 0 10 7 218 0 11 7 218 0 12 7 218 0 13 1 243 0 14 7 218 0 15 7 218 0 16 7 218 0 17 7 218 0 19 7 218 0 20 7 218 0 21 7 218 0 22 7 218 0 23 7 218 0 24 7 218 0 25 7 218 0 26 7 218 0 27 7 218 0 28 7 218 0 29 7 218 0 32 7 218 0 34 7 218 0 35 7 218 0 38 7 218 0 45 7 218 0 80 7 218 0 83 7 218 0 87 7 218 0 90 7 218 0 99 7 218 0 105 7 218 0 106 7 218 0 108 7 218 0 110 7 218 0 115 7 218 0 116 7 218 0 118 7 218 0 121 7 218 0 123 7 218 0 125 7 218 0 130 7 218 0 146 7 218 0 150 7 218 0 151 7 218 0 152 7 218 0 171 7 218 0 177 7 218 0 179 7 218 0 186 7 218 0 188 7 218 0 190 7 218 0 200 7 218 0 201 7 218 0 204 7 218 0 207 7 218 0 209 7 218 0 210 7 218 0 211 7 218 0 212 7 218 0 214 7 218 0 215 2 205 1 46] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 101 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 101 1 92] 
#[0 7 222 0 6 0 11 0 215] 
#[0 7 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 106 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 200 0 201 0 204 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 7 230 0 11 0 25 0 215] 
#[0 18 105 0 144] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 18 109 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92] 
#[1 3 9 0 32 10 221 0 83 3 89 0 99 10 157 0 105 18 113 0 115 10 161 0 121 10 165 0 123 10 169 0 152 10 173 0 171 10 177 0 177 10 181 0 186 10 185 0 201 18 117 0 215 13 17 2 126 10 201 2 127 10 205 2 136 10 209 2 137 10 213 2 142 10 217 2 143 10 221 2 144 10 225 2 145 10 229 2 146 10 233 2 147 10 237 2 153 10 241 2 155 10 245 2 157] 
#[0 18 121 0 110] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 125 2 47 18 125 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 18 125 2 54 18 125 2 55 4 1 2 56 18 125 2 63 18 125 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 18 125 2 97 18 125 2 98 18 125 2 99 18 125 2 100 18 125 2 101 18 125 2 102 18 125 2 103 18 125 2 104 18 125 2 105 18 125 2 106 18 125 2 107 18 125 2 108 18 125 2 109 18 125 2 110 18 125 2 111 18 125 2 112 18 125 2 113 18 125 2 114 18 125 2 115 18 125 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 18 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 18 125 2 159] 
#[1 6 53 0 3 7 234 0 4 1 247 0 5 7 234 0 6 6 57 0 7 7 234 0 8 6 61 0 9 7 234 0 10 7 234 0 11 6 65 0 12 7 234 0 13 6 69 0 15 7 234 0 16 7 234 0 17 6 73 0 19 6 77 0 20 7 234 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 7 234 0 28 7 234 0 32 6 105 0 34 6 109 0 35 7 234 0 38 7 234 0 45 7 234 0 80 7 234 0 83 7 234 0 87 7 234 0 90 7 234 0 99 7 234 0 105 7 234 0 108 7 234 0 110 7 234 0 115 6 113 0 116 6 117 0 118 7 234 0 121 7 234 0 123 6 121 0 125 6 125 0 130 7 234 0 146 6 129 0 150 6 133 0 151 7 234 0 152 7 234 0 171 7 234 0 177 7 234 0 179 7 234 0 186 7 234 0 188 7 234 0 190 7 234 0 201 6 137 0 207 6 141 0 209 7 234 0 210 6 145 0 211 7 234 0 212 7 234 0 214 7 234 0 215 6 149 0 235] 
#[1 18 129 0 215 15 101 0 229 18 133 2 132 15 109 2 135] 
#[0 18 137 0 115] 
#[0 7 238 0 32 0 83 0 99 0 105 0 115 0 121 0 123 0 152 0 171 0 177 0 186 0 201 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 141 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 141 1 92] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 145 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 145 1 92] 
#[1 5 169 0 229 18 149 2 131] 
#[0 7 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 18 153 0 215 18 157 0 228] 
#[0 18 161 0 144] 
#[1 7 246 0 6 18 165 0 14 7 246 0 215 18 169 2 59] 
#[1 5 2 0 6 5 2 0 14 5 2 0 215 18 173 2 60] 
#[0 7 250 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 177 2 47 18 177 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 18 177 2 54 18 177 2 55 4 1 2 56 18 177 2 63 18 177 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 18 177 2 97 18 177 2 98 18 177 2 99 18 177 2 100 18 177 2 101 18 177 2 102 18 177 2 103 18 177 2 104 18 177 2 105 18 177 2 106 18 177 2 107 18 177 2 108 18 177 2 109 18 177 2 110 18 177 2 111 18 177 2 112 18 177 2 113 18 177 2 114 18 177 2 115 18 177 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 18 177 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 18 177 2 159] 
#[1 18 181 0 215 18 185 0 228] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 18 189 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 193 2 47 18 193 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 18 193 2 54 18 193 2 55 4 1 2 56 18 193 2 63 18 193 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 18 193 2 97 18 193 2 98 18 193 2 99 18 193 2 100 18 193 2 101 18 193 2 102 18 193 2 103 18 193 2 104 18 193 2 105 18 193 2 106 18 193 2 107 18 193 2 108 18 193 2 109 18 193 2 110 18 193 2 111 18 193 2 112 18 193 2 113 18 193 2 114 18 193 2 115 18 193 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 18 193 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 18 193 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 7 254 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 7 254 0 214 7 254 0 215 6 149 0 235] 
#[1 18 197 0 214 6 5 0 215 18 197 0 238] 
#[1 8 2 0 11 8 2 0 214 8 2 0 215 18 201 2 83] 
#[0 8 6 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 110 0 1 2 110 0 3 2 110 0 5 2 110 0 6 2 110 0 7 2 110 0 9 2 110 0 11 2 110 0 12 2 110 0 14 2 110 0 15 2 110 0 19 2 110 0 20 2 110 0 22 2 110 0 23 2 110 0 24 2 110 0 25 2 110 0 26 2 110 0 27 2 110 0 34 2 110 0 35 2 110 0 116 2 110 0 118 2 110 0 125 2 110 0 130 2 110 0 150 2 110 0 151 18 205 0 190 2 110 0 207 2 110 0 209 2 110 0 211 2 110 0 215] 
#[1 8 10 0 1 8 10 0 3 8 10 0 4 1 251 0 5 8 10 0 6 8 10 0 7 8 10 0 8 8 10 0 9 8 10 0 10 8 10 0 11 8 10 0 12 8 10 0 13 8 10 0 14 8 10 0 15 8 10 0 16 8 10 0 17 8 10 0 19 8 10 0 20 8 10 0 21 8 10 0 22 8 10 0 23 8 10 0 24 8 10 0 25 8 10 0 26 8 10 0 27 8 10 0 28 8 10 0 32 8 10 0 34 8 10 0 35 8 10 0 38 8 10 0 45 8 10 0 80 8 10 0 83 8 10 0 87 8 10 0 90 1 255 0 99 8 10 0 105 8 10 0 108 8 10 0 110 8 10 0 115 8 10 0 116 8 10 0 118 8 10 0 121 8 10 0 123 8 10 0 125 8 10 0 130 8 10 0 146 8 10 0 150 8 10 0 151 8 10 0 152 8 10 0 171 8 10 0 177 8 10 0 179 8 10 0 186 8 10 0 188 8 10 0 190 8 10 0 201 5 209 0 204 8 10 0 207 8 10 0 209 8 10 0 210 8 10 0 211 8 10 0 212 3 186 0 213 8 10 0 214 8 10 0 215 18 209 2 79 18 209 2 80 18 209 2 85] 
#[1 18 213 0 6 3 137 0 215 18 213 0 236] 
#[1 8 14 0 6 8 14 0 11 8 14 0 215 18 217 1 186] 
#[1 6 53 0 3 2 29 0 5 2 3 0 6 6 57 0 7 6 61 0 9 2 3 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 2 3 0 215 6 149 0 235 13 245 2 73] 
#[1 18 221 0 6 3 137 0 215 18 221 0 236] 
#[0 8 22 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 18 225 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 225 1 92] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 18 229 1 42 13 125 1 43 13 125 1 44 13 125 1 45 13 125 1 52 13 125 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 229 1 92 13 205 2 47 13 205 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 205 2 54 13 205 2 55 4 1 2 56 13 205 2 63 13 205 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 205 2 97 13 205 2 98 13 205 2 99 13 205 2 100 13 205 2 101 13 205 2 102 13 205 2 103 13 205 2 104 13 205 2 105 13 205 2 106 13 205 2 107 13 205 2 108 13 205 2 109 13 205 2 110 13 205 2 111 13 205 2 112 13 205 2 113 13 205 2 114 13 205 2 115 13 205 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 205 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 205 2 159] 
#[0 8 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 34 0 3 1 34 0 4 0 19 0 5 1 34 0 6 1 34 0 7 1 34 0 8 1 34 0 9 1 34 0 10 1 34 0 11 1 34 0 12 1 34 0 13 2 162 0 14 1 34 0 15 1 34 0 16 1 34 0 17 1 34 0 19 1 34 0 20 1 34 0 21 1 34 0 22 1 34 0 23 1 34 0 24 1 34 0 25 1 34 0 26 1 34 0 27 1 34 0 28 2 85 0 29 1 34 0 32 1 34 0 34 1 34 0 35 1 34 0 38 1 34 0 45 1 34 0 80 1 34 0 83 1 34 0 87 1 34 0 90 1 34 0 99 1 34 0 105 1 34 0 108 1 34 0 110 1 34 0 115 1 34 0 116 1 34 0 118 1 34 0 121 1 34 0 123 1 34 0 125 1 34 0 130 1 34 0 146 1 34 0 150 1 34 0 151 1 34 0 152 1 34 0 171 1 34 0 177 1 34 0 179 1 34 0 186 1 34 0 188 1 34 0 190 1 34 0 201 1 34 0 207 1 34 0 209 1 34 0 210 1 34 0 211 1 34 0 212 1 34 0 214 1 34 0 215 2 89 0 235 2 93 1 93 2 97 1 94 2 101 1 95] 
#[1 18 233 0 6 3 137 0 215 18 233 0 236] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 6 13 2 47 6 13 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 6 13 2 54 6 13 2 55 4 1 2 56 6 13 2 63 6 13 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 6 17 2 86 18 237 2 90 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 6 13 2 97 6 13 2 98 6 13 2 99 6 13 2 100 6 13 2 101 6 13 2 102 6 13 2 103 6 13 2 104 6 13 2 105 6 13 2 106 6 13 2 107 6 13 2 108 6 13 2 109 6 13 2 110 6 13 2 111 6 13 2 112 6 13 2 113 6 13 2 114 6 13 2 115 6 13 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 6 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 6 13 2 159] 
#[0 8 30 0 11 0 214 0 215] 
#[0 8 34 0 6 0 11 0 215] 
#[1 8 38 0 3 8 38 0 4 2 7 0 5 8 38 0 6 6 57 0 7 8 38 0 8 6 61 0 9 8 38 0 10 8 38 0 11 6 65 0 12 8 38 0 13 6 69 0 15 8 38 0 16 8 38 0 17 8 38 0 19 8 38 0 20 8 38 0 21 8 38 0 22 8 38 0 23 8 38 0 24 8 38 0 25 8 38 0 26 8 38 0 27 8 38 0 28 8 38 0 32 8 38 0 34 8 38 0 35 8 38 0 38 8 38 0 45 8 38 0 80 8 38 0 83 8 38 0 87 8 38 0 90 8 38 0 99 8 38 0 105 8 38 0 108 8 38 0 110 8 38 0 115 8 38 0 116 8 38 0 118 8 38 0 121 8 38 0 123 8 38 0 125 6 125 0 130 8 38 0 146 8 38 0 150 8 38 0 151 8 38 0 152 8 38 0 171 8 38 0 177 8 38 0 179 8 38 0 186 8 38 0 188 8 38 0 190 8 38 0 201 8 38 0 207 6 141 0 209 8 38 0 210 6 145 0 211 8 38 0 212 8 38 0 214 8 38 0 215 6 149 0 235] 
#[1 8 42 0 3 8 42 0 4 2 11 0 5 8 42 0 6 8 42 0 7 8 42 0 8 8 42 0 9 8 42 0 10 8 42 0 11 8 42 0 12 8 42 0 13 8 42 0 15 8 42 0 16 8 42 0 17 8 42 0 19 8 42 0 20 8 42 0 21 8 42 0 22 8 42 0 23 8 42 0 24 8 42 0 25 8 42 0 26 8 42 0 27 8 42 0 28 8 42 0 32 8 42 0 34 8 42 0 35 8 42 0 38 8 42 0 45 8 42 0 80 8 42 0 83 8 42 0 87 8 42 0 90 8 42 0 99 8 42 0 105 8 42 0 108 8 42 0 110 8 42 0 115 8 42 0 116 8 42 0 118 8 42 0 121 8 42 0 123 8 42 0 125 8 42 0 130 8 42 0 146 8 42 0 150 8 42 0 151 8 42 0 152 8 42 0 171 8 42 0 177 8 42 0 179 8 42 0 186 8 42 0 188 8 42 0 190 8 42 0 201 8 42 0 207 8 42 0 209 8 42 0 210 6 145 0 211 8 42 0 212 8 42 0 214 8 42 0 215 6 149 0 235] 
#[1 8 46 0 3 8 46 0 4 2 15 0 5 8 46 0 6 6 57 0 7 8 46 0 8 8 46 0 9 8 46 0 10 8 46 0 11 8 46 0 12 8 46 0 13 6 69 0 15 8 46 0 16 8 46 0 17 8 46 0 19 8 46 0 20 8 46 0 21 8 46 0 22 8 46 0 23 8 46 0 24 8 46 0 25 8 46 0 26 8 46 0 27 8 46 0 28 8 46 0 32 8 46 0 34 8 46 0 35 8 46 0 38 8 46 0 45 8 46 0 80 8 46 0 83 8 46 0 87 8 46 0 90 8 46 0 99 8 46 0 105 8 46 0 108 8 46 0 110 8 46 0 115 8 46 0 116 8 46 0 118 8 46 0 121 8 46 0 123 8 46 0 125 6 125 0 130 8 46 0 146 8 46 0 150 8 46 0 151 8 46 0 152 8 46 0 171 8 46 0 177 8 46 0 179 8 46 0 186 8 46 0 188 8 46 0 190 8 46 0 201 8 46 0 207 6 141 0 209 8 46 0 210 6 145 0 211 8 46 0 212 8 46 0 214 8 46 0 215 6 149 0 235] 
#[1 8 50 0 3 8 50 0 4 2 19 0 5 8 50 0 6 6 57 0 7 8 50 0 8 8 50 0 9 8 50 0 10 8 50 0 11 8 50 0 12 8 50 0 13 6 69 0 15 8 50 0 16 8 50 0 17 8 50 0 19 8 50 0 20 8 50 0 21 8 50 0 22 8 50 0 23 8 50 0 24 8 50 0 25 8 50 0 26 8 50 0 27 8 50 0 28 8 50 0 32 8 50 0 34 8 50 0 35 8 50 0 38 8 50 0 45 8 50 0 80 8 50 0 83 8 50 0 87 8 50 0 90 8 50 0 99 8 50 0 105 8 50 0 108 8 50 0 110 8 50 0 115 8 50 0 116 8 50 0 118 8 50 0 121 8 50 0 123 8 50 0 125 6 125 0 130 8 50 0 146 8 50 0 150 8 50 0 151 8 50 0 152 8 50 0 171 8 50 0 177 8 50 0 179 8 50 0 186 8 50 0 188 8 50 0 190 8 50 0 201 8 50 0 207 6 141 0 209 8 50 0 210 6 145 0 211 8 50 0 212 8 50 0 214 8 50 0 215 6 149 0 235] 
#[1 8 54 0 3 8 54 0 4 2 23 0 5 8 54 0 6 8 54 0 7 8 54 0 8 8 54 0 9 8 54 0 10 8 54 0 11 8 54 0 12 8 54 0 13 8 54 0 15 8 54 0 16 8 54 0 17 8 54 0 19 8 54 0 20 8 54 0 21 8 54 0 22 8 54 0 23 8 54 0 24 8 54 0 25 8 54 0 26 8 54 0 27 8 54 0 28 8 54 0 32 8 54 0 34 8 54 0 35 8 54 0 38 8 54 0 45 8 54 0 80 8 54 0 83 8 54 0 87 8 54 0 90 8 54 0 99 8 54 0 105 8 54 0 108 8 54 0 110 8 54 0 115 8 54 0 116 8 54 0 118 8 54 0 121 8 54 0 123 8 54 0 125 8 54 0 130 8 54 0 146 8 54 0 150 8 54 0 151 8 54 0 152 8 54 0 171 8 54 0 177 8 54 0 179 8 54 0 186 8 54 0 188 8 54 0 190 8 54 0 201 8 54 0 207 8 54 0 209 8 54 0 210 6 145 0 211 8 54 0 212 8 54 0 214 8 54 0 215 6 149 0 235] 
#[1 6 53 0 3 8 58 0 4 2 27 0 5 8 58 0 6 6 57 0 7 8 58 0 8 6 61 0 9 8 58 0 10 8 58 0 11 6 65 0 12 8 58 0 13 6 69 0 15 8 58 0 16 8 58 0 17 6 77 0 20 8 58 0 21 6 101 0 27 8 58 0 28 8 58 0 32 8 58 0 34 8 58 0 35 8 58 0 38 8 58 0 45 8 58 0 80 8 58 0 83 8 58 0 87 8 58 0 90 8 58 0 99 8 58 0 105 8 58 0 108 8 58 0 110 8 58 0 115 8 58 0 121 8 58 0 123 6 125 0 130 8 58 0 146 8 58 0 150 8 58 0 151 8 58 0 152 8 58 0 171 8 58 0 177 8 58 0 179 8 58 0 186 8 58 0 188 8 58 0 190 8 58 0 201 8 58 0 207 6 141 0 209 8 58 0 210 6 145 0 211 8 58 0 212 8 58 0 214 8 58 0 215 6 149 0 235] 
#[1 6 53 0 3 8 62 0 4 2 31 0 5 8 62 0 6 6 57 0 7 8 62 0 8 6 61 0 9 8 62 0 10 8 62 0 11 6 65 0 12 8 62 0 13 6 69 0 15 8 62 0 16 8 62 0 17 8 62 0 19 8 62 0 20 8 62 0 21 8 62 0 22 8 62 0 23 8 62 0 24 8 62 0 25 8 62 0 26 8 62 0 27 8 62 0 28 8 62 0 32 8 62 0 34 8 62 0 35 8 62 0 38 8 62 0 45 8 62 0 80 8 62 0 83 8 62 0 87 8 62 0 90 8 62 0 99 8 62 0 105 8 62 0 108 8 62 0 110 8 62 0 115 8 62 0 116 8 62 0 118 8 62 0 121 8 62 0 123 8 62 0 125 6 125 0 130 8 62 0 146 8 62 0 150 8 62 0 151 8 62 0 152 8 62 0 171 8 62 0 177 8 62 0 179 8 62 0 186 8 62 0 188 8 62 0 190 8 62 0 201 8 62 0 207 6 141 0 209 8 62 0 210 6 145 0 211 8 62 0 212 8 62 0 214 8 62 0 215 6 149 0 235] 
#[1 6 53 0 3 8 66 0 4 2 35 0 5 8 66 0 6 6 57 0 7 8 66 0 8 6 61 0 9 8 66 0 10 8 66 0 11 6 65 0 12 8 66 0 13 6 69 0 15 8 66 0 16 8 66 0 17 6 77 0 20 8 66 0 21 6 101 0 27 8 66 0 28 8 66 0 32 8 66 0 34 8 66 0 35 8 66 0 38 8 66 0 45 8 66 0 80 8 66 0 83 8 66 0 87 8 66 0 90 8 66 0 99 8 66 0 105 8 66 0 108 8 66 0 110 8 66 0 115 8 66 0 121 8 66 0 123 6 125 0 130 8 66 0 146 8 66 0 150 8 66 0 151 8 66 0 152 8 66 0 171 8 66 0 177 8 66 0 179 8 66 0 186 8 66 0 188 8 66 0 190 8 66 0 201 8 66 0 207 6 141 0 209 8 66 0 210 6 145 0 211 8 66 0 212 8 66 0 214 8 66 0 215 6 149 0 235] 
#[1 6 53 0 3 8 70 0 4 2 39 0 5 8 70 0 6 6 57 0 7 8 70 0 8 6 61 0 9 8 70 0 10 8 70 0 11 6 65 0 12 8 70 0 13 6 69 0 15 8 70 0 16 8 70 0 17 6 77 0 20 8 70 0 21 6 101 0 27 8 70 0 28 8 70 0 32 8 70 0 34 8 70 0 35 8 70 0 38 8 70 0 45 8 70 0 80 8 70 0 83 8 70 0 87 8 70 0 90 8 70 0 99 8 70 0 105 8 70 0 108 8 70 0 110 8 70 0 115 8 70 0 121 8 70 0 123 6 125 0 130 8 70 0 146 8 70 0 150 8 70 0 151 8 70 0 152 8 70 0 171 8 70 0 177 8 70 0 179 8 70 0 186 8 70 0 188 8 70 0 190 8 70 0 201 8 70 0 207 6 141 0 209 8 70 0 210 6 145 0 211 8 70 0 212 8 70 0 214 8 70 0 215 6 149 0 235] 
#[1 6 53 0 3 8 74 0 4 2 43 0 5 8 74 0 6 6 57 0 7 8 74 0 8 6 61 0 9 8 74 0 10 8 74 0 11 6 65 0 12 8 74 0 13 6 69 0 15 8 74 0 16 8 74 0 17 6 77 0 20 8 74 0 21 6 101 0 27 8 74 0 28 8 74 0 32 8 74 0 34 8 74 0 35 8 74 0 38 8 74 0 45 8 74 0 80 8 74 0 83 8 74 0 87 8 74 0 90 8 74 0 99 8 74 0 105 8 74 0 108 8 74 0 110 8 74 0 115 8 74 0 121 8 74 0 123 6 125 0 130 8 74 0 146 8 74 0 150 8 74 0 151 8 74 0 152 8 74 0 171 8 74 0 177 8 74 0 179 8 74 0 186 8 74 0 188 8 74 0 190 8 74 0 201 8 74 0 207 6 141 0 209 8 74 0 210 6 145 0 211 8 74 0 212 8 74 0 214 8 74 0 215 6 149 0 235] 
#[1 6 53 0 3 8 78 0 4 2 47 0 5 8 78 0 6 6 57 0 7 8 78 0 8 6 61 0 9 8 78 0 10 8 78 0 11 6 65 0 12 8 78 0 13 6 69 0 15 8 78 0 16 8 78 0 17 6 77 0 20 8 78 0 21 6 101 0 27 8 78 0 28 8 78 0 32 8 78 0 34 8 78 0 35 8 78 0 38 8 78 0 45 8 78 0 80 8 78 0 83 8 78 0 87 8 78 0 90 8 78 0 99 8 78 0 105 8 78 0 108 8 78 0 110 8 78 0 115 8 78 0 121 8 78 0 123 6 125 0 130 8 78 0 146 8 78 0 150 8 78 0 151 8 78 0 152 8 78 0 171 8 78 0 177 8 78 0 179 8 78 0 186 8 78 0 188 8 78 0 190 8 78 0 201 8 78 0 207 6 141 0 209 8 78 0 210 6 145 0 211 8 78 0 212 8 78 0 214 8 78 0 215 6 149 0 235] 
#[1 6 53 0 3 8 82 0 4 2 51 0 5 8 82 0 6 6 57 0 7 8 82 0 8 6 61 0 9 8 82 0 10 8 82 0 11 6 65 0 12 8 82 0 13 6 69 0 15 8 82 0 16 8 82 0 17 6 77 0 20 8 82 0 21 6 101 0 27 8 82 0 28 8 82 0 32 8 82 0 34 8 82 0 35 8 82 0 38 8 82 0 45 8 82 0 80 8 82 0 83 8 82 0 87 8 82 0 90 8 82 0 99 8 82 0 105 8 82 0 108 8 82 0 110 8 82 0 115 8 82 0 121 8 82 0 123 6 125 0 130 8 82 0 146 8 82 0 150 8 82 0 151 8 82 0 152 8 82 0 171 8 82 0 177 8 82 0 179 8 82 0 186 8 82 0 188 8 82 0 190 8 82 0 201 8 82 0 207 6 141 0 209 8 82 0 210 6 145 0 211 8 82 0 212 8 82 0 214 8 82 0 215 6 149 0 235] 
#[1 6 53 0 3 8 86 0 4 2 55 0 5 8 86 0 6 6 57 0 7 8 86 0 8 6 61 0 9 8 86 0 10 8 86 0 11 6 65 0 12 8 86 0 13 6 69 0 15 8 86 0 16 8 86 0 17 8 86 0 19 8 86 0 20 8 86 0 21 8 86 0 22 8 86 0 23 8 86 0 24 8 86 0 25 8 86 0 26 8 86 0 27 8 86 0 28 8 86 0 32 8 86 0 34 8 86 0 35 8 86 0 38 8 86 0 45 8 86 0 80 8 86 0 83 8 86 0 87 8 86 0 90 8 86 0 99 8 86 0 105 8 86 0 108 8 86 0 110 8 86 0 115 8 86 0 116 8 86 0 118 8 86 0 121 8 86 0 123 8 86 0 125 6 125 0 130 8 86 0 146 8 86 0 150 8 86 0 151 8 86 0 152 8 86 0 171 8 86 0 177 8 86 0 179 8 86 0 186 8 86 0 188 8 86 0 190 8 86 0 201 8 86 0 207 6 141 0 209 8 86 0 210 6 145 0 211 8 86 0 212 8 86 0 214 8 86 0 215 6 149 0 235] 
#[1 6 53 0 3 8 90 0 4 2 59 0 5 8 90 0 6 6 57 0 7 8 90 0 8 6 61 0 9 8 90 0 10 8 90 0 11 6 65 0 12 8 90 0 13 6 69 0 15 8 90 0 16 8 90 0 17 6 73 0 19 6 77 0 20 8 90 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 90 0 28 8 90 0 32 8 90 0 34 8 90 0 35 8 90 0 38 8 90 0 45 8 90 0 80 8 90 0 83 8 90 0 87 8 90 0 90 8 90 0 99 8 90 0 105 8 90 0 108 8 90 0 110 8 90 0 115 6 113 0 116 6 117 0 118 8 90 0 121 8 90 0 123 6 121 0 125 6 125 0 130 8 90 0 146 8 90 0 150 8 90 0 151 8 90 0 152 8 90 0 171 8 90 0 177 8 90 0 179 8 90 0 186 8 90 0 188 8 90 0 190 8 90 0 201 8 90 0 207 6 141 0 209 8 90 0 210 6 145 0 211 8 90 0 212 8 90 0 214 8 90 0 215 6 149 0 235] 
#[1 6 53 0 3 8 94 0 4 2 63 0 5 8 94 0 6 6 57 0 7 8 94 0 8 6 61 0 9 8 94 0 10 8 94 0 11 6 65 0 12 8 94 0 13 6 69 0 15 8 94 0 16 8 94 0 17 6 73 0 19 6 77 0 20 8 94 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 94 0 28 8 94 0 32 8 94 0 34 8 94 0 35 8 94 0 38 8 94 0 45 8 94 0 80 8 94 0 83 8 94 0 87 8 94 0 90 8 94 0 99 8 94 0 105 8 94 0 108 8 94 0 110 8 94 0 115 6 113 0 116 6 117 0 118 8 94 0 121 8 94 0 123 6 121 0 125 6 125 0 130 8 94 0 146 8 94 0 150 8 94 0 151 8 94 0 152 8 94 0 171 8 94 0 177 8 94 0 179 8 94 0 186 8 94 0 188 8 94 0 190 8 94 0 201 8 94 0 207 6 141 0 209 8 94 0 210 6 145 0 211 8 94 0 212 8 94 0 214 8 94 0 215 6 149 0 235] 
#[1 6 53 0 3 8 98 0 4 2 67 0 5 8 98 0 6 6 57 0 7 8 98 0 8 6 61 0 9 8 98 0 10 8 98 0 11 6 65 0 12 8 98 0 13 6 69 0 15 8 98 0 16 8 98 0 17 6 77 0 20 8 98 0 21 6 101 0 27 8 98 0 28 8 98 0 32 8 98 0 34 8 98 0 35 8 98 0 38 8 98 0 45 8 98 0 80 8 98 0 83 8 98 0 87 8 98 0 90 8 98 0 99 8 98 0 105 8 98 0 108 8 98 0 110 8 98 0 115 8 98 0 121 8 98 0 123 6 125 0 130 8 98 0 146 8 98 0 150 8 98 0 151 8 98 0 152 8 98 0 171 8 98 0 177 8 98 0 179 8 98 0 186 8 98 0 188 8 98 0 190 8 98 0 201 8 98 0 207 6 141 0 209 8 98 0 210 6 145 0 211 8 98 0 212 8 98 0 214 8 98 0 215 6 149 0 235] 
#[1 6 53 0 3 8 102 0 4 2 71 0 5 8 102 0 6 6 57 0 7 8 102 0 8 6 61 0 9 8 102 0 10 8 102 0 11 6 65 0 12 8 102 0 13 6 69 0 15 8 102 0 16 8 102 0 17 6 77 0 20 8 102 0 21 6 101 0 27 8 102 0 28 8 102 0 32 8 102 0 34 8 102 0 35 8 102 0 38 8 102 0 45 8 102 0 80 8 102 0 83 8 102 0 87 8 102 0 90 8 102 0 99 8 102 0 105 8 102 0 108 8 102 0 110 8 102 0 115 8 102 0 121 8 102 0 123 6 125 0 130 8 102 0 146 8 102 0 150 8 102 0 151 8 102 0 152 8 102 0 171 8 102 0 177 8 102 0 179 8 102 0 186 8 102 0 188 8 102 0 190 8 102 0 201 8 102 0 207 6 141 0 209 8 102 0 210 6 145 0 211 8 102 0 212 8 102 0 214 8 102 0 215 6 149 0 235] 
#[1 6 53 0 3 8 106 0 4 2 75 0 5 8 106 0 6 6 57 0 7 8 106 0 8 6 61 0 9 8 106 0 10 8 106 0 11 6 65 0 12 8 106 0 13 6 69 0 15 8 106 0 16 8 106 0 17 6 77 0 20 8 106 0 21 6 101 0 27 8 106 0 28 8 106 0 32 8 106 0 34 8 106 0 35 8 106 0 38 8 106 0 45 8 106 0 80 8 106 0 83 8 106 0 87 8 106 0 90 8 106 0 99 8 106 0 105 8 106 0 108 8 106 0 110 8 106 0 115 8 106 0 121 8 106 0 123 6 125 0 130 8 106 0 146 8 106 0 150 8 106 0 151 8 106 0 152 8 106 0 171 8 106 0 177 8 106 0 179 8 106 0 186 8 106 0 188 8 106 0 190 8 106 0 201 8 106 0 207 6 141 0 209 8 106 0 210 6 145 0 211 8 106 0 212 8 106 0 214 8 106 0 215 6 149 0 235] 
#[1 8 110 0 3 8 110 0 4 2 79 0 5 8 110 0 6 6 57 0 7 8 110 0 8 8 110 0 9 8 110 0 10 8 110 0 11 8 110 0 12 8 110 0 13 6 69 0 15 8 110 0 16 8 110 0 17 8 110 0 19 8 110 0 20 8 110 0 21 8 110 0 22 8 110 0 23 8 110 0 24 8 110 0 25 8 110 0 26 8 110 0 27 8 110 0 28 8 110 0 32 8 110 0 34 8 110 0 35 8 110 0 38 8 110 0 45 8 110 0 80 8 110 0 83 8 110 0 87 8 110 0 90 8 110 0 99 8 110 0 105 8 110 0 108 8 110 0 110 8 110 0 115 8 110 0 116 8 110 0 118 8 110 0 121 8 110 0 123 8 110 0 125 8 110 0 130 8 110 0 146 8 110 0 150 8 110 0 151 8 110 0 152 8 110 0 171 8 110 0 177 8 110 0 179 8 110 0 186 8 110 0 188 8 110 0 190 8 110 0 201 8 110 0 207 6 141 0 209 8 110 0 210 6 145 0 211 8 110 0 212 8 110 0 214 8 110 0 215 6 149 0 235] 
#[1 6 53 0 3 8 114 0 4 2 83 0 5 8 114 0 6 6 57 0 7 8 114 0 8 6 61 0 9 8 114 0 10 8 114 0 11 6 65 0 12 8 114 0 13 6 69 0 15 8 114 0 16 8 114 0 17 6 73 0 19 6 77 0 20 8 114 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 114 0 28 8 114 0 32 6 105 0 34 6 109 0 35 8 114 0 38 8 114 0 45 8 114 0 80 8 114 0 83 8 114 0 87 8 114 0 90 8 114 0 99 8 114 0 105 8 114 0 108 8 114 0 110 8 114 0 115 6 113 0 116 6 117 0 118 8 114 0 121 8 114 0 123 6 121 0 125 6 125 0 130 8 114 0 146 8 114 0 150 8 114 0 151 8 114 0 152 8 114 0 171 8 114 0 177 8 114 0 179 8 114 0 186 8 114 0 188 8 114 0 190 8 114 0 201 8 114 0 207 6 141 0 209 8 114 0 210 6 145 0 211 8 114 0 212 8 114 0 214 8 114 0 215 6 149 0 235] 
#[1 6 53 0 3 8 118 0 4 2 87 0 5 8 118 0 6 6 57 0 7 8 118 0 8 6 61 0 9 8 118 0 10 8 118 0 11 6 65 0 12 8 118 0 13 6 69 0 15 8 118 0 16 8 118 0 17 6 73 0 19 6 77 0 20 8 118 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 118 0 28 8 118 0 32 6 105 0 34 6 109 0 35 8 118 0 38 8 118 0 45 8 118 0 80 8 118 0 83 8 118 0 87 8 118 0 90 8 118 0 99 8 118 0 105 8 118 0 108 8 118 0 110 8 118 0 115 6 113 0 116 6 117 0 118 8 118 0 121 8 118 0 123 6 121 0 125 6 125 0 130 8 118 0 146 8 118 0 150 8 118 0 151 8 118 0 152 8 118 0 171 8 118 0 177 8 118 0 179 8 118 0 186 8 118 0 188 8 118 0 190 8 118 0 201 8 118 0 207 6 141 0 209 8 118 0 210 6 145 0 211 8 118 0 212 8 118 0 214 8 118 0 215 6 149 0 235] 
#[1 6 53 0 3 8 122 0 4 2 91 0 5 8 122 0 6 6 57 0 7 8 122 0 8 6 61 0 9 8 122 0 10 8 122 0 11 6 65 0 12 8 122 0 13 6 69 0 15 8 122 0 16 8 122 0 17 6 73 0 19 6 77 0 20 8 122 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 122 0 28 8 122 0 32 6 105 0 34 6 109 0 35 8 122 0 38 8 122 0 45 8 122 0 80 8 122 0 83 8 122 0 87 8 122 0 90 8 122 0 99 8 122 0 105 8 122 0 108 8 122 0 110 8 122 0 115 6 113 0 116 6 117 0 118 8 122 0 121 8 122 0 123 6 121 0 125 6 125 0 130 8 122 0 146 6 129 0 150 6 133 0 151 8 122 0 152 8 122 0 171 8 122 0 177 8 122 0 179 8 122 0 186 8 122 0 188 8 122 0 190 8 122 0 201 8 122 0 207 6 141 0 209 8 122 0 210 6 145 0 211 8 122 0 212 8 122 0 214 8 122 0 215 6 149 0 235] 
#[1 8 126 0 3 8 126 0 4 2 95 0 5 8 126 0 6 6 57 0 7 8 126 0 8 8 126 0 9 8 126 0 10 8 126 0 11 8 126 0 12 8 126 0 13 6 69 0 15 8 126 0 16 8 126 0 17 8 126 0 19 8 126 0 20 8 126 0 21 8 126 0 22 8 126 0 23 8 126 0 24 8 126 0 25 8 126 0 26 8 126 0 27 8 126 0 28 8 126 0 32 8 126 0 34 8 126 0 35 8 126 0 38 8 126 0 45 8 126 0 80 8 126 0 83 8 126 0 87 8 126 0 90 8 126 0 99 8 126 0 105 8 126 0 108 8 126 0 110 8 126 0 115 8 126 0 116 8 126 0 118 8 126 0 121 8 126 0 123 8 126 0 125 8 126 0 130 8 126 0 146 8 126 0 150 8 126 0 151 8 126 0 152 8 126 0 171 8 126 0 177 8 126 0 179 8 126 0 186 8 126 0 188 8 126 0 190 8 126 0 201 8 126 0 207 8 126 0 209 8 126 0 210 6 145 0 211 8 126 0 212 8 126 0 214 8 126 0 215 6 149 0 235] 
#[1 8 130 0 3 8 130 0 4 2 99 0 5 8 130 0 6 8 130 0 7 8 130 0 8 8 130 0 9 8 130 0 10 8 130 0 11 8 130 0 12 8 130 0 13 8 130 0 15 8 130 0 16 8 130 0 17 8 130 0 19 8 130 0 20 8 130 0 21 8 130 0 22 8 130 0 23 8 130 0 24 8 130 0 25 8 130 0 26 8 130 0 27 8 130 0 28 8 130 0 32 8 130 0 34 8 130 0 35 8 130 0 38 8 130 0 45 8 130 0 80 8 130 0 83 8 130 0 87 8 130 0 90 8 130 0 99 8 130 0 105 8 130 0 108 8 130 0 110 8 130 0 115 8 130 0 116 8 130 0 118 8 130 0 121 8 130 0 123 8 130 0 125 8 130 0 130 8 130 0 146 8 130 0 150 8 130 0 151 8 130 0 152 8 130 0 171 8 130 0 177 8 130 0 179 8 130 0 186 8 130 0 188 8 130 0 190 8 130 0 201 8 130 0 207 8 130 0 209 8 130 0 210 6 145 0 211 8 130 0 212 8 130 0 214 8 130 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 241 2 47 18 241 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 18 241 2 54 18 241 2 55 4 1 2 56 18 241 2 63 18 241 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 18 241 2 97 18 241 2 98 18 241 2 99 18 241 2 100 18 241 2 101 18 241 2 102 18 241 2 103 18 241 2 104 18 241 2 105 18 241 2 106 18 241 2 107 18 241 2 108 18 241 2 109 18 241 2 110 18 241 2 111 18 241 2 112 18 241 2 113 18 241 2 114 18 241 2 115 18 241 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 18 241 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 18 241 2 159] 
#[1 8 134 0 6 2 103 0 11 8 134 0 215 14 1 0 234 14 5 2 72] 
#[0 8 138 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 17 0 228 18 245 2 74] 
#[1 2 241 0 1 2 29 0 5 8 142 0 6 2 249 0 9 8 142 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 8 142 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 18 249 2 47 18 249 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 18 249 2 54 18 249 2 55 4 1 2 56 18 249 2 63 18 249 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 18 249 2 97 18 249 2 98 18 249 2 99 18 249 2 100 18 249 2 101 18 249 2 102 18 249 2 103 18 249 2 104 18 249 2 105 18 249 2 106 18 249 2 107 18 249 2 108 18 249 2 109 18 249 2 110 18 249 2 111 18 249 2 112 18 249 2 113 18 249 2 114 18 249 2 115 18 249 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 18 249 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 18 249 2 159] 
#[0 8 146 0 6 0 11 0 215] 
#[1 8 150 0 1 8 150 0 3 8 150 0 4 2 107 0 5 8 150 0 6 8 150 0 7 8 150 0 8 8 150 0 9 8 150 0 10 8 150 0 11 8 150 0 12 8 150 0 13 8 150 0 14 8 150 0 15 8 150 0 16 8 150 0 17 8 150 0 19 8 150 0 20 8 150 0 21 8 150 0 22 8 150 0 23 8 150 0 24 8 150 0 25 8 150 0 26 8 150 0 27 8 150 0 28 8 150 0 32 8 150 0 34 8 150 0 35 8 150 0 38 8 150 0 45 8 150 0 80 8 150 0 83 8 150 0 87 8 150 0 90 8 150 0 99 8 150 0 105 8 150 0 108 8 150 0 110 8 150 0 115 8 150 0 116 8 150 0 118 8 150 0 121 8 150 0 123 8 150 0 125 8 150 0 130 8 150 0 146 8 150 0 150 8 150 0 151 8 150 0 152 8 150 0 171 8 150 0 177 8 150 0 179 8 150 0 186 8 150 0 188 8 150 0 190 8 150 0 201 8 150 0 207 8 150 0 209 8 150 0 210 8 150 0 211 8 150 0 212 8 150 0 214 8 150 0 215 18 253 0 235] 
#[0 19 1 0 144] 
#[0 8 154 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 5 0 215] 
#[0 19 9 0 88] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 19 13 0 17 9 77 0 30 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 8 158 0 67 8 158 0 68 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 9 229 0 81 3 85 0 82 9 97 0 84 1 65 0 85 8 158 0 87 2 111 0 88 9 105 0 91 9 109 0 92 9 113 0 94 8 158 0 96 9 117 0 97 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 9 125 0 107 1 65 0 113 1 186 0 120 1 65 0 126 8 158 0 127 3 105 0 128 9 129 0 129 3 109 0 134 3 113 0 135 3 117 0 138 8 158 0 139 3 121 0 140 1 5 0 143 9 133 0 146 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 9 157 0 171 1 65 0 175 1 65 0 176 9 229 0 178 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 9 173 0 189 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 9 185 0 202 9 189 0 204 9 193 0 208 3 133 0 213 19 17 0 215 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 8 158 0 226 3 165 0 227 9 205 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 21 1 216 19 25 1 218 19 21 1 220 9 221 1 221 19 29 1 222 19 33 1 223 19 37 1 224 19 21 1 225 9 229 1 226 19 21 1 227 19 21 1 228 19 21 1 229 19 21 1 230 19 21 1 231 19 21 1 232 19 21 1 233 19 21 1 234 19 21 1 235 19 21 1 237 19 21 1 238 19 21 1 239 19 21 1 240 19 21 1 241 19 21 1 245 19 21 1 247 19 21 2 0 19 21 2 1 19 21 2 2 19 21 2 3 19 21 2 4 19 21 2 6 19 21 2 11 19 21 2 12 19 21 2 13 19 21 2 14 19 21 2 18 19 21 2 19 19 21 2 20 19 21 2 21 19 21 2 23 19 21 2 25 19 21 2 26 19 21 2 27 19 21 2 29 19 21 2 31 19 21 2 32 19 21 2 33 19 21 2 34 19 21 2 35 19 21 2 40 19 21 2 44 19 21 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 19 41 0 37 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 19 45 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 49 2 47 19 49 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 49 2 54 19 49 2 55 4 1 2 56 19 49 2 63 19 49 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 49 2 97 19 49 2 98 19 49 2 99 19 49 2 100 19 49 2 101 19 49 2 102 19 49 2 103 19 49 2 104 19 49 2 105 19 49 2 106 19 49 2 107 19 49 2 108 19 49 2 109 19 49 2 110 19 49 2 111 19 49 2 112 19 49 2 113 19 49 2 114 19 49 2 115 19 49 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 49 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 49 2 159] 
#[1 19 53 0 6 3 137 0 215 19 53 0 236] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 57 0 234 6 149 0 235] 
#[1 6 53 0 3 8 162 0 4 2 115 0 5 8 162 0 6 6 57 0 7 8 162 0 8 6 61 0 9 8 162 0 10 8 162 0 11 6 65 0 12 8 162 0 13 6 69 0 15 8 162 0 16 8 162 0 17 6 73 0 19 6 77 0 20 8 162 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 162 0 28 8 162 0 32 6 105 0 34 6 109 0 35 8 162 0 38 8 162 0 45 8 162 0 80 8 162 0 83 8 162 0 87 8 162 0 90 8 162 0 99 8 162 0 105 8 162 0 108 8 162 0 110 8 162 0 115 6 113 0 116 6 117 0 118 8 162 0 121 8 162 0 123 6 121 0 125 6 125 0 130 8 162 0 146 6 129 0 150 6 133 0 151 8 162 0 152 8 162 0 171 8 162 0 177 8 162 0 179 8 162 0 186 8 162 0 188 8 162 0 190 8 162 0 201 6 137 0 207 6 141 0 209 8 162 0 210 6 145 0 211 8 162 0 212 8 162 0 214 8 162 0 215 6 149 0 235] 
#[0 8 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 182 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 8 186 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 127 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 19 61 1 217 14 29 1 219] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 65 2 47 19 65 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 65 2 54 19 65 2 55 4 1 2 56 19 65 2 63 19 65 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 65 2 97 19 65 2 98 19 65 2 99 19 65 2 100 19 65 2 101 19 65 2 102 19 65 2 103 19 65 2 104 19 65 2 105 19 65 2 106 19 65 2 107 19 65 2 108 19 65 2 109 19 65 2 110 19 65 2 111 19 65 2 112 19 65 2 113 19 65 2 114 19 65 2 115 19 65 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 65 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 65 2 159] 
#[0 8 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 8 194 0 4 2 119 0 5 8 194 0 6 6 57 0 7 8 194 0 8 6 61 0 9 8 194 0 10 8 194 0 11 6 65 0 12 8 194 0 13 6 69 0 15 8 194 0 16 8 194 0 17 6 73 0 19 6 77 0 20 8 194 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 194 0 28 8 194 0 32 6 105 0 34 6 109 0 35 8 194 0 38 8 194 0 45 8 194 0 80 8 194 0 83 8 194 0 87 8 194 0 90 8 194 0 99 8 194 0 105 8 194 0 108 8 194 0 110 8 194 0 115 6 113 0 116 6 117 0 118 8 194 0 121 8 194 0 123 6 121 0 125 6 125 0 130 8 194 0 146 6 129 0 150 6 133 0 151 8 194 0 152 8 194 0 171 8 194 0 177 8 194 0 179 8 194 0 186 8 194 0 188 8 194 0 190 8 194 0 201 6 137 0 207 6 141 0 209 8 194 0 210 6 145 0 211 8 194 0 212 8 194 0 214 8 194 0 215 6 149 0 235 19 69 2 43] 
#[1 6 53 0 3 8 198 0 4 2 123 0 5 8 198 0 6 6 57 0 7 8 198 0 8 6 61 0 9 8 198 0 10 8 198 0 11 6 65 0 12 8 198 0 13 6 69 0 15 8 198 0 16 8 198 0 17 6 73 0 19 6 77 0 20 8 198 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 8 198 0 28 8 198 0 32 6 105 0 34 6 109 0 35 8 198 0 38 8 198 0 45 8 198 0 80 8 198 0 83 8 198 0 87 8 198 0 90 8 198 0 99 8 198 0 105 8 198 0 108 8 198 0 110 8 198 0 115 6 113 0 116 6 117 0 118 8 198 0 121 8 198 0 123 6 121 0 125 6 125 0 130 8 198 0 146 6 129 0 150 6 133 0 151 8 198 0 152 8 198 0 171 8 198 0 177 8 198 0 179 8 198 0 186 8 198 0 188 8 198 0 190 8 198 0 201 6 137 0 207 6 141 0 209 8 198 0 210 6 145 0 211 8 198 0 212 8 198 0 214 8 198 0 215 6 149 0 235] 
#[0 8 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 218 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 226 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 14 133 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 73 2 7 14 141 2 47 14 141 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 141 2 54 14 141 2 55 4 1 2 56 14 141 2 63 14 141 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 141 2 97 14 141 2 98 14 141 2 99 14 141 2 100 14 141 2 101 14 141 2 102 14 141 2 103 14 141 2 104 14 141 2 105 14 141 2 106 14 141 2 107 14 141 2 108 14 141 2 109 14 141 2 110 14 141 2 111 14 141 2 112 14 141 2 113 14 141 2 114 14 141 2 115 14 141 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 141 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 141 2 159] 
#[1 2 134 0 1 2 134 0 3 1 155 0 5 2 134 0 7 2 134 0 9 2 134 0 12 0 59 0 14 2 134 0 15 2 134 0 19 2 134 0 20 2 134 0 22 2 134 0 23 2 127 0 24 2 134 0 25 2 134 0 26 2 134 0 27 2 131 0 29 2 134 0 34 2 134 0 35 8 242 0 37 2 127 0 110 2 134 0 116 2 134 0 118 2 134 0 125 2 134 0 130 2 134 0 150 2 134 0 151 2 134 0 207 2 134 0 209 2 134 0 211 19 81 0 235 2 37 1 47 2 41 1 48 19 85 1 54 19 89 1 56 8 5 1 93 2 97 1 94 2 101 1 95 19 93 1 98 8 13 1 183] 
#[1 2 65 0 24 19 97 0 239] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 8 246 0 110 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 6 149 0 235] 
#[0 5 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 8 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 101 2 47 19 101 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 101 2 54 19 101 2 55 4 1 2 56 19 101 2 63 19 101 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 101 2 97 19 101 2 98 19 101 2 99 19 101 2 100 19 101 2 101 19 101 2 102 19 101 2 103 19 101 2 104 19 101 2 105 19 101 2 106 19 101 2 107 19 101 2 108 19 101 2 109 19 101 2 110 19 101 2 111 19 101 2 112 19 101 2 113 19 101 2 114 19 101 2 115 19 101 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 101 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 19 105 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 19 109 0 188 6 137 0 207 6 141 0 209 6 145 0 211 19 113 0 215 6 149 0 235] 
#[1 2 29 0 5 19 117 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 121 2 47 19 121 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 121 2 54 19 121 2 55 4 1 2 56 19 121 2 63 19 121 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 121 2 97 19 121 2 98 19 121 2 99 19 121 2 100 19 121 2 101 19 121 2 102 19 121 2 103 19 121 2 104 19 121 2 105 19 121 2 106 19 121 2 107 19 121 2 108 19 121 2 109 19 121 2 110 19 121 2 111 19 121 2 112 19 121 2 113 19 121 2 114 19 121 2 115 19 121 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 121 2 159] 
#[1 19 125 0 104 19 129 0 168 19 133 2 22 19 133 2 26] 
#[1 8 254 0 3 8 254 0 4 2 135 0 5 8 254 0 6 8 254 0 7 8 254 0 8 8 254 0 9 8 254 0 10 8 254 0 11 8 254 0 12 8 254 0 13 8 254 0 15 8 254 0 16 8 254 0 17 8 254 0 19 8 254 0 20 8 254 0 21 8 254 0 22 8 254 0 23 8 254 0 24 8 254 0 25 8 254 0 26 8 254 0 27 8 254 0 28 8 254 0 32 8 254 0 34 8 254 0 35 8 254 0 38 8 254 0 45 8 254 0 80 8 254 0 83 8 254 0 87 8 254 0 90 8 254 0 99 8 254 0 105 8 254 0 108 8 254 0 110 8 254 0 115 8 254 0 116 8 254 0 118 8 254 0 121 8 254 0 123 8 254 0 125 8 254 0 130 8 254 0 146 8 254 0 150 8 254 0 151 8 254 0 152 8 254 0 171 8 254 0 177 8 254 0 179 8 254 0 186 8 254 0 188 8 254 0 190 8 254 0 201 8 254 0 207 8 254 0 209 8 254 0 210 8 254 0 211 8 254 0 212 8 254 0 214 8 254 0 215 19 141 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 145 2 36 14 185 2 39 14 189 2 47 14 189 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 189 2 54 14 189 2 55 4 1 2 56 14 189 2 63 14 189 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 189 2 97 14 189 2 98 14 189 2 99 14 189 2 100 14 189 2 101 14 189 2 102 14 189 2 103 14 189 2 104 14 189 2 105 14 189 2 106 14 189 2 107 14 189 2 108 14 189 2 109 14 189 2 110 14 189 2 111 14 189 2 112 14 189 2 113 14 189 2 114 14 189 2 115 14 189 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 189 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 189 2 159] 
#[0 9 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 9 6 0 3 9 6 0 4 9 6 0 5 9 6 0 6 9 6 0 7 9 6 0 8 9 6 0 9 9 6 0 10 9 6 0 11 9 6 0 12 9 6 0 13 9 6 0 15 9 6 0 16 9 6 0 17 9 6 0 19 9 6 0 20 9 6 0 21 9 6 0 22 9 6 0 23 9 6 0 24 9 6 0 25 9 6 0 26 9 6 0 27 9 6 0 28 9 6 0 32 9 6 0 34 9 6 0 35 9 6 0 38 9 6 0 45 9 6 0 80 9 6 0 83 9 6 0 87 9 6 0 90 9 6 0 99 9 6 0 105 9 6 0 108 9 6 0 110 9 6 0 115 9 6 0 116 9 6 0 118 9 6 0 121 9 6 0 123 9 6 0 125 9 6 0 130 9 6 0 146 9 6 0 150 9 6 0 151 9 6 0 152 9 6 0 171 9 6 0 177 9 6 0 179 9 6 0 186 9 6 0 188 9 6 0 190 9 6 0 201 9 6 0 207 9 6 0 209 9 6 0 210 9 6 0 211 9 6 0 212 9 6 0 214 9 6 0 215 19 149 2 38] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 153 0 235 19 157 1 183] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 161 0 234 6 149 0 235] 
#[0 9 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 9 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 9 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 9 22 0 4 2 139 0 5 9 22 0 6 6 57 0 7 9 22 0 8 6 61 0 9 9 22 0 10 9 22 0 11 6 65 0 12 9 22 0 13 6 69 0 15 9 22 0 16 9 22 0 17 6 73 0 19 6 77 0 20 9 22 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 9 22 0 28 9 22 0 32 6 105 0 34 6 109 0 35 9 22 0 38 9 22 0 45 9 22 0 80 9 22 0 83 9 22 0 87 9 22 0 90 9 22 0 99 9 22 0 105 9 22 0 108 9 22 0 110 9 22 0 115 6 113 0 116 6 117 0 118 9 22 0 121 9 22 0 123 6 121 0 125 6 125 0 130 9 22 0 146 6 129 0 150 6 133 0 151 9 22 0 152 9 22 0 171 9 22 0 177 9 22 0 179 9 22 0 186 9 22 0 188 9 22 0 190 9 22 0 201 6 137 0 207 6 141 0 209 9 22 0 210 6 145 0 211 9 22 0 212 9 22 0 214 9 22 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 165 2 47 19 165 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 165 2 54 19 165 2 55 4 1 2 56 19 165 2 63 19 165 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 165 2 97 19 165 2 98 19 165 2 99 19 165 2 100 19 165 2 101 19 165 2 102 19 165 2 103 19 165 2 104 19 165 2 105 19 165 2 106 19 165 2 107 19 165 2 108 19 165 2 109 19 165 2 110 19 165 2 111 19 165 2 112 19 165 2 113 19 165 2 114 19 165 2 115 19 165 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 165 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 169 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 173 0 215 6 149 0 235] 
#[1 6 53 0 3 9 26 0 4 2 143 0 5 9 26 0 6 6 57 0 7 9 26 0 8 6 61 0 9 9 26 0 10 9 26 0 11 6 65 0 12 9 26 0 13 6 69 0 15 9 26 0 16 9 26 0 17 6 73 0 19 6 77 0 20 9 26 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 9 26 0 28 9 26 0 32 6 105 0 34 6 109 0 35 9 26 0 38 9 26 0 45 9 26 0 80 9 26 0 83 9 26 0 87 9 26 0 90 9 26 0 99 9 26 0 105 9 26 0 108 9 26 0 110 9 26 0 115 6 113 0 116 6 117 0 118 9 26 0 121 9 26 0 123 6 121 0 125 6 125 0 130 9 26 0 146 6 129 0 150 6 133 0 151 9 26 0 152 9 26 0 171 9 26 0 177 9 26 0 179 9 26 0 186 9 26 0 188 9 26 0 190 9 26 0 201 6 137 0 207 6 141 0 209 9 26 0 210 6 145 0 211 9 26 0 212 9 26 0 214 9 26 0 215 6 149 0 235] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 19 177 1 217 14 29 1 219] 
#[1 2 134 0 1 2 134 0 3 1 155 0 5 2 134 0 7 2 134 0 9 8 242 0 11 2 134 0 12 0 59 0 14 2 134 0 15 2 134 0 19 2 134 0 20 2 134 0 22 2 134 0 23 2 147 0 24 2 134 0 25 2 134 0 26 2 134 0 27 2 131 0 29 2 134 0 34 2 134 0 35 8 242 0 37 2 134 0 116 2 134 0 118 2 134 0 125 2 134 0 130 2 134 0 150 2 134 0 151 2 134 0 207 2 134 0 209 2 134 0 211 2 147 0 215 19 81 0 235 2 37 1 47 2 41 1 48 19 181 1 54 19 89 1 56 8 5 1 93 2 97 1 94 2 101 1 95 19 93 1 98 8 13 1 183] 
#[0 9 30 0 215] 
#[1 9 34 0 3 9 34 0 4 9 34 0 5 9 34 0 6 9 34 0 7 9 34 0 8 9 34 0 9 9 34 0 10 9 34 0 11 9 34 0 12 9 34 0 13 9 34 0 15 9 34 0 16 9 34 0 17 9 34 0 19 9 34 0 20 9 34 0 21 9 34 0 22 9 34 0 23 9 34 0 24 9 34 0 25 9 34 0 26 9 34 0 27 9 34 0 28 9 34 0 32 9 34 0 34 9 34 0 35 9 34 0 38 9 34 0 45 9 34 0 80 9 34 0 83 9 34 0 87 9 34 0 90 9 34 0 99 9 34 0 105 9 34 0 108 9 34 0 110 9 34 0 115 9 34 0 116 9 34 0 118 9 34 0 121 9 34 0 123 9 34 0 125 9 34 0 130 9 34 0 146 9 34 0 150 9 34 0 151 9 34 0 152 9 34 0 171 9 34 0 177 9 34 0 179 9 34 0 186 9 34 0 188 9 34 0 190 9 34 0 201 9 34 0 207 9 34 0 209 9 34 0 210 9 34 0 211 9 34 0 212 9 34 0 214 9 34 0 215 19 185 1 177] 
#[1 9 38 0 3 9 38 0 4 9 38 0 5 9 38 0 6 9 38 0 7 9 38 0 8 9 38 0 9 9 38 0 10 9 38 0 11 9 38 0 12 9 38 0 13 9 38 0 15 9 38 0 16 9 38 0 17 9 38 0 19 9 38 0 20 9 38 0 21 9 38 0 22 9 38 0 23 2 65 0 24 9 38 0 25 9 38 0 26 9 38 0 27 9 38 0 28 9 38 0 32 9 38 0 34 9 38 0 35 19 189 0 37 9 38 0 38 9 38 0 45 9 38 0 80 9 38 0 83 9 38 0 87 9 38 0 90 9 38 0 99 9 38 0 105 9 38 0 108 9 38 0 110 9 38 0 115 9 38 0 116 9 38 0 118 9 38 0 121 9 38 0 123 9 38 0 125 9 38 0 130 9 38 0 146 9 38 0 150 9 38 0 151 9 38 0 152 9 38 0 171 9 38 0 177 9 38 0 179 9 38 0 186 9 38 0 188 9 38 0 190 9 38 0 201 9 38 0 207 9 38 0 209 9 38 0 210 9 38 0 211 9 38 0 212 9 38 0 214 9 38 0 215 19 193 0 239] 
#[1 9 42 0 3 9 42 0 4 9 42 0 5 9 42 0 6 9 42 0 7 9 42 0 8 9 42 0 9 9 42 0 10 9 42 0 11 9 42 0 12 9 42 0 13 9 42 0 15 9 42 0 16 9 42 0 17 9 42 0 19 9 42 0 20 9 42 0 21 9 42 0 22 9 42 0 23 9 42 0 24 9 42 0 25 9 42 0 26 9 42 0 27 9 42 0 28 9 42 0 32 9 42 0 34 9 42 0 35 9 42 0 37 9 42 0 38 9 42 0 45 9 42 0 80 9 42 0 83 9 42 0 87 9 42 0 90 9 42 0 99 9 42 0 105 9 42 0 108 9 42 0 110 9 42 0 115 9 42 0 116 9 42 0 118 9 42 0 121 9 42 0 123 9 42 0 125 9 42 0 130 9 42 0 146 9 42 0 150 9 42 0 151 9 42 0 152 9 42 0 171 9 42 0 177 9 42 0 179 9 42 0 186 9 42 0 188 9 42 0 190 9 42 0 201 9 42 0 207 9 42 0 209 9 42 0 210 9 42 0 211 9 42 0 212 9 42 0 214 9 42 0 215 19 197 1 181] 
#[0 19 201 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 9 46 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 205 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 209 0 215 6 149 0 235] 
#[1 6 53 0 3 9 50 0 4 2 151 0 5 9 50 0 6 6 57 0 7 9 50 0 8 6 61 0 9 9 50 0 10 9 50 0 11 6 65 0 12 9 50 0 13 6 69 0 15 9 50 0 16 9 50 0 17 6 73 0 19 6 77 0 20 9 50 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 9 50 0 28 9 50 0 32 6 105 0 34 6 109 0 35 9 50 0 38 9 50 0 45 9 50 0 80 9 50 0 83 9 50 0 87 9 50 0 90 9 50 0 99 9 50 0 105 9 50 0 108 9 50 0 110 9 50 0 115 6 113 0 116 6 117 0 118 9 50 0 121 9 50 0 123 6 121 0 125 6 125 0 130 9 50 0 146 6 129 0 150 6 133 0 151 9 50 0 152 9 50 0 171 9 50 0 177 9 50 0 179 9 50 0 186 9 50 0 188 9 50 0 190 9 50 0 201 6 137 0 207 6 141 0 209 9 50 0 210 6 145 0 211 9 50 0 212 9 50 0 214 9 50 0 215 6 149 0 235] 
#[0 19 213 0 88] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 9 77 0 30 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 9 229 0 81 3 85 0 82 9 97 0 84 1 65 0 85 9 101 0 88 9 105 0 91 9 109 0 92 9 113 0 94 9 117 0 97 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 9 125 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 9 129 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 133 0 146 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 9 157 0 171 1 65 0 175 1 65 0 176 9 229 0 178 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 9 173 0 189 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 9 185 0 202 9 189 0 204 9 193 0 208 3 133 0 213 19 217 0 215 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 205 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 221 1 216 19 221 1 220 9 221 1 221 19 221 1 225 9 229 1 226 19 221 1 227 19 221 1 228 19 221 1 229 19 221 1 230 19 221 1 231 19 221 1 232 19 221 1 233 19 221 1 234 19 221 1 235 19 221 1 237 19 221 1 238 19 221 1 239 19 221 1 240 19 221 1 241 19 221 1 245 19 221 1 247 19 221 2 0 19 221 2 1 19 221 2 2 19 221 2 3 19 221 2 4 19 221 2 6 19 221 2 11 19 221 2 12 19 221 2 13 19 221 2 14 19 221 2 18 19 221 2 19 19 221 2 20 19 221 2 21 19 221 2 23 19 221 2 25 19 221 2 26 19 221 2 27 19 221 2 29 19 221 2 31 19 221 2 32 19 221 2 33 19 221 2 34 19 221 2 35 19 221 2 40 19 221 2 44 19 221 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[1 19 225 0 6 3 137 0 215 19 225 0 236] 
#[0 9 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 242 0 3 8 242 0 4 2 155 0 5 8 242 0 6 8 242 0 7 8 242 0 8 8 242 0 9 8 242 0 10 8 242 0 11 8 242 0 12 8 242 0 13 8 242 0 15 8 242 0 16 8 242 0 17 8 242 0 19 8 242 0 20 8 242 0 21 8 242 0 22 8 242 0 23 8 242 0 24 8 242 0 25 8 242 0 26 8 242 0 27 8 242 0 28 19 89 0 29 8 242 0 32 8 242 0 34 8 242 0 35 8 242 0 37 8 242 0 38 8 242 0 45 8 242 0 80 8 242 0 83 8 242 0 87 8 242 0 90 8 242 0 99 8 242 0 105 8 242 0 108 8 242 0 110 8 242 0 115 8 242 0 116 8 242 0 118 8 242 0 121 8 242 0 123 8 242 0 125 8 242 0 130 8 242 0 146 8 242 0 150 8 242 0 151 8 242 0 152 8 242 0 171 8 242 0 177 8 242 0 179 8 242 0 186 8 242 0 188 8 242 0 190 8 242 0 201 8 242 0 207 8 242 0 209 8 242 0 210 8 242 0 211 8 242 0 212 8 242 0 214 8 242 0 215 19 229 0 235 19 181 1 54 19 89 1 56 8 5 1 93 2 97 1 94 2 101 1 95 19 93 1 98 8 13 1 183] 
#[0 9 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 9 62 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 66 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 70 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 74 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 78 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 82 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 2 159 0 1 2 163 0 5 2 249 0 9 2 253 0 12 2 167 0 14 2 171 0 31 2 175 0 32 2 179 0 40 3 13 0 42 2 183 0 44 2 187 0 48 2 191 0 49 2 195 0 50 2 199 0 51 2 203 0 52 2 207 0 53 2 211 0 54 2 215 0 55 2 219 0 56 2 223 0 57 2 227 0 58 2 231 0 59 2 235 0 60 2 239 0 61 2 243 0 62 2 247 0 63 2 251 0 64 2 255 0 65 3 3 0 69 3 7 0 75 3 11 0 76 3 15 0 82 3 19 0 85 3 23 0 99 2 179 0 100 3 27 0 102 3 31 0 103 3 35 0 107 3 39 0 113 2 179 0 120 3 43 0 126 3 47 0 128 3 51 0 134 3 55 0 135 3 59 0 138 1 190 0 140 3 63 0 143 3 67 0 170 3 71 0 175 3 75 0 176 3 79 0 182 2 179 0 184 3 83 0 192 3 87 0 193 3 91 0 194 3 95 0 195 3 99 0 196 3 103 0 213 19 233 0 215 3 107 0 219 3 111 0 220 3 115 0 222 3 119 0 223 3 123 0 224 3 127 0 225 3 131 0 227 3 135 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 8 157 2 47 8 157 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 8 157 2 54 8 157 2 55 4 1 2 56 8 157 2 63 8 157 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 8 157 2 97 8 157 2 98 8 157 2 99 8 157 2 100 8 157 2 101 8 157 2 102 8 157 2 103 8 157 2 104 8 157 2 105 8 157 2 106 8 157 2 107 8 157 2 108 8 157 2 109 8 157 2 110 8 157 2 111 8 157 2 112 8 157 2 113 8 157 2 114 8 157 2 115 8 157 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 8 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 8 157 2 159] 
#[0 9 86 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 90 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 9 94 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 237 2 47 19 237 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 237 2 54 19 237 2 55 4 1 2 56 19 237 2 63 19 237 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 237 2 97 19 237 2 98 19 237 2 99 19 237 2 100 19 237 2 101 19 237 2 102 19 237 2 103 19 237 2 104 19 237 2 105 19 237 2 106 19 237 2 107 19 237 2 108 19 237 2 109 19 237 2 110 19 237 2 111 19 237 2 112 19 237 2 113 19 237 2 114 19 237 2 115 19 237 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 237 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 19 241 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 245 2 47 19 245 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 19 245 2 54 19 245 2 55 4 1 2 56 19 245 2 63 19 245 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 19 245 2 97 19 245 2 98 19 245 2 99 19 245 2 100 19 245 2 101 19 245 2 102 19 245 2 103 19 245 2 104 19 245 2 105 19 245 2 106 19 245 2 107 19 245 2 108 19 245 2 109 19 245 2 110 19 245 2 111 19 245 2 112 19 245 2 113 19 245 2 114 19 245 2 115 19 245 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 19 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 19 245 2 159] 
#[1 19 249 0 215 15 101 0 229 19 253 2 132 15 109 2 135] 
#[1 20 1 0 215 5 169 0 229 20 5 2 131] 
#[1 20 9 0 45 15 101 0 229 20 13 2 132 15 109 2 135] 
#[1 2 65 0 24 20 17 0 37 20 21 0 239] 
#[1 20 25 0 45 20 29 0 215] 
#[1 9 98 0 3 9 98 0 4 9 98 0 5 9 98 0 6 9 98 0 7 9 98 0 8 9 98 0 9 9 98 0 10 9 98 0 11 9 98 0 12 9 98 0 13 9 98 0 15 9 98 0 16 9 98 0 17 9 98 0 19 9 98 0 20 9 98 0 21 9 98 0 22 9 98 0 23 9 98 0 24 9 98 0 25 9 98 0 26 9 98 0 27 9 98 0 28 9 98 0 32 9 98 0 34 9 98 0 35 9 98 0 38 9 98 0 45 9 98 0 80 9 98 0 83 9 98 0 87 9 98 0 90 9 98 0 99 9 98 0 105 9 98 0 108 9 98 0 110 9 98 0 115 9 98 0 116 9 98 0 118 9 98 0 121 9 98 0 123 9 98 0 125 9 98 0 130 9 98 0 146 9 98 0 150 9 98 0 151 9 98 0 152 9 98 0 171 9 98 0 177 9 98 0 179 9 98 0 186 9 98 0 188 9 98 0 190 9 98 0 201 9 98 0 207 9 98 0 209 9 98 0 210 9 98 0 211 9 98 0 212 9 98 0 214 9 98 0 215 20 33 2 134] 
#[1 5 169 0 229 20 37 2 131] 
#[1 20 41 0 105 10 161 0 121 20 45 0 146 20 49 0 215 20 53 2 127 10 209 2 137 10 245 2 157] 
#[1 15 101 0 229 20 57 2 132 15 109 2 135] 
#[0 9 102 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 20 61 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 65 2 47 20 65 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 65 2 54 20 65 2 55 4 1 2 56 20 65 2 63 20 65 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 65 2 97 20 65 2 98 20 65 2 99 20 65 2 100 20 65 2 101 20 65 2 102 20 65 2 103 20 65 2 104 20 65 2 105 20 65 2 106 20 65 2 107 20 65 2 108 20 65 2 109 20 65 2 110 20 65 2 111 20 65 2 112 20 65 2 113 20 65 2 114 20 65 2 115 20 65 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 65 2 122 4 169 2 125 4 173 2 136 20 69 2 148 20 73 2 151 4 177 2 155 4 181 2 158 20 65 2 159] 
#[1 15 101 0 229 20 77 2 132 15 109 2 135] 
#[0 9 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 20 81 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 85 2 47 20 85 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 85 2 54 20 85 2 55 4 1 2 56 20 85 2 63 20 85 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 85 2 97 20 85 2 98 20 85 2 99 20 85 2 100 20 85 2 101 20 85 2 102 20 85 2 103 20 85 2 104 20 85 2 105 20 85 2 106 20 85 2 107 20 85 2 108 20 85 2 109 20 85 2 110 20 85 2 111 20 85 2 112 20 85 2 113 20 85 2 114 20 85 2 115 20 85 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 20 85 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 89 2 47 20 89 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 89 2 54 20 89 2 55 4 1 2 56 20 89 2 63 20 89 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 89 2 97 20 89 2 98 20 89 2 99 20 89 2 100 20 89 2 101 20 89 2 102 20 89 2 103 20 89 2 104 20 89 2 105 20 89 2 106 20 89 2 107 20 89 2 108 20 89 2 109 20 89 2 110 20 89 2 111 20 89 2 112 20 89 2 113 20 89 2 114 20 89 2 115 20 89 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 89 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 20 89 2 159] 
#[1 6 53 0 3 9 110 0 4 3 139 0 5 9 110 0 6 6 57 0 7 9 110 0 8 6 61 0 9 9 110 0 10 9 110 0 11 6 65 0 12 9 110 0 13 6 69 0 15 9 110 0 16 9 110 0 17 6 73 0 19 6 77 0 20 9 110 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 9 110 0 28 9 110 0 32 6 105 0 34 6 109 0 35 9 110 0 38 9 110 0 45 9 110 0 80 9 110 0 83 9 110 0 87 9 110 0 90 9 110 0 99 9 110 0 105 9 110 0 108 9 110 0 110 9 110 0 115 6 113 0 116 6 117 0 118 9 110 0 121 9 110 0 123 6 121 0 125 6 125 0 130 9 110 0 146 6 129 0 150 6 133 0 151 9 110 0 152 9 110 0 171 9 110 0 177 9 110 0 179 9 110 0 186 9 110 0 188 9 110 0 190 9 110 0 201 6 137 0 207 6 141 0 209 9 110 0 210 6 145 0 211 9 110 0 212 9 110 0 214 9 110 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 20 93 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 97 2 47 20 97 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 97 2 54 20 97 2 55 4 1 2 56 20 97 2 63 20 97 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 97 2 97 20 97 2 98 20 97 2 99 20 97 2 100 20 97 2 101 20 97 2 102 20 97 2 103 20 97 2 104 20 97 2 105 20 97 2 106 20 97 2 107 20 97 2 108 20 97 2 109 20 97 2 110 20 97 2 111 20 97 2 112 20 97 2 113 20 97 2 114 20 97 2 115 20 97 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 97 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 20 97 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 101 2 47 20 101 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 101 2 54 20 101 2 55 4 1 2 56 20 101 2 63 20 101 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 101 2 97 20 101 2 98 20 101 2 99 20 101 2 100 20 101 2 101 20 101 2 102 20 101 2 103 20 101 2 104 20 101 2 105 20 101 2 106 20 101 2 107 20 101 2 108 20 101 2 109 20 101 2 110 20 101 2 111 20 101 2 112 20 101 2 113 20 101 2 114 20 101 2 115 20 101 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 20 101 2 159] 
#[1 6 53 0 3 9 114 0 4 3 143 0 5 9 114 0 6 6 57 0 7 9 114 0 8 6 61 0 9 9 114 0 10 9 114 0 11 6 65 0 12 9 114 0 13 6 69 0 15 9 114 0 16 9 114 0 17 6 73 0 19 6 77 0 20 9 114 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 9 114 0 28 9 114 0 32 6 105 0 34 6 109 0 35 9 114 0 38 9 114 0 45 9 114 0 80 9 114 0 83 9 114 0 87 9 114 0 90 9 114 0 99 9 114 0 105 9 114 0 108 9 114 0 110 9 114 0 115 6 113 0 116 6 117 0 118 9 114 0 121 9 114 0 123 6 121 0 125 6 125 0 130 9 114 0 146 6 129 0 150 6 133 0 151 9 114 0 152 9 114 0 171 9 114 0 177 9 114 0 179 9 114 0 186 9 114 0 188 9 114 0 190 9 114 0 201 6 137 0 207 6 141 0 209 9 114 0 210 6 145 0 211 9 114 0 212 9 114 0 214 9 114 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 105 2 47 20 105 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 105 2 54 20 105 2 55 4 1 2 56 20 105 2 63 20 105 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 105 2 97 20 105 2 98 20 105 2 99 20 105 2 100 20 105 2 101 20 105 2 102 20 105 2 103 20 105 2 104 20 105 2 105 20 105 2 106 20 105 2 107 20 105 2 108 20 105 2 109 20 105 2 110 20 105 2 111 20 105 2 112 20 105 2 113 20 105 2 114 20 105 2 115 20 105 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 20 105 2 159] 
#[1 6 53 0 3 9 118 0 4 3 147 0 5 9 118 0 6 6 57 0 7 9 118 0 8 6 61 0 9 9 118 0 10 9 118 0 11 6 65 0 12 9 118 0 13 6 69 0 15 9 118 0 16 9 118 0 17 6 73 0 19 6 77 0 20 9 118 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 9 118 0 28 9 118 0 32 6 105 0 34 6 109 0 35 9 118 0 38 9 118 0 45 9 118 0 80 9 118 0 83 9 118 0 87 9 118 0 90 9 118 0 99 9 118 0 105 9 118 0 108 9 118 0 110 9 118 0 115 6 113 0 116 6 117 0 118 9 118 0 121 9 118 0 123 6 121 0 125 6 125 0 130 9 118 0 146 6 129 0 150 6 133 0 151 9 118 0 152 9 118 0 171 9 118 0 177 9 118 0 179 9 118 0 186 9 118 0 188 9 118 0 190 9 118 0 201 6 137 0 207 6 141 0 209 9 118 0 210 6 145 0 211 9 118 0 212 9 118 0 214 9 118 0 215 6 149 0 235] 
#[0 9 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 9 126 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 9 130 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 9 134 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 9 138 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 20 109 0 89] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 20 113 1 67 7 65 1 68] 
#[1 0 73 0 19 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 20 117 1 67 7 65 1 68] 
#[0 20 121 0 89] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 20 125 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 20 129 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 20 133 1 86 11 173 1 87] 
#[1 4 178 0 19 4 178 0 70 4 178 0 78 4 178 0 79 4 178 0 88 4 178 0 89 4 178 0 93 4 178 0 98 4 178 0 100 11 165 0 112 4 178 0 114 4 178 0 132 4 178 0 141 4 178 0 154 4 178 0 158 4 178 0 160 4 178 0 161 4 178 0 162 4 178 0 163 4 178 0 166 4 178 0 173 4 178 0 183 4 178 0 184 4 178 0 206 20 137 1 86 11 173 1 87] 
#[0 20 141 0 131] 
#[0 20 145 0 131] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 20 149 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 20 153 1 72] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 20 157 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 20 161 1 72] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 20 165 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 20 169 1 71] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 20 173 1 72] 
#[1 3 230 0 19 3 230 0 40 3 230 0 70 3 230 0 72 3 230 0 74 3 230 0 77 3 230 0 78 3 230 0 79 3 230 0 81 3 230 0 88 3 230 0 89 3 230 0 93 3 230 0 98 3 230 0 100 3 230 0 108 3 230 0 114 3 230 0 120 3 230 0 132 3 230 0 133 3 230 0 137 3 230 0 141 3 230 0 142 3 230 0 147 3 230 0 154 3 230 0 155 3 230 0 156 3 230 0 158 3 230 0 160 3 230 0 161 3 230 0 162 3 230 0 163 3 230 0 166 3 230 0 173 3 230 0 174 3 230 0 183 3 230 0 184 3 230 0 203 3 230 0 205 3 230 0 206 20 177 1 71] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 20 181 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 20 185 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 20 189 1 78] 
#[1 4 214 0 19 4 214 0 40 4 214 0 70 4 214 0 72 4 214 0 74 4 214 0 77 4 214 0 78 4 214 0 79 4 214 0 81 4 214 0 88 4 214 0 89 4 214 0 93 4 214 0 98 4 214 0 100 12 165 0 108 4 214 0 114 4 214 0 120 4 214 0 132 4 214 0 133 4 214 0 137 4 214 0 141 4 214 0 142 4 214 0 147 4 214 0 154 4 214 0 155 4 214 0 156 4 214 0 158 4 214 0 160 4 214 0 161 4 214 0 162 4 214 0 163 4 214 0 166 4 214 0 173 4 214 0 174 4 214 0 183 4 214 0 184 4 214 0 203 4 214 0 205 4 214 0 206 12 169 1 57 20 193 1 78] 
#[0 9 142 0 17 0 106 0 108 0 215] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 11 81 0 253 0 89 0 254 0 93 0 255 20 197 1 112] 
#[1 16 65 0 46 16 65 0 47 16 65 0 149 16 65 0 157 16 61 0 229 16 65 1 141 20 201 1 142] 
#[1 9 146 0 17 20 205 0 37 9 146 0 106 9 146 0 108 9 146 0 215] 
#[1 9 150 0 6 2 225 0 11 9 150 0 215 20 209 0 234 20 213 1 137] 
#[0 9 154 0 46 0 47 0 149 0 157 0 229] 
#[0 9 158 0 46 0 47 0 149 0 157 0 229] 
#[0 9 162 0 46 0 47 0 149 0 157 0 229] 
#[0 9 166 0 46 0 47 0 149 0 157 0 229] 
#[1 2 29 0 5 8 242 0 6 8 242 0 11 8 242 0 24 19 89 0 29 8 242 0 37 8 242 0 215 19 229 0 235 20 217 1 54 19 89 1 56 8 5 1 93 2 97 1 94 2 101 1 95 19 93 1 98 8 13 1 183] 
#[0 9 170 0 46 0 47 0 149 0 157 0 229] 
#[1 9 174 0 6 9 174 0 11 2 65 0 24 20 221 0 37 9 174 0 215 20 225 0 239] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 20 229 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 229 1 92] 
#[1 9 178 0 17 20 233 0 37 9 178 0 106 9 178 0 108 9 178 0 215] 
#[1 20 237 0 6 3 137 0 215 20 237 0 236] 
#[0 9 182 0 17 0 106 0 108 0 215] 
#[0 9 186 0 17 0 106 0 108 0 215] 
#[1 20 241 0 6 3 137 0 215 20 241 0 236] 
#[1 20 245 0 17 20 249 0 215] 
#[0 9 190 0 19 0 88 0 229] 
#[0 9 194 0 19 0 88 0 229] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 20 253 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[1 21 1 0 17 21 5 0 215] 
#[1 0 73 0 19 21 9 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 0 73 0 19 21 13 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 21 17 0 17 21 21 0 215] 
#[1 9 198 0 11 9 198 0 17 2 85 0 29 9 198 0 215 21 25 1 90] 
#[1 21 29 0 17 21 33 0 215] 
#[0 21 37 0 114] 
#[1 0 26 0 70 7 6 0 78 0 30 0 79 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 221 1 66 1 145 1 70 1 149 1 77 21 41 1 117 21 45 1 155 21 49 1 204] 
#[0 9 202 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 206 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 210 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 214 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 218 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 2 145 0 100 21 69 0 154 21 69 0 173 2 149 0 184 21 61 1 110 21 65 1 111 21 69 1 123] 
#[0 9 222 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 9 226 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 21 73 0 93 21 81 0 173 21 81 1 158] 
#[0 9 230 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 21 109 0 78 21 109 0 154 17 165 0 161 21 109 0 166 21 109 0 173 21 109 0 206 21 105 1 189 21 109 1 208] 
#[0 21 113 0 114] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 21 117 0 70 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 21 121 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 21 125 0 183 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 1 37 0 229 21 129 0 237 21 133 0 252 21 137 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 21 137 1 92] 
#[0 9 234 0 6 0 11 0 215] 
#[1 21 145 0 6 2 225 0 11 3 137 0 215 21 141 0 234 21 145 0 236 21 149 0 244] 
#[1 9 238 0 6 9 238 0 11 16 193 0 37 9 238 0 215 21 153 0 248] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 21 157 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 21 161 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[1 21 165 0 17 21 169 0 215] 
#[1 2 121 0 79 2 125 0 89 1 205 0 98 2 129 0 114 1 205 0 160 1 205 0 162 1 205 0 163 1 205 0 173 1 205 0 242 1 205 1 53] 
#[1 17 57 0 40 17 57 0 98 2 145 0 100 17 57 0 120 21 181 0 133 17 57 0 142 17 57 0 154 17 57 0 155 17 57 0 156 17 57 0 158 17 57 0 160 17 57 0 162 17 57 0 163 17 57 0 173 17 57 0 174 2 149 0 184 17 57 0 242 21 173 1 110 21 177 1 111 17 57 1 121 21 181 1 122] 
#[1 21 185 0 77 17 81 0 98 17 81 0 154 17 81 0 160 17 81 0 162 17 81 0 163 17 81 0 173 17 81 0 242 17 81 1 132] 
#[1 17 97 0 98 17 97 0 160 17 97 0 162 17 97 0 163 17 97 0 174 21 189 0 184 17 97 0 242 17 97 1 150] 
#[1 21 193 0 74 21 197 0 93 17 121 0 98 17 121 0 160 17 121 0 162 17 121 0 163 17 121 0 173 17 121 0 174 17 121 0 242 17 121 1 157] 
#[1 21 201 0 72 17 137 0 98 17 137 0 160 17 137 0 162 17 137 0 163 17 137 0 173 17 137 0 242 17 137 1 167] 
#[1 17 157 0 81 17 157 0 98 17 157 0 160 17 157 0 162 17 157 0 163 17 157 0 166 17 157 0 173 17 157 0 174 17 157 0 205 15 33 0 229 17 157 0 242 17 157 1 174 21 205 1 175 14 241 1 178 14 245 1 179 14 249 1 182] 
#[1 17 189 0 78 17 189 0 98 17 189 0 120 17 189 0 142 17 189 0 154 17 189 0 155 17 189 0 156 17 189 0 160 17 165 0 161 17 189 0 162 17 189 0 163 17 189 0 166 17 189 0 173 17 189 0 174 17 189 0 206 17 189 0 242 21 209 1 189 17 189 1 205 17 189 1 206] 
#[1 17 197 0 78 17 197 0 98 17 197 0 120 17 197 0 133 17 197 0 142 17 197 0 154 17 197 0 155 17 197 0 156 17 197 0 160 17 165 0 161 17 197 0 162 17 197 0 163 17 197 0 166 17 197 0 173 17 197 0 174 17 197 0 206 17 197 0 242 21 213 1 189 17 197 1 205 17 197 1 206 17 197 1 207] 
#[1 17 205 0 98 17 205 0 142 17 205 0 154 17 205 0 155 17 205 0 156 17 205 0 160 21 217 0 161 17 205 0 162 17 205 0 163 17 205 0 173 17 205 0 174 17 205 0 242 17 205 1 205] 
#[0 9 242 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 246 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 250 0 40 0 98 0 100 0 120 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 9 254 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 2 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 6 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 10 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 14 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 18 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 22 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[0 10 26 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[1 21 221 0 106 21 225 0 108 21 229 0 215 21 233 1 101 21 237 1 124 21 241 1 143] 
#[1 21 221 0 106 21 225 0 108 21 245 0 215 21 233 1 101 21 249 1 124 21 241 1 143] 
#[0 10 30 0 40 0 98 0 100 0 120 0 133 0 142 0 154 0 155 0 156 0 158 0 160 0 162 0 163 0 173 0 174 0 184] 
#[1 4 182 0 40 4 182 0 98 4 182 0 100 4 182 0 120 4 182 0 142 4 182 0 154 4 182 0 155 4 182 0 156 4 182 0 158 4 182 0 160 4 182 0 162 4 182 0 163 4 182 0 173 4 182 0 174 4 182 0 184 21 253 1 114] 
#[1 22 21 0 36 22 21 0 41 22 9 0 100 22 13 0 184 22 21 0 197 22 21 1 133] 
#[0 10 34 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 10 38 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 10 42 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 10 46 0 77 0 98 0 154 0 160 0 162 0 163 0 173] 
#[0 10 50 0 98 0 160 0 162 0 163 0 174 0 184] 
#[0 22 25 0 138] 
#[0 10 54 0 98 0 160 0 162 0 163 0 174 0 184] 
#[0 10 58 0 98 0 160 0 162 0 163 0 174 0 184] 
#[0 22 29 0 93] 
#[0 22 33 0 229] 
#[0 10 62 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[0 10 66 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[0 10 70 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[0 10 74 0 74 0 93 0 98 0 160 0 162 0 163 0 173 0 174] 
#[1 22 37 0 229 22 41 1 168 22 45 1 171] 
#[0 10 78 0 72 0 98 0 160 0 162 0 163 0 173] 
#[0 10 82 0 72 0 98 0 160 0 162 0 163 0 173] 
#[0 10 86 0 72 0 98 0 160 0 162 0 163 0 173] 
#[0 7 74 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 82 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 90 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 7 106 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[0 10 90 0 81 0 98 0 160 0 162 0 163 0 166 0 173 0 174 0 205 0 229] 
#[1 22 49 0 17 22 53 0 215] 
#[0 22 57 0 229] 
#[0 7 70 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 78 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 86 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 7 102 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 21 225 0 108 22 61 0 215 22 65 1 101] 
#[0 10 94 0 78 0 98 0 120 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[1 22 69 0 17 21 225 0 108 22 73 0 215 22 77 1 101] 
#[0 10 98 0 78 0 98 0 120 0 133 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 206] 
#[0 22 81 0 229] 
#[0 10 102 0 98 0 142 0 154 0 155 0 156 0 160 0 161 0 162 0 163 0 173 0 174] 
#[1 22 85 0 17 22 89 0 215] 
#[0 10 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 10 114 0 11 10 114 0 17 2 85 0 29 10 114 0 215 22 93 1 60] 
#[1 22 97 0 17 22 101 0 215] 
#[0 22 105 0 70] 
#[1 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 16 221 1 66 1 145 1 70 1 149 1 77 16 225 1 114 16 229 1 127 16 233 1 149 16 237 1 153 16 241 1 166 16 245 1 173 12 113 1 174 16 249 1 191 16 253 1 194 17 1 1 196 12 153 1 205 12 153 1 206 12 153 1 207 22 109 1 213] 
#[0 10 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 22 141 0 137 22 117 0 147 22 141 0 154 22 141 0 163 22 141 0 173 22 141 0 174 22 141 0 203 22 141 1 214] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 22 145 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[0 22 149 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 22 153 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 22 157 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 22 161 1 72] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 22 165 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 22 169 1 72] 
#[0 22 173 0 183] 
#[0 10 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 10 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 177 0 183] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 22 181 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 22 185 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[0 10 190 0 6 0 11 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 22 189 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92] 
#[1 22 193 0 6 3 137 0 215 22 193 0 236] 
#[1 22 197 0 215 15 101 0 229 22 201 2 132 15 109 2 135] 
#[0 22 205 0 115] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 22 209 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 22 213 2 47 22 213 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 22 213 2 54 22 213 2 55 4 1 2 56 22 213 2 63 22 213 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 22 213 2 97 22 213 2 98 22 213 2 99 22 213 2 100 22 213 2 101 22 213 2 102 22 213 2 103 22 213 2 104 22 213 2 105 22 213 2 106 22 213 2 107 22 213 2 108 22 213 2 109 22 213 2 110 22 213 2 111 22 213 2 112 22 213 2 113 22 213 2 114 22 213 2 115 22 213 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 22 213 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 22 213 2 159] 
#[1 6 53 0 3 10 194 0 4 3 151 0 5 10 194 0 6 6 57 0 7 10 194 0 8 6 61 0 9 10 194 0 10 10 194 0 11 6 65 0 12 10 194 0 13 6 69 0 15 10 194 0 16 10 194 0 17 6 73 0 19 6 77 0 20 10 194 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 10 194 0 28 10 194 0 32 6 105 0 34 6 109 0 35 10 194 0 38 10 194 0 45 10 194 0 80 10 194 0 83 10 194 0 87 10 194 0 90 10 194 0 99 10 194 0 105 10 194 0 108 10 194 0 110 10 194 0 115 6 113 0 116 6 117 0 118 10 194 0 121 10 194 0 123 6 121 0 125 6 125 0 130 10 194 0 146 6 129 0 150 6 133 0 151 10 194 0 152 10 194 0 171 10 194 0 177 10 194 0 179 10 194 0 186 10 194 0 188 10 194 0 190 10 194 0 201 6 137 0 207 6 141 0 209 10 194 0 210 6 145 0 211 10 194 0 212 10 194 0 214 10 194 0 215 6 149 0 235] 
#[1 15 101 0 229 22 217 2 132 15 109 2 135] 
#[0 10 198 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 22 221 0 215 15 101 0 229 22 225 2 132 15 109 2 135] 
#[1 22 229 0 6 3 137 0 215 22 229 0 236] 
#[1 22 233 0 6 3 137 0 215 22 233 0 236] 
#[0 10 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 22 237 0 228] 
#[1 0 15 0 5 1 11 0 6 1 11 0 14 0 238 0 29 1 11 0 215 13 41 0 235 5 97 1 47 5 101 1 48 22 241 2 60 22 245 2 61] 
#[1 22 249 0 6 2 225 0 11 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 3 137 0 215 1 37 0 229 4 205 0 234 22 249 0 236 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 5 109 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92 22 253 1 97 23 1 2 62] 
#[1 23 5 0 215 23 9 0 228] 
#[0 10 206 0 6 0 14 0 215] 
#[1 10 210 0 6 18 165 0 14 10 210 0 215 18 169 2 59] 
#[1 6 53 0 3 2 29 0 5 23 17 0 6 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 23 13 0 234 6 149 0 235 23 17 0 236] 
#[0 23 21 0 228] 
#[1 4 18 0 1 4 18 0 3 0 87 0 5 4 18 0 7 4 18 0 9 4 18 0 11 4 18 0 12 4 18 0 14 4 18 0 15 4 18 0 19 4 18 0 20 4 18 0 22 4 18 0 23 2 65 0 24 4 18 0 25 4 18 0 26 4 18 0 27 4 18 0 34 4 18 0 35 4 18 0 116 4 18 0 118 4 18 0 125 4 18 0 130 4 18 0 150 4 18 0 151 4 18 0 207 4 18 0 209 4 18 0 211 4 18 0 214 4 18 0 215 7 189 0 235 23 25 0 239] 
#[1 23 29 0 215 23 33 0 228] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 10 214 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 10 214 0 214 10 214 0 215 6 149 0 235] 
#[0 10 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 225 0 11 10 222 0 214 10 222 0 215 23 37 0 234 23 41 2 82] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 45 2 47 23 45 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 45 2 54 23 45 2 55 4 1 2 56 23 45 2 63 23 45 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 45 2 97 23 45 2 98 23 45 2 99 23 45 2 100 23 45 2 101 23 45 2 102 23 45 2 103 23 45 2 104 23 45 2 105 23 45 2 106 23 45 2 107 23 45 2 108 23 45 2 109 23 45 2 110 23 45 2 111 23 45 2 112 23 45 2 113 23 45 2 114 23 45 2 115 23 45 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 45 2 159] 
#[0 10 226 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 230 0 3 10 230 0 4 3 155 0 5 10 230 0 6 10 230 0 7 10 230 0 8 10 230 0 9 10 230 0 10 10 230 0 11 10 230 0 12 10 230 0 13 10 230 0 15 10 230 0 16 10 230 0 17 10 230 0 19 10 230 0 20 10 230 0 21 10 230 0 22 10 230 0 23 10 230 0 24 10 230 0 25 10 230 0 26 10 230 0 27 10 230 0 28 10 230 0 32 10 230 0 34 10 230 0 35 10 230 0 37 10 230 0 38 10 230 0 45 10 230 0 80 10 230 0 83 10 230 0 87 10 230 0 90 10 230 0 99 10 230 0 105 10 230 0 108 10 230 0 110 10 230 0 115 10 230 0 116 10 230 0 118 10 230 0 121 10 230 0 123 10 230 0 125 10 230 0 130 10 230 0 146 10 230 0 150 10 230 0 151 10 230 0 152 10 230 0 171 10 230 0 177 10 230 0 179 10 230 0 186 10 230 0 188 10 230 0 190 10 230 0 201 10 230 0 207 10 230 0 209 10 230 0 210 10 230 0 211 10 230 0 212 10 230 0 213 10 230 0 214 10 230 0 215 2 89 0 235 23 49 1 93 2 97 1 94 2 101 1 95] 
#[1 10 234 0 6 2 225 0 11 10 234 0 215 23 53 0 234 23 57 1 185] 
#[1 10 238 0 1 10 238 0 3 10 238 0 4 10 238 0 5 10 238 0 6 10 238 0 7 10 238 0 8 10 238 0 9 10 238 0 10 10 238 0 11 10 238 0 12 10 238 0 13 10 238 0 14 10 238 0 15 10 238 0 16 10 238 0 17 10 238 0 19 10 238 0 20 10 238 0 21 10 238 0 22 10 238 0 23 10 238 0 24 10 238 0 25 10 238 0 26 10 238 0 27 10 238 0 28 10 238 0 32 10 238 0 34 10 238 0 35 10 238 0 38 10 238 0 45 10 238 0 80 10 238 0 83 10 238 0 87 10 238 0 90 3 159 0 99 10 238 0 105 10 238 0 108 10 238 0 110 10 238 0 115 10 238 0 116 10 238 0 118 10 238 0 121 10 238 0 123 10 238 0 125 10 238 0 130 10 238 0 146 10 238 0 150 10 238 0 151 10 238 0 152 10 238 0 171 10 238 0 177 10 238 0 179 10 238 0 186 10 238 0 188 10 238 0 190 10 238 0 201 5 209 0 204 10 238 0 207 10 238 0 209 10 238 0 210 10 238 0 211 10 238 0 212 10 238 0 214 10 238 0 215 23 61 2 79 23 61 2 80 23 61 2 85] 
#[1 23 65 0 6 3 137 0 215 23 65 0 236] 
#[0 10 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 10 246 0 1 3 163 0 3 3 163 0 4 3 163 0 5 3 163 0 6 3 163 0 7 3 163 0 8 3 163 0 9 3 163 0 10 3 163 0 11 3 163 0 12 3 163 0 13 3 163 0 14 3 163 0 15 3 163 0 16 3 163 0 17 3 163 0 19 3 163 0 20 3 163 0 21 3 163 0 22 3 163 0 23 3 163 0 24 3 163 0 25 3 163 0 26 3 163 0 27 3 163 0 28 4 230 0 29 3 163 0 32 3 163 0 34 3 163 0 35 3 163 0 38 3 163 0 45 3 163 0 80 3 163 0 83 3 163 0 87 3 163 0 90 3 163 0 99 3 163 0 105 3 163 0 108 3 163 0 110 3 163 0 115 3 163 0 116 3 163 0 118 3 163 0 121 3 163 0 123 3 163 0 125 3 163 0 130 3 163 0 146 3 163 0 150 3 163 0 151 3 163 0 152 3 163 0 171 3 163 0 177 3 163 0 179 3 163 0 186 3 163 0 188 3 163 0 190 3 163 0 201 3 163 0 207 3 163 0 209 3 163 0 210 3 163 0 211 3 163 0 212 3 163 0 214 3 163 0 215] 
#[0 10 250 0 11 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 10 254 0 6 6 57 0 7 6 61 0 9 10 254 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 10 254 0 215 6 149 0 235 23 69 2 76] 
#[0 11 2 0 6 0 215] 
#[1 6 53 0 3 2 29 0 5 11 6 0 6 6 57 0 7 6 61 0 9 11 6 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 11 6 0 215 6 149 0 235] 
#[0 23 73 0 144] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 23 77 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 23 81 1 217 14 29 1 219] 
#[0 23 85 0 100] 
#[1 2 241 0 1 11 10 0 3 11 10 0 4 3 167 0 5 11 10 0 6 11 10 0 7 11 10 0 8 2 249 0 9 11 10 0 10 11 10 0 11 2 253 0 12 11 10 0 13 3 1 0 14 11 10 0 15 11 10 0 16 11 10 0 17 11 10 0 19 11 10 0 20 11 10 0 21 11 10 0 22 11 10 0 23 11 10 0 24 11 10 0 25 11 10 0 26 11 10 0 27 11 10 0 28 9 77 0 30 3 5 0 31 3 171 0 32 11 10 0 34 11 10 0 35 11 10 0 38 1 186 0 40 3 13 0 42 1 65 0 44 11 10 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 11 10 0 80 9 229 0 81 3 85 0 82 11 10 0 83 9 97 0 84 1 65 0 85 11 10 0 87 9 101 0 88 11 10 0 90 9 105 0 91 9 109 0 92 9 113 0 94 9 117 0 97 3 175 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 11 10 0 105 9 125 0 107 11 10 0 108 11 10 0 110 1 65 0 113 11 10 0 115 11 10 0 116 11 10 0 118 1 186 0 120 11 10 0 121 11 10 0 123 11 10 0 125 1 65 0 126 3 105 0 128 9 129 0 129 11 10 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 3 179 0 146 11 10 0 150 11 10 0 151 11 10 0 152 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 3 183 0 171 1 65 0 175 1 65 0 176 11 10 0 177 9 229 0 178 11 10 0 179 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 11 10 0 186 11 10 0 188 9 173 0 189 11 10 0 190 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 11 10 0 201 9 185 0 202 9 189 0 204 11 10 0 207 9 193 0 208 11 10 0 209 11 10 0 210 11 10 0 211 11 10 0 212 3 133 0 213 11 10 0 214 11 10 0 215 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 205 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 89 1 216 23 89 1 220 9 221 1 221 23 89 1 225 9 229 1 226 23 89 1 227 23 89 1 228 23 89 1 229 23 89 1 230 23 89 1 231 23 89 1 232 23 89 1 233 23 89 1 234 23 89 1 235 23 89 1 237 23 89 1 238 23 89 1 239 23 89 1 240 23 89 1 241 23 89 1 245 23 89 1 247 23 89 2 0 23 89 2 1 23 89 2 2 23 89 2 3 23 89 2 4 23 89 2 6 23 89 2 11 23 89 2 12 23 89 2 13 23 89 2 14 23 89 2 18 23 89 2 19 23 89 2 20 23 89 2 21 23 89 2 23 23 89 2 25 23 89 2 26 23 89 2 27 23 89 2 29 23 89 2 31 23 89 2 32 23 89 2 33 23 89 2 34 23 89 2 35 23 89 2 40 23 89 2 44 23 89 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[0 11 14 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[1 11 18 0 3 11 18 0 4 11 18 0 5 11 18 0 6 11 18 0 7 11 18 0 8 11 18 0 9 11 18 0 10 11 18 0 11 11 18 0 12 11 18 0 13 11 18 0 15 11 18 0 16 3 187 0 17 11 18 0 19 11 18 0 20 11 18 0 21 11 18 0 22 11 18 0 23 11 18 0 24 11 18 0 25 11 18 0 26 11 18 0 27 11 18 0 28 11 18 0 32 11 18 0 34 11 18 0 35 11 18 0 38 11 18 0 45 11 18 0 80 11 18 0 83 11 18 0 87 11 18 0 90 11 18 0 99 11 18 0 105 11 18 0 108 11 18 0 110 11 18 0 115 11 18 0 116 11 18 0 118 11 18 0 121 11 18 0 123 11 18 0 125 11 18 0 130 11 18 0 146 11 18 0 150 11 18 0 151 11 18 0 152 11 18 0 171 11 18 0 177 11 18 0 179 11 18 0 186 11 18 0 188 11 18 0 190 11 18 0 201 11 18 0 207 11 18 0 209 11 18 0 210 11 18 0 211 11 18 0 212 11 18 0 214 11 18 0 215 19 33 1 223 23 93 1 224] 
#[0 11 22 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[0 23 97 0 215] 
#[0 11 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 30 0 3 11 30 0 4 11 30 0 5 11 30 0 6 11 30 0 7 11 30 0 8 11 30 0 9 11 30 0 10 11 30 0 11 11 30 0 12 11 30 0 13 11 30 0 15 11 30 0 16 3 191 0 17 11 30 0 19 11 30 0 20 11 30 0 21 11 30 0 22 11 30 0 23 11 30 0 24 11 30 0 25 11 30 0 26 11 30 0 27 11 30 0 28 11 30 0 32 11 30 0 34 11 30 0 35 11 30 0 38 11 30 0 45 11 30 0 80 11 30 0 83 11 30 0 87 11 30 0 90 11 30 0 99 11 30 0 105 11 30 0 108 11 30 0 110 11 30 0 115 11 30 0 116 11 30 0 118 11 30 0 121 11 30 0 123 11 30 0 125 11 30 0 130 11 30 0 146 11 30 0 150 11 30 0 151 11 30 0 152 11 30 0 171 11 30 0 177 11 30 0 179 11 30 0 186 11 30 0 188 11 30 0 190 11 30 0 201 11 30 0 207 11 30 0 209 11 30 0 210 11 30 0 211 11 30 0 212 11 30 0 214 11 30 0 215 23 101 1 223] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 23 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 105 1 92] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 23 109 1 217 14 29 1 219] 
#[1 6 53 0 3 11 34 0 4 3 195 0 5 11 34 0 6 6 57 0 7 11 34 0 8 6 61 0 9 11 34 0 10 11 34 0 11 6 65 0 12 11 34 0 13 6 69 0 15 11 34 0 16 11 34 0 17 6 73 0 19 6 77 0 20 11 34 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 34 0 28 11 34 0 32 6 105 0 34 6 109 0 35 11 34 0 38 11 34 0 45 11 34 0 80 11 34 0 83 11 34 0 87 11 34 0 90 11 34 0 99 11 34 0 105 11 34 0 108 11 34 0 110 11 34 0 115 6 113 0 116 6 117 0 118 11 34 0 121 11 34 0 123 6 121 0 125 6 125 0 130 11 34 0 146 6 129 0 150 6 133 0 151 11 34 0 152 11 34 0 171 11 34 0 177 11 34 0 179 11 34 0 186 11 34 0 188 11 34 0 190 11 34 0 201 6 137 0 207 6 141 0 209 11 34 0 210 6 145 0 211 11 34 0 212 11 34 0 214 11 34 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 23 113 0 37 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 23 117 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 121 2 47 23 121 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 121 2 54 23 121 2 55 4 1 2 56 23 121 2 63 23 121 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 121 2 97 23 121 2 98 23 121 2 99 23 121 2 100 23 121 2 101 23 121 2 102 23 121 2 103 23 121 2 104 23 121 2 105 23 121 2 106 23 121 2 107 23 121 2 108 23 121 2 109 23 121 2 110 23 121 2 111 23 121 2 112 23 121 2 113 23 121 2 114 23 121 2 115 23 121 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 121 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 125 2 47 23 125 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 125 2 54 23 125 2 55 4 1 2 56 23 125 2 63 23 125 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 125 2 97 23 125 2 98 23 125 2 99 23 125 2 100 23 125 2 101 23 125 2 102 23 125 2 103 23 125 2 104 23 125 2 105 23 125 2 106 23 125 2 107 23 125 2 108 23 125 2 109 23 125 2 110 23 125 2 111 23 125 2 112 23 125 2 113 23 125 2 114 23 125 2 115 23 125 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 125 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 125 2 159] 
#[0 23 129 0 127] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 23 133 0 215 6 149 0 235] 
#[1 11 38 0 3 11 38 0 4 11 38 0 5 11 38 0 6 11 38 0 7 11 38 0 8 11 38 0 9 11 38 0 10 3 199 0 11 11 38 0 12 11 38 0 13 11 38 0 15 11 38 0 16 11 38 0 17 11 38 0 19 11 38 0 20 11 38 0 21 11 38 0 22 11 38 0 23 11 38 0 24 11 38 0 25 11 38 0 26 11 38 0 27 11 38 0 28 11 38 0 32 11 38 0 34 11 38 0 35 11 38 0 38 11 38 0 45 11 38 0 80 11 38 0 83 11 38 0 87 11 38 0 90 11 38 0 99 11 38 0 105 11 38 0 108 11 38 0 110 11 38 0 115 11 38 0 116 11 38 0 118 11 38 0 121 11 38 0 123 11 38 0 125 11 38 0 130 11 38 0 146 11 38 0 150 11 38 0 151 11 38 0 152 11 38 0 171 11 38 0 177 11 38 0 179 11 38 0 186 11 38 0 188 11 38 0 190 11 38 0 201 11 38 0 207 11 38 0 209 11 38 0 210 11 38 0 211 11 38 0 212 11 38 0 214 11 38 0 215 23 137 0 234 23 141 2 42] 
#[0 23 145 0 110] 
#[0 11 42 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 4 209 0 6 2 249 0 9 2 225 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 8 45 0 144 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 13 85 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 4 205 0 234 3 177 0 235 4 209 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 4 213 1 96 4 217 1 97 13 93 1 184 13 97 1 187 23 149 2 47 23 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 149 2 54 23 149 2 55 4 1 2 56 23 149 2 63 23 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 149 2 97 23 149 2 98 23 149 2 99 23 149 2 100 23 149 2 101 23 149 2 102 23 149 2 103 23 149 2 104 23 149 2 105 23 149 2 106 23 149 2 107 23 149 2 108 23 149 2 109 23 149 2 110 23 149 2 111 23 149 2 112 23 149 2 113 23 149 2 114 23 149 2 115 23 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 149 2 159] 
#[0 23 153 0 37] 
#[1 11 46 0 3 11 46 0 4 3 203 0 5 11 46 0 6 11 46 0 7 11 46 0 8 11 46 0 9 11 46 0 10 11 46 0 11 11 46 0 12 11 46 0 13 11 46 0 15 11 46 0 16 11 46 0 17 11 46 0 19 11 46 0 20 11 46 0 21 11 46 0 22 11 46 0 23 11 46 0 24 11 46 0 25 11 46 0 26 11 46 0 27 11 46 0 28 11 46 0 32 11 46 0 34 11 46 0 35 11 46 0 37 11 46 0 38 11 46 0 45 11 46 0 80 11 46 0 83 11 46 0 87 11 46 0 90 11 46 0 99 11 46 0 105 11 46 0 108 11 46 0 110 11 46 0 115 11 46 0 116 11 46 0 118 11 46 0 121 11 46 0 123 11 46 0 125 11 46 0 130 11 46 0 146 11 46 0 150 11 46 0 151 11 46 0 152 11 46 0 171 11 46 0 177 11 46 0 179 11 46 0 186 11 46 0 188 11 46 0 190 11 46 0 201 11 46 0 207 11 46 0 209 11 46 0 210 11 46 0 211 11 46 0 212 11 46 0 214 11 46 0 215 19 229 0 235 8 5 1 93 2 97 1 94 2 101 1 95 23 157 1 98 8 13 1 183] 
#[0 11 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 161 2 47 23 161 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 161 2 54 23 161 2 55 4 1 2 56 23 161 2 63 23 161 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 161 2 97 23 161 2 98 23 161 2 99 23 161 2 100 23 161 2 101 23 161 2 102 23 161 2 103 23 161 2 104 23 161 2 105 23 161 2 106 23 161 2 107 23 161 2 108 23 161 2 109 23 161 2 110 23 161 2 111 23 161 2 112 23 161 2 113 23 161 2 114 23 161 2 115 23 161 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 161 2 159] 
#[1 6 53 0 3 2 29 0 5 8 49 0 6 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 13 57 0 234 6 149 0 235 8 49 0 236] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 23 165 1 217 14 29 1 219] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 23 169 0 17 9 77 0 30 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 9 229 0 81 3 85 0 82 9 97 0 84 1 65 0 85 9 101 0 88 9 105 0 91 9 109 0 92 9 113 0 94 9 117 0 97 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 9 125 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 9 129 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 133 0 146 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 9 157 0 171 1 65 0 175 1 65 0 176 9 229 0 178 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 9 173 0 189 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 9 185 0 202 9 189 0 204 9 193 0 208 3 133 0 213 23 173 0 215 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 205 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 21 1 216 19 21 1 220 9 221 1 221 23 177 1 222 19 33 1 223 19 37 1 224 19 21 1 225 9 229 1 226 19 21 1 227 19 21 1 228 19 21 1 229 19 21 1 230 19 21 1 231 19 21 1 232 19 21 1 233 19 21 1 234 19 21 1 235 19 21 1 237 19 21 1 238 19 21 1 239 19 21 1 240 19 21 1 241 19 21 1 245 19 21 1 247 19 21 2 0 19 21 2 1 19 21 2 2 19 21 2 3 19 21 2 4 19 21 2 6 19 21 2 11 19 21 2 12 19 21 2 13 19 21 2 14 19 21 2 18 19 21 2 19 19 21 2 20 19 21 2 21 19 21 2 23 19 21 2 25 19 21 2 26 19 21 2 27 19 21 2 29 19 21 2 31 19 21 2 32 19 21 2 33 19 21 2 34 19 21 2 35 19 21 2 40 19 21 2 44 19 21 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 23 181 1 217 14 29 1 219] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 185 2 47 23 185 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 185 2 54 23 185 2 55 4 1 2 56 23 185 2 63 23 185 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 185 2 97 23 185 2 98 23 185 2 99 23 185 2 100 23 185 2 101 23 185 2 102 23 185 2 103 23 185 2 104 23 185 2 105 23 185 2 106 23 185 2 107 23 185 2 108 23 185 2 109 23 185 2 110 23 185 2 111 23 185 2 112 23 185 2 113 23 185 2 114 23 185 2 115 23 185 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 185 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 185 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 23 189 0 234 6 149 0 235] 
#[1 23 193 0 12 23 197 0 220 14 149 0 221 14 149 0 229 14 149 1 221] 
#[0 23 201 0 139] 
#[0 11 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 11 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 0 119 0 6 2 249 0 9 4 106 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 123 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 17 0 228 3 173 0 229 3 177 0 235 23 205 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 25 2 47 9 25 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 25 2 54 9 25 2 55 4 1 2 56 9 25 2 63 9 25 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 23 209 2 70 9 33 2 71 9 37 2 73 9 41 2 74 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 25 2 97 9 25 2 98 9 25 2 99 9 25 2 100 9 25 2 101 9 25 2 102 9 25 2 103 9 25 2 104 9 25 2 105 9 25 2 106 9 25 2 107 9 25 2 108 9 25 2 109 9 25 2 110 9 25 2 111 9 25 2 112 9 25 2 113 9 25 2 114 9 25 2 115 9 25 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 25 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 25 2 159] 
#[0 11 62 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 66 0 3 11 66 0 4 11 66 0 5 11 66 0 6 11 66 0 7 11 66 0 8 11 66 0 9 11 66 0 10 3 207 0 11 11 66 0 12 11 66 0 13 11 66 0 15 11 66 0 16 11 66 0 17 11 66 0 19 11 66 0 20 11 66 0 21 11 66 0 22 11 66 0 23 11 66 0 24 11 66 0 25 11 66 0 26 11 66 0 27 11 66 0 28 11 66 0 32 11 66 0 34 11 66 0 35 11 66 0 38 11 66 0 45 11 66 0 80 11 66 0 83 11 66 0 87 11 66 0 90 11 66 0 99 11 66 0 105 11 66 0 108 11 66 0 110 11 66 0 115 11 66 0 116 11 66 0 118 11 66 0 121 11 66 0 123 11 66 0 125 11 66 0 130 11 66 0 146 11 66 0 150 11 66 0 151 11 66 0 152 11 66 0 171 11 66 0 177 11 66 0 179 11 66 0 186 11 66 0 188 11 66 0 190 11 66 0 201 11 66 0 207 11 66 0 209 11 66 0 210 11 66 0 211 11 66 0 212 11 66 0 214 11 66 0 215 23 213 0 234 23 217 2 37] 
#[1 2 241 0 1 2 29 0 5 0 119 0 6 2 249 0 9 4 106 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 123 0 215 3 141 0 219 13 85 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 17 0 228 3 173 0 229 3 177 0 235 9 21 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 93 1 184 13 97 1 187 13 101 2 47 13 101 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 101 2 54 13 101 2 55 4 1 2 56 13 101 2 63 13 101 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 9 29 2 70 9 33 2 71 9 37 2 73 9 41 2 74 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 101 2 97 13 101 2 98 13 101 2 99 13 101 2 100 13 101 2 101 13 101 2 102 13 101 2 103 13 101 2 104 13 101 2 105 13 101 2 106 13 101 2 107 13 101 2 108 13 101 2 109 13 101 2 110 13 101 2 111 13 101 2 112 13 101 2 113 13 101 2 114 13 101 2 115 13 101 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 101 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 101 2 159] 
#[0 11 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 221 2 47 23 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 221 2 54 23 221 2 55 4 1 2 56 23 221 2 63 23 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 221 2 97 23 221 2 98 23 221 2 99 23 221 2 100 23 221 2 101 23 221 2 102 23 221 2 103 23 221 2 104 23 221 2 105 23 221 2 106 23 221 2 107 23 221 2 108 23 221 2 109 23 221 2 110 23 221 2 111 23 221 2 112 23 221 2 113 23 221 2 114 23 221 2 115 23 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 221 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 23 225 0 215 6 149 0 235] 
#[1 11 74 0 67 11 74 0 88 23 229 1 248] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 23 233 1 217 14 29 1 219] 
#[1 11 78 0 68 11 78 0 88 11 78 0 96 23 237 2 15] 
#[0 11 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 86 0 3 11 86 0 4 11 86 0 5 11 86 0 6 11 86 0 7 11 86 0 8 11 86 0 9 11 86 0 10 3 211 0 11 11 86 0 12 11 86 0 13 11 86 0 15 11 86 0 16 11 86 0 17 11 86 0 19 11 86 0 20 11 86 0 21 11 86 0 22 11 86 0 23 11 86 0 24 11 86 0 25 11 86 0 26 11 86 0 27 11 86 0 28 11 86 0 32 11 86 0 34 11 86 0 35 11 86 0 38 11 86 0 45 11 86 0 80 11 86 0 83 11 86 0 87 11 86 0 90 11 86 0 99 11 86 0 105 11 86 0 108 11 86 0 110 11 86 0 115 11 86 0 116 11 86 0 118 11 86 0 121 11 86 0 123 11 86 0 125 11 86 0 130 11 86 0 146 11 86 0 150 11 86 0 151 11 86 0 152 11 86 0 171 11 86 0 177 11 86 0 179 11 86 0 186 11 86 0 188 11 86 0 190 11 86 0 201 11 86 0 207 11 86 0 209 11 86 0 210 11 86 0 211 11 86 0 212 11 86 0 214 11 86 0 215 23 241 0 234 23 245 1 176] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 23 249 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 23 253 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 253 1 92 24 1 2 78] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 5 2 47 24 5 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 5 2 54 24 5 2 55 4 1 2 56 24 5 2 63 24 5 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 5 2 97 24 5 2 98 24 5 2 99 24 5 2 100 24 5 2 101 24 5 2 102 24 5 2 103 24 5 2 104 24 5 2 105 24 5 2 106 24 5 2 107 24 5 2 108 24 5 2 109 24 5 2 110 24 5 2 111 24 5 2 112 24 5 2 113 24 5 2 114 24 5 2 115 24 5 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 24 5 2 159] 
#[1 11 90 0 3 11 90 0 4 11 90 0 5 11 90 0 6 11 90 0 7 11 90 0 8 11 90 0 9 11 90 0 10 3 215 0 11 11 90 0 12 11 90 0 13 11 90 0 15 11 90 0 16 11 90 0 17 11 90 0 19 11 90 0 20 11 90 0 21 11 90 0 22 11 90 0 23 11 90 0 24 11 90 0 25 11 90 0 26 11 90 0 27 11 90 0 28 11 90 0 32 11 90 0 34 11 90 0 35 11 90 0 37 11 90 0 38 11 90 0 45 11 90 0 80 11 90 0 83 11 90 0 87 11 90 0 90 11 90 0 99 11 90 0 105 11 90 0 108 11 90 0 110 11 90 0 115 11 90 0 116 11 90 0 118 11 90 0 121 11 90 0 123 11 90 0 125 11 90 0 130 11 90 0 146 11 90 0 150 11 90 0 151 11 90 0 152 11 90 0 171 11 90 0 177 11 90 0 179 11 90 0 186 11 90 0 188 11 90 0 190 11 90 0 201 11 90 0 207 11 90 0 209 11 90 0 210 11 90 0 211 11 90 0 212 11 90 0 214 11 90 0 215 24 9 0 234 24 13 1 180] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 24 17 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 24 21 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 24 25 1 217 14 29 1 219] 
#[0 24 29 0 184] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 24 33 1 217 14 29 1 219] 
#[0 11 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 9 77 0 30 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 9 229 0 81 3 85 0 82 9 97 0 84 1 65 0 85 9 101 0 88 9 105 0 91 9 109 0 92 9 113 0 94 9 117 0 97 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 9 125 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 9 129 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 133 0 146 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 9 157 0 171 1 65 0 175 1 65 0 176 9 229 0 178 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 9 173 0 189 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 9 185 0 202 9 189 0 204 9 193 0 208 3 133 0 213 24 37 0 215 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 205 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 41 1 216 24 41 1 220 9 221 1 221 24 41 1 225 9 229 1 226 24 41 1 227 24 41 1 228 24 41 1 229 24 41 1 230 24 41 1 231 24 41 1 232 24 41 1 233 24 41 1 234 24 41 1 235 24 41 1 237 24 41 1 238 24 41 1 239 24 41 1 240 24 41 1 241 24 41 1 245 24 41 1 247 24 41 2 0 24 41 2 1 24 41 2 2 24 41 2 3 24 41 2 4 24 41 2 6 24 41 2 11 24 41 2 12 24 41 2 13 24 41 2 14 24 41 2 18 24 41 2 19 24 41 2 20 24 41 2 21 24 41 2 23 24 41 2 25 24 41 2 26 24 41 2 27 24 41 2 29 24 41 2 31 24 41 2 32 24 41 2 33 24 41 2 34 24 41 2 35 24 41 2 40 24 41 2 44 24 41 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[1 2 241 0 1 2 29 0 5 4 209 0 6 2 249 0 9 2 225 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 137 0 215 3 141 0 219 13 85 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 4 205 0 234 3 177 0 235 4 209 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 4 213 1 96 4 217 1 97 13 93 1 184 13 97 1 187 23 149 2 47 23 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 149 2 54 23 149 2 55 4 1 2 56 23 149 2 63 23 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 149 2 97 23 149 2 98 23 149 2 99 23 149 2 100 23 149 2 101 23 149 2 102 23 149 2 103 23 149 2 104 23 149 2 105 23 149 2 106 23 149 2 107 23 149 2 108 23 149 2 109 23 149 2 110 23 149 2 111 23 149 2 112 23 149 2 113 23 149 2 114 23 149 2 115 23 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 149 2 159] 
#[1 3 219 0 1 3 223 0 5 2 249 0 9 2 253 0 12 3 227 0 14 3 231 0 31 3 235 0 32 3 239 0 40 3 13 0 42 3 243 0 44 3 247 0 48 3 251 0 49 3 255 0 50 4 3 0 51 4 7 0 52 4 11 0 53 4 15 0 54 4 19 0 55 4 23 0 56 4 27 0 57 4 31 0 58 4 35 0 59 4 39 0 60 4 43 0 61 4 47 0 62 4 51 0 63 4 55 0 64 4 59 0 65 4 63 0 69 4 67 0 75 4 71 0 76 4 75 0 82 4 79 0 85 4 83 0 99 3 239 0 100 4 87 0 102 4 91 0 103 4 95 0 107 4 99 0 113 3 239 0 120 4 103 0 126 4 107 0 128 4 111 0 134 4 115 0 135 4 119 0 138 3 170 0 140 4 123 0 143 4 127 0 170 4 131 0 175 4 135 0 176 4 139 0 182 3 239 0 184 4 143 0 192 4 147 0 193 4 151 0 194 4 155 0 195 4 159 0 196 4 163 0 213 4 167 0 219 4 171 0 220 4 175 0 222 4 179 0 223 4 183 0 224 4 187 0 225 4 191 0 227 4 195 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 181 2 47 13 181 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 181 2 54 13 181 2 55 4 1 2 56 13 181 2 63 13 181 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 181 2 97 13 181 2 98 13 181 2 99 13 181 2 100 13 181 2 101 13 181 2 102 13 181 2 103 13 181 2 104 13 181 2 105 13 181 2 106 13 181 2 107 13 181 2 108 13 181 2 109 13 181 2 110 13 181 2 111 13 181 2 112 13 181 2 113 13 181 2 114 13 181 2 115 13 181 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 181 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 181 2 159] 
#[1 6 53 0 3 11 98 0 4 4 199 0 5 11 98 0 6 6 57 0 7 11 98 0 8 6 61 0 9 11 98 0 10 11 98 0 11 6 65 0 12 11 98 0 13 6 69 0 15 11 98 0 16 11 98 0 17 6 73 0 19 6 77 0 20 11 98 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 98 0 28 11 98 0 32 6 105 0 34 6 109 0 35 11 98 0 38 11 98 0 45 11 98 0 80 11 98 0 83 11 98 0 87 11 98 0 90 11 98 0 99 11 98 0 105 11 98 0 108 11 98 0 110 11 98 0 115 6 113 0 116 6 117 0 118 11 98 0 121 11 98 0 123 6 121 0 125 6 125 0 130 11 98 0 146 6 129 0 150 6 133 0 151 11 98 0 152 11 98 0 171 11 98 0 177 11 98 0 179 11 98 0 186 11 98 0 188 11 98 0 190 11 98 0 201 6 137 0 207 6 141 0 209 11 98 0 210 6 145 0 211 11 98 0 212 11 98 0 214 11 98 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 45 2 47 24 45 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 45 2 54 24 45 2 55 4 1 2 56 24 45 2 63 24 45 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 45 2 97 24 45 2 98 24 45 2 99 24 45 2 100 24 45 2 101 24 45 2 102 24 45 2 103 24 45 2 104 24 45 2 105 24 45 2 106 24 45 2 107 24 45 2 108 24 45 2 109 24 45 2 110 24 45 2 111 24 45 2 112 24 45 2 113 24 45 2 114 24 45 2 115 24 45 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 45 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 24 45 2 159] 
#[1 6 53 0 3 11 102 0 4 4 203 0 5 11 102 0 6 6 57 0 7 11 102 0 8 6 61 0 9 11 102 0 10 11 102 0 11 6 65 0 12 11 102 0 13 6 69 0 15 11 102 0 16 11 102 0 17 6 73 0 19 6 77 0 20 11 102 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 102 0 28 11 102 0 32 6 105 0 34 6 109 0 35 11 102 0 38 11 102 0 45 11 102 0 80 11 102 0 83 11 102 0 87 11 102 0 90 11 102 0 99 11 102 0 105 11 102 0 108 11 102 0 110 11 102 0 115 6 113 0 116 6 117 0 118 11 102 0 121 11 102 0 123 6 121 0 125 6 125 0 130 11 102 0 146 6 129 0 150 6 133 0 151 11 102 0 152 11 102 0 171 11 102 0 177 11 102 0 179 11 102 0 186 11 102 0 188 11 102 0 190 11 102 0 201 6 137 0 207 6 141 0 209 11 102 0 210 6 145 0 211 11 102 0 212 11 102 0 214 11 102 0 215 6 149 0 235] 
#[1 15 101 0 229 24 49 2 132 15 109 2 135] 
#[1 11 106 0 115 24 57 0 215 24 57 2 154] 
#[1 5 169 0 229 24 61 2 131] 
#[1 20 41 0 105 10 161 0 121 24 65 0 146 24 69 0 215 24 73 2 127 10 209 2 137 10 245 2 157] 
#[1 24 77 0 215 15 101 0 229 24 81 2 132 15 109 2 135] 
#[1 24 85 0 45 24 89 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 24 93 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 93 1 92] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 97 2 47 24 97 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 97 2 54 24 97 2 55 4 1 2 56 24 97 2 63 24 97 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 97 2 97 24 97 2 98 24 97 2 99 24 97 2 100 24 97 2 101 24 97 2 102 24 97 2 103 24 97 2 104 24 97 2 105 24 97 2 106 24 97 2 107 24 97 2 108 24 97 2 109 24 97 2 110 24 97 2 111 24 97 2 112 24 97 2 113 24 97 2 114 24 97 2 115 24 97 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 97 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 24 97 2 159] 
#[1 24 101 0 215 15 101 0 229 24 105 2 132 15 109 2 135] 
#[0 24 109 0 45] 
#[1 11 110 0 3 11 110 0 4 11 110 0 5 11 110 0 6 11 110 0 7 11 110 0 8 11 110 0 9 11 110 0 10 4 207 0 11 11 110 0 12 11 110 0 13 11 110 0 15 11 110 0 16 11 110 0 17 11 110 0 19 11 110 0 20 11 110 0 21 11 110 0 22 11 110 0 23 11 110 0 24 11 110 0 25 11 110 0 26 11 110 0 27 11 110 0 28 11 110 0 32 11 110 0 34 11 110 0 35 11 110 0 38 11 110 0 45 11 110 0 80 11 110 0 83 11 110 0 87 11 110 0 90 11 110 0 99 11 110 0 105 11 110 0 108 11 110 0 110 11 110 0 115 11 110 0 116 11 110 0 118 11 110 0 121 11 110 0 123 11 110 0 125 11 110 0 130 11 110 0 146 11 110 0 150 11 110 0 151 11 110 0 152 11 110 0 171 11 110 0 177 11 110 0 179 11 110 0 186 11 110 0 188 11 110 0 190 11 110 0 201 11 110 0 207 11 110 0 209 11 110 0 210 11 110 0 211 11 110 0 212 11 110 0 214 11 110 0 215 24 113 0 234 24 117 2 133] 
#[1 20 41 0 105 10 161 0 121 24 121 0 146 24 125 0 215 24 129 2 127 10 209 2 137 10 245 2 157] 
#[0 15 93 0 121] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 24 133 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 24 141 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 24 149 0 146] 
#[1 24 153 0 146 24 157 0 215] 
#[0 11 114 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 65 2 47 20 65 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 65 2 54 20 65 2 55 4 1 2 56 20 65 2 63 20 65 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 65 2 97 20 65 2 98 20 65 2 99 20 65 2 100 20 65 2 101 20 65 2 102 20 65 2 103 20 65 2 104 20 65 2 105 20 65 2 106 20 65 2 107 20 65 2 108 20 65 2 109 20 65 2 110 20 65 2 111 20 65 2 112 20 65 2 113 20 65 2 114 20 65 2 115 20 65 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 65 2 122 4 169 2 125 4 173 2 136 24 161 2 148 20 73 2 151 4 177 2 155 4 181 2 158 20 65 2 159] 
#[1 6 53 0 3 11 118 0 4 4 211 0 5 11 118 0 6 6 57 0 7 11 118 0 8 6 61 0 9 11 118 0 10 11 118 0 11 6 65 0 12 11 118 0 13 6 69 0 15 11 118 0 16 11 118 0 17 6 73 0 19 6 77 0 20 11 118 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 118 0 28 11 118 0 32 6 105 0 34 6 109 0 35 4 215 0 38 11 118 0 45 4 219 0 80 11 118 0 83 11 118 0 87 11 118 0 90 11 118 0 99 11 118 0 105 11 118 0 108 11 118 0 110 11 118 0 115 6 113 0 116 6 117 0 118 11 118 0 121 11 118 0 123 6 121 0 125 6 125 0 130 11 118 0 146 6 129 0 150 6 133 0 151 11 118 0 152 11 118 0 171 11 118 0 177 11 118 0 179 11 118 0 186 11 118 0 188 11 118 0 190 11 118 0 201 6 137 0 207 6 141 0 209 11 118 0 210 6 145 0 211 11 118 0 212 11 118 0 214 11 118 0 215 6 149 0 235 24 173 2 152] 
#[0 11 122 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 126 0 3 11 126 0 4 11 126 0 5 11 126 0 6 11 126 0 7 11 126 0 8 11 126 0 9 11 126 0 10 11 126 0 11 11 126 0 12 11 126 0 13 11 126 0 15 11 126 0 16 11 126 0 17 11 126 0 19 11 126 0 20 11 126 0 21 11 126 0 22 11 126 0 23 11 126 0 24 11 126 0 25 11 126 0 26 11 126 0 27 11 126 0 28 11 126 0 32 11 126 0 34 11 126 0 35 11 126 0 38 11 126 0 45 11 126 0 80 11 126 0 83 11 126 0 87 11 126 0 90 11 126 0 99 11 126 0 105 11 126 0 108 11 126 0 110 11 126 0 115 11 126 0 116 11 126 0 118 11 126 0 121 11 126 0 123 11 126 0 125 11 126 0 130 11 126 0 146 11 126 0 150 11 126 0 151 11 126 0 152 11 126 0 171 11 126 0 177 11 126 0 179 11 126 0 186 11 126 0 188 11 126 0 190 11 126 0 201 11 126 0 207 11 126 0 209 11 126 0 210 11 126 0 211 11 126 0 212 11 126 0 214 11 126 0 215 24 177 2 150] 
#[0 11 130 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 181 2 47 24 181 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 181 2 54 24 181 2 55 4 1 2 56 24 181 2 63 24 181 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 181 2 97 24 181 2 98 24 181 2 99 24 181 2 100 24 181 2 101 24 181 2 102 24 181 2 103 24 181 2 104 24 181 2 105 24 181 2 106 24 181 2 107 24 181 2 108 24 181 2 109 24 181 2 110 24 181 2 111 24 181 2 112 24 181 2 113 24 181 2 114 24 181 2 115 24 181 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 181 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 24 181 2 159] 
#[1 6 53 0 3 11 134 0 4 4 223 0 5 11 134 0 6 6 57 0 7 11 134 0 8 6 61 0 9 11 134 0 10 11 134 0 11 6 65 0 12 11 134 0 13 6 69 0 15 11 134 0 16 11 134 0 17 6 73 0 19 6 77 0 20 11 134 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 134 0 28 11 134 0 32 6 105 0 34 6 109 0 35 11 134 0 38 11 134 0 45 11 134 0 80 11 134 0 83 11 134 0 87 11 134 0 90 11 134 0 99 11 134 0 105 11 134 0 108 11 134 0 110 11 134 0 115 6 113 0 116 6 117 0 118 11 134 0 121 11 134 0 123 6 121 0 125 6 125 0 130 11 134 0 146 6 129 0 150 6 133 0 151 11 134 0 152 11 134 0 171 11 134 0 177 11 134 0 179 11 134 0 186 11 134 0 188 11 134 0 190 11 134 0 201 6 137 0 207 6 141 0 209 11 134 0 210 6 145 0 211 11 134 0 212 11 134 0 214 11 134 0 215 6 149 0 235] 
#[1 6 53 0 3 11 138 0 4 4 227 0 5 11 138 0 6 6 57 0 7 11 138 0 8 6 61 0 9 11 138 0 10 11 138 0 11 6 65 0 12 11 138 0 13 6 69 0 15 11 138 0 16 11 138 0 17 6 73 0 19 6 77 0 20 11 138 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 138 0 28 11 138 0 32 6 105 0 34 6 109 0 35 11 138 0 38 11 138 0 45 11 138 0 80 11 138 0 83 11 138 0 87 11 138 0 90 11 138 0 99 11 138 0 105 11 138 0 108 11 138 0 110 11 138 0 115 6 113 0 116 6 117 0 118 11 138 0 121 11 138 0 123 6 121 0 125 6 125 0 130 11 138 0 146 6 129 0 150 6 133 0 151 11 138 0 152 11 138 0 171 11 138 0 177 11 138 0 179 11 138 0 186 11 138 0 188 11 138 0 190 11 138 0 201 6 137 0 207 6 141 0 209 11 138 0 210 6 145 0 211 11 138 0 212 11 138 0 214 11 138 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 185 2 47 24 185 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 185 2 54 24 185 2 55 4 1 2 56 24 185 2 63 24 185 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 185 2 97 24 185 2 98 24 185 2 99 24 185 2 100 24 185 2 101 24 185 2 102 24 185 2 103 24 185 2 104 24 185 2 105 24 185 2 106 24 185 2 107 24 185 2 108 24 185 2 109 24 185 2 110 24 185 2 111 24 185 2 112 24 185 2 113 24 185 2 114 24 185 2 115 24 185 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 185 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 24 185 2 159] 
#[1 6 53 0 3 11 142 0 4 4 231 0 5 11 142 0 6 6 57 0 7 11 142 0 8 6 61 0 9 11 142 0 10 11 142 0 11 6 65 0 12 11 142 0 13 6 69 0 15 11 142 0 16 11 142 0 17 6 73 0 19 6 77 0 20 11 142 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 142 0 28 11 142 0 32 6 105 0 34 6 109 0 35 11 142 0 38 11 142 0 45 11 142 0 80 11 142 0 83 11 142 0 87 11 142 0 90 11 142 0 99 11 142 0 105 11 142 0 108 11 142 0 110 11 142 0 115 6 113 0 116 6 117 0 118 11 142 0 121 11 142 0 123 6 121 0 125 6 125 0 130 11 142 0 146 6 129 0 150 6 133 0 151 11 142 0 152 11 142 0 171 11 142 0 177 11 142 0 179 11 142 0 186 11 142 0 188 11 142 0 190 11 142 0 201 6 137 0 207 6 141 0 209 11 142 0 210 6 145 0 211 11 142 0 212 11 142 0 214 11 142 0 215 6 149 0 235] 
#[1 6 53 0 3 11 146 0 4 4 235 0 5 11 146 0 6 6 57 0 7 11 146 0 8 6 61 0 9 11 146 0 10 11 146 0 11 6 65 0 12 11 146 0 13 6 69 0 15 11 146 0 16 11 146 0 17 6 73 0 19 6 77 0 20 11 146 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 146 0 28 11 146 0 32 6 105 0 34 6 109 0 35 11 146 0 38 11 146 0 45 11 146 0 80 11 146 0 83 11 146 0 87 11 146 0 90 11 146 0 99 11 146 0 105 11 146 0 108 11 146 0 110 11 146 0 115 6 113 0 116 6 117 0 118 11 146 0 121 11 146 0 123 6 121 0 125 6 125 0 130 11 146 0 146 6 129 0 150 6 133 0 151 11 146 0 152 11 146 0 171 11 146 0 177 11 146 0 179 11 146 0 186 11 146 0 188 11 146 0 190 11 146 0 201 6 137 0 207 6 141 0 209 11 146 0 210 6 145 0 211 11 146 0 212 11 146 0 214 11 146 0 215 6 149 0 235] 
#[1 6 53 0 3 11 150 0 4 4 239 0 5 11 150 0 6 6 57 0 7 11 150 0 8 6 61 0 9 11 150 0 10 11 150 0 11 6 65 0 12 11 150 0 13 6 69 0 15 11 150 0 16 11 150 0 17 6 73 0 19 6 77 0 20 11 150 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 11 150 0 28 11 150 0 32 6 105 0 34 6 109 0 35 11 150 0 38 11 150 0 45 11 150 0 80 11 150 0 83 11 150 0 87 11 150 0 90 11 150 0 99 11 150 0 105 11 150 0 108 11 150 0 110 11 150 0 115 6 113 0 116 6 117 0 118 11 150 0 121 11 150 0 123 6 121 0 125 6 125 0 130 11 150 0 146 6 129 0 150 6 133 0 151 11 150 0 152 11 150 0 171 11 150 0 177 11 150 0 179 11 150 0 186 11 150 0 188 11 150 0 190 11 150 0 201 6 137 0 207 6 141 0 209 11 150 0 210 6 145 0 211 11 150 0 212 11 150 0 214 11 150 0 215 6 149 0 235] 
#[1 24 189 0 17 24 193 0 215] 
#[1 0 73 0 19 24 197 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 0 73 0 19 24 201 0 88 7 53 0 229 7 57 0 253 0 89 0 254 0 93 0 255 11 149 1 68] 
#[1 24 205 0 17 24 209 0 215] 
#[0 24 213 0 114] 
#[0 24 217 0 114] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 24 221 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[1 0 73 0 19 0 26 0 70 7 6 0 78 0 30 0 79 24 225 0 88 0 30 0 89 7 10 0 93 0 7 0 98 7 14 0 100 0 30 0 114 0 26 0 132 0 26 0 141 1 203 0 154 0 11 0 158 0 7 0 160 7 6 0 161 0 7 0 162 0 7 0 163 7 6 0 166 1 207 0 173 0 34 0 183 7 14 0 184 7 6 0 206 16 141 0 253 0 89 0 254 0 93 0 255 16 149 1 41 16 149 1 65 12 21 1 66 16 149 1 69 0 137 1 70 16 149 1 76 0 145 1 77 16 149 1 84 16 149 1 91 16 149 1 99 16 149 1 107 16 149 1 109 16 149 1 116 16 165 1 117 16 149 1 120 16 149 1 154 16 177 1 155 16 149 1 203 16 185 1 204] 
#[1 24 229 0 17 24 233 0 215] 
#[1 24 237 0 17 24 241 0 215] 
#[0 24 245 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 24 249 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[0 24 253 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 25 1 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 25 5 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 25 9 1 72] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 25 13 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 4 210 0 19 4 210 0 40 4 210 0 70 4 210 0 72 4 210 0 74 4 210 0 77 4 210 0 78 4 210 0 79 4 210 0 81 4 210 0 88 4 210 0 89 4 210 0 93 4 210 0 98 4 210 0 100 12 165 0 108 4 210 0 114 4 210 0 120 4 210 0 132 4 210 0 133 4 210 0 137 4 210 0 141 4 210 0 142 4 210 0 147 4 210 0 154 4 210 0 155 4 210 0 156 4 210 0 158 4 210 0 160 4 210 0 161 4 210 0 162 4 210 0 163 4 210 0 166 4 210 0 173 4 210 0 174 4 210 0 183 4 210 0 184 4 210 0 203 4 210 0 205 4 210 0 206 12 169 1 57 25 17 1 72] 
#[0 25 21 0 183] 
#[0 25 25 0 183] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 25 29 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 25 33 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 18 57 1 41 18 57 1 65 12 21 1 66 18 57 1 69 0 137 1 70 18 57 1 76 0 145 1 77 18 57 1 80 18 57 1 84 18 57 1 99 18 57 1 106 18 57 1 108 18 57 1 113 12 41 1 114 18 57 1 115 18 57 1 118 18 57 1 119 18 57 1 125 18 57 1 126 12 65 1 127 18 57 1 129 18 57 1 148 12 77 1 149 18 57 1 151 18 57 1 152 12 89 1 153 18 57 1 159 18 57 1 165 12 101 1 166 18 57 1 172 12 109 1 173 12 113 1 174 18 57 1 188 18 57 1 190 12 125 1 191 18 57 1 193 12 133 1 194 18 57 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 18 57 1 212 18 17 1 213] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 25 37 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 25 37 1 92] 
#[1 11 154 0 6 11 154 0 11 2 65 0 24 25 41 0 37 11 154 0 215 25 45 0 239] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 11 81 0 253 0 89 0 254 0 93 0 255 25 49 1 112] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 25 53 1 139 11 105 1 140] 
#[0 11 158 0 6 0 11 0 215] 
#[0 11 162 0 6 0 11 0 24 0 37 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 25 57 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 25 57 1 92] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 25 61 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 11 166 0 17 0 106 0 108 0 215] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 11 81 0 253 0 89 0 254 0 93 0 255 25 65 1 112] 
#[1 11 170 0 17 25 69 0 37 11 170 0 106 11 170 0 108 11 170 0 215] 
#[0 11 174 0 17 0 106 0 108 0 215] 
#[0 11 178 0 19 0 88 0 229] 
#[0 11 182 0 19 0 88 0 229] 
#[1 25 73 0 17 25 77 0 215] 
#[0 11 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 11 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 25 81 0 89] 
#[0 25 85 0 89] 
#[0 11 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 11 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 2 225 0 11 11 202 0 17 11 202 0 215 25 89 0 234 25 93 1 89] 
#[0 11 206 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 11 210 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 112 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 25 97 0 17 25 101 0 215] 
#[1 2 145 0 100 21 69 0 154 21 69 0 173 2 149 0 184 25 105 1 110 25 109 1 111 21 69 1 123] 
#[1 25 113 0 93 21 81 0 173 21 81 1 158] 
#[1 21 109 0 78 21 109 0 154 17 165 0 161 21 109 0 166 21 109 0 173 21 109 0 206 25 117 1 189 21 109 1 208] 
#[0 11 214 0 100 0 154 0 173 0 184] 
#[0 11 218 0 100 0 154 0 173 0 184] 
#[1 25 121 0 17 25 125 0 215] 
#[1 25 129 0 17 25 133 0 215] 
#[0 11 222 0 100 0 154 0 173 0 184] 
#[0 25 137 0 229] 
#[0 11 226 0 93 0 173] 
#[0 11 230 0 93 0 173] 
#[0 11 234 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 238 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 242 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 246 0 78 0 154 0 161 0 166 0 173 0 206] 
#[0 11 250 0 78 0 154 0 161 0 166 0 173 0 206] 
#[1 25 141 0 17 25 145 0 215] 
#[0 11 254 0 78 0 154 0 161 0 166 0 173 0 206] 
#[1 25 149 0 17 25 153 0 215] 
#[0 12 2 0 6 0 11 0 214 0 215] 
#[0 12 6 0 6 0 11 0 214 0 215] 
#[0 12 10 0 6 0 11 0 214 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 21 117 0 70 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 21 121 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 21 125 0 183 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 25 157 0 249 25 161 0 252 21 137 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 21 137 1 92] 
#[0 12 14 0 6 0 11 0 215] 
#[0 12 18 0 6 0 11 0 214 0 215] 
#[1 11 197 0 110 11 197 0 153 11 189 0 229 25 165 0 246 11 197 0 247] 
#[0 12 22 0 5 0 17 0 37 0 106 0 108 0 215] 
#[0 12 26 0 6 0 11 0 215] 
#[0 12 30 0 6 0 11 0 215] 
#[0 25 169 0 114] 
#[0 25 173 0 114] 
#[0 12 34 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 12 38 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 21 221 0 106 21 225 0 108 25 177 0 215 21 233 1 101 25 181 1 124 21 241 1 143] 
#[1 21 221 0 106 21 225 0 108 25 185 0 215 21 233 1 101 25 189 1 124 21 241 1 143] 
#[1 4 182 0 40 4 182 0 98 4 182 0 100 4 182 0 120 4 182 0 142 4 182 0 154 4 182 0 155 4 182 0 156 4 182 0 158 4 182 0 160 4 182 0 162 4 182 0 163 4 182 0 173 4 182 0 174 4 182 0 184 25 193 1 114] 
#[1 25 205 0 36 25 205 0 41 25 197 0 100 25 201 0 184 25 205 0 197 25 205 1 133] 
#[0 25 209 0 138] 
#[0 25 213 0 93] 
#[0 25 217 0 229] 
#[1 22 37 0 229 25 221 1 168 22 45 1 171] 
#[1 25 225 0 17 25 229 0 215] 
#[1 21 225 0 108 25 233 0 215 25 237 1 101] 
#[1 25 241 0 17 21 225 0 108 25 245 0 215 25 249 1 101] 
#[0 25 253 0 229] 
#[1 26 1 0 128 26 5 0 134 26 9 0 135 26 13 0 229 26 17 1 144 26 21 1 147] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 26 25 1 43 26 25 1 44 26 25 1 45 26 25 1 52 26 25 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 26 29 1 102 26 33 1 105] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 26 37 1 217 14 29 1 219] 
#[0 12 42 0 17 0 215] 
#[0 26 41 0 215] 
#[0 12 46 0 17 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 26 45 1 217 14 29 1 219] 
#[0 26 49 0 215] 
#[1 17 57 0 40 17 57 0 98 2 145 0 100 17 57 0 120 17 57 0 142 17 57 0 154 17 57 0 155 17 57 0 156 17 57 0 158 17 57 0 160 17 57 0 162 17 57 0 163 17 57 0 173 17 57 0 174 2 149 0 184 17 57 0 242 26 53 1 110 26 57 1 111 17 57 1 121] 
#[0 12 50 0 100 0 184] 
#[0 12 54 0 100 0 184] 
#[0 26 61 0 229] 
#[0 26 65 0 229] 
#[0 12 58 0 100 0 184] 
#[1 26 69 0 100 26 73 0 184] 
#[1 2 29 0 5 26 77 0 215 26 81 0 235] 
#[0 26 85 0 229] 
#[1 2 29 0 5 12 62 0 17 26 89 0 37 12 62 0 108 12 62 0 215 26 93 0 235 26 97 1 156] 
#[1 2 65 0 24 26 101 0 37 26 105 0 239] 
#[1 26 109 0 17 26 113 0 215] 
#[1 12 66 0 11 12 66 0 17 12 66 0 215 26 117 1 170] 
#[0 12 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 12 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 29 0 5 12 78 0 17 26 121 0 37 12 78 0 108 12 78 0 215 26 125 0 235] 
#[1 0 73 0 19 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 26 145 1 192 26 149 1 209 26 149 1 210 26 149 1 211] 
#[0 26 161 0 215] 
#[0 12 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 12 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 26 165 0 17 26 169 0 215] 
#[1 2 29 0 5 2 65 0 24 26 173 0 37 12 90 0 108 12 90 0 215 26 177 0 235 26 181 0 239 26 185 1 197 26 189 1 198] 
#[0 12 94 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 12 98 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 2 225 0 11 12 102 0 17 12 102 0 215 26 193 0 234 26 197 1 59] 
#[0 12 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 12 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 108 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 26 201 0 17 26 205 0 215] 
#[1 22 141 0 137 26 209 0 147 22 141 0 154 22 141 0 163 22 141 0 173 22 141 0 174 22 141 0 203 22 141 1 214] 
#[0 12 114 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 27 53 0 3 0 7 0 9 0 12 0 15 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 34 0 62 0 117 0 119 0 125 0 130 0 140 0 150 0 207 0 209 0 211 1 215] 
#[0 12 118 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 122 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 126 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 130 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 134 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 12 138 0 137 0 147 0 154 0 163 0 173 0 174 0 203] 
#[0 27 57 0 70] 
#[1 27 61 0 17 27 65 0 215] 
#[0 27 69 0 70] 
#[0 27 73 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 27 77 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[0 27 81 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 27 85 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 27 89 0 17 27 93 0 215] 
#[1 27 97 0 17 27 101 0 215] 
#[0 27 105 0 183] 
#[0 27 109 0 183] 
#[1 27 113 0 6 3 137 0 215 27 113 0 236] 
#[0 12 142 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 27 117 2 132 15 109 2 135] 
#[0 12 146 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 27 121 0 215 15 101 0 229 27 125 2 132 15 109 2 135] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 129 2 47 27 129 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 27 129 2 54 27 129 2 55 4 1 2 56 27 129 2 63 27 129 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 27 129 2 97 27 129 2 98 27 129 2 99 27 129 2 100 27 129 2 101 27 129 2 102 27 129 2 103 27 129 2 104 27 129 2 105 27 129 2 106 27 129 2 107 27 129 2 108 27 129 2 109 27 129 2 110 27 129 2 111 27 129 2 112 27 129 2 113 27 129 2 114 27 129 2 115 27 129 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 27 129 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 27 129 2 159] 
#[1 6 53 0 3 12 150 0 4 4 243 0 5 12 150 0 6 6 57 0 7 12 150 0 8 6 61 0 9 12 150 0 10 12 150 0 11 6 65 0 12 12 150 0 13 6 69 0 15 12 150 0 16 12 150 0 17 6 73 0 19 6 77 0 20 12 150 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 12 150 0 28 12 150 0 32 6 105 0 34 6 109 0 35 12 150 0 38 12 150 0 45 12 150 0 80 12 150 0 83 12 150 0 87 12 150 0 90 12 150 0 99 12 150 0 105 12 150 0 108 12 150 0 110 12 150 0 115 6 113 0 116 6 117 0 118 12 150 0 121 12 150 0 123 6 121 0 125 6 125 0 130 12 150 0 146 6 129 0 150 6 133 0 151 12 150 0 152 12 150 0 171 12 150 0 177 12 150 0 179 12 150 0 186 12 150 0 188 12 150 0 190 12 150 0 201 6 137 0 207 6 141 0 209 12 150 0 210 6 145 0 211 12 150 0 212 12 150 0 214 12 150 0 215 6 149 0 235] 
#[0 12 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 27 133 2 132 15 109 2 135] 
#[0 12 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 162 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 0 15 0 5 1 11 0 6 1 11 0 14 0 238 0 29 1 11 0 215 13 41 0 235 7 149 1 47 7 153 1 48 27 137 2 60 27 141 2 61] 
#[1 12 170 0 6 18 165 0 14 12 170 0 215 18 169 2 59] 
#[1 5 2 0 6 5 2 0 14 5 2 0 215 27 145 2 60] 
#[0 12 174 0 6 0 14 0 215] 
#[1 12 178 0 6 2 225 0 11 12 178 0 215 6 197 0 234] 
#[1 27 149 0 6 3 137 0 215 27 149 0 236] 
#[0 27 153 0 228] 
#[1 2 29 0 5 12 182 0 6 12 182 0 14 12 182 0 215 27 157 0 235 27 161 2 61] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 165 2 47 27 165 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 27 165 2 54 27 165 2 55 4 1 2 56 27 165 2 63 27 165 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 27 165 2 97 27 165 2 98 27 165 2 99 27 165 2 100 27 165 2 101 27 165 2 102 27 165 2 103 27 165 2 104 27 165 2 105 27 165 2 106 27 165 2 107 27 165 2 108 27 165 2 109 27 165 2 110 27 165 2 111 27 165 2 112 27 165 2 113 27 165 2 114 27 165 2 115 27 165 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 27 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 27 165 2 159] 
#[0 12 186 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 246 0 1 4 246 0 3 1 3 0 5 4 246 0 7 4 246 0 9 4 246 0 11 4 246 0 12 4 246 0 14 4 246 0 15 4 246 0 19 4 246 0 20 4 246 0 22 4 246 0 23 2 65 0 24 4 246 0 25 4 246 0 26 4 246 0 27 4 246 0 34 4 246 0 35 4 246 0 116 4 246 0 118 4 246 0 125 4 246 0 130 4 246 0 150 4 246 0 151 4 246 0 207 4 246 0 209 4 246 0 211 4 246 0 214 4 246 0 215 12 241 0 235 27 169 0 239] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 173 2 47 27 173 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 27 173 2 54 27 173 2 55 4 1 2 56 27 173 2 63 27 173 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 27 173 2 97 27 173 2 98 27 173 2 99 27 173 2 100 27 173 2 101 27 173 2 102 27 173 2 103 27 173 2 104 27 173 2 105 27 173 2 106 27 173 2 107 27 173 2 108 27 173 2 109 27 173 2 110 27 173 2 111 27 173 2 112 27 173 2 113 27 173 2 114 27 173 2 115 27 173 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 27 173 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 27 173 2 159] 
#[0 27 177 0 228] 
#[1 4 18 0 1 4 18 0 3 0 87 0 5 4 18 0 7 4 18 0 9 4 18 0 11 4 18 0 12 4 18 0 14 4 18 0 15 4 18 0 19 4 18 0 20 4 18 0 22 4 18 0 23 2 65 0 24 4 18 0 25 4 18 0 26 4 18 0 27 4 18 0 34 4 18 0 35 4 18 0 116 4 18 0 118 4 18 0 125 4 18 0 130 4 18 0 150 4 18 0 151 4 18 0 207 4 18 0 209 4 18 0 211 4 18 0 214 4 18 0 215 7 189 0 235 27 181 0 239] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 13 61 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 13 65 0 122 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 13 69 2 47 13 69 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 13 69 2 54 13 69 2 55 4 1 2 56 13 69 2 63 13 69 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 27 185 2 84 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 13 69 2 97 13 69 2 98 13 69 2 99 13 69 2 100 13 69 2 101 13 69 2 102 13 69 2 103 13 69 2 104 13 69 2 105 13 69 2 106 13 69 2 107 13 69 2 108 13 69 2 109 13 69 2 110 13 69 2 111 13 69 2 112 13 69 2 113 13 69 2 114 13 69 2 115 13 69 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 13 69 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 13 69 2 159] 
#[0 12 190 0 11 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 12 194 0 6 6 57 0 7 6 61 0 9 12 194 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 12 194 0 215 6 149 0 235] 
#[0 12 198 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 213 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 13 85 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 189 1 187 23 149 2 47 23 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 23 149 2 54 23 149 2 55 4 1 2 56 23 149 2 63 23 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 23 149 2 97 23 149 2 98 23 149 2 99 23 149 2 100 23 149 2 101 23 149 2 102 23 149 2 103 23 149 2 104 23 149 2 105 23 149 2 106 23 149 2 107 23 149 2 108 23 149 2 109 23 149 2 110 23 149 2 111 23 149 2 112 23 149 2 113 23 149 2 114 23 149 2 115 23 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 23 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 23 149 2 159] 
#[0 12 202 0 6 0 11 0 215] 
#[0 12 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 210 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 214 0 6 2 225 0 11 12 214 0 215 27 193 0 234 27 197 2 75] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 5 105 1 42 1 105 1 43 1 105 1 44 1 105 1 45 27 201 1 49 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 5 105 1 92] 
#[1 27 205 0 6 3 137 0 215 27 205 0 236] 
#[0 27 209 0 88] 
#[0 12 218 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 12 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 12 226 0 3 12 226 0 4 12 226 0 5 12 226 0 6 12 226 0 7 12 226 0 8 12 226 0 9 12 226 0 10 12 226 0 11 12 226 0 12 12 226 0 13 12 226 0 15 12 226 0 16 4 247 0 17 12 226 0 19 12 226 0 20 12 226 0 21 12 226 0 22 12 226 0 23 12 226 0 24 12 226 0 25 12 226 0 26 12 226 0 27 12 226 0 28 12 226 0 32 12 226 0 34 12 226 0 35 12 226 0 38 12 226 0 45 12 226 0 80 12 226 0 83 12 226 0 87 12 226 0 90 12 226 0 99 12 226 0 105 12 226 0 108 12 226 0 110 12 226 0 115 12 226 0 116 12 226 0 118 12 226 0 121 12 226 0 123 12 226 0 125 12 226 0 130 12 226 0 146 12 226 0 150 12 226 0 151 12 226 0 152 12 226 0 171 12 226 0 177 12 226 0 179 12 226 0 186 12 226 0 188 12 226 0 190 12 226 0 201 12 226 0 207 12 226 0 209 12 226 0 210 12 226 0 211 12 226 0 212 12 226 0 214 12 226 0 215 23 101 1 223] 
#[0 12 230 0 1 0 5 0 9 0 12 0 14 0 17 0 30 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 72 0 73 0 75 0 76 0 81 0 82 0 84 0 85 0 87 0 88 0 91 0 92 0 94 0 96 0 97 0 99 0 100 0 102 0 103 0 104 0 107 0 113 0 120 0 126 0 127 0 128 0 129 0 134 0 135 0 138 0 139 0 140 0 143 0 146 0 164 0 165 0 167 0 168 0 169 0 170 0 171 0 175 0 176 0 178 0 180 0 182 0 184 0 185 0 189 0 191 0 192 0 193 0 194 0 195 0 196 0 199 0 202 0 204 0 208 0 213 0 215 0 219 0 220 0 221 0 222 0 223 0 224 0 225 0 226 0 227 0 229] 
#[0 12 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 27 213 0 215] 
#[0 27 217 0 88] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 27 221 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 221 1 92] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 27 225 1 217 14 29 1 219] 
#[1 6 53 0 3 12 238 0 4 4 251 0 5 12 238 0 6 6 57 0 7 12 238 0 8 6 61 0 9 12 238 0 10 12 238 0 11 6 65 0 12 12 238 0 13 6 69 0 15 12 238 0 16 12 238 0 17 6 73 0 19 6 77 0 20 12 238 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 12 238 0 28 12 238 0 32 6 105 0 34 6 109 0 35 12 238 0 38 12 238 0 45 12 238 0 80 12 238 0 83 12 238 0 87 12 238 0 90 12 238 0 99 12 238 0 105 12 238 0 108 12 238 0 110 12 238 0 115 6 113 0 116 6 117 0 118 12 238 0 121 12 238 0 123 6 121 0 125 6 125 0 130 12 238 0 146 6 129 0 150 6 133 0 151 12 238 0 152 12 238 0 171 12 238 0 177 12 238 0 179 12 238 0 186 12 238 0 188 12 238 0 190 12 238 0 201 6 137 0 207 6 141 0 209 12 238 0 210 6 145 0 211 12 238 0 212 12 238 0 214 12 238 0 215 6 149 0 235] 
#[1 6 53 0 3 12 242 0 4 4 255 0 5 12 242 0 6 6 57 0 7 12 242 0 8 6 61 0 9 12 242 0 10 12 242 0 11 6 65 0 12 12 242 0 13 6 69 0 15 12 242 0 16 12 242 0 17 6 73 0 19 6 77 0 20 12 242 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 12 242 0 28 12 242 0 32 6 105 0 34 6 109 0 35 12 242 0 38 12 242 0 45 12 242 0 80 12 242 0 83 12 242 0 87 12 242 0 90 12 242 0 99 12 242 0 105 12 242 0 108 12 242 0 110 12 242 0 115 6 113 0 116 6 117 0 118 12 242 0 121 12 242 0 123 6 121 0 125 6 125 0 130 12 242 0 146 6 129 0 150 6 133 0 151 12 242 0 152 12 242 0 171 12 242 0 177 12 242 0 179 12 242 0 186 12 242 0 188 12 242 0 190 12 242 0 201 6 137 0 207 6 141 0 209 12 242 0 210 6 145 0 211 12 242 0 212 12 242 0 214 12 242 0 215 6 149 0 235] 
#[1 12 246 0 3 12 246 0 4 12 246 0 5 12 246 0 6 12 246 0 7 12 246 0 8 12 246 0 9 12 246 0 10 12 246 0 11 12 246 0 12 12 246 0 13 12 246 0 15 12 246 0 16 12 246 0 17 12 246 0 19 12 246 0 20 12 246 0 21 12 246 0 22 12 246 0 23 12 246 0 24 12 246 0 25 12 246 0 26 12 246 0 27 12 246 0 28 12 246 0 32 12 246 0 34 12 246 0 35 12 246 0 38 12 246 0 45 12 246 0 80 12 246 0 83 12 246 0 87 12 246 0 90 12 246 0 99 12 246 0 105 12 246 0 108 12 246 0 110 12 246 0 115 12 246 0 116 12 246 0 118 12 246 0 121 12 246 0 123 12 246 0 125 12 246 0 130 12 246 0 146 12 246 0 150 12 246 0 151 12 246 0 152 12 246 0 171 12 246 0 177 12 246 0 179 12 246 0 186 12 246 0 188 12 246 0 190 27 229 0 198 12 246 0 201 27 229 0 202 12 246 0 207 12 246 0 209 12 246 0 210 12 246 0 211 12 246 0 212 12 246 0 214 12 246 0 215 27 229 2 5] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 127 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 27 233 1 217 14 29 1 219] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 237 2 47 27 237 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 27 237 2 54 27 237 2 55 4 1 2 56 27 237 2 63 27 237 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 27 237 2 97 27 237 2 98 27 237 2 99 27 237 2 100 27 237 2 101 27 237 2 102 27 237 2 103 27 237 2 104 27 237 2 105 27 237 2 106 27 237 2 107 27 237 2 108 27 237 2 109 27 237 2 110 27 237 2 111 27 237 2 112 27 237 2 113 27 237 2 114 27 237 2 115 27 237 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 27 237 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 27 237 2 159] 
#[0 12 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 27 241 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 245 2 47 27 245 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 27 245 2 54 27 245 2 55 4 1 2 56 27 245 2 63 27 245 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 27 245 2 97 27 245 2 98 27 245 2 99 27 245 2 100 27 245 2 101 27 245 2 102 27 245 2 103 27 245 2 104 27 245 2 105 27 245 2 106 27 245 2 107 27 245 2 108 27 245 2 109 27 245 2 110 27 245 2 111 27 245 2 112 27 245 2 113 27 245 2 114 27 245 2 115 27 245 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 27 245 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 27 245 2 159] 
#[1 6 53 0 3 2 29 0 5 8 18 0 6 6 57 0 7 6 61 0 9 8 18 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 8 18 0 215 6 149 0 235] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 27 249 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 27 249 1 92] 
#[0 12 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 27 253 0 190 6 137 0 207 6 141 0 209 6 145 0 211 6 149 0 235] 
#[1 13 2 0 87 13 2 0 88 13 2 0 226 28 1 1 242] 
#[1 5 3 0 1 11 10 0 3 11 10 0 4 5 7 0 5 11 10 0 6 11 10 0 7 11 10 0 8 5 11 0 9 11 10 0 10 11 10 0 11 5 15 0 12 11 10 0 13 5 19 0 14 11 10 0 15 11 10 0 16 5 23 0 17 11 10 0 19 11 10 0 20 11 10 0 21 11 10 0 22 11 10 0 23 11 10 0 24 11 10 0 25 11 10 0 26 11 10 0 27 11 10 0 28 5 27 0 30 5 31 0 31 5 35 0 32 11 10 0 34 11 10 0 35 11 10 0 38 5 39 0 40 3 13 0 42 5 43 0 44 11 10 0 45 5 47 0 48 5 51 0 49 5 55 0 50 5 59 0 51 5 63 0 52 5 67 0 53 5 71 0 54 5 75 0 55 5 79 0 56 5 83 0 57 5 87 0 58 5 91 0 59 5 95 0 60 5 99 0 61 5 103 0 62 5 107 0 63 5 111 0 64 5 115 0 65 5 119 0 66 5 123 0 69 5 127 0 72 5 131 0 73 5 135 0 75 5 139 0 76 11 10 0 80 5 143 0 81 5 147 0 82 11 10 0 83 5 151 0 84 5 155 0 85 5 23 0 87 5 159 0 88 11 10 0 90 5 163 0 91 5 167 0 92 5 171 0 94 5 175 0 97 5 179 0 99 5 39 0 100 5 183 0 102 5 187 0 103 5 191 0 104 11 10 0 105 5 195 0 107 11 10 0 108 11 10 0 110 5 199 0 113 11 10 0 115 11 10 0 116 11 10 0 118 5 39 0 120 11 10 0 121 11 10 0 123 11 10 0 125 5 203 0 126 5 207 0 128 5 211 0 129 11 10 0 130 5 215 0 134 5 219 0 135 5 223 0 138 3 121 0 140 5 227 0 143 5 231 0 146 11 10 0 150 11 10 0 151 11 10 0 152 5 235 0 164 5 239 0 165 5 243 0 167 5 247 0 168 5 251 0 169 5 255 0 170 6 3 0 171 6 7 0 175 6 11 0 176 11 10 0 177 6 15 0 178 11 10 0 179 6 19 0 180 6 23 0 182 5 39 0 184 6 27 0 185 11 10 0 186 11 10 0 188 6 31 0 189 11 10 0 190 6 35 0 191 6 39 0 192 6 43 0 193 6 47 0 194 6 51 0 195 6 55 0 196 6 59 0 199 11 10 0 201 6 63 0 202 6 67 0 204 11 10 0 207 6 71 0 208 11 10 0 209 11 10 0 210 11 10 0 211 11 10 0 212 6 75 0 213 11 10 0 214 5 23 0 215 6 79 0 219 6 83 0 220 6 87 0 221 6 91 0 222 6 95 0 223 6 99 0 224 6 103 0 225 5 190 0 226 6 107 0 227 6 111 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 23 89 1 216 28 5 1 217 14 29 1 219 23 89 1 220 9 221 1 221 23 89 1 225 9 229 1 226 23 89 1 227 23 89 1 228 23 89 1 229 23 89 1 230 23 89 1 231 23 89 1 232 23 89 1 233 23 89 1 234 23 89 1 235 23 89 1 237 23 89 1 238 23 89 1 239 23 89 1 240 23 89 1 241 23 89 1 245 23 89 1 247 23 89 2 0 23 89 2 1 23 89 2 2 23 89 2 3 23 89 2 4 23 89 2 6 23 89 2 11 23 89 2 12 23 89 2 13 23 89 2 14 23 89 2 18 23 89 2 19 23 89 2 20 23 89 2 21 23 89 2 23 23 89 2 25 23 89 2 26 23 89 2 27 23 89 2 29 23 89 2 31 23 89 2 32 23 89 2 33 23 89 2 34 23 89 2 35 23 89 2 40 23 89 2 44 23 89 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 28 9 1 217 14 29 1 219] 
#[1 13 6 0 3 13 6 0 4 13 6 0 5 13 6 0 6 13 6 0 7 13 6 0 8 13 6 0 9 13 6 0 10 13 6 0 11 13 6 0 12 13 6 0 13 13 6 0 15 13 6 0 16 13 6 0 17 13 6 0 19 13 6 0 20 13 6 0 21 13 6 0 22 13 6 0 23 13 6 0 24 13 6 0 25 13 6 0 26 13 6 0 27 13 6 0 28 13 6 0 32 13 6 0 34 13 6 0 35 13 6 0 38 13 6 0 45 13 6 0 80 13 6 0 83 6 115 0 87 13 6 0 90 13 6 0 99 13 6 0 105 13 6 0 108 13 6 0 110 13 6 0 115 13 6 0 116 13 6 0 118 13 6 0 121 13 6 0 123 13 6 0 125 13 6 0 130 13 6 0 146 13 6 0 150 13 6 0 151 13 6 0 152 13 6 0 171 13 6 0 177 13 6 0 179 13 6 0 186 13 6 0 188 13 6 0 190 13 6 0 201 13 6 0 207 13 6 0 209 13 6 0 210 13 6 0 211 13 6 0 212 13 6 0 214 13 6 0 215 28 17 1 246] 
#[1 13 2 0 87 13 2 0 88 13 2 0 226 28 21 1 242] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 28 25 0 234 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 28 29 2 47 28 29 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 28 29 2 54 28 29 2 55 4 1 2 56 28 29 2 63 28 29 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 28 29 2 97 28 29 2 98 28 29 2 99 28 29 2 100 28 29 2 101 28 29 2 102 28 29 2 103 28 29 2 104 28 29 2 105 28 29 2 106 28 29 2 107 28 29 2 108 28 29 2 109 28 29 2 110 28 29 2 111 28 29 2 112 28 29 2 113 28 29 2 114 28 29 2 115 28 29 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 28 29 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 28 29 2 159] 
#[0 28 33 0 220] 
#[0 13 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 28 37 0 6 3 137 0 215 28 37 0 236] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 28 41 2 39 14 189 2 47 14 189 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 14 189 2 54 14 189 2 55 4 1 2 56 14 189 2 63 14 189 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 14 189 2 97 14 189 2 98 14 189 2 99 14 189 2 100 14 189 2 101 14 189 2 102 14 189 2 103 14 189 2 104 14 189 2 105 14 189 2 106 14 189 2 107 14 189 2 108 14 189 2 109 14 189 2 110 14 189 2 111 14 189 2 112 14 189 2 113 14 189 2 114 14 189 2 115 14 189 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 14 189 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 14 189 2 159] 
#[0 13 22 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 13 26 0 4 6 119 0 5 13 26 0 6 6 57 0 7 13 26 0 8 6 61 0 9 13 26 0 10 13 26 0 11 6 65 0 12 13 26 0 13 6 69 0 15 13 26 0 16 13 26 0 17 6 73 0 19 6 77 0 20 13 26 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 13 26 0 28 13 26 0 32 6 105 0 34 6 109 0 35 13 26 0 38 13 26 0 45 13 26 0 80 13 26 0 83 13 26 0 87 13 26 0 90 13 26 0 99 13 26 0 105 13 26 0 108 13 26 0 110 13 26 0 115 6 113 0 116 6 117 0 118 13 26 0 121 13 26 0 123 6 121 0 125 6 125 0 130 13 26 0 146 6 129 0 150 6 133 0 151 13 26 0 152 13 26 0 171 13 26 0 177 13 26 0 179 13 26 0 186 13 26 0 188 13 26 0 190 13 26 0 201 6 137 0 207 6 141 0 209 13 26 0 210 6 145 0 211 13 26 0 212 13 26 0 214 13 26 0 215 6 149 0 235] 
#[1 11 74 0 67 11 74 0 88 28 45 1 248] 
#[1 28 49 0 67 28 53 0 88 28 57 1 249 28 61 1 255] 
#[0 28 65 0 88] 
#[1 28 69 0 68 28 73 0 88 28 77 0 96 28 81 2 16 28 85 2 17] 
#[1 15 33 0 229 28 89 1 178 14 245 1 179 14 249 1 182] 
#[0 13 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 28 93 1 43 28 93 1 44 28 93 1 45 28 93 1 52 28 93 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 13 34 0 3 13 34 0 4 13 34 0 5 13 34 0 6 13 34 0 7 13 34 0 8 13 34 0 9 13 34 0 10 13 34 0 11 13 34 0 12 13 34 0 13 13 34 0 15 13 34 0 16 13 34 0 17 13 34 0 19 13 34 0 20 13 34 0 21 13 34 0 22 13 34 0 23 2 65 0 24 13 34 0 25 13 34 0 26 13 34 0 27 13 34 0 28 13 34 0 32 13 34 0 34 13 34 0 35 13 34 0 38 13 34 0 45 13 34 0 80 13 34 0 83 13 34 0 87 13 34 0 90 13 34 0 99 13 34 0 105 13 34 0 108 13 34 0 110 13 34 0 115 13 34 0 116 13 34 0 118 13 34 0 121 13 34 0 123 13 34 0 125 13 34 0 130 13 34 0 146 13 34 0 150 13 34 0 151 13 34 0 152 13 34 0 171 13 34 0 177 13 34 0 179 13 34 0 186 13 34 0 188 13 34 0 190 13 34 0 201 13 34 0 207 13 34 0 209 13 34 0 210 13 34 0 211 13 34 0 212 13 34 0 214 13 34 0 215 28 97 0 239] 
#[0 13 38 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 13 42 0 4 6 123 0 5 13 42 0 6 6 57 0 7 13 42 0 8 6 61 0 9 13 42 0 10 13 42 0 11 6 65 0 12 13 42 0 13 6 69 0 15 13 42 0 16 13 42 0 17 6 73 0 19 6 77 0 20 13 42 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 13 42 0 28 13 42 0 32 6 105 0 34 6 109 0 35 13 42 0 38 13 42 0 45 13 42 0 80 13 42 0 83 13 42 0 87 13 42 0 90 13 42 0 99 13 42 0 105 13 42 0 108 13 42 0 110 13 42 0 115 6 113 0 116 6 117 0 118 13 42 0 121 13 42 0 123 6 121 0 125 6 125 0 130 13 42 0 146 6 129 0 150 6 133 0 151 13 42 0 152 13 42 0 171 13 42 0 177 13 42 0 179 13 42 0 186 13 42 0 188 13 42 0 190 13 42 0 201 6 137 0 207 6 141 0 209 13 42 0 210 6 145 0 211 13 42 0 212 13 42 0 214 13 42 0 215 6 149 0 235] 
#[1 15 33 0 229 28 101 1 182] 
#[0 13 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 28 105 0 88] 
#[0 28 109 0 88] 
#[0 28 113 0 88] 
#[0 13 50 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 28 117 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 28 121 1 217 14 29 1 219] 
#[0 13 54 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 13 58 0 4 6 127 0 5 13 58 0 6 6 57 0 7 13 58 0 8 6 61 0 9 13 58 0 10 13 58 0 11 6 65 0 12 13 58 0 13 6 69 0 15 13 58 0 16 13 58 0 17 6 73 0 19 6 77 0 20 13 58 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 13 58 0 28 13 58 0 32 6 105 0 34 6 109 0 35 13 58 0 38 13 58 0 45 13 58 0 80 13 58 0 83 13 58 0 87 13 58 0 90 13 58 0 99 13 58 0 105 13 58 0 108 13 58 0 110 13 58 0 115 6 113 0 116 6 117 0 118 13 58 0 121 13 58 0 123 6 121 0 125 6 125 0 130 13 58 0 146 6 129 0 150 6 133 0 151 13 58 0 152 13 58 0 171 13 58 0 177 13 58 0 179 13 58 0 186 13 58 0 188 13 58 0 190 13 58 0 201 6 137 0 207 6 141 0 209 13 58 0 210 6 145 0 211 13 58 0 212 13 58 0 214 13 58 0 215 6 149 0 235] 
#[1 11 106 0 115 28 125 0 215 28 125 2 154] 
#[0 13 62 0 115 0 229] 
#[0 28 129 0 115] 
#[1 20 41 0 105 10 161 0 121 28 133 0 146 28 137 0 215 28 141 2 127 10 209 2 137 10 245 2 157] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 145 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 28 149 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 28 153 0 146] 
#[1 28 157 0 146 28 161 0 215] 
#[1 15 101 0 229 28 165 2 132 15 109 2 135] 
#[1 11 106 0 115 28 169 0 215 28 169 2 154] 
#[1 28 173 0 215 15 101 0 229 28 177 2 132 15 109 2 135] 
#[0 28 181 0 45] 
#[1 2 65 0 24 28 185 0 239] 
#[1 6 53 0 3 13 66 0 4 6 131 0 5 13 66 0 6 6 57 0 7 13 66 0 8 6 61 0 9 13 66 0 10 13 66 0 11 6 65 0 12 13 66 0 13 6 69 0 15 13 66 0 16 13 66 0 17 6 73 0 19 6 77 0 20 13 66 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 13 66 0 28 13 66 0 32 6 105 0 34 6 109 0 35 13 66 0 38 13 66 0 45 13 66 0 80 13 66 0 83 13 66 0 87 13 66 0 90 13 66 0 99 13 66 0 105 13 66 0 108 13 66 0 110 13 66 0 115 6 113 0 116 6 117 0 118 13 66 0 121 13 66 0 123 6 121 0 125 6 125 0 130 13 66 0 146 6 129 0 150 6 133 0 151 13 66 0 152 13 66 0 171 13 66 0 177 13 66 0 179 13 66 0 186 13 66 0 188 13 66 0 190 13 66 0 201 6 137 0 207 6 141 0 209 13 66 0 210 6 145 0 211 13 66 0 212 13 66 0 214 13 66 0 215 6 149 0 235] 
#[1 15 101 0 229 28 189 2 132 15 109 2 135] 
#[1 11 106 0 115 28 193 0 215 28 193 2 154] 
#[1 28 197 0 215 15 101 0 229 28 201 2 132 15 109 2 135] 
#[1 15 101 0 229 28 205 2 135] 
#[0 13 70 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 209 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 28 213 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 28 217 0 146] 
#[1 28 221 0 146 28 225 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 28 229 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 28 233 0 90 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 6 149 0 235] 
#[0 13 74 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 13 78 0 3 13 78 0 4 13 78 0 5 13 78 0 6 13 78 0 7 13 78 0 8 13 78 0 9 13 78 0 10 13 78 0 11 13 78 0 12 13 78 0 13 13 78 0 15 13 78 0 16 13 78 0 17 13 78 0 19 13 78 0 20 13 78 0 21 13 78 0 22 13 78 0 23 13 78 0 24 13 78 0 25 13 78 0 26 13 78 0 27 13 78 0 28 13 78 0 32 13 78 0 34 13 78 0 35 13 78 0 38 13 78 0 45 13 78 0 80 13 78 0 83 13 78 0 87 13 78 0 90 13 78 0 99 13 78 0 105 13 78 0 108 13 78 0 110 13 78 0 115 13 78 0 116 13 78 0 118 13 78 0 121 13 78 0 123 13 78 0 125 13 78 0 130 13 78 0 146 13 78 0 150 13 78 0 151 13 78 0 152 13 78 0 171 13 78 0 177 13 78 0 179 13 78 0 186 13 78 0 188 13 78 0 190 13 78 0 201 13 78 0 207 13 78 0 209 13 78 0 210 13 78 0 211 13 78 0 212 13 78 0 214 13 78 0 215 28 237 2 140] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 241 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 28 245 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 28 249 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 28 253 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 29 1 0 146] 
#[0 13 82 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 86 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 90 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 13 94 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 13 98 0 3 13 98 0 4 13 98 0 5 13 98 0 6 13 98 0 7 13 98 0 8 13 98 0 9 13 98 0 10 6 135 0 11 13 98 0 12 13 98 0 13 13 98 0 15 13 98 0 16 13 98 0 17 13 98 0 19 13 98 0 20 13 98 0 21 13 98 0 22 13 98 0 23 13 98 0 24 13 98 0 25 13 98 0 26 13 98 0 27 13 98 0 28 13 98 0 32 13 98 0 34 13 98 0 35 13 98 0 38 13 98 0 45 13 98 0 80 13 98 0 83 13 98 0 87 13 98 0 90 13 98 0 99 13 98 0 105 13 98 0 108 13 98 0 110 13 98 0 115 13 98 0 116 13 98 0 118 13 98 0 121 13 98 0 123 13 98 0 125 13 98 0 130 13 98 0 146 13 98 0 150 13 98 0 151 13 98 0 152 13 98 0 171 13 98 0 177 13 98 0 179 13 98 0 186 13 98 0 188 13 98 0 190 13 98 0 201 13 98 0 207 13 98 0 209 13 98 0 210 13 98 0 211 13 98 0 212 13 98 0 214 13 98 0 215 29 5 0 234 29 9 2 149] 
#[1 6 53 0 3 13 102 0 4 6 139 0 5 13 102 0 6 6 57 0 7 13 102 0 8 6 61 0 9 13 102 0 10 13 102 0 11 6 65 0 12 13 102 0 13 6 69 0 15 13 102 0 16 13 102 0 17 6 73 0 19 6 77 0 20 13 102 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 13 102 0 28 13 102 0 32 6 105 0 34 6 109 0 35 13 102 0 38 13 102 0 45 13 102 0 80 13 102 0 83 13 102 0 87 13 102 0 90 13 102 0 99 13 102 0 105 13 102 0 108 13 102 0 110 13 102 0 115 6 113 0 116 6 117 0 118 13 102 0 121 13 102 0 123 6 121 0 125 6 125 0 130 13 102 0 146 6 129 0 150 6 133 0 151 13 102 0 152 13 102 0 171 13 102 0 177 13 102 0 179 13 102 0 186 13 102 0 188 13 102 0 190 13 102 0 201 6 137 0 207 6 141 0 209 13 102 0 210 6 145 0 211 13 102 0 212 13 102 0 214 13 102 0 215 6 149 0 235] 
#[1 6 53 0 3 13 106 0 4 6 143 0 5 13 106 0 6 6 57 0 7 13 106 0 8 6 61 0 9 13 106 0 10 13 106 0 11 6 65 0 12 13 106 0 13 6 69 0 15 13 106 0 16 13 106 0 17 6 73 0 19 6 77 0 20 13 106 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 13 106 0 28 13 106 0 32 6 105 0 34 6 109 0 35 13 106 0 38 13 106 0 45 13 106 0 80 13 106 0 83 13 106 0 87 13 106 0 90 13 106 0 99 13 106 0 105 13 106 0 108 13 106 0 110 13 106 0 115 6 113 0 116 6 117 0 118 13 106 0 121 13 106 0 123 6 121 0 125 6 125 0 130 13 106 0 146 6 129 0 150 6 133 0 151 13 106 0 152 13 106 0 171 13 106 0 177 13 106 0 179 13 106 0 186 13 106 0 188 13 106 0 190 13 106 0 201 6 137 0 207 6 141 0 209 13 106 0 210 6 145 0 211 13 106 0 212 13 106 0 214 13 106 0 215 6 149 0 235] 
#[0 13 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 29 13 0 89] 
#[0 29 17 0 89] 
#[0 13 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 29 21 0 17 29 25 0 215] 
#[1 29 29 0 17 29 33 0 215] 
#[0 29 37 0 114] 
#[0 29 41 0 114] 
#[0 13 126 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 13 130 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 13 134 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[0 13 138 0 19 0 70 0 79 0 88 0 89 0 98 0 114 0 131 0 132 0 136 0 141 0 158 0 160 0 162 0 163 0 173 0 183 2 160] 
#[1 29 45 0 17 29 49 0 215] 
#[0 29 53 0 70] 
#[1 29 57 0 17 29 61 0 215] 
#[0 29 65 0 70] 
#[0 29 69 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 29 73 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[0 29 77 0 70] 
#[1 0 73 0 19 4 182 0 40 0 26 0 70 4 186 0 72 4 190 0 74 4 194 0 77 0 175 0 78 0 30 0 79 12 113 0 81 29 81 0 88 0 30 0 89 4 190 0 93 0 179 0 98 4 182 0 100 0 30 0 114 0 183 0 120 0 26 0 132 0 187 0 133 7 214 0 137 0 26 0 141 0 191 0 142 7 214 0 147 1 227 0 154 0 199 0 155 0 203 0 156 0 207 0 158 0 211 0 160 0 215 0 161 0 219 0 162 1 231 0 163 0 227 0 166 1 235 0 173 1 239 0 174 0 34 0 183 0 239 0 184 7 214 0 203 12 113 0 205 0 243 0 206 12 9 0 242 17 233 0 253 0 89 0 254 0 93 0 255 17 241 1 41 17 241 1 65 12 21 1 66 17 241 1 69 0 137 1 70 17 241 1 75 17 241 1 76 0 145 1 77 17 241 1 84 17 241 1 99 17 241 1 106 17 241 1 108 17 241 1 113 12 41 1 114 17 241 1 115 17 241 1 118 17 241 1 119 17 241 1 125 17 241 1 126 12 65 1 127 17 241 1 129 17 241 1 148 12 77 1 149 17 241 1 151 17 241 1 152 12 89 1 153 17 241 1 159 17 241 1 165 12 101 1 166 17 241 1 172 12 109 1 173 12 113 1 174 17 241 1 188 17 241 1 190 12 125 1 191 17 241 1 193 12 133 1 194 17 241 1 195 12 141 1 196 12 153 1 205 12 153 1 206 12 153 1 207 17 241 1 212 18 17 1 213] 
#[1 29 85 0 17 29 89 0 215] 
#[1 29 93 0 17 29 97 0 215] 
#[0 29 101 0 183] 
#[0 29 105 0 183] 
#[0 13 142 0 17 0 106 0 108 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 29 109 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 29 109 1 92] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 29 113 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 29 117 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 29 117 1 92] 
#[0 13 146 0 6 0 11 0 215] 
#[1 13 150 0 6 13 150 0 11 2 65 0 24 13 150 0 215 29 121 0 239] 
#[0 13 154 0 6 0 11 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 29 125 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 29 125 1 92] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 11 81 0 253 0 89 0 254 0 93 0 255 29 129 1 112] 
#[0 13 158 0 19 0 88 0 229] 
#[0 13 162 0 19 0 88 0 229] 
#[1 29 133 0 17 29 137 0 215] 
#[1 29 141 0 17 29 145 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 29 149 1 43 29 149 1 44 29 149 1 45 29 149 1 52 29 149 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[0 13 166 0 11 0 17 0 215] 
#[0 13 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 29 153 0 17 29 157 0 215] 
#[1 29 161 0 17 29 165 0 215] 
#[0 29 169 0 229] 
#[1 29 173 0 17 29 177 0 215] 
#[0 13 178 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 182 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 186 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 190 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 2 29 0 5 12 62 0 17 26 89 0 37 12 62 0 215 26 93 0 235 29 181 1 156] 
#[0 13 194 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 198 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 13 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 13 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 29 185 0 214 6 5 0 215 29 185 0 238] 
#[1 13 210 0 11 13 210 0 214 13 210 0 215 29 189 0 251] 
#[0 13 214 0 6 0 11 0 215] 
#[1 29 193 0 17 29 197 0 215] 
#[1 29 201 0 17 29 205 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 29 209 1 217 14 29 1 219] 
#[0 29 213 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 29 217 1 217 14 29 1 219] 
#[0 29 221 0 215] 
#[1 17 57 0 40 17 57 0 98 2 145 0 100 17 57 0 120 17 57 0 142 17 57 0 154 17 57 0 155 17 57 0 156 17 57 0 158 17 57 0 160 17 57 0 162 17 57 0 163 17 57 0 173 17 57 0 174 2 149 0 184 17 57 0 242 29 225 1 110 29 229 1 111 17 57 1 121] 
#[0 29 233 0 229] 
#[0 29 237 0 229] 
#[1 29 241 0 100 29 245 0 184] 
#[1 2 29 0 5 29 249 0 215 29 253 0 235] 
#[0 30 1 0 229] 
#[1 2 29 0 5 12 62 0 17 26 89 0 37 12 62 0 108 12 62 0 215 26 93 0 235 30 5 1 156] 
#[1 30 9 0 17 30 13 0 215] 
#[0 13 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 30 17 1 192 26 149 1 209 26 149 1 210 26 149 1 211] 
#[0 30 21 0 215] 
#[0 13 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 30 25 0 17 30 29 0 215] 
#[1 2 29 0 5 2 65 0 24 30 33 0 37 12 90 0 108 12 90 0 215 30 37 0 235 26 181 0 239 26 185 1 197 30 41 1 198] 
#[0 30 45 0 14] 
#[0 30 49 0 14] 
#[0 30 53 0 14] 
#[0 30 57 0 14] 
#[0 13 234 0 17 0 215] 
#[1 13 238 0 11 13 238 0 17 13 238 0 215 30 61 1 146] 
#[1 30 65 0 14 2 85 0 29] 
#[0 13 242 0 17 0 215] 
#[1 13 246 0 11 13 246 0 17 13 246 0 215 30 69 1 104] 
#[0 30 73 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 30 77 1 217 14 29 1 219] 
#[0 30 81 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 30 85 1 217 14 29 1 219] 
#[1 30 89 0 17 21 221 0 106 21 225 0 108 30 93 0 215 21 233 1 101 30 97 1 124 21 241 1 143] 
#[1 30 101 0 17 21 221 0 106 21 225 0 108 30 105 0 215 21 233 1 101 30 109 1 124 21 241 1 143] 
#[1 30 113 0 124 30 117 1 134] 
#[1 30 113 0 124 30 121 1 134] 
#[0 30 125 0 229] 
#[0 30 129 0 229] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 30 133 1 217 14 29 1 219] 
#[1 30 137 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 30 137 0 236 11 93 0 253 0 89 0 254 0 93 0 255 30 141 1 136 11 101 1 139 11 105 1 140] 
#[0 30 145 0 37] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 149 1 43 30 149 1 44 30 149 1 45 30 149 1 52 30 149 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 30 153 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 30 153 0 236 11 93 0 253 0 89 0 254 0 93 0 255 30 157 1 136 11 101 1 139 11 105 1 140] 
#[1 30 161 0 17 21 225 0 108 30 165 0 215 30 169 1 101] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 173 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 30 173 1 92] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 30 177 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 13 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 13 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 225 0 11 14 2 0 17 14 2 0 215 30 181 0 234 30 185 1 169] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 30 189 0 253 0 89 0 254 0 93 0 255 30 193 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 30 193 1 92] 
#[1 30 197 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 30 197 0 236 11 93 0 253 0 89 0 254 0 93 0 255 30 201 1 136 11 101 1 139 11 105 1 140] 
#[0 30 205 0 215] 
#[1 2 29 0 5 30 209 0 215 30 213 0 235] 
#[1 30 217 0 101 30 221 0 172] 
#[1 30 233 0 98 30 225 0 101 30 233 0 160 30 233 0 162 30 233 0 163 30 229 0 172 30 233 0 242] 
#[1 0 73 0 19 30 237 0 88 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 30 241 1 209 30 241 1 210 30 241 1 211] 
#[0 14 6 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 14 10 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 14 14 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 0 73 0 19 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 30 245 1 192 26 149 1 209 26 149 1 210 26 149 1 211] 
#[0 14 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 14 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 30 249 0 138 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 30 253 0 253 0 89 0 254 0 93 0 255 31 1 1 112] 
#[1 31 5 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 31 5 0 236 11 93 0 253 0 89 0 254 0 93 0 255 31 9 1 136 11 101 1 139 11 105 1 140] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 13 2 47 31 13 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 13 2 54 31 13 2 55 4 1 2 56 31 13 2 63 31 13 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 13 2 97 31 13 2 98 31 13 2 99 31 13 2 100 31 13 2 101 31 13 2 102 31 13 2 103 31 13 2 104 31 13 2 105 31 13 2 106 31 13 2 107 31 13 2 108 31 13 2 109 31 13 2 110 31 13 2 111 31 13 2 112 31 13 2 113 31 13 2 114 31 13 2 115 31 13 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 13 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 13 2 159] 
#[0 14 26 0 108 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 31 21 1 199] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 31 25 1 43 31 25 1 44 31 25 1 45 31 25 1 52 31 25 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[0 14 34 0 11 0 17 0 215] 
#[0 14 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 31 29 0 3 0 7 0 9 0 12 0 15 0 19 0 20 0 22 0 23 0 24 0 25 0 26 0 27 0 34 0 62 0 117 0 119 0 125 0 130 0 140 0 150 0 207 0 209 0 211 1 215] 
#[0 14 46 0 5] 
#[0 14 50 0 5] 
#[0 14 54 0 5] 
#[0 14 58 0 5] 
#[0 14 62 0 5] 
#[0 14 66 0 5] 
#[0 14 70 0 5] 
#[0 14 74 0 5] 
#[0 14 78 0 5] 
#[0 14 82 0 5] 
#[0 14 86 0 5] 
#[0 14 90 0 5] 
#[0 14 94 0 5] 
#[0 14 98 0 5] 
#[0 14 102 0 5] 
#[0 14 106 0 5] 
#[0 14 110 0 5] 
#[0 14 114 0 5] 
#[0 14 118 0 5] 
#[0 14 122 0 5] 
#[0 14 126 0 5] 
#[0 14 130 0 5] 
#[0 14 134 0 5] 
#[0 14 138 0 5] 
#[1 2 29 0 5 31 33 0 235] 
#[1 31 37 0 17 31 41 0 215] 
#[0 14 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 31 45 0 17 31 49 0 215] 
#[1 31 53 0 17 31 57 0 215] 
#[0 31 61 0 70] 
#[1 31 65 0 17 31 69 0 215] 
#[0 31 73 0 70] 
#[0 14 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 14 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 31 77 0 17 31 81 0 215] 
#[1 31 85 0 17 31 89 0 215] 
#[0 14 166 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 31 93 2 132 15 109 2 135] 
#[0 14 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 14 178 0 4 6 147 0 5 14 178 0 6 6 57 0 7 14 178 0 8 6 61 0 9 14 178 0 10 14 178 0 11 6 65 0 12 14 178 0 13 6 69 0 15 14 178 0 16 14 178 0 17 6 73 0 19 6 77 0 20 14 178 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 14 178 0 28 14 178 0 32 6 105 0 34 6 109 0 35 14 178 0 38 14 178 0 45 14 178 0 80 14 178 0 83 14 178 0 87 14 178 0 90 14 178 0 99 14 178 0 105 14 178 0 108 14 178 0 110 14 178 0 115 6 113 0 116 6 117 0 118 14 178 0 121 14 178 0 123 6 121 0 125 6 125 0 130 14 178 0 146 6 129 0 150 6 133 0 151 14 178 0 152 14 178 0 171 14 178 0 177 14 178 0 179 14 178 0 186 14 178 0 188 14 178 0 190 14 178 0 201 6 137 0 207 6 141 0 209 14 178 0 210 6 145 0 211 14 178 0 212 14 178 0 214 14 178 0 215 6 149 0 235] 
#[0 14 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 14 186 0 6 18 165 0 14 14 186 0 215 18 169 2 59] 
#[1 5 2 0 6 5 2 0 14 5 2 0 215 31 97 2 60] 
#[1 14 190 0 6 18 165 0 14 14 190 0 215 18 169 2 59] 
#[0 14 194 0 6 0 14 0 215] 
#[1 2 29 0 5 14 198 0 6 14 198 0 14 14 198 0 215 27 157 0 235 31 101 2 61] 
#[0 31 105 0 144] 
#[0 14 202 0 6 0 14 0 215] 
#[1 6 53 0 3 2 29 0 5 31 109 0 6 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 6 149 0 235 31 109 0 236] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 113 2 47 31 113 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 113 2 54 31 113 2 55 4 1 2 56 31 113 2 63 31 113 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 113 2 97 31 113 2 98 31 113 2 99 31 113 2 100 31 113 2 101 31 113 2 102 31 113 2 103 31 113 2 104 31 113 2 105 31 113 2 106 31 113 2 107 31 113 2 108 31 113 2 109 31 113 2 110 31 113 2 111 31 113 2 112 31 113 2 113 31 113 2 114 31 113 2 115 31 113 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 113 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 113 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 14 206 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 14 206 0 214 14 206 0 215 6 149 0 235] 
#[1 4 246 0 1 4 246 0 3 1 3 0 5 4 246 0 7 4 246 0 9 4 246 0 11 4 246 0 12 4 246 0 14 4 246 0 15 4 246 0 19 4 246 0 20 4 246 0 22 4 246 0 23 2 65 0 24 4 246 0 25 4 246 0 26 4 246 0 27 4 246 0 34 4 246 0 35 4 246 0 116 4 246 0 118 4 246 0 125 4 246 0 130 4 246 0 150 4 246 0 151 4 246 0 207 4 246 0 209 4 246 0 211 4 246 0 214 4 246 0 215 12 241 0 235 31 117 0 239] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 121 2 47 31 121 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 121 2 54 31 121 2 55 4 1 2 56 31 121 2 63 31 121 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 121 2 97 31 121 2 98 31 121 2 99 31 121 2 100 31 121 2 101 31 121 2 102 31 121 2 103 31 121 2 104 31 121 2 105 31 121 2 106 31 121 2 107 31 121 2 108 31 121 2 109 31 121 2 110 31 121 2 111 31 121 2 112 31 121 2 113 31 121 2 114 31 121 2 115 31 121 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 121 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 121 2 159] 
#[0 14 210 0 11 0 214 0 215] 
#[0 14 214 0 6 0 11 0 215] 
#[0 31 125 0 228] 
#[0 14 218 0 6 0 11 0 215] 
#[1 31 129 0 6 3 137 0 215 31 129 0 236] 
#[0 14 222 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 31 133 0 100] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 31 137 1 217 14 29 1 219] 
#[0 31 141 0 100] 
#[0 31 145 0 215] 
#[0 31 149 0 88] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 153 2 47 31 153 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 153 2 54 31 153 2 55 4 1 2 56 31 153 2 63 31 153 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 153 2 97 31 153 2 98 31 153 2 99 31 153 2 100 31 153 2 101 31 153 2 102 31 153 2 103 31 153 2 104 31 153 2 105 31 153 2 106 31 153 2 107 31 153 2 108 31 153 2 109 31 153 2 110 31 153 2 111 31 153 2 112 31 153 2 113 31 153 2 114 31 153 2 115 31 153 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 153 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 153 2 159] 
#[0 31 157 0 127] 
#[1 6 53 0 3 14 226 0 4 6 151 0 5 14 226 0 6 6 57 0 7 14 226 0 8 6 61 0 9 14 226 0 10 14 226 0 11 6 65 0 12 14 226 0 13 6 69 0 15 14 226 0 16 14 226 0 17 6 73 0 19 6 77 0 20 14 226 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 14 226 0 28 14 226 0 32 6 105 0 34 6 109 0 35 14 226 0 38 14 226 0 45 14 226 0 80 14 226 0 83 14 226 0 87 14 226 0 90 14 226 0 99 14 226 0 105 14 226 0 108 14 226 0 110 14 226 0 115 6 113 0 116 6 117 0 118 14 226 0 121 14 226 0 123 6 121 0 125 6 125 0 130 14 226 0 146 6 129 0 150 6 133 0 151 14 226 0 152 14 226 0 171 14 226 0 177 14 226 0 179 14 226 0 186 14 226 0 188 14 226 0 190 14 226 0 201 6 137 0 207 6 141 0 209 14 226 0 210 6 145 0 211 14 226 0 212 14 226 0 214 14 226 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 161 2 47 31 161 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 161 2 54 31 161 2 55 4 1 2 56 31 161 2 63 31 161 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 161 2 97 31 161 2 98 31 161 2 99 31 161 2 100 31 161 2 101 31 161 2 102 31 161 2 103 31 161 2 104 31 161 2 105 31 161 2 106 31 161 2 107 31 161 2 108 31 161 2 109 31 161 2 110 31 161 2 111 31 161 2 112 31 161 2 113 31 161 2 114 31 161 2 115 31 161 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 161 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 31 165 0 215 6 149 0 235] 
#[0 14 230 0 24 0 110] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 169 2 47 31 169 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 169 2 54 31 169 2 55 4 1 2 56 31 169 2 63 31 169 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 169 2 97 31 169 2 98 31 169 2 99 31 169 2 100 31 169 2 101 31 169 2 102 31 169 2 103 31 169 2 104 31 169 2 105 31 169 2 106 31 169 2 107 31 169 2 108 31 169 2 109 31 169 2 110 31 169 2 111 31 169 2 112 31 169 2 113 31 169 2 114 31 169 2 115 31 169 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 169 2 159] 
#[1 31 173 0 87 31 177 0 88 31 181 0 226 31 185 1 243 31 189 1 244] 
#[1 13 2 0 87 13 2 0 88 13 2 0 226 31 193 1 242] 
#[1 13 2 0 87 13 2 0 88 13 2 0 226 31 197 1 242] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 19 13 0 17 9 77 0 30 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 9 81 0 66 1 65 0 69 9 229 0 72 9 89 0 73 1 65 0 75 1 65 0 76 9 229 0 81 3 85 0 82 9 97 0 84 1 65 0 85 9 101 0 88 9 105 0 91 9 109 0 92 9 113 0 94 9 117 0 97 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 9 121 0 104 9 125 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 9 129 0 129 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 9 133 0 146 9 137 0 164 9 141 0 165 9 145 0 167 9 149 0 168 9 153 0 169 1 65 0 170 9 157 0 171 1 65 0 175 1 65 0 176 9 229 0 178 9 165 0 180 1 65 0 182 1 186 0 184 9 169 0 185 9 173 0 189 9 177 0 191 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 9 181 0 199 9 185 0 202 9 189 0 204 9 193 0 208 3 133 0 213 3 141 0 219 3 145 0 220 9 221 0 221 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 205 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 19 21 1 216 19 21 1 220 9 221 1 221 31 201 1 222 19 33 1 223 19 37 1 224 19 21 1 225 9 229 1 226 19 21 1 227 19 21 1 228 19 21 1 229 19 21 1 230 19 21 1 231 19 21 1 232 19 21 1 233 19 21 1 234 19 21 1 235 19 21 1 237 19 21 1 238 19 21 1 239 19 21 1 240 19 21 1 241 19 21 1 245 19 21 1 247 19 21 2 0 19 21 2 1 19 21 2 2 19 21 2 3 19 21 2 4 19 21 2 6 19 21 2 11 19 21 2 12 19 21 2 13 19 21 2 14 19 21 2 18 19 21 2 19 19 21 2 20 19 21 2 21 19 21 2 23 19 21 2 25 19 21 2 26 19 21 2 27 19 21 2 29 19 21 2 31 19 21 2 32 19 21 2 33 19 21 2 34 19 21 2 35 19 21 2 40 19 21 2 44 19 21 2 46 10 149 2 47 10 149 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 10 149 2 54 10 149 2 55 4 1 2 56 10 149 2 63 10 149 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 10 149 2 97 10 149 2 98 10 149 2 99 10 149 2 100 10 149 2 101 10 149 2 102 10 149 2 103 10 149 2 104 10 149 2 105 10 149 2 106 10 149 2 107 10 149 2 108 10 149 2 109 10 149 2 110 10 149 2 111 10 149 2 112 10 149 2 113 10 149 2 114 10 149 2 115 10 149 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 10 149 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 10 149 2 159] 
#[0 14 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 31 173 0 87 31 205 0 88 31 181 0 226 31 185 1 243 31 209 1 244] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 31 213 2 47 31 213 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 31 213 2 54 31 213 2 55 4 1 2 56 31 213 2 63 31 213 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 31 213 2 97 31 213 2 98 31 213 2 99 31 213 2 100 31 213 2 101 31 213 2 102 31 213 2 103 31 213 2 104 31 213 2 105 31 213 2 106 31 213 2 107 31 213 2 108 31 213 2 109 31 213 2 110 31 213 2 111 31 213 2 112 31 213 2 113 31 213 2 114 31 213 2 115 31 213 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 31 213 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 31 213 2 159] 
#[1 6 53 0 3 2 29 0 5 31 221 0 6 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 31 217 0 234 6 149 0 235 31 221 0 236] 
#[0 14 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 14 246 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 28 49 0 67 31 225 0 88 28 57 1 249 31 229 1 255] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 32 17 0 19 32 17 0 22 32 17 0 23 32 17 0 24 32 17 0 25 31 253 0 26 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 32 1 0 87 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 32 5 0 116 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 32 9 1 250 32 13 1 253 32 17 1 254 32 21 2 47 32 21 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 32 21 2 54 32 21 2 55 4 1 2 56 32 21 2 63 32 21 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 32 21 2 97 32 21 2 98 32 21 2 99 32 21 2 100 32 21 2 101 32 21 2 102 32 21 2 103 32 21 2 104 32 21 2 105 32 21 2 106 32 21 2 107 32 21 2 108 32 21 2 109 32 21 2 110 32 21 2 111 32 21 2 112 32 21 2 113 32 21 2 114 32 21 2 115 32 21 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 32 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 32 21 2 159] 
#[0 32 25 0 171] 
#[0 14 250 0 67 0 88] 
#[0 32 29 0 88] 
#[0 32 33 0 185] 
#[1 32 37 0 200 32 41 0 215 32 45 0 229] 
#[0 32 49 0 191] 
#[0 32 53 0 215] 
#[0 32 57 0 88] 
#[0 14 254 0 68 0 88 0 96] 
#[0 15 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 4 42 0 3 4 42 0 4 0 99 0 5 4 42 0 6 4 42 0 7 4 42 0 8 4 42 0 9 4 42 0 10 4 42 0 11 4 42 0 12 4 42 0 13 4 42 0 15 4 42 0 16 4 42 0 17 4 42 0 19 4 42 0 20 4 42 0 21 4 42 0 22 4 42 0 23 4 42 0 24 4 42 0 25 4 42 0 26 4 42 0 27 4 42 0 28 2 85 0 29 4 42 0 32 4 42 0 34 4 42 0 35 4 42 0 38 4 42 0 45 4 42 0 80 4 42 0 83 4 42 0 87 4 42 0 90 0 103 0 99 4 42 0 105 4 42 0 108 4 42 0 110 4 42 0 115 4 42 0 116 4 42 0 118 4 42 0 121 4 42 0 123 4 42 0 125 4 42 0 130 4 42 0 146 4 42 0 150 4 42 0 151 4 42 0 152 4 42 0 171 4 42 0 177 4 42 0 179 4 42 0 186 4 42 0 188 4 42 0 190 4 42 0 201 5 209 0 204 4 42 0 207 4 42 0 209 4 42 0 210 4 42 0 211 4 42 0 212 4 42 0 214 4 42 0 215 32 61 0 235 8 17 2 79 8 17 2 80 8 17 2 85] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 32 65 2 47 32 65 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 32 65 2 54 32 65 2 55 4 1 2 56 32 65 2 63 32 65 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 32 65 2 97 32 65 2 98 32 65 2 99 32 65 2 100 32 65 2 101 32 65 2 102 32 65 2 103 32 65 2 104 32 65 2 105 32 65 2 106 32 65 2 107 32 65 2 108 32 65 2 109 32 65 2 110 32 65 2 111 32 65 2 112 32 65 2 113 32 65 2 114 32 65 2 115 32 65 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 32 65 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 32 65 2 159] 
#[0 15 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 37 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 32 69 0 199] 
#[0 32 73 0 202] 
#[0 32 77 0 204] 
#[0 32 81 0 184] 
#[0 32 85 0 88] 
#[0 32 89 0 115] 
#[1 32 93 0 215 11 106 0 229 32 93 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 97 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 101 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 32 105 0 146] 
#[1 32 109 0 146 32 113 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 117 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 32 121 0 215 32 121 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 125 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 129 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 133 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 137 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 32 141 0 146] 
#[1 11 106 0 115 32 145 0 215 32 145 2 154] 
#[0 32 149 0 115] 
#[1 15 101 0 229 32 153 2 132 15 109 2 135] 
#[1 11 106 0 115 32 157 0 215 32 157 2 154] 
#[1 32 161 0 215 15 101 0 229 32 165 2 132 15 109 2 135] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 32 169 2 47 32 169 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 32 169 2 54 32 169 2 55 4 1 2 56 32 169 2 63 32 169 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 32 169 2 97 32 169 2 98 32 169 2 99 32 169 2 100 32 169 2 101 32 169 2 102 32 169 2 103 32 169 2 104 32 169 2 105 32 169 2 106 32 169 2 107 32 169 2 108 32 169 2 109 32 169 2 110 32 169 2 111 32 169 2 112 32 169 2 113 32 169 2 114 32 169 2 115 32 169 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 32 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 32 169 2 159] 
#[1 11 106 0 115 32 173 0 215 32 173 2 154] 
#[0 32 177 0 115] 
#[1 15 101 0 229 32 181 2 132 15 109 2 135] 
#[1 11 106 0 115 32 185 0 215 32 185 2 154] 
#[0 15 10 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 189 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 15 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 193 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 197 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 201 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 205 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 32 209 0 146] 
#[0 15 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 213 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 32 217 2 47 32 217 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 32 217 2 54 32 217 2 55 4 1 2 56 32 217 2 63 32 217 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 32 217 2 97 32 217 2 98 32 217 2 99 32 217 2 100 32 217 2 101 32 217 2 102 32 217 2 103 32 217 2 104 32 217 2 105 32 217 2 106 32 217 2 107 32 217 2 108 32 217 2 109 32 217 2 110 32 217 2 111 32 217 2 112 32 217 2 113 32 217 2 114 32 217 2 115 32 217 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 32 217 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 32 217 2 159] 
#[1 15 22 0 3 15 22 0 4 15 22 0 5 15 22 0 6 15 22 0 7 15 22 0 8 15 22 0 9 15 22 0 10 15 22 0 11 15 22 0 12 15 22 0 13 15 22 0 15 15 22 0 16 15 22 0 17 15 22 0 19 15 22 0 20 15 22 0 21 15 22 0 22 15 22 0 23 15 22 0 24 15 22 0 25 15 22 0 26 15 22 0 27 15 22 0 28 15 22 0 32 32 221 0 34 15 22 0 35 15 22 0 38 15 22 0 45 15 22 0 80 15 22 0 83 15 22 0 87 15 22 0 90 15 22 0 99 15 22 0 105 15 22 0 108 15 22 0 110 15 22 0 115 15 22 0 116 15 22 0 118 15 22 0 121 15 22 0 123 15 22 0 125 15 22 0 130 15 22 0 146 15 22 0 150 15 22 0 151 15 22 0 152 15 22 0 171 15 22 0 177 15 22 0 179 15 22 0 186 15 22 0 188 15 22 0 190 15 22 0 201 15 22 0 207 15 22 0 209 15 22 0 210 15 22 0 211 15 22 0 212 15 22 0 214 15 22 0 215 32 225 2 139] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 229 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 15 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 233 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 15 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 32 237 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 32 241 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 20 65 2 47 20 65 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 20 65 2 54 20 65 2 55 4 1 2 56 20 65 2 63 20 65 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 20 65 2 97 20 65 2 98 20 65 2 99 20 65 2 100 20 65 2 101 20 65 2 102 20 65 2 103 20 65 2 104 20 65 2 105 20 65 2 106 20 65 2 107 20 65 2 108 20 65 2 109 20 65 2 110 20 65 2 111 20 65 2 112 20 65 2 113 20 65 2 114 20 65 2 115 20 65 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 20 65 2 122 4 169 2 125 4 173 2 136 32 245 2 151 4 177 2 155 4 181 2 158 20 65 2 159] 
#[0 15 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 32 249 0 17 32 253 0 215] 
#[1 33 1 0 17 33 5 0 215] 
#[0 15 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 33 9 0 17 33 13 0 215] 
#[1 33 17 0 17 33 21 0 215] 
#[0 15 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 33 25 0 17 33 29 0 215] 
#[0 15 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 33 33 0 17 33 37 0 215] 
#[1 33 41 0 17 33 45 0 215] 
#[0 33 49 0 70] 
#[1 33 53 0 17 33 57 0 215] 
#[0 33 61 0 70] 
#[0 15 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 33 65 0 17 33 69 0 215] 
#[1 33 73 0 17 33 77 0 215] 
#[1 15 86 0 6 15 86 0 11 2 65 0 24 15 86 0 215 33 81 0 239] 
#[0 15 90 0 6 0 11 0 215] 
#[0 15 94 0 17 0 106 0 108 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 33 85 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 15 98 0 17 0 106 0 108 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 33 89 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 33 89 1 92] 
#[0 15 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 15 118 0 11 15 118 0 17 2 85 0 29 15 118 0 215] 
#[0 15 122 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 126 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 130 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 134 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 2 29 0 5 12 62 0 17 26 89 0 37 12 62 0 215 26 93 0 235 33 93 1 156] 
#[0 15 138 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 15 142 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 33 97 0 17 33 101 0 215] 
#[0 15 146 0 6 0 11 0 215] 
#[1 2 225 0 11 15 150 0 214 15 150 0 215 33 105 0 234 33 109 0 250] 
#[0 15 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 15 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 33 113 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 33 117 1 217 14 29 1 219] 
#[0 33 121 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 33 125 1 217 14 29 1 219] 
#[1 33 129 0 17 21 221 0 106 21 225 0 108 33 133 0 215 21 233 1 101 33 137 1 124 21 241 1 143] 
#[1 33 141 0 17 21 221 0 106 21 225 0 108 33 145 0 215 21 233 1 101 33 149 1 124 21 241 1 143] 
#[1 30 113 0 124 33 153 1 134] 
#[1 30 113 0 124 33 157 1 134] 
#[0 33 161 0 229] 
#[0 33 165 0 229] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 33 169 1 217 14 29 1 219] 
#[1 33 173 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 33 173 0 236 11 93 0 253 0 89 0 254 0 93 0 255 33 177 1 136 11 101 1 139 11 105 1 140] 
#[0 33 181 0 37] 
#[1 33 185 0 17 21 225 0 108 33 189 0 215 33 193 1 101] 
#[0 15 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 33 197 0 88 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 30 241 1 209 30 241 1 210 30 241 1 211] 
#[1 0 73 0 19 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 33 201 1 192 26 149 1 209 26 149 1 210 26 149 1 211] 
#[0 15 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 33 205 0 138 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 33 209 0 253 0 89 0 254 0 93 0 255 33 213 1 112] 
#[1 33 217 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 33 217 0 236 11 93 0 253 0 89 0 254 0 93 0 255 33 221 1 136 11 101 1 139 11 105 1 140] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 33 225 1 199] 
#[1 33 229 0 215 33 233 0 228] 
#[1 33 237 0 215 33 241 0 228] 
#[1 33 245 0 215 33 249 0 228] 
#[1 33 253 0 215 34 1 0 228] 
#[1 2 225 0 11 15 186 0 17 15 186 0 215 34 5 0 234 34 9 1 145] 
#[1 34 13 0 215 34 17 0 228] 
#[1 2 225 0 11 15 190 0 17 15 190 0 215 34 21 0 234 34 25 1 103] 
#[0 34 29 0 184] 
#[0 34 33 0 88] 
#[0 34 37 0 100] 
#[0 34 41 0 88] 
#[0 15 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 34 45 0 17 34 49 0 215] 
#[0 15 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 34 53 0 17 34 57 0 215] 
#[0 34 61 0 223] 
#[1 2 29 0 5 15 210 0 17 34 65 0 33 34 69 0 37 15 210 0 215 34 73 0 235 34 77 1 130 34 81 1 131 34 85 1 135] 
#[1 2 29 0 5 34 89 0 17 34 65 0 33 34 93 0 215 34 97 0 235 34 101 1 135] 
#[1 30 113 0 124 34 105 1 134] 
#[1 30 113 0 124 34 109 1 134] 
#[0 34 113 0 88] 
#[0 34 117 0 215] 
#[1 34 121 0 6 3 137 0 215 34 121 0 236] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 34 125 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 125 1 92] 
#[1 15 214 0 17 2 85 0 29 15 214 0 108 15 214 0 215] 
#[0 15 218 0 17 0 108 0 215] 
#[1 34 129 0 6 3 137 0 215 34 129 0 236] 
#[0 15 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 15 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 34 133 0 17 34 137 0 215] 
#[1 2 65 0 24 34 141 0 239] 
#[0 15 230 0 11 0 17 0 215] 
#[1 22 37 0 229 34 145 1 171] 
#[0 15 234 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 34 149 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 149 1 92] 
#[0 15 238 0 17 0 108 0 215] 
#[1 15 242 0 17 34 153 0 37 15 242 0 108 15 242 0 215] 
#[1 34 157 0 6 3 137 0 215 34 157 0 236] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 34 161 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 34 165 1 217 14 29 1 219] 
#[1 34 169 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 34 169 0 236 11 93 0 253 0 89 0 254 0 93 0 255 34 173 1 136 11 101 1 139 11 105 1 140] 
#[0 34 177 0 215] 
#[1 2 29 0 5 34 181 0 215 34 185 0 235] 
#[0 34 189 0 215] 
#[1 2 29 0 5 34 193 0 215 34 197 0 235] 
#[1 34 201 0 101 34 205 0 172] 
#[0 34 209 0 161] 
#[0 15 246 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 0 73 0 19 34 213 0 88 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 30 241 1 209 30 241 1 210 30 241 1 211] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 34 225 1 201] 
#[1 6 234 0 44 6 234 0 48 6 234 0 69 6 234 0 75 6 234 0 76 6 234 0 85 6 234 0 103 6 234 0 113 6 234 0 126 34 229 0 138 6 234 0 143 6 234 0 170 6 234 0 175 6 234 0 176 6 234 0 182 6 234 0 194 6 234 0 195 6 234 0 196 6 234 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 34 233 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 233 1 92] 
#[1 2 65 0 24 34 237 0 37 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 34 241 1 198] 
#[1 34 245 0 6 3 137 0 215 34 245 0 236] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 15 254 0 108 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 15 254 0 215 6 149 0 235] 
#[0 16 2 0 215] 
#[0 34 249 0 215] 
#[1 16 6 0 11 16 6 0 17 2 85 0 29 16 6 0 215] 
#[1 2 29 0 5 34 253 0 235] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 35 1 1 136 11 101 1 139 11 105 1 140] 
#[0 16 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 35 5 0 17 35 9 0 215] 
#[0 16 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 35 13 0 17 35 17 0 215] 
#[0 16 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 58 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 16 62 0 6 18 165 0 14 16 62 0 215 18 169 2 59] 
#[0 16 66 0 6 0 14 0 215] 
#[1 22 249 0 6 2 225 0 11 3 137 0 215 4 205 0 234 22 249 0 236 22 253 1 97 23 1 2 62] 
#[0 16 70 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 16 74 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 16 74 0 214 16 74 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 35 21 2 47 35 21 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 35 21 2 54 35 21 2 55 4 1 2 56 35 21 2 63 35 21 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 35 21 2 97 35 21 2 98 35 21 2 99 35 21 2 100 35 21 2 101 35 21 2 102 35 21 2 103 35 21 2 104 35 21 2 105 35 21 2 106 35 21 2 107 35 21 2 108 35 21 2 109 35 21 2 110 35 21 2 111 35 21 2 112 35 21 2 113 35 21 2 114 35 21 2 115 35 21 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 35 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 35 21 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 16 78 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 16 78 0 214 16 78 0 215 6 149 0 235] 
#[1 5 241 0 18 35 25 0 240] 
#[0 16 82 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 86 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 35 29 0 88] 
#[0 16 90 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 35 33 1 217 14 29 1 219] 
#[0 35 37 0 100] 
#[1 6 53 0 3 16 94 0 4 6 155 0 5 16 94 0 6 6 57 0 7 16 94 0 8 6 61 0 9 16 94 0 10 16 94 0 11 6 65 0 12 16 94 0 13 6 69 0 15 16 94 0 16 16 94 0 17 6 73 0 19 6 77 0 20 16 94 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 16 94 0 28 16 94 0 32 6 105 0 34 6 109 0 35 16 94 0 38 16 94 0 45 16 94 0 80 16 94 0 83 16 94 0 87 16 94 0 90 16 94 0 99 16 94 0 105 16 94 0 108 16 94 0 110 16 94 0 115 6 113 0 116 6 117 0 118 16 94 0 121 16 94 0 123 6 121 0 125 6 125 0 130 16 94 0 146 6 129 0 150 6 133 0 151 16 94 0 152 16 94 0 171 16 94 0 177 16 94 0 179 16 94 0 186 16 94 0 188 16 94 0 190 16 94 0 201 6 137 0 207 6 141 0 209 16 94 0 210 6 145 0 211 16 94 0 212 16 94 0 214 16 94 0 215 6 149 0 235] 
#[0 16 98 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 35 41 0 215 6 149 0 235] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 139 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 35 45 1 217 14 29 1 219] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 35 49 0 179 6 137 0 207 6 141 0 209 6 145 0 211 35 53 0 215 6 149 0 235] 
#[1 35 57 0 17 35 61 0 215] 
#[0 35 65 0 107] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 35 69 2 47 35 69 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 35 69 2 54 35 69 2 55 4 1 2 56 35 69 2 63 35 69 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 35 69 2 97 35 69 2 98 35 69 2 99 35 69 2 100 35 69 2 101 35 69 2 102 35 69 2 103 35 69 2 104 35 69 2 105 35 69 2 106 35 69 2 107 35 69 2 108 35 69 2 109 35 69 2 110 35 69 2 111 35 69 2 112 35 69 2 113 35 69 2 114 35 69 2 115 35 69 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 35 69 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 35 69 2 159] 
#[0 16 102 0 87 0 88 0 226] 
#[0 35 73 0 88] 
#[1 31 173 0 87 35 77 0 88 31 181 0 226 31 185 1 243 35 81 1 244] 
#[1 31 173 0 87 35 85 0 88 31 181 0 226 31 185 1 243 35 89 1 244] 
#[0 16 106 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 35 93 0 107] 
#[0 35 97 0 88] 
#[1 6 53 0 3 2 29 0 5 35 105 0 6 6 57 0 7 6 61 0 9 2 225 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 35 101 0 234 6 149 0 235 35 105 0 236] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 35 109 2 47 35 109 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 35 109 2 54 35 109 2 55 4 1 2 56 35 109 2 63 35 109 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 35 109 2 97 35 109 2 98 35 109 2 99 35 109 2 100 35 109 2 101 35 109 2 102 35 109 2 103 35 109 2 104 35 109 2 105 35 109 2 106 35 109 2 107 35 109 2 108 35 109 2 109 35 109 2 110 35 109 2 111 35 109 2 112 35 109 2 113 35 109 2 114 35 109 2 115 35 109 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 35 109 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 35 109 2 159] 
#[1 2 65 0 24 35 113 0 239] 
#[0 35 117 0 171] 
#[0 35 121 0 88] 
#[0 16 110 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 114 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 118 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 122 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 126 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[0 16 130 0 1 0 5 0 9 0 12 0 14 0 31 0 32 0 40 0 42 0 44 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 69 0 75 0 76 0 82 0 85 0 99 0 100 0 102 0 103 0 107 0 113 0 120 0 126 0 128 0 134 0 135 0 138 0 140 0 143 0 170 0 175 0 176 0 182 0 184 0 192 0 193 0 194 0 195 0 196 0 213 0 215 0 219 0 220 0 222 0 223 0 224 0 225 0 227 0 229] 
#[1 35 125 0 17 35 129 0 215] 
#[1 35 137 0 19 35 137 0 22 35 137 0 23 35 137 0 24 35 137 0 25 31 253 0 26 35 133 0 215 35 137 1 254] 
#[1 35 141 0 17 35 145 0 215] 
#[1 16 134 0 11 16 134 0 17 16 134 0 215 35 149 1 252] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 153 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 35 157 2 47 35 157 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 35 157 2 54 35 157 2 55 4 1 2 56 35 157 2 63 35 157 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 35 157 2 97 35 157 2 98 35 157 2 99 35 157 2 100 35 157 2 101 35 157 2 102 35 157 2 103 35 157 2 104 35 157 2 105 35 157 2 106 35 157 2 107 35 157 2 108 35 157 2 109 35 157 2 110 35 157 2 111 35 157 2 112 35 157 2 113 35 157 2 114 35 157 2 115 35 157 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 35 157 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 35 157 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 16 138 0 11 6 65 0 12 6 69 0 15 16 138 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 35 161 0 190 6 137 0 207 6 141 0 209 6 145 0 211 16 138 0 215 6 149 0 235] 
#[0 16 142 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 35 165 0 171] 
#[0 16 146 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 35 169 2 47 35 169 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 35 169 2 54 35 169 2 55 4 1 2 56 35 169 2 63 35 169 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 35 169 2 97 35 169 2 98 35 169 2 99 35 169 2 100 35 169 2 101 35 169 2 102 35 169 2 103 35 169 2 104 35 169 2 105 35 169 2 106 35 169 2 107 35 169 2 108 35 169 2 109 35 169 2 110 35 169 2 111 35 169 2 112 35 169 2 113 35 169 2 114 35 169 2 115 35 169 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 35 169 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 35 169 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 35 173 1 217 14 29 1 219] 
#[1 35 177 0 37 35 181 0 200 35 185 0 215] 
#[0 16 150 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 35 189 1 217 14 29 1 219] 
#[0 35 193 0 191] 
#[1 2 241 0 1 2 29 0 5 0 119 0 6 2 249 0 9 4 106 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 123 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 17 0 228 3 173 0 229 3 177 0 235 35 197 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 25 2 47 9 25 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 25 2 54 9 25 2 55 4 1 2 56 9 25 2 63 9 25 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 13 105 2 70 9 33 2 71 9 37 2 73 9 41 2 74 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 25 2 97 9 25 2 98 9 25 2 99 9 25 2 100 9 25 2 101 9 25 2 102 9 25 2 103 9 25 2 104 9 25 2 105 9 25 2 106 9 25 2 107 9 25 2 108 9 25 2 109 9 25 2 110 9 25 2 111 9 25 2 112 9 25 2 113 9 25 2 114 9 25 2 115 9 25 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 25 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 25 2 159] 
#[1 6 53 0 3 16 154 0 4 6 159 0 5 16 154 0 6 6 57 0 7 16 154 0 8 6 61 0 9 16 154 0 10 16 154 0 11 6 65 0 12 16 154 0 13 6 69 0 15 16 154 0 16 16 154 0 17 6 73 0 19 6 77 0 20 16 154 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 16 154 0 28 16 154 0 32 6 105 0 34 6 109 0 35 16 154 0 38 16 154 0 45 16 154 0 80 16 154 0 83 16 154 0 87 16 154 0 90 16 154 0 99 16 154 0 105 16 154 0 108 16 154 0 110 16 154 0 115 6 113 0 116 6 117 0 118 16 154 0 121 16 154 0 123 6 121 0 125 6 125 0 130 16 154 0 146 6 129 0 150 6 133 0 151 16 154 0 152 16 154 0 171 16 154 0 177 16 154 0 179 16 154 0 186 16 154 0 188 16 154 0 190 16 154 0 201 6 137 0 207 6 141 0 209 16 154 0 210 6 145 0 211 16 154 0 212 16 154 0 214 16 154 0 215 6 149 0 235] 
#[0 16 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 170 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 35 201 0 184] 
#[1 35 205 0 215 11 106 0 229 35 205 2 154] 
#[1 15 101 0 229 35 209 2 132 15 109 2 135] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 35 213 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 35 217 0 215 35 217 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 221 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 35 225 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 35 229 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 35 233 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 35 237 0 146] 
#[1 11 106 0 115 35 241 0 215 35 241 2 154] 
#[0 35 245 0 115] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 35 249 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 35 253 0 215 35 253 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 1 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 36 5 0 215 36 5 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 36 9 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 13 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 36 17 0 115] 
#[1 36 21 0 215 11 106 0 229 36 21 2 154] 
#[1 11 106 0 115 36 25 0 215 36 25 2 154] 
#[0 36 29 0 115] 
#[1 15 101 0 229 36 33 2 132 15 109 2 135] 
#[1 11 106 0 115 36 37 0 215 36 37 2 154] 
#[1 6 53 0 3 16 174 0 4 6 163 0 5 16 174 0 6 6 57 0 7 16 174 0 8 6 61 0 9 16 174 0 10 16 174 0 11 6 65 0 12 16 174 0 13 6 69 0 15 16 174 0 16 16 174 0 17 6 73 0 19 6 77 0 20 16 174 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 16 174 0 28 16 174 0 32 6 105 0 34 6 109 0 35 16 174 0 38 16 174 0 45 16 174 0 80 16 174 0 83 16 174 0 87 16 174 0 90 16 174 0 99 16 174 0 105 16 174 0 108 16 174 0 110 16 174 0 115 6 113 0 116 6 117 0 118 16 174 0 121 16 174 0 123 6 121 0 125 6 125 0 130 16 174 0 146 6 129 0 150 6 133 0 151 16 174 0 152 16 174 0 171 16 174 0 177 16 174 0 179 16 174 0 186 16 174 0 188 16 174 0 190 16 174 0 201 6 137 0 207 6 141 0 209 16 174 0 210 6 145 0 211 16 174 0 212 16 174 0 214 16 174 0 215 6 149 0 235] 
#[0 36 41 0 115] 
#[1 36 45 0 215 11 106 0 229 36 45 2 154] 
#[1 11 106 0 115 36 49 0 215 36 49 2 154] 
#[0 36 53 0 115] 
#[0 16 178 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 57 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 16 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 61 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 16 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 36 65 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 69 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 36 73 2 47 36 73 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 36 73 2 54 36 73 2 55 4 1 2 56 36 73 2 63 36 73 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 36 73 2 97 36 73 2 98 36 73 2 99 36 73 2 100 36 73 2 101 36 73 2 102 36 73 2 103 36 73 2 104 36 73 2 105 36 73 2 106 36 73 2 107 36 73 2 108 36 73 2 109 36 73 2 110 36 73 2 111 36 73 2 112 36 73 2 113 36 73 2 114 36 73 2 115 36 73 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 36 73 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 36 73 2 159] 
#[1 6 53 0 3 16 190 0 4 6 167 0 5 16 190 0 6 6 57 0 7 16 190 0 8 6 61 0 9 16 190 0 10 16 190 0 11 6 65 0 12 16 190 0 13 6 69 0 15 16 190 0 16 16 190 0 17 6 73 0 19 6 77 0 20 16 190 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 16 190 0 28 16 190 0 32 6 105 0 34 6 109 0 35 16 190 0 38 16 190 0 45 16 190 0 80 16 190 0 83 16 190 0 87 16 190 0 90 16 190 0 99 16 190 0 105 16 190 0 108 16 190 0 110 16 190 0 115 6 113 0 116 6 117 0 118 16 190 0 121 16 190 0 123 6 121 0 125 6 125 0 130 16 190 0 146 6 129 0 150 6 133 0 151 16 190 0 152 16 190 0 171 16 190 0 177 16 190 0 179 16 190 0 186 16 190 0 188 16 190 0 190 16 190 0 201 6 137 0 207 6 141 0 209 16 190 0 210 6 145 0 211 16 190 0 212 16 190 0 214 16 190 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 36 77 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 81 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 16 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 198 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 36 85 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 16 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 16 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 16 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 36 89 0 17 36 93 0 215] 
#[0 17 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 36 97 0 17 36 101 0 215] 
#[0 17 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 36 105 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 17 38 0 6 0 11 0 215] 
#[0 17 42 0 17 0 106 0 108 0 215] 
#[1 36 109 0 17 36 113 0 215] 
#[0 17 46 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 17 50 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 21 117 0 70 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 21 121 0 138 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 21 125 0 183 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 117 0 252 21 137 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 21 137 1 92] 
#[0 17 54 0 11 0 214 0 215] 
#[0 36 121 0 184] 
#[0 36 125 0 88] 
#[0 36 129 0 100] 
#[0 36 133 0 88] 
#[0 17 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 36 137 0 17 36 141 0 215] 
#[0 17 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 36 145 0 17 36 149 0 215] 
#[1 2 29 0 5 15 210 0 17 34 65 0 33 34 69 0 37 15 210 0 215 36 153 0 235 34 77 1 130 36 157 1 131 36 161 1 135] 
#[1 2 29 0 5 36 165 0 17 34 65 0 33 36 169 0 215 36 173 0 235 36 177 1 135] 
#[1 30 113 0 124 36 181 1 134] 
#[1 30 113 0 124 36 185 1 134] 
#[0 36 189 0 88] 
#[0 36 193 0 215] 
#[1 36 197 0 6 3 137 0 215 36 197 0 236] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 201 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 36 201 1 92] 
#[0 17 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 36 205 0 17 36 209 0 215] 
#[0 36 213 0 161] 
#[1 0 73 0 19 36 217 0 88 26 137 0 98 26 129 0 101 26 137 0 160 26 137 0 162 26 137 0 163 26 133 0 172 26 137 0 242 26 141 0 253 0 89 0 254 0 93 0 255 30 241 1 209 30 241 1 210 30 241 1 211] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 36 221 1 201] 
#[1 6 234 0 44 6 234 0 48 6 234 0 69 6 234 0 75 6 234 0 76 6 234 0 85 6 234 0 103 6 234 0 113 6 234 0 126 36 225 0 138 6 234 0 143 6 234 0 170 6 234 0 175 6 234 0 176 6 234 0 182 6 234 0 194 6 234 0 195 6 234 0 196 6 234 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 36 229 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 36 229 1 92] 
#[1 2 65 0 24 36 233 0 37 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 36 237 1 198] 
#[1 36 241 0 6 3 137 0 215 36 241 0 236] 
#[0 36 245 0 215] 
#[0 36 249 0 228] 
#[0 17 82 0 11 0 17 0 215] 
#[0 36 253 0 228] 
#[0 17 86 0 11 0 17 0 215] 
#[0 37 1 0 228] 
#[0 17 90 0 11 0 17 0 215] 
#[0 37 5 0 228] 
#[0 17 94 0 11 0 17 0 215] 
#[1 26 1 0 128 26 5 0 134 26 9 0 135 26 13 0 229 37 9 1 147] 
#[0 17 98 0 11 0 17 0 215] 
#[0 37 13 0 228] 
#[0 17 102 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 26 25 1 43 26 25 1 44 26 25 1 45 26 25 1 52 26 25 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 37 17 1 105] 
#[0 17 106 0 11 0 17 0 215] 
#[1 37 21 0 17 37 25 0 215] 
#[0 37 29 0 184] 
#[1 37 33 0 17 37 37 0 215] 
#[0 37 41 0 100] 
#[0 17 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 126 0 5 0 17 0 33 0 37 0 215] 
#[0 37 45 0 223] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 37 49 0 253 0 89 0 254 0 93 0 255 37 53 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 37 53 1 92] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 37 57 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[0 17 134 0 17 0 215] 
#[1 37 65 0 17 37 69 0 215] 
#[1 2 29 0 5 15 210 0 17 34 69 0 37 15 210 0 215 37 73 0 235 34 77 1 130 37 77 1 131] 
#[0 17 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 37 81 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 37 85 0 17 37 89 0 215 37 93 0 235] 
#[1 2 29 0 5 15 210 0 17 34 65 0 33 34 69 0 37 15 210 0 215 37 97 0 235 34 77 1 130 37 101 1 131 37 105 1 135] 
#[1 2 29 0 5 37 109 0 17 34 65 0 33 37 113 0 215 37 117 0 235 37 121 1 135] 
#[0 37 125 0 184] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 37 129 1 217 14 29 1 219] 
#[0 37 133 0 215] 
#[1 37 137 0 17 21 225 0 108 37 141 0 215 37 145 1 101] 
#[0 17 146 0 17 0 108 0 215] 
#[0 17 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 17 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 3 221 2 47 37 149 2 48 3 221 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 3 221 2 54 3 221 2 55 4 1 2 56 3 221 2 63 3 221 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 3 221 2 97 3 221 2 98 3 221 2 99 3 221 2 100 3 221 2 101 3 221 2 102 3 221 2 103 3 221 2 104 3 221 2 105 3 221 2 106 3 221 2 107 3 221 2 108 3 221 2 109 3 221 2 110 3 221 2 111 3 221 2 112 3 221 2 113 3 221 2 114 3 221 2 115 3 221 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 3 221 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 3 221 2 159] 
#[0 17 158 0 11 0 17 0 215] 
#[0 17 162 0 17 0 108 0 215] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 37 153 0 253 0 89 0 254 0 93 0 255 37 157 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 37 157 1 92] 
#[1 17 166 0 17 37 161 0 37 17 166 0 108 17 166 0 215] 
#[0 37 165 0 88] 
#[0 37 169 0 88] 
#[0 37 173 0 215] 
#[1 37 177 0 6 3 137 0 215 37 177 0 236] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 37 181 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 37 185 1 217 14 29 1 219] 
#[1 37 189 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 37 189 0 236 11 93 0 253 0 89 0 254 0 93 0 255 37 193 1 136 11 101 1 139 11 105 1 140] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 37 197 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 37 201 1 217 14 29 1 219] 
#[1 37 205 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 37 205 0 236 11 93 0 253 0 89 0 254 0 93 0 255 37 209 1 136 11 101 1 139 11 105 1 140] 
#[0 37 213 0 215] 
#[1 2 29 0 5 37 217 0 215 37 221 0 235] 
#[1 37 225 0 17 37 229 0 215] 
#[0 37 233 0 161] 
#[1 2 29 0 5 2 85 0 29 17 170 0 99 17 170 0 108 17 170 0 204 17 170 0 215 37 237 0 235] 
#[0 17 174 0 99 0 108 0 204 0 215] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 37 241 1 202 37 241 2 79 37 241 2 80 37 241 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 37 249 1 201] 
#[1 2 65 0 24 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 37 253 1 198] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 38 1 0 138 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 38 5 0 253 0 89 0 254 0 93 0 255 38 9 1 112] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 38 13 1 199] 
#[1 2 65 0 24 38 17 0 37 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 38 21 1 198] 
#[0 17 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 38 25 1 136 11 101 1 139 11 105 1 140] 
#[1 38 29 0 6 3 137 0 215 38 29 0 236] 
#[0 17 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 17 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 17 202 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 17 202 0 214 17 202 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 33 2 47 38 33 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 33 2 54 38 33 2 55 4 1 2 56 38 33 2 63 38 33 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 33 2 97 38 33 2 98 38 33 2 99 38 33 2 100 38 33 2 101 38 33 2 102 38 33 2 103 38 33 2 104 38 33 2 105 38 33 2 106 38 33 2 107 38 33 2 108 38 33 2 109 38 33 2 110 38 33 2 111 38 33 2 112 38 33 2 113 38 33 2 114 38 33 2 115 38 33 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 33 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 33 2 159] 
#[0 38 37 0 100] 
#[0 38 41 0 88] 
#[0 17 206 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 139 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 45 1 217 14 29 1 219] 
#[0 38 49 0 139] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 53 2 47 38 53 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 53 2 54 38 53 2 55 4 1 2 56 38 53 2 63 38 53 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 53 2 97 38 53 2 98 38 53 2 99 38 53 2 100 38 53 2 101 38 53 2 102 38 53 2 103 38 53 2 104 38 53 2 105 38 53 2 106 38 53 2 107 38 53 2 108 38 53 2 109 38 53 2 110 38 53 2 111 38 53 2 112 38 53 2 113 38 53 2 114 38 53 2 115 38 53 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 53 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 53 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 139 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 57 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 61 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 65 1 217 14 29 1 219] 
#[0 17 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 38 69 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 38 73 0 188 6 137 0 207 6 141 0 209 6 145 0 211 38 77 0 215 6 149 0 235] 
#[0 38 81 0 107] 
#[0 38 85 0 107] 
#[0 38 89 0 88] 
#[0 38 93 0 107] 
#[0 38 97 0 88] 
#[0 17 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 38 101 0 107] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 105 2 47 38 105 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 105 2 54 38 105 2 55 4 1 2 56 38 105 2 63 38 105 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 105 2 97 38 105 2 98 38 105 2 99 38 105 2 100 38 105 2 101 38 105 2 102 38 105 2 103 38 105 2 104 38 105 2 105 38 105 2 106 38 105 2 107 38 105 2 108 38 105 2 109 38 105 2 110 38 105 2 111 38 105 2 112 38 105 2 113 38 105 2 114 38 105 2 115 38 105 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 105 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 105 2 159] 
#[1 2 65 0 24 38 109 0 239] 
#[1 6 53 0 3 2 29 0 5 38 113 0 6 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 6 149 0 235 38 113 0 236] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 117 2 47 38 117 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 117 2 54 38 117 2 55 4 1 2 56 38 117 2 63 38 117 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 117 2 97 38 117 2 98 38 117 2 99 38 117 2 100 38 117 2 101 38 117 2 102 38 117 2 103 38 117 2 104 38 117 2 105 38 117 2 106 38 117 2 107 38 117 2 108 38 117 2 109 38 117 2 110 38 117 2 111 38 117 2 112 38 117 2 113 38 117 2 114 38 117 2 115 38 117 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 117 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 117 2 159] 
#[0 17 218 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 38 121 0 171] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 125 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 129 1 217 14 29 1 219] 
#[1 38 133 0 19 38 133 0 22 38 133 0 23 38 133 0 24 38 133 0 25 31 253 0 26 38 133 1 254] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 38 137 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 141 2 47 38 141 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 141 2 54 38 141 2 55 4 1 2 56 38 141 2 63 38 141 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 141 2 97 38 141 2 98 38 141 2 99 38 141 2 100 38 141 2 101 38 141 2 102 38 141 2 103 38 141 2 104 38 141 2 105 38 141 2 106 38 141 2 107 38 141 2 108 38 141 2 109 38 141 2 110 38 141 2 111 38 141 2 112 38 141 2 113 38 141 2 114 38 141 2 115 38 141 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 141 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 141 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 67 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 145 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 67 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 149 1 217 14 29 1 219] 
#[1 2 225 0 11 17 222 0 17 17 222 0 215 38 153 0 234 38 157 1 251] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 161 2 47 38 161 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 161 2 54 38 161 2 55 4 1 2 56 38 161 2 63 38 161 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 161 2 97 38 161 2 98 38 161 2 99 38 161 2 100 38 161 2 101 38 161 2 102 38 161 2 103 38 161 2 104 38 161 2 105 38 161 2 106 38 161 2 107 38 161 2 108 38 161 2 109 38 161 2 110 38 161 2 111 38 161 2 112 38 161 2 113 38 161 2 114 38 161 2 115 38 161 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 161 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 161 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 17 226 0 11 6 65 0 12 6 69 0 15 17 226 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 17 226 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 165 2 47 38 165 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 165 2 54 38 165 2 55 4 1 2 56 38 165 2 63 38 165 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 165 2 97 38 165 2 98 38 165 2 99 38 165 2 100 38 165 2 101 38 165 2 102 38 165 2 103 38 165 2 104 38 165 2 105 38 165 2 106 38 165 2 107 38 165 2 108 38 165 2 109 38 165 2 110 38 165 2 111 38 165 2 112 38 165 2 113 38 165 2 114 38 165 2 115 38 165 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 165 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 165 2 159] 
#[0 17 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 38 169 0 215 6 149 0 235] 
#[0 17 234 0 68 0 88 0 96] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 38 173 1 43 38 173 1 44 38 173 1 45 38 173 1 52 38 173 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 38 177 2 47 38 177 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 38 177 2 54 38 177 2 55 4 1 2 56 38 177 2 63 38 177 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 38 177 2 97 38 177 2 98 38 177 2 99 38 177 2 100 38 177 2 101 38 177 2 102 38 177 2 103 38 177 2 104 38 177 2 105 38 177 2 106 38 177 2 107 38 177 2 108 38 177 2 109 38 177 2 110 38 177 2 111 38 177 2 112 38 177 2 113 38 177 2 114 38 177 2 115 38 177 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 38 177 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 38 177 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 38 181 1 217 14 29 1 219] 
#[0 17 238 0 88] 
#[0 17 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 8 10 0 3 8 10 0 4 8 10 0 5 8 10 0 6 8 10 0 7 8 10 0 8 8 10 0 9 8 10 0 10 8 10 0 11 8 10 0 12 8 10 0 13 8 10 0 15 8 10 0 16 8 10 0 17 8 10 0 19 8 10 0 20 8 10 0 21 8 10 0 22 8 10 0 23 8 10 0 24 8 10 0 25 8 10 0 26 8 10 0 27 8 10 0 28 8 10 0 32 8 10 0 34 8 10 0 35 8 10 0 38 8 10 0 45 8 10 0 80 8 10 0 83 8 10 0 87 8 10 0 90 1 255 0 99 8 10 0 105 8 10 0 108 8 10 0 110 8 10 0 115 8 10 0 116 8 10 0 118 8 10 0 121 8 10 0 123 8 10 0 125 8 10 0 130 8 10 0 146 8 10 0 150 8 10 0 151 8 10 0 152 8 10 0 171 8 10 0 177 8 10 0 179 8 10 0 186 8 10 0 188 8 10 0 190 8 10 0 201 5 209 0 204 8 10 0 207 8 10 0 209 8 10 0 210 8 10 0 211 8 10 0 212 8 10 0 214 8 10 0 215 18 209 2 79 18 209 2 80 18 209 2 85] 
#[0 17 246 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 38 185 2 132 15 109 2 135] 
#[0 17 250 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 11 106 0 115 38 189 0 215 38 189 2 154] 
#[0 38 193 0 115] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 38 197 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 38 201 0 215 38 201 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 38 205 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 38 209 0 215 38 209 2 154] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 38 213 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 38 217 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 38 221 0 115] 
#[1 38 225 0 215 11 106 0 229 38 225 2 154] 
#[1 11 106 0 115 38 229 0 215 38 229 2 154] 
#[0 38 233 0 115] 
#[1 11 106 0 115 38 237 0 215 38 237 2 154] 
#[0 38 241 0 115] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 38 245 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 38 249 0 215 38 249 2 154] 
#[1 38 253 0 215 11 106 0 229 38 253 2 154] 
#[1 15 101 0 229 39 1 2 132 15 109 2 135] 
#[0 39 5 0 115] 
#[1 39 9 0 215 11 106 0 229 39 9 2 154] 
#[1 11 106 0 115 39 13 0 215 39 13 2 154] 
#[0 39 17 0 115] 
#[1 39 21 0 215 11 106 0 229 39 21 2 154] 
#[1 15 101 0 229 39 25 2 132 15 109 2 135] 
#[0 39 29 0 115] 
#[1 39 33 0 215 11 106 0 229 39 33 2 154] 
#[0 17 254 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 39 37 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 18 6 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 18 10 0 4 6 171 0 5 18 10 0 6 6 57 0 7 18 10 0 8 6 61 0 9 18 10 0 10 18 10 0 11 6 65 0 12 18 10 0 13 6 69 0 15 18 10 0 16 18 10 0 17 6 73 0 19 6 77 0 20 18 10 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 18 10 0 28 18 10 0 32 6 105 0 34 6 109 0 35 18 10 0 38 18 10 0 45 18 10 0 80 18 10 0 83 18 10 0 87 18 10 0 90 18 10 0 99 18 10 0 105 18 10 0 108 18 10 0 110 18 10 0 115 6 113 0 116 6 117 0 118 18 10 0 121 18 10 0 123 6 121 0 125 6 125 0 130 18 10 0 146 6 129 0 150 6 133 0 151 18 10 0 152 18 10 0 171 18 10 0 177 18 10 0 179 18 10 0 186 18 10 0 188 18 10 0 190 18 10 0 201 6 137 0 207 6 141 0 209 18 10 0 210 6 145 0 211 18 10 0 212 18 10 0 214 18 10 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 39 41 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[0 18 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 18 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 18 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 18 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 131 0 132 0 133 0 136 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206 2 160] 
#[0 18 38 0 6 0 11 0 215] 
#[0 18 42 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 18 46 0 19 0 70 0 78 0 79 0 88 0 89 0 93 0 98 0 100 0 114 0 132 0 141 0 154 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 183 0 184 0 206] 
#[0 18 50 0 11 0 214 0 215] 
#[1 39 45 0 17 39 49 0 215] 
#[0 39 53 0 184] 
#[1 39 57 0 17 39 61 0 215] 
#[0 39 65 0 100] 
#[0 18 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 39 69 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 39 73 0 17 39 77 0 215] 
#[1 2 29 0 5 15 210 0 17 34 69 0 37 15 210 0 215 39 81 0 235 34 77 1 130 39 85 1 131] 
#[0 18 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 39 89 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 39 93 0 17 39 97 0 215 39 101 0 235] 
#[1 2 29 0 5 15 210 0 17 34 65 0 33 34 69 0 37 15 210 0 215 39 105 0 235 34 77 1 130 39 109 1 131 39 113 1 135] 
#[1 2 29 0 5 39 117 0 17 34 65 0 33 39 121 0 215 39 125 0 235 39 129 1 135] 
#[0 39 133 0 184] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 39 137 1 217 14 29 1 219] 
#[0 39 141 0 215] 
#[1 39 145 0 17 21 225 0 108 39 149 0 215 39 153 1 101] 
#[0 18 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 157 0 17 39 161 0 215] 
#[0 39 165 0 161] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 39 169 1 202 39 169 2 79 39 169 2 80 39 169 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 39 173 1 201] 
#[1 2 65 0 24 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 39 177 1 198] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 39 181 0 138 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 39 185 0 253 0 89 0 254 0 93 0 255 39 189 1 112] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 39 193 1 199] 
#[1 2 65 0 24 39 197 0 37 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 39 201 1 198] 
#[0 18 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 90 0 11 0 17 0 215] 
#[0 18 94 0 11 0 17 0 215] 
#[0 18 98 0 11 0 17 0 215] 
#[0 18 102 0 11 0 17 0 215] 
#[0 18 106 0 11 0 17 0 215] 
#[0 18 110 0 11 0 17 0 215] 
#[0 18 114 0 11 0 17 0 215] 
#[0 18 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 205 0 17 39 209 0 215] 
#[0 18 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 39 213 0 17 39 217 0 215] 
#[0 18 134 0 5 0 17 0 37 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 39 221 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 39 221 1 92] 
#[0 18 138 0 17 0 215] 
#[1 39 225 0 6 3 137 0 215 39 225 0 236] 
#[0 18 142 0 6 0 215] 
#[0 18 146 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 150 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 39 229 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 39 233 0 17 39 237 0 215] 
#[1 39 241 0 6 3 137 0 215 39 241 0 236] 
#[0 18 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 39 245 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 39 249 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 39 253 0 17 40 1 0 215] 
#[1 2 29 0 5 15 210 0 17 34 69 0 37 15 210 0 215 40 5 0 235 34 77 1 130 40 9 1 131] 
#[0 18 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 40 13 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 40 17 0 17 40 21 0 215 40 25 0 235] 
#[1 40 29 0 17 40 33 0 215] 
#[0 40 37 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 40 41 1 217 14 29 1 219] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 40 61 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 40 81 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[1 40 85 0 17 40 89 0 215] 
#[0 18 170 0 11 0 17 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 40 93 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 40 93 1 92] 
#[0 18 174 0 17 0 108 0 215] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 40 97 0 253 0 89 0 254 0 93 0 255 40 101 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 40 101 1 92] 
#[0 40 105 0 101] 
#[0 40 109 0 172] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 40 113 1 217 14 29 1 219] 
#[0 40 117 0 215] 
#[0 40 121 0 88] 
#[0 40 125 0 88] 
#[0 40 129 0 215] 
#[1 40 133 0 6 3 137 0 215 40 133 0 236] 
#[0 40 137 0 88] 
#[0 40 141 0 88] 
#[0 40 145 0 215] 
#[1 40 149 0 6 3 137 0 215 40 149 0 236] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 40 153 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 40 157 1 217 14 29 1 219] 
#[1 40 161 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 3 137 0 215 4 162 0 229 40 161 0 236 11 93 0 253 0 89 0 254 0 93 0 255 40 165 1 136 11 101 1 139 11 105 1 140] 
#[0 18 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 18 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 40 169 0 17 40 173 0 215] 
#[1 2 241 0 1 2 29 0 5 0 119 0 6 2 249 0 9 4 106 0 11 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 0 123 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 9 17 0 228 3 173 0 229 3 177 0 235 40 177 0 236 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 9 25 2 47 9 25 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 9 25 2 54 9 25 2 55 4 1 2 56 9 25 2 63 9 25 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 40 181 2 70 9 33 2 71 9 37 2 73 9 41 2 74 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 9 25 2 97 9 25 2 98 9 25 2 99 9 25 2 100 9 25 2 101 9 25 2 102 9 25 2 103 9 25 2 104 9 25 2 105 9 25 2 106 9 25 2 107 9 25 2 108 9 25 2 109 9 25 2 110 9 25 2 111 9 25 2 112 9 25 2 113 9 25 2 114 9 25 2 115 9 25 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 9 25 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 9 25 2 159] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 40 185 1 199] 
#[0 18 186 0 108 0 215] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 40 189 1 202 40 189 2 79 40 189 2 80 40 189 2 85] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 40 193 1 199] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 40 197 1 201] 
#[1 6 234 0 44 6 234 0 48 6 234 0 69 6 234 0 75 6 234 0 76 6 234 0 85 6 234 0 103 6 234 0 113 6 234 0 126 40 201 0 138 6 234 0 143 6 234 0 170 6 234 0 175 6 234 0 176 6 234 0 182 6 234 0 194 6 234 0 195 6 234 0 196 6 234 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 40 205 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 40 205 1 92] 
#[0 40 209 0 215] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 40 213 0 138 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 40 217 0 253 0 89 0 254 0 93 0 255 40 221 1 112] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 40 225 1 199] 
#[1 40 229 0 6 3 137 0 215 40 229 0 236] 
#[1 40 233 0 37 40 237 0 215] 
#[1 6 53 0 3 2 29 0 5 18 190 0 6 6 57 0 7 6 61 0 9 18 190 0 11 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 18 190 0 215 6 149 0 235] 
#[0 18 194 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 40 241 0 100] 
#[0 40 245 0 139] 
#[1 2 241 0 1 18 198 0 3 18 198 0 4 6 175 0 5 18 198 0 6 18 198 0 7 18 198 0 8 2 249 0 9 18 198 0 10 18 198 0 11 2 253 0 12 18 198 0 13 3 1 0 14 18 198 0 15 18 198 0 16 18 198 0 17 18 198 0 19 18 198 0 20 18 198 0 21 18 198 0 22 18 198 0 23 18 198 0 24 18 198 0 25 18 198 0 26 18 198 0 27 18 198 0 28 3 5 0 31 6 179 0 32 18 198 0 34 18 198 0 35 18 198 0 38 1 186 0 40 3 13 0 42 1 65 0 44 18 198 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 18 198 0 80 3 85 0 82 18 198 0 83 1 65 0 85 18 198 0 87 18 198 0 90 6 183 0 99 1 186 0 100 3 93 0 102 3 97 0 103 18 198 0 105 3 101 0 107 18 198 0 108 18 198 0 110 1 65 0 113 18 198 0 115 18 198 0 116 18 198 0 118 1 186 0 120 18 198 0 121 18 198 0 123 18 198 0 125 1 65 0 126 3 105 0 128 18 198 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 18 198 0 146 18 198 0 150 18 198 0 151 18 198 0 152 1 65 0 170 18 198 0 171 1 65 0 175 1 65 0 176 18 198 0 177 18 198 0 179 1 65 0 182 1 186 0 184 18 198 0 186 18 198 0 188 18 198 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 18 198 0 201 18 198 0 207 18 198 0 209 18 198 0 210 18 198 0 211 18 198 0 212 3 133 0 213 18 198 0 214 18 198 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 40 249 2 8 40 253 2 47 40 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 40 253 2 54 40 253 2 55 4 1 2 56 40 253 2 63 40 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 40 253 2 97 40 253 2 98 40 253 2 99 40 253 2 100 40 253 2 101 40 253 2 102 40 253 2 103 40 253 2 104 40 253 2 105 40 253 2 106 40 253 2 107 40 253 2 108 40 253 2 109 40 253 2 110 40 253 2 111 40 253 2 112 40 253 2 113 40 253 2 114 40 253 2 115 40 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 40 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 40 253 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 41 1 0 215 6 149 0 235] 
#[0 41 5 0 139] 
#[0 18 202 0 88] 
#[0 18 206 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 41 9 1 217 14 29 1 219] 
#[1 41 13 0 17 41 17 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 41 21 1 217 14 29 1 219] 
#[0 18 210 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 214 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 41 25 0 107] 
#[0 18 218 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 41 29 0 107] 
#[0 18 222 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 2 29 0 5 41 33 0 6 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 3 137 0 215 6 149 0 235 41 33 0 236] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 41 37 2 47 41 37 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 41 37 2 54 41 37 2 55 4 1 2 56 41 37 2 63 41 37 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 41 37 2 97 41 37 2 98 41 37 2 99 41 37 2 100 41 37 2 101 41 37 2 102 41 37 2 103 41 37 2 104 41 37 2 105 41 37 2 106 41 37 2 107 41 37 2 108 41 37 2 109 41 37 2 110 41 37 2 111 41 37 2 112 41 37 2 113 41 37 2 114 41 37 2 115 41 37 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 41 37 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 41 37 2 159] 
#[1 2 65 0 24 41 41 0 239] 
#[1 6 53 0 3 18 226 0 4 6 187 0 5 18 226 0 6 6 57 0 7 18 226 0 8 6 61 0 9 18 226 0 10 18 226 0 11 6 65 0 12 18 226 0 13 6 69 0 15 18 226 0 16 18 226 0 17 6 73 0 19 6 77 0 20 18 226 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 18 226 0 28 18 226 0 32 6 105 0 34 6 109 0 35 18 226 0 38 18 226 0 45 18 226 0 80 18 226 0 83 18 226 0 87 18 226 0 90 18 226 0 99 18 226 0 105 18 226 0 108 18 226 0 110 18 226 0 115 6 113 0 116 6 117 0 118 18 226 0 121 18 226 0 123 6 121 0 125 6 125 0 130 18 226 0 146 6 129 0 150 6 133 0 151 18 226 0 152 18 226 0 171 18 226 0 177 18 226 0 179 18 226 0 186 18 226 0 188 18 226 0 190 18 226 0 201 6 137 0 207 6 141 0 209 18 226 0 210 6 145 0 211 18 226 0 212 18 226 0 214 18 226 0 215 6 149 0 235] 
#[0 18 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 18 234 0 88] 
#[0 18 238 0 88] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 41 45 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 41 49 2 47 41 49 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 41 49 2 54 41 49 2 55 4 1 2 56 41 49 2 63 41 49 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 41 49 2 97 41 49 2 98 41 49 2 99 41 49 2 100 41 49 2 101 41 49 2 102 41 49 2 103 41 49 2 104 41 49 2 105 41 49 2 106 41 49 2 107 41 49 2 108 41 49 2 109 41 49 2 110 41 49 2 111 41 49 2 112 41 49 2 113 41 49 2 114 41 49 2 115 41 49 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 41 49 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 41 49 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 41 53 2 47 41 53 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 41 53 2 54 41 53 2 55 4 1 2 56 41 53 2 63 41 53 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 41 53 2 97 41 53 2 98 41 53 2 99 41 53 2 100 41 53 2 101 41 53 2 102 41 53 2 103 41 53 2 104 41 53 2 105 41 53 2 106 41 53 2 107 41 53 2 108 41 53 2 109 41 53 2 110 41 53 2 111 41 53 2 112 41 53 2 113 41 53 2 114 41 53 2 115 41 53 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 41 53 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 41 53 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 18 242 0 11 6 65 0 12 6 69 0 15 18 242 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 18 242 0 215 6 149 0 235] 
#[0 18 246 0 67 0 88] 
#[0 18 250 0 67 0 88] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 32 17 0 19 32 17 0 22 32 17 0 23 32 17 0 24 32 17 0 25 31 253 0 26 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 32 5 0 116 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 41 57 1 253 32 17 1 254 32 21 2 47 32 21 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 32 21 2 54 32 21 2 55 4 1 2 56 32 21 2 63 32 21 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 32 21 2 97 32 21 2 98 32 21 2 99 32 21 2 100 32 21 2 101 32 21 2 102 32 21 2 103 32 21 2 104 32 21 2 105 32 21 2 106 32 21 2 107 32 21 2 108 32 21 2 109 32 21 2 110 32 21 2 111 32 21 2 112 32 21 2 113 32 21 2 114 32 21 2 115 32 21 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 32 21 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 32 21 2 159] 
#[0 18 254 0 11 0 17 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 19 2 0 11 6 65 0 12 6 69 0 15 19 2 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 2 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 19 6 0 11 6 65 0 12 6 69 0 15 19 6 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 6 0 215 6 149 0 235] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 41 61 1 217 14 29 1 219] 
#[1 2 85 0 29 41 65 0 200 41 69 0 215] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 41 73 0 215 6 149 0 235] 
#[0 19 10 0 68 0 88 0 96] 
#[0 19 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 41 77 0 115] 
#[1 41 81 0 215 11 106 0 229 41 81 2 154] 
#[1 11 106 0 115 41 85 0 215 41 85 2 154] 
#[0 41 89 0 115] 
#[1 11 106 0 115 41 93 0 215 41 93 2 154] 
#[0 41 97 0 115] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 24 137 2 47 24 137 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 24 137 2 54 24 137 2 55 4 1 2 56 24 137 2 63 24 137 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 24 137 2 97 24 137 2 98 24 137 2 99 24 137 2 100 24 137 2 101 24 137 2 102 24 137 2 103 24 137 2 104 24 137 2 105 24 137 2 106 24 137 2 107 24 137 2 108 24 137 2 109 24 137 2 110 24 137 2 111 24 137 2 112 24 137 2 113 24 137 2 114 24 137 2 115 24 137 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 24 137 2 122 4 169 2 125 4 173 2 136 41 101 2 138 24 145 2 141 4 177 2 155 4 181 2 158 24 137 2 159] 
#[1 11 106 0 115 41 105 0 215 41 105 2 154] 
#[1 41 109 0 215 11 106 0 229 41 109 2 154] 
#[1 15 101 0 229 41 113 2 132 15 109 2 135] 
#[0 41 117 0 115] 
#[1 41 121 0 215 11 106 0 229 41 121 2 154] 
#[0 41 125 0 115] 
#[1 41 129 0 215 11 106 0 229 41 129 2 154] 
#[1 11 106 0 115 41 133 0 215 41 133 2 154] 
#[0 41 137 0 115] 
#[1 15 101 0 229 41 141 2 132 15 109 2 135] 
#[0 19 18 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 41 145 0 215 11 106 0 229 41 145 2 154] 
#[1 15 101 0 229 41 149 2 132 15 109 2 135] 
#[0 41 153 0 115] 
#[1 41 157 0 215 11 106 0 229 41 157 2 154] 
#[1 15 101 0 229 41 161 2 132 15 109 2 135] 
#[0 19 22 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 41 165 0 215 11 106 0 229 41 165 2 154] 
#[1 15 101 0 229 41 169 2 132 15 109 2 135] 
#[0 19 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 173 0 17 41 177 0 215] 
#[0 19 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 41 181 0 17 41 185 0 215] 
#[1 41 189 0 6 3 137 0 215 41 189 0 236] 
#[0 19 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 41 193 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 41 197 0 17 41 201 0 215] 
#[1 41 205 0 6 3 137 0 215 41 205 0 236] 
#[0 19 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 41 209 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 41 213 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 41 217 0 17 41 221 0 215] 
#[1 2 29 0 5 15 210 0 17 34 69 0 37 15 210 0 215 41 225 0 235 34 77 1 130 41 229 1 131] 
#[0 19 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 41 233 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 41 237 0 17 41 241 0 215 41 245 0 235] 
#[1 41 249 0 17 41 253 0 215] 
#[0 42 1 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 42 5 1 217 14 29 1 219] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 9 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 13 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[1 42 17 0 17 42 21 0 215] 
#[0 19 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 42 25 0 17 42 29 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 42 33 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 42 37 1 202 42 37 2 79 42 37 2 80 42 37 2 85] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 42 41 1 199] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 42 45 1 201] 
#[1 6 234 0 44 6 234 0 48 6 234 0 69 6 234 0 75 6 234 0 76 6 234 0 85 6 234 0 103 6 234 0 113 6 234 0 126 42 49 0 138 6 234 0 143 6 234 0 170 6 234 0 175 6 234 0 176 6 234 0 182 6 234 0 194 6 234 0 195 6 234 0 196 6 234 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 42 53 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 42 53 1 92] 
#[0 42 57 0 215] 
#[1 0 73 0 19 4 158 0 44 4 158 0 48 4 158 0 69 4 158 0 75 4 158 0 76 4 158 0 85 4 158 0 103 4 158 0 113 4 158 0 126 42 61 0 138 4 158 0 143 4 158 0 170 4 158 0 175 4 158 0 176 4 158 0 182 4 158 0 194 4 158 0 195 4 158 0 196 4 158 0 229 42 65 0 253 0 89 0 254 0 93 0 255 42 69 1 112] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 42 73 1 199] 
#[0 19 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 98 0 17 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 42 77 1 131] 
#[1 42 81 0 6 3 137 0 215 42 81 0 236] 
#[0 19 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 42 85 0 17 42 89 0 215] 
#[1 42 93 0 6 3 137 0 215 42 93 0 236] 
#[1 42 97 0 6 3 137 0 215 42 97 0 236] 
#[0 19 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 42 101 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 42 105 0 17 42 109 0 215] 
#[1 42 113 0 6 3 137 0 215 42 113 0 236] 
#[0 19 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 42 117 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[0 19 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 42 121 0 184] 
#[0 42 125 0 88] 
#[1 2 29 0 5 42 129 0 235] 
#[1 2 29 0 5 42 133 0 235] 
#[1 2 29 0 5 42 137 0 235] 
#[1 42 141 0 30 42 145 0 164 42 149 0 167] 
#[1 0 73 0 19 40 45 0 30 42 153 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[0 19 134 0 19 0 30 0 88 0 164 0 167] 
#[0 19 138 0 19 0 30 0 88 0 164 0 167] 
#[0 19 142 0 19 0 30 0 88 0 164 0 167] 
#[0 19 146 0 19 0 30 0 88 0 164 0 167] 
#[1 0 73 0 19 40 45 0 30 42 161 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 165 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 169 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[0 19 150 0 17 0 108 0 215] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 42 173 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 42 173 1 92] 
#[0 19 154 0 17 0 108 0 215] 
#[1 42 177 0 17 42 181 0 215] 
#[1 42 185 0 17 42 189 0 215] 
#[0 42 193 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 42 197 1 217 14 29 1 219] 
#[0 42 201 0 101] 
#[0 42 205 0 172] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 42 209 1 217 14 29 1 219] 
#[0 42 213 0 215] 
#[0 42 217 0 101] 
#[0 42 221 0 172] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 42 225 1 217 14 29 1 219] 
#[0 42 229 0 215] 
#[0 42 233 0 88] 
#[0 42 237 0 88] 
#[0 42 241 0 215] 
#[1 42 245 0 6 3 137 0 215 42 245 0 236] 
#[0 19 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 166 0 99 0 108 0 204 0 215] 
#[1 42 249 0 6 3 137 0 215 42 249 0 236] 
#[0 42 253 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 43 1 1 199] 
#[0 43 5 0 215] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 43 9 1 202 43 9 2 79 43 9 2 80 43 9 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 43 13 1 201] 
#[1 2 65 0 24 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 43 17 1 198] 
#[0 19 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 43 21 1 201] 
#[1 6 234 0 44 6 234 0 48 6 234 0 69 6 234 0 75 6 234 0 76 6 234 0 85 6 234 0 103 6 234 0 113 6 234 0 126 43 25 0 138 6 234 0 143 6 234 0 170 6 234 0 175 6 234 0 176 6 234 0 182 6 234 0 194 6 234 0 195 6 234 0 196 6 234 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 43 29 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 29 1 92] 
#[0 43 33 0 215] 
#[1 43 37 0 37 43 41 0 215] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 43 45 0 253 0 89 0 254 0 93 0 255 43 49 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 49 1 92] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 43 53 1 217 14 29 1 219] 
#[0 19 174 0 1 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 14 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 19 178 0 3 19 178 0 4 6 191 0 5 19 178 0 6 19 178 0 7 19 178 0 8 2 249 0 9 19 178 0 10 19 178 0 11 2 253 0 12 19 178 0 13 3 1 0 14 19 178 0 15 19 178 0 16 19 178 0 17 19 178 0 19 19 178 0 20 19 178 0 21 19 178 0 22 19 178 0 23 19 178 0 24 19 178 0 25 19 178 0 26 19 178 0 27 19 178 0 28 3 5 0 31 6 195 0 32 19 178 0 34 19 178 0 35 19 178 0 38 1 186 0 40 3 13 0 42 1 65 0 44 19 178 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 19 178 0 80 3 85 0 82 19 178 0 83 1 65 0 85 19 178 0 87 19 178 0 90 6 199 0 99 1 186 0 100 3 93 0 102 3 97 0 103 19 178 0 105 3 101 0 107 19 178 0 108 19 178 0 110 1 65 0 113 19 178 0 115 19 178 0 116 19 178 0 118 1 186 0 120 19 178 0 121 19 178 0 123 19 178 0 125 1 65 0 126 3 105 0 128 19 178 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 19 178 0 146 19 178 0 150 19 178 0 151 19 178 0 152 1 65 0 170 19 178 0 171 1 65 0 175 1 65 0 176 19 178 0 177 19 178 0 179 1 65 0 182 1 186 0 184 19 178 0 186 19 178 0 188 19 178 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 19 178 0 201 19 178 0 207 19 178 0 209 19 178 0 210 19 178 0 211 19 178 0 212 3 133 0 213 19 178 0 214 19 178 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 57 2 8 40 253 2 47 40 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 40 253 2 54 40 253 2 55 4 1 2 56 40 253 2 63 40 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 40 253 2 97 40 253 2 98 40 253 2 99 40 253 2 100 40 253 2 101 40 253 2 102 40 253 2 103 40 253 2 104 40 253 2 105 40 253 2 106 40 253 2 107 40 253 2 108 40 253 2 109 40 253 2 110 40 253 2 111 40 253 2 112 40 253 2 113 40 253 2 114 40 253 2 115 40 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 40 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 40 253 2 159] 
#[0 19 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 6 53 0 3 19 186 0 4 6 203 0 5 19 186 0 6 6 57 0 7 19 186 0 8 6 61 0 9 19 186 0 10 19 186 0 11 6 65 0 12 19 186 0 13 6 69 0 15 19 186 0 16 19 186 0 17 6 73 0 19 6 77 0 20 19 186 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 19 186 0 28 19 186 0 32 6 105 0 34 6 109 0 35 19 186 0 38 19 186 0 45 19 186 0 80 19 186 0 83 19 186 0 87 19 186 0 90 19 186 0 99 19 186 0 105 19 186 0 108 19 186 0 110 19 186 0 115 6 113 0 116 6 117 0 118 19 186 0 121 19 186 0 123 6 121 0 125 6 125 0 130 19 186 0 146 6 129 0 150 6 133 0 151 19 186 0 152 19 186 0 171 19 186 0 177 19 186 0 179 19 186 0 186 19 186 0 188 19 186 0 190 19 186 0 201 6 137 0 207 6 141 0 209 19 186 0 210 6 145 0 211 19 186 0 212 19 186 0 214 19 186 0 215 6 149 0 235 43 61 2 10] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 139 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 43 65 1 217 14 29 1 219] 
#[1 2 241 0 1 19 190 0 3 19 190 0 4 6 207 0 5 19 190 0 6 19 190 0 7 19 190 0 8 2 249 0 9 19 190 0 10 19 190 0 11 2 253 0 12 19 190 0 13 3 1 0 14 19 190 0 15 19 190 0 16 19 190 0 17 19 190 0 19 19 190 0 20 19 190 0 21 19 190 0 22 19 190 0 23 19 190 0 24 19 190 0 25 19 190 0 26 19 190 0 27 19 190 0 28 3 5 0 31 6 211 0 32 19 190 0 34 19 190 0 35 19 190 0 38 1 186 0 40 3 13 0 42 1 65 0 44 19 190 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 19 190 0 80 3 85 0 82 19 190 0 83 1 65 0 85 19 190 0 87 19 190 0 90 6 215 0 99 1 186 0 100 3 93 0 102 3 97 0 103 19 190 0 105 3 101 0 107 19 190 0 108 19 190 0 110 1 65 0 113 19 190 0 115 19 190 0 116 19 190 0 118 1 186 0 120 19 190 0 121 19 190 0 123 19 190 0 125 1 65 0 126 3 105 0 128 19 190 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 19 190 0 146 19 190 0 150 19 190 0 151 19 190 0 152 1 65 0 170 19 190 0 171 1 65 0 175 1 65 0 176 19 190 0 177 19 190 0 179 1 65 0 182 1 186 0 184 19 190 0 186 19 190 0 188 19 190 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 19 190 0 201 19 190 0 207 19 190 0 209 19 190 0 210 19 190 0 211 19 190 0 212 3 133 0 213 19 190 0 214 19 190 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 69 2 8 40 253 2 47 40 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 40 253 2 54 40 253 2 55 4 1 2 56 40 253 2 63 40 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 40 253 2 97 40 253 2 98 40 253 2 99 40 253 2 100 40 253 2 101 40 253 2 102 40 253 2 103 40 253 2 104 40 253 2 105 40 253 2 106 40 253 2 107 40 253 2 108 40 253 2 109 40 253 2 110 40 253 2 111 40 253 2 112 40 253 2 113 40 253 2 114 40 253 2 115 40 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 40 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 40 253 2 159] 
#[0 19 194 0 87 0 88 0 226] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 43 73 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 87 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 226 5 190 0 227 5 190 0 229 43 77 1 217 14 29 1 219] 
#[0 19 198 0 87 0 88 0 226] 
#[0 19 202 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 206 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 65 0 24 43 81 0 239] 
#[1 6 53 0 3 19 210 0 4 6 219 0 5 19 210 0 6 6 57 0 7 19 210 0 8 6 61 0 9 19 210 0 10 19 210 0 11 6 65 0 12 19 210 0 13 6 69 0 15 19 210 0 16 19 210 0 17 6 73 0 19 6 77 0 20 19 210 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 19 210 0 28 19 210 0 32 6 105 0 34 6 109 0 35 19 210 0 38 19 210 0 45 19 210 0 80 19 210 0 83 19 210 0 87 19 210 0 90 19 210 0 99 19 210 0 105 19 210 0 108 19 210 0 110 19 210 0 115 6 113 0 116 6 117 0 118 19 210 0 121 19 210 0 123 6 121 0 125 6 125 0 130 19 210 0 146 6 129 0 150 6 133 0 151 19 210 0 152 19 210 0 171 19 210 0 177 19 210 0 179 19 210 0 186 19 210 0 188 19 210 0 190 19 210 0 201 6 137 0 207 6 141 0 209 19 210 0 210 6 145 0 211 19 210 0 212 19 210 0 214 19 210 0 215 6 149 0 235] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 85 2 47 43 85 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 43 85 2 54 43 85 2 55 4 1 2 56 43 85 2 63 43 85 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 43 85 2 97 43 85 2 98 43 85 2 99 43 85 2 100 43 85 2 101 43 85 2 102 43 85 2 103 43 85 2 104 43 85 2 105 43 85 2 106 43 85 2 107 43 85 2 108 43 85 2 109 43 85 2 110 43 85 2 111 43 85 2 112 43 85 2 113 43 85 2 114 43 85 2 115 43 85 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 43 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 43 85 2 159] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 89 2 47 43 89 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 43 89 2 54 43 89 2 55 4 1 2 56 43 89 2 63 43 89 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 43 89 2 97 43 89 2 98 43 89 2 99 43 89 2 100 43 89 2 101 43 89 2 102 43 89 2 103 43 89 2 104 43 89 2 105 43 89 2 106 43 89 2 107 43 89 2 108 43 89 2 109 43 89 2 110 43 89 2 111 43 89 2 112 43 89 2 113 43 89 2 114 43 89 2 115 43 89 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 43 89 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 43 89 2 159] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 19 214 0 11 6 65 0 12 6 69 0 15 19 214 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 214 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 19 218 0 11 6 65 0 12 6 69 0 15 19 218 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 19 218 0 215 6 149 0 235] 
#[0 19 222 0 11 0 17 0 215] 
#[0 19 226 0 68 0 88 0 96] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 43 93 2 47 43 93 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 43 93 2 54 43 93 2 55 4 1 2 56 43 93 2 63 43 93 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 43 93 2 97 43 93 2 98 43 93 2 99 43 93 2 100 43 93 2 101 43 93 2 102 43 93 2 103 43 93 2 104 43 93 2 105 43 93 2 106 43 93 2 107 43 93 2 108 43 93 2 109 43 93 2 110 43 93 2 111 43 93 2 112 43 93 2 113 43 93 2 114 43 93 2 115 43 93 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 43 93 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 43 93 2 159] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 43 97 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 43 101 1 217 14 29 1 219] 
#[1 43 105 0 215 11 106 0 229 43 105 2 154] 
#[1 15 101 0 229 43 109 2 132 15 109 2 135] 
#[0 43 113 0 115] 
#[1 43 117 0 215 11 106 0 229 43 117 2 154] 
#[0 43 121 0 115] 
#[1 43 125 0 215 11 106 0 229 43 125 2 154] 
#[1 11 106 0 115 43 129 0 215 43 129 2 154] 
#[0 43 133 0 115] 
#[1 15 101 0 229 43 137 2 132 15 109 2 135] 
#[0 19 230 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 43 141 0 215 11 106 0 229 43 141 2 154] 
#[1 15 101 0 229 43 145 2 132 15 109 2 135] 
#[1 43 149 0 215 11 106 0 229 43 149 2 154] 
#[1 15 101 0 229 43 153 2 132 15 109 2 135] 
#[0 43 157 0 115] 
#[1 43 161 0 215 11 106 0 229 43 161 2 154] 
#[0 19 234 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 43 165 2 132 15 109 2 135] 
#[0 19 238 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 43 169 0 215 11 106 0 229 43 169 2 154] 
#[1 15 101 0 229 43 173 2 132 15 109 2 135] 
#[0 19 242 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 43 177 2 132 15 109 2 135] 
#[0 19 246 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 19 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 19 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 43 181 1 131] 
#[1 43 185 0 6 3 137 0 215 43 185 0 236] 
#[0 20 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 43 189 0 17 43 193 0 215] 
#[1 43 197 0 6 3 137 0 215 43 197 0 236] 
#[1 43 201 0 6 3 137 0 215 43 201 0 236] 
#[0 20 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 22 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 43 205 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[1 43 209 0 17 43 213 0 215] 
#[1 43 217 0 6 3 137 0 215 43 217 0 236] 
#[0 20 26 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 30 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 17 130 0 6 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 17 130 0 215 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 43 221 1 128 37 61 1 136 11 101 1 139 11 105 1 140] 
#[0 20 34 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 38 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 43 225 0 184] 
#[0 43 229 0 88] 
#[1 0 73 0 19 40 45 0 30 43 233 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[1 0 73 0 19 40 45 0 30 43 237 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 43 241 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[1 0 73 0 19 40 45 0 30 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 43 245 1 160 40 65 1 161 40 65 1 162 40 65 1 163 40 65 1 164] 
#[0 20 42 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 43 249 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 43 253 1 199] 
#[0 44 1 0 215] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 44 5 1 202 44 5 2 79 44 5 2 80 44 5 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 44 9 1 201] 
#[1 2 65 0 24 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 44 13 1 198] 
#[0 20 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 44 17 1 201] 
#[1 6 234 0 44 6 234 0 48 6 234 0 69 6 234 0 75 6 234 0 76 6 234 0 85 6 234 0 103 6 234 0 113 6 234 0 126 44 21 0 138 6 234 0 143 6 234 0 170 6 234 0 175 6 234 0 176 6 234 0 182 6 234 0 194 6 234 0 195 6 234 0 196 6 234 0 229] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 44 25 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 44 25 1 92] 
#[0 44 29 0 215] 
#[1 44 33 0 17 44 37 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 44 41 1 131] 
#[0 20 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 45 0 17 44 49 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 44 53 1 131] 
#[1 44 57 0 6 3 137 0 215 44 57 0 236] 
#[0 20 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 44 61 0 17 44 65 0 215] 
#[1 44 69 0 6 3 137 0 215 44 69 0 236] 
#[1 44 73 0 17 44 77 0 215] 
#[0 44 81 0 184] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 44 85 1 136 11 101 1 139 11 105 1 140] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 44 89 1 136 11 101 1 139 11 105 1 140] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 44 93 1 136 11 101 1 139 11 105 1 140] 
#[1 2 29 0 5 44 97 0 235] 
#[1 2 29 0 5 44 101 0 235] 
#[1 2 29 0 5 44 105 0 235] 
#[0 44 109 0 93] 
#[0 20 70 0 19 0 30 0 88 0 164 0 167] 
#[0 44 113 0 93] 
#[1 0 73 0 19 40 45 0 30 44 117 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[1 0 73 0 19 40 45 0 30 44 121 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[0 20 74 0 17 0 108 0 215] 
#[0 20 78 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 82 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 86 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 90 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 44 125 0 172] 
#[0 44 129 0 88] 
#[1 44 133 0 17 44 137 0 215] 
#[1 44 141 0 17 44 145 0 215] 
#[0 44 149 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 44 153 1 217 14 29 1 219] 
#[1 44 157 0 17 44 161 0 215] 
#[1 44 165 0 17 44 169 0 215] 
#[0 44 173 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 44 177 1 217 14 29 1 219] 
#[0 44 181 0 101] 
#[0 44 185 0 172] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 44 189 1 217 14 29 1 219] 
#[0 44 193 0 215] 
#[0 20 94 0 99 0 108 0 204 0 215] 
#[0 20 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 44 197 0 215] 
#[0 20 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 44 201 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 44 205 1 202 44 205 2 79 44 205 2 80 44 205 2 85] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 44 209 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 44 213 1 202 44 213 2 79 44 213 2 80 44 213 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 44 217 1 201] 
#[1 2 65 0 24 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 44 221 1 198] 
#[0 20 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 0 73 0 19 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 44 225 0 253 0 89 0 254 0 93 0 255 44 229 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 44 229 1 92] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 44 233 1 217 14 29 1 219] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 44 237 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 44 237 1 92] 
#[0 44 241 0 215] 
#[0 44 245 0 88] 
#[0 20 110 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 20 114 0 3 20 114 0 4 20 114 0 5 20 114 0 6 20 114 0 7 20 114 0 8 20 114 0 9 20 114 0 10 6 223 0 11 20 114 0 12 20 114 0 13 20 114 0 15 20 114 0 16 20 114 0 17 20 114 0 19 20 114 0 20 20 114 0 21 20 114 0 22 20 114 0 23 20 114 0 24 20 114 0 25 20 114 0 26 20 114 0 27 20 114 0 28 20 114 0 32 20 114 0 34 20 114 0 35 20 114 0 38 20 114 0 45 20 114 0 80 20 114 0 83 20 114 0 87 20 114 0 90 20 114 0 99 20 114 0 105 20 114 0 108 20 114 0 110 20 114 0 115 20 114 0 116 20 114 0 118 20 114 0 121 20 114 0 123 20 114 0 125 20 114 0 130 20 114 0 146 20 114 0 150 20 114 0 151 20 114 0 152 20 114 0 171 20 114 0 177 20 114 0 179 20 114 0 186 20 114 0 188 20 114 0 190 20 114 0 201 20 114 0 207 20 114 0 209 20 114 0 210 20 114 0 211 20 114 0 212 20 114 0 214 20 114 0 215 44 249 0 234 44 253 2 9] 
#[0 45 1 0 139] 
#[0 20 118 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 122 0 87 0 88 0 226] 
#[0 20 126 0 87 0 88 0 226] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 45 5 2 47 45 5 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 45 5 2 54 45 5 2 55 4 1 2 56 45 5 2 63 45 5 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 45 5 2 97 45 5 2 98 45 5 2 99 45 5 2 100 45 5 2 101 45 5 2 102 45 5 2 103 45 5 2 104 45 5 2 105 45 5 2 106 45 5 2 107 45 5 2 108 45 5 2 109 45 5 2 110 45 5 2 111 45 5 2 112 45 5 2 113 45 5 2 114 45 5 2 115 45 5 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 45 5 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 45 5 2 159] 
#[1 6 53 0 3 20 130 0 4 6 227 0 5 20 130 0 6 6 57 0 7 20 130 0 8 6 61 0 9 20 130 0 10 20 130 0 11 6 65 0 12 20 130 0 13 6 69 0 15 20 130 0 16 20 130 0 17 6 73 0 19 6 77 0 20 20 130 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 20 130 0 28 20 130 0 32 6 105 0 34 6 109 0 35 20 130 0 38 20 130 0 45 20 130 0 80 20 130 0 83 20 130 0 87 20 130 0 90 20 130 0 99 20 130 0 105 20 130 0 108 20 130 0 110 20 130 0 115 6 113 0 116 6 117 0 118 20 130 0 121 20 130 0 123 6 121 0 125 6 125 0 130 20 130 0 146 6 129 0 150 6 133 0 151 20 130 0 152 20 130 0 171 20 130 0 177 20 130 0 179 20 130 0 186 20 130 0 188 20 130 0 190 20 130 0 201 6 137 0 207 6 141 0 209 20 130 0 210 6 145 0 211 20 130 0 212 20 130 0 214 20 130 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 20 134 0 11 6 65 0 12 6 69 0 15 20 134 0 17 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 20 134 0 215 6 149 0 235] 
#[1 6 53 0 3 2 29 0 5 6 57 0 7 6 61 0 9 6 65 0 12 6 69 0 15 6 73 0 19 6 77 0 20 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 6 105 0 34 6 109 0 35 6 113 0 116 6 117 0 118 6 121 0 125 6 125 0 130 6 129 0 150 6 133 0 151 6 137 0 207 6 141 0 209 6 145 0 211 45 9 0 215 6 149 0 235] 
#[0 20 138 0 68 0 88 0 96] 
#[0 20 142 0 68 0 88 0 96] 
#[1 15 101 0 229 45 13 2 132 15 109 2 135] 
#[0 20 146 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 45 17 0 215 11 106 0 229 45 17 2 154] 
#[1 15 101 0 229 45 21 2 132 15 109 2 135] 
#[1 45 25 0 215 11 106 0 229 45 25 2 154] 
#[1 15 101 0 229 45 29 2 132 15 109 2 135] 
#[0 45 33 0 115] 
#[1 45 37 0 215 11 106 0 229 45 37 2 154] 
#[0 20 150 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 45 41 2 132 15 109 2 135] 
#[0 20 154 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 45 45 2 132 15 109 2 135] 
#[0 20 158 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 45 49 0 215 11 106 0 229 45 49 2 154] 
#[1 15 101 0 229 45 53 2 132 15 109 2 135] 
#[0 20 162 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 45 57 2 132 15 109 2 135] 
#[0 20 166 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 20 170 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 45 61 0 17 45 65 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 45 69 1 131] 
#[0 20 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 178 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 73 0 17 45 77 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 45 81 1 131] 
#[1 45 85 0 6 3 137 0 215 45 85 0 236] 
#[0 20 182 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 186 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 89 0 17 45 93 0 215] 
#[1 45 97 0 6 3 137 0 215 45 97 0 236] 
#[1 45 101 0 17 45 105 0 215] 
#[0 45 109 0 184] 
#[0 45 113 0 93] 
#[0 45 117 0 93] 
#[1 0 73 0 19 40 45 0 30 45 121 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[1 0 73 0 19 40 45 0 30 45 125 0 88 40 49 0 164 40 53 0 167 40 57 0 253 0 89 0 254 0 93 0 255 42 157 1 161 42 157 1 162 42 157 1 163 42 157 1 164] 
#[0 20 190 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 45 129 0 215] 
#[0 20 194 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 45 133 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 45 137 1 202 45 137 2 79 45 137 2 80 45 137 2 85] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 45 141 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 45 145 1 202 45 145 2 79 45 145 2 80 45 145 2 85] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 15 250 0 99 0 245 0 103 15 250 0 108 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 15 250 0 204 15 250 0 215 1 37 0 229 34 217 1 43 34 217 1 44 34 217 1 45 34 217 1 52 34 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 34 221 1 200 45 149 1 201] 
#[1 2 65 0 24 12 90 0 108 12 90 0 215 26 181 0 239 26 185 1 197 45 153 1 198] 
#[0 20 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 157 0 17 45 161 0 215] 
#[0 20 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 165 0 17 45 169 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 45 173 1 131] 
#[0 20 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 177 0 17 45 181 0 215] 
#[0 20 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 20 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 45 185 0 17 45 189 0 215] 
#[1 45 193 0 6 3 137 0 215 45 193 0 236] 
#[1 45 197 0 6 3 137 0 215 45 197 0 236] 
#[1 45 201 0 6 3 137 0 215 45 201 0 236] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 45 205 1 136 11 101 1 139 11 105 1 140] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 45 209 1 136 11 101 1 139 11 105 1 140] 
#[1 0 73 0 19 4 162 0 46 4 162 0 47 4 162 0 149 4 162 0 157 4 162 0 229 11 93 0 253 0 89 0 254 0 93 0 255 45 213 1 136 11 101 1 139 11 105 1 140] 
#[1 45 217 0 17 45 221 0 215] 
#[1 45 225 0 17 45 229 0 215] 
#[0 45 233 0 93] 
#[0 45 237 0 93] 
#[1 45 241 0 17 45 245 0 215] 
#[0 45 249 0 172] 
#[0 20 234 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 238 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 242 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 246 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 45 253 0 172] 
#[0 46 1 0 88] 
#[0 20 250 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 20 254 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 2 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 6 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 46 5 0 172] 
#[0 46 9 0 88] 
#[1 46 13 0 17 46 17 0 215] 
#[1 46 21 0 17 46 25 0 215] 
#[0 46 29 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 46 33 1 217 14 29 1 219] 
#[0 21 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 37 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 46 41 1 199] 
#[0 46 45 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 46 49 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 46 53 1 202 46 53 2 79 46 53 2 80 46 53 2 85] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 46 57 1 199] 
#[1 1 65 0 44 1 65 0 48 1 65 0 69 1 65 0 75 1 65 0 76 1 65 0 85 0 245 0 103 1 65 0 113 1 65 0 126 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 65 0 194 1 65 0 195 1 65 0 196 1 37 0 229 46 61 1 42 1 105 1 43 1 105 1 44 1 105 1 45 1 105 1 52 1 105 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 46 61 1 92] 
#[0 46 65 0 215] 
#[0 46 69 0 88] 
#[0 46 73 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 46 77 1 217 14 29 1 219] 
#[0 46 81 0 147] 
#[1 2 241 0 1 2 29 0 5 2 249 0 9 2 253 0 12 3 1 0 14 3 5 0 31 3 9 0 32 1 186 0 40 3 13 0 42 1 65 0 44 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 3 85 0 82 1 65 0 85 3 89 0 99 1 186 0 100 3 93 0 102 3 97 0 103 3 101 0 107 1 65 0 113 1 186 0 120 1 65 0 126 3 105 0 128 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 1 65 0 170 1 65 0 175 1 65 0 176 1 65 0 182 1 186 0 184 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 3 133 0 213 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 46 85 2 47 46 85 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 46 85 2 54 46 85 2 55 4 1 2 56 46 85 2 63 46 85 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 46 85 2 97 46 85 2 98 46 85 2 99 46 85 2 100 46 85 2 101 46 85 2 102 46 85 2 103 46 85 2 104 46 85 2 105 46 85 2 106 46 85 2 107 46 85 2 108 46 85 2 109 46 85 2 110 46 85 2 111 46 85 2 112 46 85 2 113 46 85 2 114 46 85 2 115 46 85 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 46 85 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 46 85 2 159] 
#[0 21 14 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 2 241 0 1 21 18 0 3 21 18 0 4 6 231 0 5 21 18 0 6 21 18 0 7 21 18 0 8 2 249 0 9 21 18 0 10 21 18 0 11 2 253 0 12 21 18 0 13 3 1 0 14 21 18 0 15 21 18 0 16 21 18 0 17 21 18 0 19 21 18 0 20 21 18 0 21 21 18 0 22 21 18 0 23 21 18 0 24 21 18 0 25 21 18 0 26 21 18 0 27 21 18 0 28 3 5 0 31 6 235 0 32 21 18 0 34 21 18 0 35 21 18 0 38 1 186 0 40 3 13 0 42 1 65 0 44 21 18 0 45 1 65 0 48 4 65 0 49 4 65 0 50 4 65 0 51 4 65 0 52 4 65 0 53 4 65 0 54 4 65 0 55 4 65 0 56 4 65 0 57 4 65 0 58 4 65 0 59 4 65 0 60 4 65 0 61 3 69 0 62 4 65 0 63 4 65 0 64 4 65 0 65 1 65 0 69 1 65 0 75 1 65 0 76 21 18 0 80 3 85 0 82 21 18 0 83 1 65 0 85 21 18 0 87 21 18 0 90 6 239 0 99 1 186 0 100 3 93 0 102 3 97 0 103 21 18 0 105 3 101 0 107 21 18 0 108 21 18 0 110 1 65 0 113 21 18 0 115 21 18 0 116 21 18 0 118 1 186 0 120 21 18 0 121 21 18 0 123 21 18 0 125 1 65 0 126 3 105 0 128 21 18 0 130 3 109 0 134 3 113 0 135 3 117 0 138 3 121 0 140 1 5 0 143 21 18 0 146 21 18 0 150 21 18 0 151 21 18 0 152 1 65 0 170 21 18 0 171 1 65 0 175 1 65 0 176 21 18 0 177 21 18 0 179 1 65 0 182 1 186 0 184 21 18 0 186 21 18 0 188 21 18 0 190 3 125 0 192 3 129 0 193 1 65 0 194 1 65 0 195 1 65 0 196 21 18 0 201 21 18 0 207 21 18 0 209 21 18 0 210 21 18 0 211 21 18 0 212 3 133 0 213 21 18 0 214 21 18 0 215 3 141 0 219 3 145 0 220 3 149 0 222 3 153 0 223 3 157 0 224 3 161 0 225 3 165 0 227 3 173 0 229 3 177 0 235 3 185 0 237 3 233 0 241 3 217 1 43 3 217 1 44 3 217 1 45 3 217 1 52 3 217 1 55 1 65 1 61 1 65 1 62 1 65 1 63 1 65 1 64 46 89 2 8 40 253 2 47 40 253 2 49 3 233 2 50 3 237 2 51 3 241 2 52 3 245 2 53 40 253 2 54 40 253 2 55 4 1 2 56 40 253 2 63 40 253 2 64 4 13 2 65 4 17 2 66 4 21 2 67 4 25 2 68 4 29 2 69 4 33 2 77 4 33 2 78 4 33 2 86 4 33 2 91 4 33 2 92 4 33 2 93 4 33 2 94 4 61 2 95 4 65 2 96 40 253 2 97 40 253 2 98 40 253 2 99 40 253 2 100 40 253 2 101 40 253 2 102 40 253 2 103 40 253 2 104 40 253 2 105 40 253 2 106 40 253 2 107 40 253 2 108 40 253 2 109 40 253 2 110 40 253 2 111 40 253 2 112 40 253 2 113 40 253 2 114 40 253 2 115 40 253 2 116 4 149 2 117 4 153 2 118 4 153 2 119 4 153 2 120 40 253 2 122 4 169 2 125 4 173 2 136 4 177 2 155 4 181 2 158 40 253 2 159] 
#[1 6 53 0 3 21 22 0 4 6 243 0 5 21 22 0 6 6 57 0 7 21 22 0 8 6 61 0 9 21 22 0 10 21 22 0 11 6 65 0 12 21 22 0 13 6 69 0 15 21 22 0 16 21 22 0 17 6 73 0 19 6 77 0 20 21 22 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 21 22 0 28 21 22 0 32 6 105 0 34 6 109 0 35 21 22 0 38 21 22 0 45 21 22 0 80 21 22 0 83 21 22 0 87 21 22 0 90 21 22 0 99 21 22 0 105 21 22 0 108 21 22 0 110 21 22 0 115 6 113 0 116 6 117 0 118 21 22 0 121 21 22 0 123 6 121 0 125 6 125 0 130 21 22 0 146 6 129 0 150 6 133 0 151 21 22 0 152 21 22 0 171 21 22 0 177 21 22 0 179 21 22 0 186 21 22 0 188 21 22 0 190 21 22 0 201 6 137 0 207 6 141 0 209 21 22 0 210 6 145 0 211 21 22 0 212 21 22 0 214 21 22 0 215 6 149 0 235] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 68 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 96 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 46 93 1 217 14 29 1 219] 
#[0 21 26 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 46 97 2 132 15 109 2 135] 
#[0 21 30 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 46 101 2 132 15 109 2 135] 
#[0 21 34 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 46 105 0 215 11 106 0 229 46 105 2 154] 
#[1 15 101 0 229 46 109 2 132 15 109 2 135] 
#[0 21 38 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 42 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 46 113 2 132 15 109 2 135] 
#[0 21 46 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 50 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 117 0 17 46 121 0 215] 
#[0 21 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 66 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 125 0 17 46 129 0 215] 
#[1 15 210 0 17 34 69 0 37 15 210 0 215 34 77 1 130 46 133 1 131] 
#[0 21 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 137 0 17 46 141 0 215] 
#[0 21 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 145 0 17 46 149 0 215] 
#[1 46 153 0 17 46 157 0 215] 
#[1 46 161 0 17 46 165 0 215] 
#[0 46 169 0 93] 
#[0 46 173 0 93] 
#[0 21 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 177 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 46 181 1 199] 
#[0 46 185 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 46 189 1 199] 
#[1 7 253 0 99 17 178 0 108 5 209 0 204 17 178 0 215 46 193 1 202 46 193 2 79 46 193 2 80 46 193 2 85] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 46 197 1 199] 
#[0 21 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 201 0 17 46 205 0 215] 
#[0 21 106 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 110 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 114 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 118 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 46 209 0 215] 
#[0 46 213 0 215] 
#[0 46 217 0 215] 
#[1 46 221 0 6 3 137 0 215 46 221 0 236] 
#[1 46 225 0 6 3 137 0 215 46 225 0 236] 
#[1 46 229 0 6 3 137 0 215 46 229 0 236] 
#[0 21 122 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 126 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 46 233 0 17 46 237 0 215] 
#[1 46 241 0 17 46 245 0 215] 
#[0 21 138 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 142 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 46 249 0 17 46 253 0 215] 
#[1 47 1 0 17 47 5 0 215] 
#[0 47 9 0 172] 
#[1 47 13 0 17 47 17 0 215] 
#[0 47 21 0 172] 
#[0 21 146 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 150 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 154 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 21 158 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 47 25 0 172] 
#[0 47 29 0 88] 
#[0 21 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 33 0 215] 
#[0 21 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 37 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 47 41 1 199] 
#[0 47 45 0 215] 
#[0 47 49 0 215] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 53 1 217 14 29 1 219] 
#[0 47 57 0 147] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 61 1 217 14 29 1 219] 
#[0 47 65 0 88] 
#[1 47 69 0 17 47 73 0 215] 
#[1 6 53 0 3 21 170 0 4 6 247 0 5 21 170 0 6 6 57 0 7 21 170 0 8 6 61 0 9 21 170 0 10 21 170 0 11 6 65 0 12 21 170 0 13 6 69 0 15 21 170 0 16 21 170 0 17 6 73 0 19 6 77 0 20 21 170 0 21 6 81 0 22 6 85 0 23 6 89 0 24 6 93 0 25 6 97 0 26 6 101 0 27 21 170 0 28 21 170 0 32 6 105 0 34 6 109 0 35 21 170 0 38 21 170 0 45 21 170 0 80 21 170 0 83 21 170 0 87 21 170 0 90 21 170 0 99 21 170 0 105 21 170 0 108 21 170 0 110 21 170 0 115 6 113 0 116 6 117 0 118 21 170 0 121 21 170 0 123 6 121 0 125 6 125 0 130 21 170 0 146 6 129 0 150 6 133 0 151 21 170 0 152 21 170 0 171 21 170 0 177 21 170 0 179 21 170 0 186 21 170 0 188 21 170 0 190 21 170 0 201 6 137 0 207 6 141 0 209 21 170 0 210 6 145 0 211 21 170 0 212 21 170 0 214 21 170 0 215 6 149 0 235] 
#[0 21 174 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 178 0 68 0 88 0 96] 
#[0 21 182 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 186 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[1 15 101 0 229 47 77 2 132 15 109 2 135] 
#[0 21 190 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 194 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 21 198 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 210 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 47 81 0 17 47 85 0 215] 
#[0 21 214 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 218 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 222 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 226 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 230 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 234 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 238 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 21 242 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 47 89 0 17 47 93 0 215] 
#[1 47 97 0 17 47 101 0 215] 
#[0 21 246 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 105 0 215] 
#[0 21 250 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 109 0 215] 
#[1 21 225 0 108 14 30 0 215 31 17 1 101 47 113 1 199] 
#[0 47 117 0 215] 
#[0 21 254 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 2 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 121 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 125 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 129 1 217 14 29 1 219] 
#[0 47 133 0 215] 
#[0 47 137 0 215] 
#[0 47 141 0 215] 
#[0 22 6 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 10 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 14 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 18 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 22 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 26 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 30 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 34 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 47 145 0 17 47 149 0 215] 
#[0 22 38 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 42 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 47 153 0 17 47 157 0 215] 
#[1 47 161 0 17 47 165 0 215] 
#[0 47 169 0 172] 
#[0 22 46 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 50 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 173 0 215] 
#[0 22 54 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 177 1 217 14 29 1 219] 
#[0 47 181 0 88] 
#[1 47 185 0 17 47 189 0 215] 
#[0 47 193 0 88] 
#[0 47 197 0 147] 
#[0 22 58 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 62 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 66 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 19 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 32 0 34 0 35 0 38 0 45 0 80 0 83 0 87 0 90 0 99 0 105 0 108 0 110 0 115 0 116 0 118 0 121 0 123 0 125 0 130 0 146 0 150 0 151 0 152 0 171 0 177 0 179 0 186 0 188 0 190 0 201 0 207 0 209 0 210 0 211 0 212 0 214 0 215] 
#[0 22 70 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 74 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 78 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 82 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 86 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 90 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 94 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 98 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 201 0 215] 
#[0 22 102 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 205 0 88] 
#[0 47 209 0 88] 
#[0 47 213 0 88] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 217 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 221 1 217 14 29 1 219] 
#[1 5 190 0 1 5 190 0 5 5 190 0 9 5 190 0 12 5 190 0 14 5 190 0 17 5 190 0 30 5 190 0 31 5 190 0 32 5 190 0 40 5 190 0 42 5 190 0 44 5 190 0 48 5 190 0 49 5 190 0 50 5 190 0 51 5 190 0 52 5 190 0 53 5 190 0 54 5 190 0 55 5 190 0 56 5 190 0 57 5 190 0 58 5 190 0 59 5 190 0 60 5 190 0 61 5 190 0 62 5 190 0 63 5 190 0 64 5 190 0 65 5 190 0 66 5 190 0 69 5 190 0 72 5 190 0 73 5 190 0 75 5 190 0 76 5 190 0 81 5 190 0 82 5 190 0 84 5 190 0 85 5 190 0 88 5 190 0 91 5 190 0 92 5 190 0 94 5 190 0 97 5 190 0 99 5 190 0 100 5 190 0 102 5 190 0 103 5 190 0 104 5 190 0 107 5 190 0 113 5 190 0 120 5 190 0 126 5 190 0 128 5 190 0 129 5 190 0 134 5 190 0 135 5 190 0 138 5 190 0 140 5 190 0 143 5 190 0 146 5 190 0 164 5 190 0 165 5 190 0 167 5 190 0 168 5 190 0 169 5 190 0 170 5 190 0 171 5 190 0 175 5 190 0 176 5 190 0 178 5 190 0 180 5 190 0 182 5 190 0 184 5 190 0 185 5 190 0 189 5 190 0 191 5 190 0 192 5 190 0 193 5 190 0 194 5 190 0 195 5 190 0 196 5 190 0 199 5 190 0 202 5 190 0 204 5 190 0 208 5 190 0 213 5 190 0 215 5 190 0 219 5 190 0 220 5 190 0 221 5 190 0 222 5 190 0 223 5 190 0 224 5 190 0 225 5 190 0 227 5 190 0 229 47 225 1 217 14 29 1 219] 
#[0 22 106 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 110 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 114 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 118 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 122 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 126 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[1 47 229 0 17 47 233 0 215] 
#[0 22 130 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 237 0 88] 
#[0 47 241 0 147] 
#[0 22 134 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 138 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 47 245 0 147] 
#[1 47 249 0 17 47 253 0 215] 
#[0 22 142 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 48 1 0 30] 
#[0 48 5 0 164] 
#[0 48 9 0 167] 
#[0 48 13 0 88] 
#[0 48 17 0 88] 
#[0 48 21 0 88] 
#[0 22 146 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 22 150 0 19 0 88 0 98 0 101 0 160 0 162 0 163 0 172] 
#[0 48 25 0 147] 
#[1 48 29 0 17 48 33 0 215] 
#[1 48 37 0 17 48 41 0 215] 
#[0 22 154 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 158 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[1 48 45 0 17 48 49 0 215] 
#[1 48 53 0 17 48 57 0 215] 
#[1 48 61 0 17 48 65 0 215] 
#[0 48 69 0 30] 
#[0 48 73 0 164] 
#[0 48 77 0 167] 
#[1 48 81 0 17 48 85 0 215] 
#[0 22 162 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 166 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 170 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 174 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 178 0 19 0 30 0 88 0 164 0 167] 
#[0 22 182 0 19 0 30 0 88 0 164 0 167] 
#[0 22 186 0 19 0 30 0 88 0 164 0 167] 
#[0 22 190 0 19 0 30 0 88 0 164 0 167] 
#[0 22 194 0 19 0 30 0 88 0 164 0 167] 
#[0 22 198 0 19 0 30 0 88 0 164 0 167] 
#[1 48 89 0 17 48 93 0 215] 
#[1 48 97 0 17 48 101 0 215] 
#[1 48 105 0 17 48 109 0 215] 
#[0 22 202 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 206 0 19 0 40 0 70 0 72 0 74 0 77 0 78 0 79 0 81 0 88 0 89 0 93 0 98 0 100 0 114 0 120 0 132 0 133 0 137 0 141 0 142 0 147 0 154 0 155 0 156 0 158 0 160 0 161 0 162 0 163 0 166 0 173 0 174 0 183 0 184 0 203 0 205 0 206] 
#[0 22 210 0 19 0 30 0 88 0 164 0 167] 
#[0 22 214 0 19 0 30 0 88 0 164 0 167] 
#[0 22 218 0 19 0 30 0 88 0 164 0 167] 
#[0 22 222 0 19 0 30 0 88 0 164 0 167] 
#[0 22 226 0 19 0 30 0 88 0 164 0 167] 
#[0 22 230 0 19 0 30 0 88 0 164 0 167]
	).
]

{ #category : #accessing }
VBNetParser >> actionsForCurrentToken [
	| actions |
	actions := super actionsForCurrentToken.
	(actions isEmpty
		and: [ currentToken ids includes: scanner LineTerminatorId ])
		ifTrue: [ currentToken := nil.
			self getNextToken.
			^ self actionsForCurrentToken ].
	((currentToken ids includes: scanner IdentifierOrKeywordId)
		and:
			[ (self class keywords includes: currentToken source asUppercase) not ])
		ifTrue: [ self addActionsFor: scanner IdentifierId to: actions ].
	(actions isEmpty and: [ self isEOFToken ])
		ifTrue: [ self addActionsFor: scanner LineTerminatorId to: actions ].
	^ actions
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration1: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result addHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result addHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration2: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result addHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result addHandlerTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration3: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result addHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result addHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerDeclaration4: nodes [
	| result |
	result := VBNetAddHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result addHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result addHandlerTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddHandlerStatement1: nodes [
	| result |
	result := VBNetAddHandlerStatementNode new.
	result addHandlerToken: (nodes at: 1).
	result event: (nodes at: 2).
	result comma: (nodes at: 3).
	result handler: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAddressOfExpression1: nodes [
	| result |
	result := VBNetAddressOfExpressionNode new.
	result addressOfToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator2: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator3: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator4: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 3) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 3) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 3) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 3) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 3) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 3) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator5: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator6: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator7: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAggregateQueryOperator8: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 4) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 4) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 4) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 4) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 4) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 4) at: 26) to: (result at: 26).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAliasImportsClause1: nodes [
	| result |
	result := VBNetAliasImportsClauseNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAnonymousObjectCreationExpression1: nodes [
	| result |
	result := VBNetAnonymousCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArgumentList3: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayCreationExpression1: nodes [
	| result |
	result := VBNetArrayCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result arrayTypeModifiers.
	result addToken: ((nodes at: 3) at: 2) to: result leftParens.
	result addNodes: ((nodes at: 3) at: 3) to: result bounds.
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	result addToken: ((nodes at: 3) at: 5) to: result rightParens.
	result initializer: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayNameModifier1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayNameModifier2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 2 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArraySizeInitializationModifier1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArraySizeInitializationModifier2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeModifier1: nodes [
	| result |
	result := VBNetArrayTypeModifierNode new.
	result leftParen: (nodes at: 1).
	result rightParen: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeModifier2: nodes [
	| result |
	result := VBNetArrayTypeModifierNode new.
	result leftParen: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result commas.
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForArrayTypeName1: nodes [
	| result |
	result := VBNetArrayTypeNameNode new.
	result type: (nodes at: 1).
	result addNodes: (nodes at: 2) to: result arrayTypeModifiers.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute2: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute3: nodes [
	| result |
	result := VBNetAttributeNode new.
	result type: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute4: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute5: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttribute6: nodes [
	| result |
	result := VBNetAttributeNode new.
	result modifier: (nodes at: 1).
	result colonToken: (nodes at: 2).
	result type: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result commas.
	result addNodes: ((nodes at: 5) at: 2) to: result arguments.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeArguments2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeArguments3: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock1: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock3: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock4: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock6: nodes [
	| result |
	result := VBNetAttributeBlockNode new.
	result ltToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result _attributes.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result gt: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeBlock__attributeBlock__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributeList1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributePositionalArgumentList2: nodes [
	| result |
	result := nodes at: 2.
	self addFirst: (nodes at: 1) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributes1: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributesNamespaceDeclaration1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAttributesNamespaceDeclaration2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration10: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result equals: ((nodes at: 10) at: 1).
	result value: ((nodes at: 10) at: 2).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration11: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result equals: ((nodes at: 8) at: 1).
	result value: ((nodes at: 8) at: 2).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration12: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result equals: ((nodes at: 11) at: 1).
	result value: ((nodes at: 11) at: 2).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration13: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result newToken: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result addToken: ((nodes at: 6) at: 2) to: result leftParens.
	result addToken: ((nodes at: 6) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: ((nodes at: 6) at: 5) to: result arguments.
	result addTokens: ((nodes at: 6) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 6) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 6) at: 8) to: result namedArguments.
	result initializer: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration14: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result newToken: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result addToken: ((nodes at: 7) at: 2) to: result leftParens.
	result addToken: ((nodes at: 7) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: ((nodes at: 7) at: 5) to: result arguments.
	result addTokens: ((nodes at: 7) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 7) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 7) at: 8) to: result namedArguments.
	result initializer: (nodes at: 8).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration15: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result newToken: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result addToken: ((nodes at: 8) at: 2) to: result leftParens.
	result addToken: ((nodes at: 8) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: ((nodes at: 8) at: 5) to: result arguments.
	result addTokens: ((nodes at: 8) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 8) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 8) at: 8) to: result namedArguments.
	result initializer: (nodes at: 9).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration16: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 9) at: 4) to: result commas.
	result addNodes: ((nodes at: 9) at: 5) to: result arguments.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration17: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 9) at: 4) to: result commas.
	result addNodes: ((nodes at: 9) at: 5) to: result arguments.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration18: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 10) at: 4) to: result commas.
	result addNodes: ((nodes at: 10) at: 5) to: result arguments.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration19: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result newToken: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result addToken: ((nodes at: 7) at: 2) to: result leftParens.
	result addToken: ((nodes at: 7) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: ((nodes at: 7) at: 5) to: result arguments.
	result addTokens: ((nodes at: 7) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 7) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 7) at: 8) to: result namedArguments.
	result initializer: (nodes at: 8).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result equals: ((nodes at: 4) at: 1).
	result value: ((nodes at: 4) at: 2).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration20: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result newToken: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result addToken: ((nodes at: 8) at: 2) to: result leftParens.
	result addToken: ((nodes at: 8) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: ((nodes at: 8) at: 5) to: result arguments.
	result addTokens: ((nodes at: 8) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 8) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 8) at: 8) to: result namedArguments.
	result initializer: (nodes at: 9).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration21: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result newToken: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result addToken: ((nodes at: 9) at: 2) to: result leftParens.
	result addToken: ((nodes at: 9) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 9) at: 4) to: result commas.
	result addNodes: ((nodes at: 9) at: 5) to: result arguments.
	result addTokens: ((nodes at: 9) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 9) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 9) at: 8) to: result namedArguments.
	result initializer: (nodes at: 10).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration22: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 10) at: 4) to: result commas.
	result addNodes: ((nodes at: 10) at: 5) to: result arguments.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration23: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result newToken: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result addToken: ((nodes at: 10) at: 2) to: result leftParens.
	result addToken: ((nodes at: 10) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 10) at: 4) to: result commas.
	result addNodes: ((nodes at: 10) at: 5) to: result arguments.
	result addTokens: ((nodes at: 10) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 10) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 10) at: 8) to: result namedArguments.
	result initializer: (nodes at: 11).
	result implementsToken: ((nodes at: 12) at: 1).
	result addNodes: ((nodes at: 12) at: 2) to: result implements.
	result addTokens: ((nodes at: 12) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration24: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result newToken: (nodes at: 10).
	result type: ((nodes at: 11) at: 1).
	result addToken: ((nodes at: 11) at: 2) to: result leftParens.
	result addToken: ((nodes at: 11) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 11) at: 4) to: result commas.
	result addNodes: ((nodes at: 11) at: 5) to: result arguments.
	result addTokens: ((nodes at: 11) at: 6) to: result argumentNames.
	result addTokens: ((nodes at: 11) at: 7) to: result colonEqualses.
	result addNodes: ((nodes at: 11) at: 8) to: result namedArguments.
	result initializer: (nodes at: 12).
	result implementsToken: ((nodes at: 13) at: 1).
	result addNodes: ((nodes at: 13) at: 2) to: result implements.
	result addTokens: ((nodes at: 13) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result type: (nodes at: 6).
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result equals: ((nodes at: 6) at: 1).
	result value: ((nodes at: 6) at: 2).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	result equals: ((nodes at: 9) at: 1).
	result value: ((nodes at: 9) at: 2).
	result implementsToken: ((nodes at: 10) at: 1).
	result addNodes: ((nodes at: 10) at: 2) to: result implements.
	result addTokens: ((nodes at: 10) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result propertyToken: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result equals: ((nodes at: 10) at: 1).
	result value: ((nodes at: 10) at: 2).
	result implementsToken: ((nodes at: 11) at: 1).
	result addNodes: ((nodes at: 11) at: 2) to: result implements.
	result addTokens: ((nodes at: 11) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result equals: ((nodes at: 5) at: 1).
	result value: ((nodes at: 5) at: 2).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result type: (nodes at: 7).
	result equals: ((nodes at: 8) at: 1).
	result value: ((nodes at: 8) at: 2).
	result implementsToken: ((nodes at: 9) at: 1).
	result addNodes: ((nodes at: 9) at: 2) to: result implements.
	result addTokens: ((nodes at: 9) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAutoPropertyMemberDeclaration9: nodes [
	| result |
	result := VBNetAutoPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result propertyToken: (nodes at: 3).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result addToken: (nodes at: 6) to: result rightParens.
	result equals: ((nodes at: 7) at: 1).
	result value: ((nodes at: 7) at: 2).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForAwaitOperatorExpression1: nodes [
	| result |
	result := VBNetAwaitExpressionNode new.
	result awaitToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement1: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement2: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement3: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement4: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	result addNodes: (nodes at: 5) to: result elseIfs.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement5: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement6: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result else: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement7: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBlockIfStatement8: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	result addNodes: (nodes at: 6) to: result elseIfs.
	result else: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBound2: nodes [
	| result |
	result := VBNetBoundExpressionNode new.
	result from: (nodes at: 1).
	result toToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForBuiltInTypeName1: nodes [
	| result |
	result := VBNetBuiltInTypeNameNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause1: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause2: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause3: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 2) to: result operators.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause4: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 2) to: result operators.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause5: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 3) to: result operators.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause6: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result addToken: (nodes at: 1) to: result operators.
	result addToken: (nodes at: 3) to: result operators.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause7: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseClause8: nodes [
	| result |
	result := VBNetCaseClauseNode new.
	result value: (nodes at: 1).
	result toToken: (nodes at: 2).
	result to: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseElseStatement1: nodes [
	| result |
	result := VBNetCaseElseStatementNode new.
	result caseToken: (nodes at: 1).
	result elseToken: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseElseStatement2: nodes [
	| result |
	result := VBNetCaseElseStatementNode new.
	result caseToken: (nodes at: 1).
	result elseToken: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseStatement1: nodes [
	| result |
	result := VBNetCaseStatementNode new.
	result caseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCaseStatement2: nodes [
	| result |
	result := VBNetCaseStatementNode new.
	result caseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result clauses.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCastExpression3: nodes [
	| result |
	result := VBNetCastExpressionNode new.
	result castType: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result comma: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCastExpression4: nodes [
	| result |
	result := VBNetPrimitiveCastExpressionNode new.
	result type: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result value: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement1: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement2: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result whenToken: (nodes at: 2).
	result when: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement3: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement4: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result whenToken: (nodes at: 3).
	result when: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement5: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCatchStatement6: nodes [
	| result |
	result := VBNetCatchStatementNode new.
	result catchToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result whenToken: (nodes at: 5).
	result when: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassBase1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassBase2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration10: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration11: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration12: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration13: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration14: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration15: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration16: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration17: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration18: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration19: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration1: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration20: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration21: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration22: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration23: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration24: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result inheritsToken: ((nodes at: 6) at: 1).
	result inherits: ((nodes at: 6) at: 2).
	result addToken: ((nodes at: 6) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration25: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration26: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration27: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration28: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration29: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration2: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration30: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result classTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration31: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration32: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result classTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result inheritsToken: ((nodes at: 7) at: 1).
	result inherits: ((nodes at: 7) at: 2).
	result addToken: ((nodes at: 7) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 8) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 8) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 8) at: 3) to: result implementses.
	result addTokens: ((nodes at: 8) at: 4) to: result commas.
	result addNodes: (nodes at: 9) to: result declarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result classTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration3: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration4: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration5: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration6: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result classTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration7: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration8: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result inheritsToken: ((nodes at: 5) at: 1).
	result inherits: ((nodes at: 5) at: 2).
	result addToken: ((nodes at: 5) at: 3) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForClassDeclaration9: nodes [
	| result |
	result := VBNetClassDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result classTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result classTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionInitializer1: nodes [
	| result |
	result := VBNetCollectionInitializerNode new.
	result leftBrace: (nodes at: 1).
	result rightBrace: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionInitializer2: nodes [
	| result |
	result := VBNetCollectionInitializerNode new.
	result leftBrace: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result elements.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result rightBrace: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration3: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclaration4: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (nodes at: 1).
	result at: 4 put: (nodes at: 2).
	result at: 5 put: (nodes at: 3).
	result at: 2 put: (nodes at: 4).
	result at: 3 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCollectionRangeVariableDeclarationList1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self add: ((nodes at: 1) at: 4) to: (result at: 4).
	self add: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCompoundAssignmentStatement2: nodes [
	| result |
	result := VBNetAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConcatenationOperatorExpression1: nodes [
	| result |
	result := VBNetBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConcatenationOperatorExpression2: nodes [
	| result |
	result := VBNetBinaryExpressionNode new.
	result left: (nodes at: 1).
	result operator: (nodes at: 2).
	result right: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConditionalExpression1: nodes [
	| result |
	result := VBNetConditionalExpressionNode new.
	result ifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result booleanValue: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result trueValue: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result falseValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConditionalExpression2: nodes [
	| result |
	result := VBNetConditionalExpressionNode new.
	result ifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result booleanValue: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result trueValue: (nodes at: 5).
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantDeclarator1: nodes [
	| result |
	result := VBNetConstantDeclaratorNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantDeclarator2: nodes [
	| result |
	result := VBNetConstantDeclaratorNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration1: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result constToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result constants.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration2: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result constToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result constants.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration3: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result constToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result constants.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstantMemberDeclaration4: nodes [
	| result |
	result := VBNetConstantMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result constToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result constants.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint1: nodes [
	| result |
	result := VBNetTypeConstraintNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint2: nodes [
	| result |
	result := VBNetNewConstraintNode new.
	result newToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint3: nodes [
	| result |
	result := VBNetStructureConstraintNode new.
	result structureToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstraint4: nodes [
	| result |
	result := VBNetClassConstraintNode new.
	result classToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration10: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration11: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration12: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result subTokens.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration1: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration2: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result subTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration3: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration4: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration5: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration6: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result newToken: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration7: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration8: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForConstructorMemberDeclaration9: nodes [
	| result |
	result := VBNetConstructorMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result subTokens.
	result newToken: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForContinueStatement1: nodes [
	| result |
	result := VBNetContinueStatementNode new.
	result continueToken: (nodes at: 1).
	result continue: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration10: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration11: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration12: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration13: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration14: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	result addToken: (nodes at: 13) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration15: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addToken: (nodes at: 9) to: result statementSeparators.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration16: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result implementsToken: ((nodes at: 8) at: 1).
	result addNodes: ((nodes at: 8) at: 2) to: result implements.
	result addTokens: ((nodes at: 8) at: 3) to: result commas.
	result addToken: (nodes at: 9) to: result statementSeparators.
	result addNodes: (nodes at: 10) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result eventTokens.
	result addToken: (nodes at: 13) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration1: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration2: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration3: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration4: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result eventTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration5: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration6: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration7: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration8: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result customToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result eventTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result implementsToken: ((nodes at: 7) at: 1).
	result addNodes: ((nodes at: 7) at: 2) to: result implements.
	result addTokens: ((nodes at: 7) at: 3) to: result commas.
	result addToken: (nodes at: 8) to: result statementSeparators.
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	result addToken: (nodes at: 12) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForCustomEventMemberDeclaration9: nodes [
	| result |
	result := VBNetCustomEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result customToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result eventTokens.
	result name: (nodes at: 5).
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result eventAccessorDeclarations.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result eventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration1: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result delegateToken: (nodes at: 2).
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration2: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result delegateToken: (nodes at: 2).
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration3: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result delegateToken: (nodes at: 3).
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDelegateDeclaration4: nodes [
	| result |
	result := VBNetDelegateDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result delegateToken: (nodes at: 3).
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDictionaryAccessExpression1: nodes [
	| result |
	result := VBNetDictionaryAccessExpressionNode new.
	result bangToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDictionaryAccessExpression2: nodes [
	| result |
	result := VBNetDictionaryAccessExpressionNode new.
	result value: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoBottomLoopStatement1: nodes [
	| result |
	result := VBNetDoBottomLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	result addToken: (nodes at: 4) to: result loopTokens.
	result addToken: (nodes at: 5) to: result loopTokens.
	result expression: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoTopLoopStatement1: nodes [
	| result |
	result := VBNetDoTopLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	result addToken: (nodes at: 4) to: result loopTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForDoTopLoopStatement2: nodes [
	| result |
	result := VBNetDoTopLoopStatementNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result loopTokens.
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result addToken: (nodes at: 6) to: result loopTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement1: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement2: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement3: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseIfStatement4: nodes [
	| result |
	result := VBNetElseIfStatementNode new.
	result elseIfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseStatement1: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForElseStatement2: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result statementSeparator: (nodes at: 2).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEndStatement1: nodes [
	| result |
	result := VBNetEndStatementNode new.
	result endToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration10: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration11: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration12: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration13: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration14: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration15: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration16: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addToken: (nodes at: 7) to: result statementSeparators.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result enumTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration1: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration2: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration3: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration4: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result enumTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration5: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration6: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration7: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration8: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result enumTokens.
	result name: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result enumTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumDeclaration9: nodes [
	| result |
	result := VBNetEnumDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result enumTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration1: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration2: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result statementSeparator: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration3: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration4: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration5: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration6: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration7: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEnumMemberDeclaration8: nodes [
	| result |
	result := VBNetEnumMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEraseStatement1: nodes [
	| result |
	result := VBNetEraseStatementNode new.
	result eraseToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arraies.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause1: nodes [
	| result |
	result := VBNetGotoClauseNode new.
	result gotoToken: (nodes at: 1).
	result minus: (nodes at: 2).
	result location: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause2: nodes [
	| result |
	result := VBNetGotoClauseNode new.
	result gotoToken: (nodes at: 1).
	result location: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorClause4: nodes [
	| result |
	result := VBNetResumeClauseNode new.
	result resumeToken: (nodes at: 1).
	result nextToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForErrorStatement1: nodes [
	| result |
	result := VBNetErrorStatementNode new.
	result errorToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEventMemberSpecifier7: nodes [
	| result |
	result := VBNetEventMemberSpecifierNode new.
	result addToken: (nodes at: 1) to: result names.
	result period: (nodes at: 2).
	result addToken: (nodes at: 3) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForEventMemberSpecifier8: nodes [
	| result |
	result := VBNetEventMemberSpecifierNode new.
	result addToken: (nodes at: 1) to: result names.
	result period: (nodes at: 2).
	result addToken: (nodes at: 4) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExitStatement1: nodes [
	| result |
	result := VBNetExitStatementNode new.
	result exitToken: (nodes at: 1).
	result exit: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExpressionRangeVariableDeclaration1: nodes [
	| result |
	result := VBNetExpressionRangeVariableDeclarationNode new.
	result name: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExpressionRangeVariableDeclaration2: nodes [
	| result |
	result := VBNetExpressionRangeVariableDeclarationNode new.
	result name: (nodes at: 1).
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration10: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration11: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration12: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration13: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration14: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration15: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration16: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration17: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration18: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration19: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration1: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 6) at: 1).
	result type: ((nodes at: 6) at: 2).
	result addNodes: ((nodes at: 6) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration20: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration21: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration22: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration23: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration24: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration25: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration26: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result asToken: ((nodes at: 8) at: 1).
	result type: ((nodes at: 8) at: 2).
	result addNodes: ((nodes at: 8) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration27: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration28: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result asToken: ((nodes at: 11) at: 1).
	result type: ((nodes at: 11) at: 2).
	result addNodes: ((nodes at: 11) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration29: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration2: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result asToken: ((nodes at: 6) at: 1).
	result type: ((nodes at: 6) at: 2).
	result addNodes: ((nodes at: 6) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration30: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration31: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result asToken: ((nodes at: 12) at: 1).
	result type: ((nodes at: 12) at: 2).
	result addNodes: ((nodes at: 12) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration32: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result functionToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result asToken: ((nodes at: 12) at: 1).
	result type: ((nodes at: 12) at: 2).
	result addNodes: ((nodes at: 12) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration3: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration4: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result asToken: ((nodes at: 9) at: 1).
	result type: ((nodes at: 9) at: 2).
	result addNodes: ((nodes at: 9) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration5: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration6: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration7: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration8: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result asToken: ((nodes at: 10) at: 1).
	result type: ((nodes at: 10) at: 2).
	result addNodes: ((nodes at: 10) at: 3) to: result attributeBlocks.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalFunctionDeclaration9: nodes [
	| result |
	result := VBNetExternalFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result functionToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result asToken: ((nodes at: 7) at: 1).
	result type: ((nodes at: 7) at: 2).
	result addNodes: ((nodes at: 7) at: 3) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration10: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration11: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration12: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration13: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration14: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration15: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration16: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration17: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration18: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration19: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration1: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration20: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration21: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration22: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration23: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration24: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	result aliasToken: ((nodes at: 7) at: 1).
	result alias: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration25: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration26: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration27: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration28: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result leftParen: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result parameters.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	result rightParen: (nodes at: 10).
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration29: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration2: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration30: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration31: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration32: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result declareToken: (nodes at: 3).
	result charset: (nodes at: 4).
	result subToken: (nodes at: 5).
	result name: (nodes at: 6).
	result libToken: ((nodes at: 7) at: 1).
	result library: ((nodes at: 7) at: 2).
	result aliasToken: ((nodes at: 8) at: 1).
	result alias: ((nodes at: 8) at: 2).
	result leftParen: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result parameters.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	result rightParen: (nodes at: 11).
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration3: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration4: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result leftParen: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result parameters.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result rightParen: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration5: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration6: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration7: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration8: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	result name: (nodes at: 4).
	result libToken: ((nodes at: 5) at: 1).
	result library: ((nodes at: 5) at: 2).
	result aliasToken: ((nodes at: 6) at: 1).
	result alias: ((nodes at: 6) at: 2).
	result leftParen: (nodes at: 7).
	result addNodes: ((nodes at: 8) at: 1) to: result parameters.
	result addTokens: ((nodes at: 8) at: 2) to: result commas.
	result rightParen: (nodes at: 9).
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForExternalSubDeclaration9: nodes [
	| result |
	result := VBNetExternalSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result declareToken: (nodes at: 2).
	result charset: (nodes at: 3).
	result subToken: (nodes at: 4).
	result name: (nodes at: 5).
	result libToken: ((nodes at: 6) at: 1).
	result library: ((nodes at: 6) at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer1: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer2: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer3: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer4: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer5: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFieldInitializer6: nodes [
	| result |
	result := VBNetFieldInitializerNode new.
	result keyToken: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	result equals: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFile1: nodes [
	| result |
	result := VBNetFileNode new.
	result addNodes: ((nodes at: 2) at: 1) to: result options.
	result addNodes: ((nodes at: 2) at: 2) to: result imports.
	result addNodes: ((nodes at: 2) at: 3) to: result declarations.
	result addNodes: ((nodes at: 2) at: 4) to: result attributeBlocks.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFinallyStatement1: nodes [
	| result |
	result := VBNetFinallyStatementNode new.
	result finallyToken: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement1: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result nextToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement2: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result nextToken: (nodes at: 8).
	result addNodes: ((nodes at: 9) at: 1) to: result nexts.
	result addTokens: ((nodes at: 9) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement3: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForEachStatement4: nodes [
	| result |
	result := VBNetForEachStatementNode new.
	result forToken: (nodes at: 1).
	result eachToken: (nodes at: 2).
	result variable: (nodes at: 3).
	result inToken: (nodes at: 4).
	result expression: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result nexts.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement1: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement2: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result nextToken: (nodes at: 9).
	result addNodes: ((nodes at: 10) at: 1) to: result nexts.
	result addTokens: ((nodes at: 10) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement3: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result nextToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForForStatement4: nodes [
	| result |
	result := VBNetForStatementNode new.
	result forToken: (nodes at: 1).
	result variable: (nodes at: 2).
	result equals: (nodes at: 3).
	result from: (nodes at: 4).
	result toToken: (nodes at: 5).
	result to: (nodes at: 6).
	result stepToken: (nodes at: 7).
	result step: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result nextToken: (nodes at: 11).
	result addNodes: ((nodes at: 12) at: 1) to: result nexts.
	result addTokens: ((nodes at: 12) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromOrAggregateQueryOperator1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromOrAggregateQueryOperator2: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 20) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 1) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 1) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 1) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 1) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 1) at: 26) to: (result at: 26).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromQueryOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFromQueryOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result functionToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result functionToken: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration5: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration6: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result functionToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration7: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result functionToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionDeclaration8: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result functionToken: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature10: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature11: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature12: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature1: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature2: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: (nodes at: 3).
	result addNodes: (nodes at: 4) to: result attributeBlocks.
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature3: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature4: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result asToken: (nodes at: 5).
	result addNodes: (nodes at: 6) to: result attributeBlocks.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature5: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature6: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result asToken: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result attributeBlocks.
	result type: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature7: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature8: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result asToken: (nodes at: 4).
	result addNodes: (nodes at: 5) to: result attributeBlocks.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForFunctionSignature9: nodes [
	| result |
	result := VBNetFunctionSignatureNode new.
	result functionToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGetTypeExpression1: nodes [
	| result |
	result := VBNetGetTypeExpressionNode new.
	result getTypeToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBNetGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result goto: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator10: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator11: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator12: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 5).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 9).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 5).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator2: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator3: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator4: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator5: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 6).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator6: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator7: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator8: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 8).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupByQueryOperator9: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 4).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 7).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator10: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator11: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator12: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator13: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator14: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator15: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 7) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator16: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 15).
	self add: (nodes at: 7) to: (result at: 8).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 9) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 9) at: 4) to: (result at: 12).
	self add: (nodes at: 11) to: (result at: 13).
	self addAll: ((nodes at: 13) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 13) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator1: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 12).
	self add: (nodes at: 7) to: (result at: 13).
	self addAll: ((nodes at: 9) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 9) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 4) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator3: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator4: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator5: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator6: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator7: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 12).
	self add: (nodes at: 9) to: (result at: 13).
	self addAll: ((nodes at: 11) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 11) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator8: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 3) at: 1) to: (result at: 3).
	self add: ((nodes at: 3) at: 2) to: (result at: 4).
	self add: ((nodes at: 3) at: 3) to: (result at: 5).
	self add: ((nodes at: 3) at: 4) to: (result at: 6).
	self add: ((nodes at: 3) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self add: (nodes at: 6) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 12).
	self add: (nodes at: 10) to: (result at: 13).
	self addAll: ((nodes at: 12) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 12) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForGroupJoinQueryOperator9: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: ((nodes at: 4) at: 1) to: (result at: 3).
	self add: ((nodes at: 4) at: 2) to: (result at: 4).
	self add: ((nodes at: 4) at: 3) to: (result at: 5).
	self add: ((nodes at: 4) at: 4) to: (result at: 6).
	self add: ((nodes at: 4) at: 5) to: (result at: 7).
	self add: (nodes at: 5) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 12).
	self add: (nodes at: 8) to: (result at: 13).
	self addAll: ((nodes at: 10) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 10) at: 2) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForHandlesOrImplements1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 1 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForHandlesOrImplements2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 4 put: ((nodes at: 1) at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers2: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 1) at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 1) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers3: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForIdentifierModifiers4: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 6 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	result at: 2 put: ((nodes at: 2) at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	result at: 5 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImplementsClause_1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImportsStatement1: nodes [
	| result |
	result := VBNetImportsStatementNode new.
	result importsToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result imports.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForImportsStatement2: nodes [
	| result |
	result := VBNetImportsStatementNode new.
	result importsToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result imports.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInstanceExpression1: nodes [
	| result |
	result := VBNetInstanceExpressionNode new.
	result meToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	result at: 4 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase_1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceBase_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration10: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration11: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration12: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration13: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration14: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration15: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration16: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result interfaceTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration1: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration2: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration3: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration4: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result interfaceTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration5: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration6: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration7: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration8: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result interfaceTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceDeclaration9: nodes [
	| result |
	result := VBNetInterfaceDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result interfaceTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result inheritsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result inheritses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result interfaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceMemberSpecifier1: nodes [
	| result |
	result := VBNetInterfaceMemberSpecifierNode new.
	result type: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceMemberSpecifier2: nodes [
	| result |
	result := VBNetInterfaceMemberSpecifierNode new.
	result type: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInterfaceSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationExpression1: nodes [
	| result |
	result := VBNetInvocationExpressionNode new.
	result receiver: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationExpression2: nodes [
	| result |
	result := VBNetInvocationExpressionNode new.
	result receiver: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 1) to: result commas.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 3) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 3) at: 5) to: result namedArguments.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationStatement1: nodes [
	| result |
	result := VBNetInvocationStatementNode new.
	result expression: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForInvocationStatement2: nodes [
	| result |
	result := VBNetInvocationStatementNode new.
	result callToken: (nodes at: 1).
	result expression: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinCondition2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinConditionList1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self add: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinOrGroupJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator10: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator11: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator12: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator13: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator14: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator15: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 6) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator16: nodes [
	| result |
	result := nodes at: 4.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 3) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 3) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 3) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 3) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 6) to: (result at: 7).
	self addAll: ((nodes at: 8) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 8) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 8) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 8) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator1: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 3) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator2: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 3) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator3: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator4: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 3).
	self add: ((nodes at: 2) at: 3) to: (result at: 4).
	self add: ((nodes at: 2) at: 4) to: (result at: 5).
	self add: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator5: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator6: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator7: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator8: nodes [
	| result |
	result := nodes at: 3.
	self addFirst: (nodes at: 1) to: (result at: 1).
	self addFirst: ((nodes at: 2) at: 1) to: (result at: 2).
	self addFirst: ((nodes at: 2) at: 2) to: (result at: 3).
	self addFirst: ((nodes at: 2) at: 3) to: (result at: 4).
	self addFirst: ((nodes at: 2) at: 4) to: (result at: 5).
	self addFirst: ((nodes at: 2) at: 5) to: (result at: 6).
	self add: (nodes at: 5) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForJoinQueryOperator9: nodes [
	| result |
	result := Array new: 15.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: ((nodes at: 3) at: 1) to: (result at: 2).
	self add: ((nodes at: 3) at: 2) to: (result at: 3).
	self add: ((nodes at: 3) at: 3) to: (result at: 4).
	self add: ((nodes at: 3) at: 4) to: (result at: 5).
	self add: ((nodes at: 3) at: 5) to: (result at: 6).
	self add: (nodes at: 4) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLabelDeclarationStatement1: nodes [
	| result |
	result := VBNetLabelDeclarationStatementNode new.
	result label: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLetQueryOperator1: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLetQueryOperator2: nodes [
	| result |
	result := Array new: 3.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineElseStatement1: nodes [
	| result |
	result := VBNetElseStatementNode new.
	result elseToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineIfThenStatement1: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLineIfThenStatement2: nodes [
	| result |
	result := VBNetIfStatementNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result expression: (nodes at: 2).
	result thenToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result statements.
	result else: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral1: nodes [
	| result |
	result := VBNetBooleanLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral2: nodes [
	| result |
	result := VBNetIntegerLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral3: nodes [
	| result |
	result := VBNetFloatingPointLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral4: nodes [
	| result |
	result := VBNetStringLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral5: nodes [
	| result |
	result := VBNetCharacterLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral6: nodes [
	| result |
	result := VBNetDateLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLiteral7: nodes [
	| result |
	result := VBNetNothingLiteralNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLocalDeclarationStatement1: nodes [
	| result |
	result := VBNetLocalDeclarationStatementNode new.
	result modifier: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLoopControlVariable1: nodes [
	| result |
	result := VBNetLoopControlVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForLoopControlVariable2: nodes [
	| result |
	result := VBNetLoopControlVariableNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase3: nodes [
	| result |
	result := VBNetGlobalNode new.
	result globalToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase4: nodes [
	| result |
	result := VBNetMyClassNode new.
	result myClassToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessBase5: nodes [
	| result |
	result := VBNetMyBaseNode new.
	result myBaseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression1: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression2: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result ofToken: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result types.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result addToken: (nodes at: 6) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression3: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression4: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result period: (nodes at: 1).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result ofToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result types.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression5: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression6: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result leftParens.
	result ofToken: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result types.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result addToken: (nodes at: 7) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression7: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMemberAccessExpression8: nodes [
	| result |
	result := VBNetMemberAccessExpressionNode new.
	result base: (nodes at: 1).
	result period: (nodes at: 2).
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result leftParens.
	result ofToken: (nodes at: 6).
	result addNodes: ((nodes at: 7) at: 1) to: result types.
	result addTokens: ((nodes at: 7) at: 2) to: result commas.
	result addToken: (nodes at: 8) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMembersImportsClause1: nodes [
	| result |
	result := VBNetMembersImportsClauseNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement1: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result string: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result start: (nodes at: 5).
	result rightParen: (nodes at: 6).
	result equals: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement2: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result leftParen: (nodes at: 2).
	result string: (nodes at: 3).
	result addToken: (nodes at: 4) to: result commas.
	result start: (nodes at: 5).
	result addToken: (nodes at: 6) to: result commas.
	result length: (nodes at: 7).
	result rightParen: (nodes at: 8).
	result equals: (nodes at: 9).
	result value: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement3: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result typeCharToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result string: (nodes at: 4).
	result addToken: (nodes at: 5) to: result commas.
	result start: (nodes at: 6).
	result rightParen: (nodes at: 7).
	result equals: (nodes at: 8).
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMidAssignmentStatement4: nodes [
	| result |
	result := VBNetMidAssignmentStatementNode new.
	result midToken: (nodes at: 1).
	result typeCharToken: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result string: (nodes at: 4).
	result addToken: (nodes at: 5) to: result commas.
	result start: (nodes at: 6).
	result addToken: (nodes at: 7) to: result commas.
	result length: (nodes at: 8).
	result rightParen: (nodes at: 9).
	result equals: (nodes at: 10).
	result value: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration1: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration2: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration3: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration4: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result moduleTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result moduleTokens.
	result addToken: (nodes at: 8) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration5: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration6: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration7: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForModuleDeclaration8: nodes [
	| result |
	result := VBNetModuleDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result moduleTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result moduleTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda1: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda2: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda3: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda4: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result asToken: (nodes at: 5).
	result type: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda5: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineFunctionLambda6: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result asToken: (nodes at: 6).
	result type: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda1: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda2: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMultiLineSubLambda3: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration1: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration2: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration3: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration4: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration5: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration6: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration7: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideFunctionDeclaration8: nodes [
	| result |
	result := VBNetFunctionDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverridePropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result modifiers.
	result addTokens: (nodes at: 3) to: result modifiers.
	result signature: (nodes at: 4).
	result handlesToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result _handles.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result implementsToken: ((nodes at: 5) at: 4).
	result addNodes: ((nodes at: 5) at: 5) to: result implements.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration5: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration6: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration7: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForMustOverrideSubDeclaration8: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result modifiers.
	result addTokens: (nodes at: 4) to: result modifiers.
	result signature: (nodes at: 5).
	result handlesToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result _handles.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result implementsToken: ((nodes at: 6) at: 4).
	result addNodes: ((nodes at: 6) at: 5) to: result implements.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamedArgumentList1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration1: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration2: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	result addToken: (nodes at: 7) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration3: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addToken: (nodes at: 3) to: result statementSeparators.
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceDeclaration4: nodes [
	| result |
	result := VBNetNamespaceDeclarationNode new.
	result addToken: (nodes at: 1) to: result namespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 2) to: result periods.
	result globalToken: ((nodes at: 2) at: 3).
	result addToken: (nodes at: 3) to: result statementSeparators.
	result addNodes: ((nodes at: 4) at: 1) to: result declarations.
	result addNodes: ((nodes at: 4) at: 2) to: result attributeBlocks.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result namespaceTokens.
	result addToken: (nodes at: 7) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceMemberDeclaration_1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceMemberDeclaration_2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName3: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNamespaceName4: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForNullableTypeName1: nodes [
	| result |
	result := VBNetNullableTypeNameNode new.
	result type: (nodes at: 1).
	result nullableToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCollectionInitializer1: nodes [
	| result |
	result := VBNetObjectCollectionInitializerNode new.
	result fromToken: (nodes at: 1).
	result initializer: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression1: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression2: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result initializer: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression3: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression4: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result initializer: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression5: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result arguments.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectCreationExpression6: nodes [
	| result |
	result := VBNetObjectCreationExpressionNode new.
	result newToken: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result arguments.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result addToken: (nodes at: 5) to: result rightParens.
	result initializer: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForObjectMemberInitializer1: nodes [
	| result |
	result := VBNetObjectMemberInitializerNode new.
	result withToken: (nodes at: 1).
	result leftBrace: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result initializers.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightBrace: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOnErrorStatement1: nodes [
	| result |
	result := VBNetOnErrorStatementNode new.
	result onToken: (nodes at: 1).
	result errorToken: (nodes at: 2).
	result clause: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration10: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	result statementSeparator: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration11: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result addNodes: (nodes at: 12) to: result statements.
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration12: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result addNodes: (nodes at: 9) to: result attributeBlocks.
	result type: (nodes at: 10).
	result addNodes: (nodes at: 12) to: result statements.
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result operatorTokens.
	result statementSeparator: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration1: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration2: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result operatorTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration3: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result type: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration4: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result type: (nodes at: 8).
	result addNodes: (nodes at: 10) to: result statements.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result operatorTokens.
	result statementSeparator: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration5: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration6: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result operatorTokens.
	result operator: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result asToken: (nodes at: 7).
	result addNodes: (nodes at: 8) to: result attributeBlocks.
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	result statementSeparator: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration7: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration8: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result addNodes: (nodes at: 9) to: result statements.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result operatorTokens.
	result statementSeparator: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOperatorDeclaration9: nodes [
	| result |
	result := VBNetOperatorDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result operatorTokens.
	result operator: (nodes at: 4).
	result leftParen: (nodes at: 5).
	result addNodes: ((nodes at: 6) at: 1) to: result parameters.
	result addTokens: ((nodes at: 6) at: 2) to: result commas.
	result rightParen: (nodes at: 7).
	result asToken: (nodes at: 8).
	result type: (nodes at: 9).
	result addNodes: (nodes at: 11) to: result statements.
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result operatorTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionCompareStatement1: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionCompareStatement2: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result value: (nodes at: 3).
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionExplicitStatement1: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionExplicitStatement2: nodes [
	| result |
	result := VBNetOptionStatementNode new.
	result optionToken: (nodes at: 1).
	result option: (nodes at: 2).
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionStatement__option__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOptionStatement__option__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderByQueryOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderByQueryOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderExpression1: nodes [
	| result |
	result := VBNetOrderExpressionNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForOrderExpression2: nodes [
	| result |
	result := VBNetOrderExpressionNode new.
	result value: (nodes at: 1).
	result order: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result equals: (nodes at: 3).
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBNetParameterNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result identifier: (nodes at: 2).
	result asToken: (nodes at: 3).
	result type: (nodes at: 4).
	result equals: (nodes at: 5).
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBNetParameterNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result identifier: (nodes at: 3).
	result asToken: (nodes at: 4).
	result type: (nodes at: 5).
	result equals: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParameterIdentifier1: nodes [
	| result |
	result := VBNetParameterIdentifierNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType1: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType2: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType3: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 4).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParametersOrType4: nodes [
	| result |
	result := Array new: 6.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (nodes at: 1).
	result at: 6 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForParenthesizedExpression1: nodes [
	| result |
	result := nodes at: 2.
	result addFirstToken: (nodes at: 1) to: result leftParens.
	result addToken: (nodes at: 3) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator5: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator6: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator7: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPartitionQueryOperator8: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration1: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addToken: (nodes at: 1) to: result getTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration2: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addToken: (nodes at: 1) to: result getTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result getTokens.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration3: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration4: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration5: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration6: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result getTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result getTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration7: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result getTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result getTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertyGetDeclaration8: nodes [
	| result |
	result := VBNetPropertyGetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result getTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result getTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration10: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration11: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration12: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration13: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration14: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration15: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration16: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration17: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration18: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration19: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration1: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration20: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration21: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration22: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result setTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration23: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration24: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result modifier: (nodes at: 2).
	result addToken: (nodes at: 3) to: result setTokens.
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	result addNodes: (nodes at: 8) to: result statements.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result setTokens.
	result statementSeparator: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration2: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result endToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result setTokens.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration3: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration4: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result rightParen: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result setTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration5: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration6: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result addToken: (nodes at: 1) to: result setTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration7: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration8: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result setTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySetDeclaration9: nodes [
	| result |
	result := VBNetPropertySetDeclarationNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result setTokens.
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result setTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature1: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature2: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature3: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self addAll: (nodes at: 4) to: (result at: 5).
	result at: 4 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature4: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature5: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	result at: 4 put: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature6: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	result at: 7 put: (nodes at: 4).
	result at: 3 put: (nodes at: 5).
	self addAll: (nodes at: 6) to: (result at: 5).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature7: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature8: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	result at: 4 put: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForPropertySignature9: nodes [
	| result |
	result := Array new: 9.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 6 put: (nodes at: 3).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 9).
	result at: 7 put: (nodes at: 5).
	result at: 3 put: (nodes at: 6).
	self addAll: (nodes at: 7) to: (result at: 5).
	result at: 4 put: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName1: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName2: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 1) to: result leftParens.
	result addToken: ((nodes at: 2) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 2) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result addTokens: ((nodes at: 3) at: 1) to: result periods.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName3: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result periods.
	result addTokens: ((nodes at: 4) at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 4) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName4: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addToken: ((nodes at: 4) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 4) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName5: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedOpenTypeName6: nodes [
	| result |
	result := VBNetQualifiedOpenTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result addToken: ((nodes at: 5) at: 2) to: result ofTokens.
	result addToken: ((nodes at: 5) at: 3) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addTokens: ((nodes at: 6) at: 1) to: result periods.
	result addTokens: ((nodes at: 6) at: 2) to: result names.
	result addTokens: ((nodes at: 6) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 6) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 6) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 6) at: 6) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName1: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addTokens: ((nodes at: 2) at: 1) to: result periods.
	result addTokens: ((nodes at: 2) at: 2) to: result names.
	result addTokens: ((nodes at: 2) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 2) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 2) at: 6) to: result types.
	result addTokens: ((nodes at: 2) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName2: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result addToken: (nodes at: 1) to: result names.
	result addToken: ((nodes at: 2) at: 1) to: result leftParens.
	result addToken: ((nodes at: 2) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 2) at: 3) to: result types.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result addToken: ((nodes at: 2) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 3) at: 1) to: result periods.
	result addTokens: ((nodes at: 3) at: 2) to: result names.
	result addTokens: ((nodes at: 3) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 3) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 3) at: 6) to: result types.
	result addTokens: ((nodes at: 3) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName3: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result periods.
	result addTokens: ((nodes at: 4) at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 4) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 4) at: 6) to: result types.
	result addTokens: ((nodes at: 4) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName4: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 3) to: result names.
	result addToken: ((nodes at: 4) at: 1) to: result leftParens.
	result addToken: ((nodes at: 4) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result types.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result addToken: ((nodes at: 4) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 5) at: 6) to: result types.
	result addTokens: ((nodes at: 5) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName5: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addTokens: ((nodes at: 5) at: 1) to: result periods.
	result addTokens: ((nodes at: 5) at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 5) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 5) at: 6) to: result types.
	result addTokens: ((nodes at: 5) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQualifiedTypeName6: nodes [
	| result |
	result := VBNetQualifiedTypeNameNode new.
	result globalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result periods.
	result addToken: (nodes at: 4) to: result names.
	result addToken: ((nodes at: 5) at: 1) to: result leftParens.
	result addToken: ((nodes at: 5) at: 2) to: result ofTokens.
	result addNodes: ((nodes at: 5) at: 3) to: result types.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addToken: ((nodes at: 5) at: 5) to: result rightParens.
	result addTokens: ((nodes at: 6) at: 1) to: result periods.
	result addTokens: ((nodes at: 6) at: 2) to: result names.
	result addTokens: ((nodes at: 6) at: 3) to: result leftParens.
	result addTokens: ((nodes at: 6) at: 4) to: result ofTokens.
	result addTokens: ((nodes at: 6) at: 5) to: result rightParens.
	result addNodes: ((nodes at: 6) at: 6) to: result types.
	result addTokens: ((nodes at: 6) at: 7) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryExpression1: nodes [
	| result |
	result := VBNetQueryExpressionNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result fromTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result names.
	result addTokens: ((nodes at: 1) at: 3) to: result inTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result values.
	result addTokens: ((nodes at: 1) at: 5) to: result asTokens.
	result addNodes: ((nodes at: 1) at: 6) to: result types.
	result addTokens: ((nodes at: 1) at: 7) to: result commas.
	result addTokens: ((nodes at: 1) at: 8) to: result aggregateTokens.
	result addTokens: ((nodes at: 1) at: 9) to: result intoTokens.
	result addNodes: ((nodes at: 1) at: 10) to: result declarations.
	result addTokens: ((nodes at: 1) at: 11) to: result selectTokens.
	result addTokens: ((nodes at: 1) at: 12) to: result distinctTokens.
	result addNodes: ((nodes at: 1) at: 13) to: result expressions.
	result addTokens: ((nodes at: 1) at: 14) to: result orderTokens.
	result addTokens: ((nodes at: 1) at: 15) to: result byTokens.
	result addTokens: ((nodes at: 1) at: 16) to: result takeTokens.
	result addTokens: ((nodes at: 1) at: 17) to: result whileTokens.
	result addTokens: ((nodes at: 1) at: 18) to: result skipTokens.
	result addTokens: ((nodes at: 1) at: 19) to: result letTokens.
	result addTokens: ((nodes at: 1) at: 20) to: result groupTokens.
	result addTokens: ((nodes at: 1) at: 21) to: result joinTokens.
	result addTokens: ((nodes at: 1) at: 22) to: result onTokens.
	result addNodes: ((nodes at: 1) at: 23) to: result lhses.
	result addTokens: ((nodes at: 1) at: 24) to: result equalsTokens.
	result addNodes: ((nodes at: 1) at: 25) to: result rhses.
	result addTokens: ((nodes at: 1) at: 26) to: result andTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result fromTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result aggregateTokens.
	result addTokens: ((nodes at: 2) at: 3) to: result names.
	result addTokens: ((nodes at: 2) at: 4) to: result inTokens.
	result addNodes: ((nodes at: 2) at: 5) to: result values.
	result addTokens: ((nodes at: 2) at: 6) to: result asTokens.
	result addNodes: ((nodes at: 2) at: 7) to: result types.
	result addTokens: ((nodes at: 2) at: 8) to: result intoTokens.
	result addNodes: ((nodes at: 2) at: 9) to: result declarations.
	result addTokens: ((nodes at: 2) at: 10) to: result selectTokens.
	result addTokens: ((nodes at: 2) at: 11) to: result distinctTokens.
	result addNodes: ((nodes at: 2) at: 12) to: result expressions.
	result addTokens: ((nodes at: 2) at: 13) to: result orderTokens.
	result addTokens: ((nodes at: 2) at: 14) to: result byTokens.
	result addTokens: ((nodes at: 2) at: 15) to: result takeTokens.
	result addTokens: ((nodes at: 2) at: 16) to: result whileTokens.
	result addTokens: ((nodes at: 2) at: 17) to: result skipTokens.
	result addTokens: ((nodes at: 2) at: 18) to: result letTokens.
	result addTokens: ((nodes at: 2) at: 19) to: result groupTokens.
	result addTokens: ((nodes at: 2) at: 20) to: result commas.
	result addTokens: ((nodes at: 2) at: 21) to: result joinTokens.
	result addTokens: ((nodes at: 2) at: 22) to: result onTokens.
	result addNodes: ((nodes at: 2) at: 23) to: result lhses.
	result addTokens: ((nodes at: 2) at: 24) to: result equalsTokens.
	result addNodes: ((nodes at: 2) at: 25) to: result rhses.
	result addTokens: ((nodes at: 2) at: 26) to: result andTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator10: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 21).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 22).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 23).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 24).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 25).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 26).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator3: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator4: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator5: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator6: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 14).
	self add: ((nodes at: 1) at: 2) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator7: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 16).
	self add: ((nodes at: 1) at: 2) to: (result at: 13).
	self add: ((nodes at: 1) at: 3) to: (result at: 17).
	self add: ((nodes at: 1) at: 4) to: (result at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator8: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForQueryOperator9: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 20).
	self add: ((nodes at: 1) at: 2) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	self add: ((nodes at: 1) at: 5) to: (result at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration1: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addToken: (nodes at: 1) to: result raiseEventTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result raiseEventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration2: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addToken: (nodes at: 1) to: result raiseEventTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result raiseEventTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration3: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result raiseEventTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result raiseEventTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventDeclaration4: nodes [
	| result |
	result := VBNetRaiseEventDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result raiseEventTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result raiseEventTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement1: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement2: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRaiseEventStatement3: nodes [
	| result |
	result := VBNetRaiseEventStatementNode new.
	result raiseEventToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result arguments.
	result addTokens: ((nodes at: 4) at: 3) to: result argumentNames.
	result addTokens: ((nodes at: 4) at: 4) to: result colonEqualses.
	result addNodes: ((nodes at: 4) at: 5) to: result namedArguments.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimClause1: nodes [
	| result |
	result := VBNetRedimClauseNode new.
	result array: (nodes at: 1).
	result leftParen: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result bounds.
	result addTokens: ((nodes at: 2) at: 3) to: result commas.
	result rightParen: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result arrayTypeModifiers.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimStatement1: nodes [
	| result |
	result := VBNetRedimStatementNode new.
	result redimToken: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result redims.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRedimStatement2: nodes [
	| result |
	result := VBNetRedimStatementNode new.
	result redimToken: (nodes at: 1).
	result preserveToken: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result redims.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularAssignmentStatement1: nodes [
	| result |
	result := VBNetAssignmentStatementNode new.
	result lhs: (nodes at: 1).
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration1: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration2: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result statementSeparator: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration3: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration4: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result eventToken: (nodes at: 2).
	result name: (nodes at: 3).
	result leftParen: ((nodes at: 4) at: 1).
	result rightParen: ((nodes at: 4) at: 2).
	result addNodes: ((nodes at: 4) at: 3) to: result parameters.
	result addTokens: ((nodes at: 4) at: 4) to: result commas.
	result asToken: ((nodes at: 4) at: 5).
	result type: ((nodes at: 4) at: 6).
	result implementsToken: ((nodes at: 5) at: 1).
	result addNodes: ((nodes at: 5) at: 2) to: result implements.
	result addTokens: ((nodes at: 5) at: 3) to: result commas.
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration5: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration6: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result statementSeparator: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration7: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularEventMemberDeclaration8: nodes [
	| result |
	result := VBNetRegularEventMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result eventToken: (nodes at: 3).
	result name: (nodes at: 4).
	result leftParen: ((nodes at: 5) at: 1).
	result rightParen: ((nodes at: 5) at: 2).
	result addNodes: ((nodes at: 5) at: 3) to: result parameters.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result asToken: ((nodes at: 5) at: 5).
	result type: ((nodes at: 5) at: 6).
	result implementsToken: ((nodes at: 6) at: 1).
	result addNodes: ((nodes at: 6) at: 2) to: result implements.
	result addTokens: ((nodes at: 6) at: 3) to: result commas.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration1: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result addNodes: (nodes at: 4) to: result declarations.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration2: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result addNodes: (nodes at: 4) to: result declarations.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result propertyTokens.
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration3: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration4: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: ((nodes at: 2) at: 1) to: result propertyTokens.
	result name: ((nodes at: 2) at: 2).
	result asToken: ((nodes at: 2) at: 3).
	result type: ((nodes at: 2) at: 4).
	result addNodes: ((nodes at: 2) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 2) at: 6).
	result rightParen: ((nodes at: 2) at: 7).
	result addNodes: ((nodes at: 2) at: 8) to: result parameters.
	result addTokens: ((nodes at: 2) at: 9) to: result commas.
	result implementsToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result implements.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration5: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration6: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result addNodes: (nodes at: 5) to: result declarations.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result propertyTokens.
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration7: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRegularPropertyMemberDeclaration8: nodes [
	| result |
	result := VBNetPropertyMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: ((nodes at: 3) at: 1) to: result propertyTokens.
	result name: ((nodes at: 3) at: 2).
	result asToken: ((nodes at: 3) at: 3).
	result type: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result attributeBlocks.
	result leftParen: ((nodes at: 3) at: 6).
	result rightParen: ((nodes at: 3) at: 7).
	result addNodes: ((nodes at: 3) at: 8) to: result parameters.
	result addTokens: ((nodes at: 3) at: 9) to: result commas.
	result implementsToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result implements.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result propertyTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration1: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result removeHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result removeHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration2: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addToken: (nodes at: 1) to: result removeHandlerTokens.
	result leftParen: (nodes at: 2).
	result addNodes: ((nodes at: 3) at: 1) to: result parameters.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result rightParen: (nodes at: 4).
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result removeHandlerTokens.
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration3: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result removeHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result removeHandlerTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerDeclaration4: nodes [
	| result |
	result := VBNetRemoveHandlerDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addToken: (nodes at: 2) to: result removeHandlerTokens.
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	result addNodes: (nodes at: 7) to: result statements.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result removeHandlerTokens.
	result statementSeparator: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForRemoveHandlerStatement1: nodes [
	| result |
	result := VBNetRemoveHandlerStatementNode new.
	result removeHandlerToken: (nodes at: 1).
	result event: (nodes at: 2).
	result comma: (nodes at: 3).
	result handler: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForResumeStatement1: nodes [
	| result |
	result := VBNetResumeStatementNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForResumeStatement2: nodes [
	| result |
	result := VBNetResumeStatementNode new.
	result resumeToken: (nodes at: 1).
	result resume: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForReturnStatement1: nodes [
	| result |
	result := VBNetReturnStatementNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForReturnStatement2: nodes [
	| result |
	result := VBNetReturnStatementNode new.
	result returnToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement1: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result cases.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement2: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result cases.
	result else: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement3: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result caseToken: (nodes at: 2).
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result cases.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSelectStatement4: nodes [
	| result |
	result := VBNetSelectStatementNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result caseToken: (nodes at: 2).
	result expression: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result cases.
	result else: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSimpleNameExpression1: nodes [
	| result |
	result := VBNetSimpleNameExpressionNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSimpleNameExpression2: nodes [
	| result |
	result := VBNetSimpleNameExpressionNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result leftParens.
	result ofToken: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result types.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda1: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addNode: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda2: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNode: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda3: nodes [
	| result |
	result := VBNetFunctionLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result functionTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNode: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda4: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addNode: (nodes at: 3) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda5: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addToken: (nodes at: 4) to: result rightParens.
	result addNode: (nodes at: 5) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSingleLineLambda6: nodes [
	| result |
	result := VBNetSubLambdaExpressionNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result subTokens.
	result addToken: (nodes at: 3) to: result leftParens.
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result addToken: (nodes at: 5) to: result rightParens.
	result addNode: (nodes at: 6) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStart3: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	self addAll: (nodes at: 3) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStatements2: nodes [
	| result |
	result := VBNetLineStatementNode new.
	result
		addTokens: ((nodes at: 1) at: 1)
		to: result statementSeparators.
	result addNodes: ((nodes at: 1) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStatements3: nodes [
	| result |
	result := VBNetLineStatementNode new.
	result addNode: (nodes at: 1) to: result statements.
	result
		addTokens: ((nodes at: 2) at: 1)
		to: result statementSeparators.
	result addNodes: ((nodes at: 2) at: 2) to: result statements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStopStatement1: nodes [
	| result |
	result := VBNetStopStatementNode new.
	result stopToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration10: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration11: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration12: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration13: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration14: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration15: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration16: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result typeParameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result statementSeparators.
	result addTokens: ((nodes at: 7) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 7) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 7) at: 3) to: result implementses.
	result addTokens: ((nodes at: 7) at: 4) to: result commas.
	result addNodes: (nodes at: 8) to: result declarations.
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result structureTokens.
	result addToken: (nodes at: 11) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration1: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration2: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration3: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration4: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result addToken: (nodes at: 4) to: result statementSeparators.
	result addTokens: ((nodes at: 5) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 5) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 5) at: 3) to: result implementses.
	result addTokens: ((nodes at: 5) at: 4) to: result commas.
	result addNodes: (nodes at: 6) to: result declarations.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result structureTokens.
	result addToken: (nodes at: 9) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration5: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration6: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration7: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration8: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addToken: (nodes at: 2) to: result structureTokens.
	result name: (nodes at: 3).
	result typeParameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result statementSeparators.
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	result addToken: (nodes at: 10) to: result statementSeparators.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForStructureDeclaration9: nodes [
	| result |
	result := VBNetStructureDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addToken: (nodes at: 3) to: result structureTokens.
	result name: (nodes at: 4).
	result addTokens: ((nodes at: 6) at: 1) to: result implementsTokens.
	result
		addTokens: ((nodes at: 6) at: 2)
		to: result statementSeparators.
	result addNodes: ((nodes at: 6) at: 3) to: result implementses.
	result addTokens: ((nodes at: 6) at: 4) to: result commas.
	result addNodes: (nodes at: 7) to: result declarations.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result structureTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration1: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result subToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration2: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result subToken: (nodes at: 6).
	result statementSeparator: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration3: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration4: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result signature: (nodes at: 2).
	result handlesToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result _handles.
	result addTokens: ((nodes at: 3) at: 3) to: result commas.
	result implementsToken: ((nodes at: 3) at: 4).
	result addNodes: ((nodes at: 3) at: 5) to: result implements.
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration5: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration6: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result addNodes: (nodes at: 5) to: result statements.
	result endToken: (nodes at: 6).
	result subToken: (nodes at: 7).
	result statementSeparator: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration7: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result subToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubDeclaration8: nodes [
	| result |
	result := VBNetSubDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result signature: (nodes at: 3).
	result handlesToken: ((nodes at: 4) at: 1).
	result addNodes: ((nodes at: 4) at: 2) to: result _handles.
	result addTokens: ((nodes at: 4) at: 3) to: result commas.
	result implementsToken: ((nodes at: 4) at: 4).
	result addNodes: ((nodes at: 4) at: 5) to: result implements.
	result addNodes: (nodes at: 6) to: result statements.
	result endToken: (nodes at: 7).
	result subToken: (nodes at: 8).
	result statementSeparator: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature1: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature2: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result rightParen: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature3: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result leftParen: (nodes at: 3).
	result addNodes: ((nodes at: 4) at: 1) to: result parameters.
	result addTokens: ((nodes at: 4) at: 2) to: result commas.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature4: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature5: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSubSignature6: nodes [
	| result |
	result := VBNetSubSignatureNode new.
	result subToken: (nodes at: 1).
	result name: (nodes at: 2).
	result typeParameters: (nodes at: 3).
	result leftParen: (nodes at: 4).
	result addNodes: ((nodes at: 5) at: 1) to: result parameters.
	result addTokens: ((nodes at: 5) at: 2) to: result commas.
	result rightParen: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForSyncLockStatement1: nodes [
	| result |
	result := VBNetSyncLockStatementNode new.
	result addToken: (nodes at: 1) to: result syncLockTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result syncLockTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForThrowStatement1: nodes [
	| result |
	result := VBNetThrowStatementNode new.
	result throwToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForThrowStatement2: nodes [
	| result |
	result := VBNetThrowStatementNode new.
	result throwToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTryStatement1: nodes [
	| result |
	result := VBNetTryStatementNode new.
	result addToken: (nodes at: 1) to: result tryTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: (nodes at: 4) to: result catches.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result tryTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTryStatement2: nodes [
	| result |
	result := VBNetTryStatementNode new.
	result addToken: (nodes at: 1) to: result tryTokens.
	result addNodes: (nodes at: 3) to: result statements.
	result addNodes: (nodes at: 4) to: result catches.
	result finally: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result tryTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArguments1: nodes [
	| result |
	result := Array new: 5.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArityList1: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeArityList2: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: (nodes at: 3) to: (result at: 4).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeOfIsExpression1: nodes [
	| result |
	result := VBNetTypeOfIsExpressionNode new.
	result typeOfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result _isToken: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeOfIsExpression2: nodes [
	| result |
	result := VBNetTypeOfIsExpressionNode new.
	result typeOfToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result _isToken: (nodes at: 3).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter1: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter2: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result name: (nodes at: 1).
	result asToken: ((nodes at: 2) at: 1).
	result addNodes: ((nodes at: 2) at: 2) to: result constraints.
	result leftBrace: ((nodes at: 2) at: 3).
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightBrace: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter3: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result modifier: (nodes at: 1).
	result name: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameter4: nodes [
	| result |
	result := VBNetTypeParameterNode new.
	result modifier: (nodes at: 1).
	result name: (nodes at: 2).
	result asToken: ((nodes at: 3) at: 1).
	result addNodes: ((nodes at: 3) at: 2) to: result constraints.
	result leftBrace: ((nodes at: 3) at: 3).
	result addTokens: ((nodes at: 3) at: 4) to: result commas.
	result rightBrace: ((nodes at: 3) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterConstraints1: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterConstraints2: nodes [
	| result |
	result := Array new: 5.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	result at: 5 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForTypeParameterList1: nodes [
	| result |
	result := VBNetTypeParameterListNode new.
	result leftParen: (nodes at: 1).
	result ofToken: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commas.
	result addNodes: ((nodes at: 4) at: 2) to: result typeParameters.
	result rightParen: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUnaryPlusExpression1: nodes [
	| result |
	result := VBNetUnaryExpressionNode new.
	result operator: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUsingResources2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForUsingStatement1: nodes [
	| result |
	result := VBNetUsingStatementNode new.
	result addToken: (nodes at: 1) to: result usingTokens.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result usingTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator1: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator2: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator3: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result equals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator4: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableDeclarator5: nodes [
	| result |
	result := VBNetVariableDeclaratorNode new.
	result addNodes: ((nodes at: 1) at: 1) to: result variableIdentifiers.
	result addTokens: ((nodes at: 1) at: 2) to: result commas.
	result asToken: (nodes at: 2).
	result type: (nodes at: 3).
	result equals: (nodes at: 4).
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableIdentifier1: nodes [
	| result |
	result := VBNetVariableIdentifierNode new.
	result name: (nodes at: 1).
	result addNodes: ((nodes at: 2) at: 1) to: result arrayTypeModifiers.
	result leftParen: ((nodes at: 2) at: 2).
	result addNodes: ((nodes at: 2) at: 3) to: result bounds.
	result addTokens: ((nodes at: 2) at: 4) to: result commas.
	result rightParen: ((nodes at: 2) at: 5).
	result nullableToken: ((nodes at: 2) at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration1: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration2: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addTokens: (nodes at: 1) to: result modifiers.
	result addNodes: ((nodes at: 2) at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 2) to: result commas.
	result statementSeparator: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration3: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addNodes: ((nodes at: 3) at: 1) to: result variables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariableMemberDeclaration4: nodes [
	| result |
	result := VBNetVariableMemberDeclarationNode new.
	result addNodes: (nodes at: 1) to: result attributeBlocks.
	result addTokens: (nodes at: 2) to: result modifiers.
	result addNodes: ((nodes at: 3) at: 1) to: result variables.
	result addTokens: ((nodes at: 3) at: 2) to: result commas.
	result statementSeparator: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForVariablePropertyInitializer1: nodes [
	| result |
	result := VBNetVariablePropertyInitializerNode new.
	result name: (nodes at: 1).
	result colonEquals: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWhereQueryOperator2: nodes [
	^ nodes at: 3
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWhileStatement1: nodes [
	| result |
	result := VBNetWhileStatementNode new.
	result addToken: (nodes at: 1) to: result whileTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whileTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForWithStatement1: nodes [
	| result |
	result := VBNetWithStatementNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result expression: (nodes at: 2).
	result addNodes: (nodes at: 4) to: result statements.
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionForYieldStatement1: nodes [
	| result |
	result := VBNetYieldStatementNode new.
	result yieldToken: (nodes at: 1).
	result yield: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_AttributeArgumentExpression__argument____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_Attribute__attribute____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration__1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	result at: 5 put: ((nodes at: 2) at: 4).
	result at: 6 put: ((nodes at: 2) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration___1: nodes [
	| result |
	result := Array new: 6.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma_CollectionRangeVariableDeclaration___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self add: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Comma__IdentifierOrKeyword___argumentName__ColonEquals_Expression__namedArgument___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__Equals_Expression__value___1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator_2: nodes [
	| result |
	result := nodes at: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator__1: nodes [
	| result |
	result := Array new: 26.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 22 put: (OrderedCollection new: 2).
	result at: 23 put: (OrderedCollection new: 2).
	result at: 24 put: (OrderedCollection new: 2).
	result at: 25 put: (OrderedCollection new: 2).
	result at: 26 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__LineTerminator___QueryOperator__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 20).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 20) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).
	self addAll: ((nodes at: 2) at: 22) to: (result at: 22).
	self addAll: ((nodes at: 2) at: 23) to: (result at: 23).
	self addAll: ((nodes at: 2) at: 24) to: (result at: 24).
	self addAll: ((nodes at: 2) at: 25) to: (result at: 25).
	self addAll: ((nodes at: 2) at: 26) to: (result at: 26).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____1: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____2: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis_____3: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 8).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor__NonArrayTypeName__type____OpenParenthesis_ArgumentList__CloseParenthesis______1: nodes [
	| result |
	result := Array new: 8.
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___And___andToken___LineTerminator___JoinCondition__1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 2) at: 1).
	result at: 3 put: ((nodes at: 2) at: 2).
	result at: 4 put: ((nodes at: 2) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___And___andToken___LineTerminator___JoinCondition__2: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: ((nodes at: 3) at: 1).
	result at: 3 put: ((nodes at: 3) at: 2).
	result at: 4 put: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type__1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type__2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor___As___asToken__Attributes__TypeName__type___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_______period___LineTerminator____IdentifierOrKeyword___name__2: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor_______statementSeparator__Statement__statement_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__1: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__2: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	result at: 7 put: ((nodes at: 3) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__3: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments__4: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: ((nodes at: 4) at: 1).
	result at: 4 put: ((nodes at: 4) at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 6).
	result at: 7 put: ((nodes at: 4) at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArguments___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self add: ((nodes at: 2) at: 7) to: (result at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__1: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__2: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: ((nodes at: 3) at: 1).
	result at: 4 put: ((nodes at: 3) at: 2).
	result at: 5 put: ((nodes at: 3) at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__3: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList__4: nodes [
	| result |
	result := Array new: 6.
	result at: 6 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 3).
	result at: 3 put: ((nodes at: 4) at: 1).
	result at: 4 put: ((nodes at: 4) at: 2).
	result at: 5 put: ((nodes at: 4) at: 3).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBNetParser >> reduceActionFor______period___LineTerminator____IdentifierOrKeyword___name__TypeArityList___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	self add: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	^ result
]

{ #category : #testing }
VBNetParser >> tryAllTokens [
	^ true
]
